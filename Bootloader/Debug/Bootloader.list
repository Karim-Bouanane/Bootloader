
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d80  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08007f18  08007f18  00017f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f74  08007f74  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f74  08007f74  00017f74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f7c  08007f7c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f7c  08007f7c  00017f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f80  08007f80  00017f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007f84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002164  200000fc  08008080  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002260  08008080  00022260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010702  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035b0  00000000  00000000  0003082e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e20  00000000  00000000  00033de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00034c00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193e5  00000000  00000000  00035888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f71  00000000  00000000  0004ec6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088250  00000000  00000000  00061bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9e2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003768  00000000  00000000  000e9e80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007f00 	.word	0x08007f00

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007f00 	.word	0x08007f00

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SendError>:


/* Static Functions --------------------------------------------------------------*/

static void SendError(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint8_t error_msg[3] = {0};
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <SendError+0x3c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	80bb      	strh	r3, [r7, #4]
 80004e8:	2300      	movs	r3, #0
 80004ea:	71bb      	strb	r3, [r7, #6]

	error_msg[0] = CMD_ID_ERROR;
 80004ec:	2350      	movs	r3, #80	; 0x50
 80004ee:	713b      	strb	r3, [r7, #4]
	error_msg[1] = error_id;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <SendError+0x40>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	717b      	strb	r3, [r7, #5]
	error_msg[2] = 0;				// padding
 80004f6:	2300      	movs	r3, #0
 80004f8:	71bb      	strb	r3, [r7, #6]

	while(CDC_Transmit_FS(error_msg, 3) == USBD_BUSY);
 80004fa:	bf00      	nop
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2103      	movs	r1, #3
 8000500:	4618      	mov	r0, r3
 8000502:	f007 f80d 	bl	8007520 <CDC_Transmit_FS>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d0f7      	beq.n	80004fc <SendError+0x20>
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	08007f18 	.word	0x08007f18
 800051c:	20000218 	.word	0x20000218

08000520 <SendCmdAck>:


static void SendCmdAck(uint8_t command_id)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_ack_msg[3] = {0};
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <SendCmdAck+0x40>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	81bb      	strh	r3, [r7, #12]
 8000530:	2300      	movs	r3, #0
 8000532:	73bb      	strb	r3, [r7, #14]

	cmd_ack_msg[0] = CMD_ID_ACK;
 8000534:	2310      	movs	r3, #16
 8000536:	733b      	strb	r3, [r7, #12]
	cmd_ack_msg[1] = command_id;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	737b      	strb	r3, [r7, #13]
	cmd_ack_msg[2] = 0; 			// padding
 800053c:	2300      	movs	r3, #0
 800053e:	73bb      	strb	r3, [r7, #14]

	while(CDC_Transmit_FS(cmd_ack_msg, 3)== USBD_BUSY);
 8000540:	bf00      	nop
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2103      	movs	r1, #3
 8000548:	4618      	mov	r0, r3
 800054a:	f006 ffe9 	bl	8007520 <CDC_Transmit_FS>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d0f6      	beq.n	8000542 <SendCmdAck+0x22>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	08007f18 	.word	0x08007f18

08000564 <SendPacketAck>:


static void SendPacketAck(uint16_t packet_number)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	uint8_t packet_ack_msg[3] = {0};
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <SendPacketAck+0x48>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	81bb      	strh	r3, [r7, #12]
 8000574:	2300      	movs	r3, #0
 8000576:	73bb      	strb	r3, [r7, #14]

	packet_ack_msg[0] = CMD_ID_PACKET_ACK;
 8000578:	2330      	movs	r3, #48	; 0x30
 800057a:	733b      	strb	r3, [r7, #12]
	packet_ack_msg[1] = (uint8_t)(packet_number);
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	737b      	strb	r3, [r7, #13]
	packet_ack_msg[2] = (uint8_t)(packet_number >> 8);
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	73bb      	strb	r3, [r7, #14]

	while(CDC_Transmit_FS(packet_ack_msg, 3) == USBD_BUSY);
 800058c:	bf00      	nop
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2103      	movs	r1, #3
 8000594:	4618      	mov	r0, r3
 8000596:	f006 ffc3 	bl	8007520 <CDC_Transmit_FS>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d0f6      	beq.n	800058e <SendPacketAck+0x2a>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	08007f18 	.word	0x08007f18

080005b0 <test>:
	while(CDC_Transmit_FS(packet_nack_msg, 3) == USBD_BUSY);
}


void test(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	Bootloader_Run();
 80005b4:	f000 f802 	bl	80005bc <Bootloader_Run>
}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}

080005bc <Bootloader_Run>:


/* Functions --------------------------------------------------------------*/

void Bootloader_Run(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b084      	sub	sp, #16
 80005c0:	af00      	add	r7, sp, #0
    uint8_t status;
    uint16_t total_packets = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	81bb      	strh	r3, [r7, #12]
    uint32_t app_total_words = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	60bb      	str	r3, [r7, #8]
    uint32_t app_checksum = 0;
 80005ca:	2300      	movs	r3, #0
 80005cc:	607b      	str	r3, [r7, #4]

    e_BootloaderState currentState = STATE_IDLE;
 80005ce:	2300      	movs	r3, #0
 80005d0:	73bb      	strb	r3, [r7, #14]

	status = Flash_Init();
 80005d2:	f000 f99d 	bl	8000910 <Flash_Init>
 80005d6:	4603      	mov	r3, r0
 80005d8:	73fb      	strb	r3, [r7, #15]

	if(status != FLASH_OK)
 80005da:	7bfb      	ldrb	r3, [r7, #15]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d004      	beq.n	80005ea <Bootloader_Run+0x2e>
	{
		error_id = status;
 80005e0:	4a59      	ldr	r2, [pc, #356]	; (8000748 <Bootloader_Run+0x18c>)
 80005e2:	7bfb      	ldrb	r3, [r7, #15]
 80005e4:	7013      	strb	r3, [r2, #0]
		currentState = STATE_SEND_ERROR;
 80005e6:	2304      	movs	r3, #4
 80005e8:	73bb      	strb	r3, [r7, #14]
	}

    while(1)
    {

    	switch (currentState)
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b05      	cmp	r3, #5
 80005ee:	f200 80a4 	bhi.w	800073a <Bootloader_Run+0x17e>
 80005f2:	a201      	add	r2, pc, #4	; (adr r2, 80005f8 <Bootloader_Run+0x3c>)
 80005f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005f8:	08000611 	.word	0x08000611
 80005fc:	08000671 	.word	0x08000671
 8000600:	0800067f 	.word	0x0800067f
 8000604:	0800071b 	.word	0x0800071b
 8000608:	0800069b 	.word	0x0800069b
 800060c:	080006a5 	.word	0x080006a5
    	{
    		case STATE_IDLE:

    			status = CDC_ReadRxBuffer_FS(packet_buffer, CMD_PACKET_SIZE, MAX_TIMEOUT);
 8000610:	f04f 32ff 	mov.w	r2, #4294967295
 8000614:	2107      	movs	r1, #7
 8000616:	484d      	ldr	r0, [pc, #308]	; (800074c <Bootloader_Run+0x190>)
 8000618:	f006 ffba 	bl	8007590 <CDC_ReadRxBuffer_FS>
 800061c:	4603      	mov	r3, r0
 800061e:	73fb      	strb	r3, [r7, #15]

    			if(status == USBD_OK)
 8000620:	7bfb      	ldrb	r3, [r7, #15]
 8000622:	2b00      	cmp	r3, #0
 8000624:	d122      	bne.n	800066c <Bootloader_Run+0xb0>
    			{
    				switch (packet_buffer[0])
 8000626:	4b49      	ldr	r3, [pc, #292]	; (800074c <Bootloader_Run+0x190>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b80      	cmp	r3, #128	; 0x80
 800062c:	d00c      	beq.n	8000648 <Bootloader_Run+0x8c>
 800062e:	2b80      	cmp	r3, #128	; 0x80
 8000630:	dc16      	bgt.n	8000660 <Bootloader_Run+0xa4>
 8000632:	2b60      	cmp	r3, #96	; 0x60
 8000634:	d002      	beq.n	800063c <Bootloader_Run+0x80>
 8000636:	2b70      	cmp	r3, #112	; 0x70
 8000638:	d00c      	beq.n	8000654 <Bootloader_Run+0x98>
 800063a:	e011      	b.n	8000660 <Bootloader_Run+0xa4>
    				{
    					case CMD_ID_EXECUTE:
    						currentState = STATE_EXECUTE;
 800063c:	2302      	movs	r3, #2
 800063e:	73bb      	strb	r3, [r7, #14]
    						SendCmdAck(CMD_ID_EXECUTE);
 8000640:	2060      	movs	r0, #96	; 0x60
 8000642:	f7ff ff6d 	bl	8000520 <SendCmdAck>
    						break;
 8000646:	e012      	b.n	800066e <Bootloader_Run+0xb2>

    					case CMD_ID_DOWNLOAD_FW:
    						currentState = STATE_DOWNLOAD_FW;
 8000648:	2305      	movs	r3, #5
 800064a:	73bb      	strb	r3, [r7, #14]
    						SendCmdAck(CMD_ID_DOWNLOAD_FW);
 800064c:	2080      	movs	r0, #128	; 0x80
 800064e:	f7ff ff67 	bl	8000520 <SendCmdAck>
    						break;
 8000652:	e00c      	b.n	800066e <Bootloader_Run+0xb2>

    					case CMD_ID_ERASE_APP:
    						currentState = STATE_ERASE_APP;
 8000654:	2303      	movs	r3, #3
 8000656:	73bb      	strb	r3, [r7, #14]
    						SendCmdAck(CMD_ID_ERASE_APP);
 8000658:	2070      	movs	r0, #112	; 0x70
 800065a:	f7ff ff61 	bl	8000520 <SendCmdAck>
    						break;
 800065e:	e006      	b.n	800066e <Bootloader_Run+0xb2>

    					default:
    						error_id = BL_CMD_INVALID;
 8000660:	4b39      	ldr	r3, [pc, #228]	; (8000748 <Bootloader_Run+0x18c>)
 8000662:	2280      	movs	r2, #128	; 0x80
 8000664:	701a      	strb	r2, [r3, #0]
    						currentState = STATE_SEND_ERROR;
 8000666:	2304      	movs	r3, #4
 8000668:	73bb      	strb	r3, [r7, #14]
    						break;
 800066a:	e000      	b.n	800066e <Bootloader_Run+0xb2>
    				}
    			}
 800066c:	bf00      	nop

    			break;
 800066e:	e06a      	b.n	8000746 <Bootloader_Run+0x18a>


    		case STATE_ABORT:

    			Bootloader_EraseApplication();
 8000670:	f000 f8ba 	bl	80007e8 <Bootloader_EraseApplication>
    			SendError();
 8000674:	f7ff ff32 	bl	80004dc <SendError>
    			currentState = STATE_IDLE;
 8000678:	2300      	movs	r3, #0
 800067a:	73bb      	strb	r3, [r7, #14]

    			break;
 800067c:	e063      	b.n	8000746 <Bootloader_Run+0x18a>


    		case STATE_EXECUTE:

    			if(Bootloader_CheckApplicationExist() == true)
 800067e:	f000 f895 	bl	80007ac <Bootloader_CheckApplicationExist>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d002      	beq.n	800068e <Bootloader_Run+0xd2>
    			{
    				Bootloader_JumToApplication();
 8000688:	f000 f862 	bl	8000750 <Bootloader_JumToApplication>
    				error_id = BL_NO_USER_APP;
    				//current_state = STATE_SEND_ERROR;
    				currentState = STATE_IDLE;
    			}

    			break;
 800068c:	e05b      	b.n	8000746 <Bootloader_Run+0x18a>
    				error_id = BL_NO_USER_APP;
 800068e:	4b2e      	ldr	r3, [pc, #184]	; (8000748 <Bootloader_Run+0x18c>)
 8000690:	2284      	movs	r2, #132	; 0x84
 8000692:	701a      	strb	r2, [r3, #0]
    				currentState = STATE_IDLE;
 8000694:	2300      	movs	r3, #0
 8000696:	73bb      	strb	r3, [r7, #14]
    			break;
 8000698:	e055      	b.n	8000746 <Bootloader_Run+0x18a>


    		case STATE_SEND_ERROR:

    			SendError();
 800069a:	f7ff ff1f 	bl	80004dc <SendError>
    			currentState = STATE_IDLE;
 800069e:	2300      	movs	r3, #0
 80006a0:	73bb      	strb	r3, [r7, #14]

    			break;
 80006a2:	e050      	b.n	8000746 <Bootloader_Run+0x18a>


    		case STATE_DOWNLOAD_FW:

    			total_packets = ((uint16_t)packet_buffer[1] & 0xFF) | (((uint16_t)packet_buffer[2] << 8) & 0xFF00);
 80006a4:	4b29      	ldr	r3, [pc, #164]	; (800074c <Bootloader_Run+0x190>)
 80006a6:	785b      	ldrb	r3, [r3, #1]
 80006a8:	b21a      	sxth	r2, r3
 80006aa:	4b28      	ldr	r3, [pc, #160]	; (800074c <Bootloader_Run+0x190>)
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21b      	sxth	r3, r3
 80006b2:	4313      	orrs	r3, r2
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	81bb      	strh	r3, [r7, #12]

    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 80006b8:	4b24      	ldr	r3, [pc, #144]	; (800074c <Bootloader_Run+0x190>)
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b23      	ldr	r3, [pc, #140]	; (800074c <Bootloader_Run+0x190>)
 80006c0:	791b      	ldrb	r3, [r3, #4]
 80006c2:	021b      	lsls	r3, r3, #8
 80006c4:	b29b      	uxth	r3, r3
 80006c6:	431a      	orrs	r2, r3
    					(((uint32_t)packet_buffer[5] << 16) & 0xFF0000) | (((uint32_t)packet_buffer[6] << 24) & 0xFF000000);
 80006c8:	4b20      	ldr	r3, [pc, #128]	; (800074c <Bootloader_Run+0x190>)
 80006ca:	795b      	ldrb	r3, [r3, #5]
 80006cc:	041b      	lsls	r3, r3, #16
 80006ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 80006d2:	431a      	orrs	r2, r3
    					(((uint32_t)packet_buffer[5] << 16) & 0xFF0000) | (((uint32_t)packet_buffer[6] << 24) & 0xFF000000);
 80006d4:	4b1d      	ldr	r3, [pc, #116]	; (800074c <Bootloader_Run+0x190>)
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	061b      	lsls	r3, r3, #24
    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 80006da:	4313      	orrs	r3, r2
 80006dc:	607b      	str	r3, [r7, #4]

    			status = Bootloader_DownloadFW(total_packets);
 80006de:	89bb      	ldrh	r3, [r7, #12]
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 f8ab 	bl	800083c <Bootloader_DownloadFW>
 80006e6:	4603      	mov	r3, r0
 80006e8:	73fb      	strb	r3, [r7, #15]

    			if(status == BL_OK)
 80006ea:	7bfb      	ldrb	r3, [r7, #15]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d108      	bne.n	8000702 <Bootloader_Run+0x146>
    			{
        			app_total_words = (total_packets * 64) / 4;
 80006f0:	89bb      	ldrh	r3, [r7, #12]
 80006f2:	011b      	lsls	r3, r3, #4
 80006f4:	60bb      	str	r3, [r7, #8]

    				status = Bootloader_VerifyAppChecksum(app_checksum, app_total_words);
 80006f6:	68b9      	ldr	r1, [r7, #8]
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f8f1 	bl	80008e0 <Bootloader_VerifyAppChecksum>
 80006fe:	4603      	mov	r3, r0
 8000700:	73fb      	strb	r3, [r7, #15]
    			}

    			if(status == BL_OK)
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d102      	bne.n	800070e <Bootloader_Run+0x152>
    			{
        			currentState = STATE_EXECUTE;
 8000708:	2302      	movs	r3, #2
 800070a:	73bb      	strb	r3, [r7, #14]
    			{
    				error_id = status;
    				currentState = STATE_ABORT;
    			}

    			break;
 800070c:	e01b      	b.n	8000746 <Bootloader_Run+0x18a>
    				error_id = status;
 800070e:	4a0e      	ldr	r2, [pc, #56]	; (8000748 <Bootloader_Run+0x18c>)
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	7013      	strb	r3, [r2, #0]
    				currentState = STATE_ABORT;
 8000714:	2301      	movs	r3, #1
 8000716:	73bb      	strb	r3, [r7, #14]
    			break;
 8000718:	e015      	b.n	8000746 <Bootloader_Run+0x18a>


    		case STATE_ERASE_APP:

    			status = Bootloader_EraseApplication();
 800071a:	f000 f865 	bl	80007e8 <Bootloader_EraseApplication>
 800071e:	4603      	mov	r3, r0
 8000720:	73fb      	strb	r3, [r7, #15]

    			if(status != BL_OK)
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d005      	beq.n	8000734 <Bootloader_Run+0x178>
    			{
    				error_id = status;
 8000728:	4a07      	ldr	r2, [pc, #28]	; (8000748 <Bootloader_Run+0x18c>)
 800072a:	7bfb      	ldrb	r3, [r7, #15]
 800072c:	7013      	strb	r3, [r2, #0]
    				//currentState = STATE_SEND_ERROR;
    				currentState = STATE_IDLE;
 800072e:	2300      	movs	r3, #0
 8000730:	73bb      	strb	r3, [r7, #14]
    			else
    			{
    				currentState = STATE_IDLE;
    			}

    			break;
 8000732:	e008      	b.n	8000746 <Bootloader_Run+0x18a>
    				currentState = STATE_IDLE;
 8000734:	2300      	movs	r3, #0
 8000736:	73bb      	strb	r3, [r7, #14]
    			break;
 8000738:	e005      	b.n	8000746 <Bootloader_Run+0x18a>


    		default:

    			error_id = BL_INVALID_STATE;
 800073a:	4b03      	ldr	r3, [pc, #12]	; (8000748 <Bootloader_Run+0x18c>)
 800073c:	2281      	movs	r2, #129	; 0x81
 800073e:	701a      	strb	r2, [r3, #0]
    			currentState = STATE_SEND_ERROR;
 8000740:	2304      	movs	r3, #4
 8000742:	73bb      	strb	r3, [r7, #14]

    			break;
 8000744:	bf00      	nop
    	switch (currentState)
 8000746:	e750      	b.n	80005ea <Bootloader_Run+0x2e>
 8000748:	20000218 	.word	0x20000218
 800074c:	20000118 	.word	0x20000118

08000750 <Bootloader_JumToApplication>:

}


void Bootloader_JumToApplication(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
    uint32_t application_entry_point_address = *(volatile uint32_t *)(APP_START_ADDRESS + 4);
 8000756:	4b11      	ldr	r3, [pc, #68]	; (800079c <Bootloader_JumToApplication+0x4c>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	60fb      	str	r3, [r7, #12]

    pFunction application_entry_point = (pFunction)application_entry_point_address ;
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	60bb      	str	r3, [r7, #8]

    // Reset peripherals
    HAL_RCC_DeInit();
 8000760:	f003 f8d6 	bl	8003910 <HAL_RCC_DeInit>
    HAL_DeInit();
 8000764:	f000 fb9a 	bl	8000e9c <HAL_DeInit>

    // Reset Systick
    SysTick->CTRL = 0;  // Disable SysTick
 8000768:	4b0d      	ldr	r3, [pc, #52]	; (80007a0 <Bootloader_JumToApplication+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
    SysTick->VAL = 0;   // Reset current value
 800076e:	4b0c      	ldr	r3, [pc, #48]	; (80007a0 <Bootloader_JumToApplication+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = 0;  // Reset reload value
 8000774:	4b0a      	ldr	r3, [pc, #40]	; (80007a0 <Bootloader_JumToApplication+0x50>)
 8000776:	2200      	movs	r2, #0
 8000778:	605a      	str	r2, [r3, #4]

    // Set the vector table base address
    SCB->VTOR = APP_START_ADDRESS;
 800077a:	4b0a      	ldr	r3, [pc, #40]	; (80007a4 <Bootloader_JumToApplication+0x54>)
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <Bootloader_JumToApplication+0x58>)
 800077e:	609a      	str	r2, [r3, #8]

    // Set the stack pointer
    __set_MSP(*(volatile uint32_t*)(APP_START_ADDRESS));
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <Bootloader_JumToApplication+0x58>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	f383 8808 	msr	MSP, r3
}
 800078c:	bf00      	nop

    // Jump to the application
    application_entry_point();
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	4798      	blx	r3
}
 8000792:	bf00      	nop
 8000794:	3710      	adds	r7, #16
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	08010004 	.word	0x08010004
 80007a0:	e000e010 	.word	0xe000e010
 80007a4:	e000ed00 	.word	0xe000ed00
 80007a8:	08010000 	.word	0x08010000

080007ac <Bootloader_CheckApplicationExist>:


bool Bootloader_CheckApplicationExist(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
    uint32_t stack_address = 0;
 80007b2:	2300      	movs	r3, #0
 80007b4:	607b      	str	r3, [r7, #4]

    Flash_Read_Word(APP_START_ADDRESS, &stack_address, (uint32_t)1);
 80007b6:	1d3b      	adds	r3, r7, #4
 80007b8:	2201      	movs	r2, #1
 80007ba:	4619      	mov	r1, r3
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <Bootloader_CheckApplicationExist+0x38>)
 80007be:	f000 f941 	bl	8000a44 <Flash_Read_Word>

    if ((stack_address < RAM_BASE_ADDRESS) || ((stack_address - RAM_BASE_ADDRESS) > RAM_SIZE))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80007c8:	d305      	bcc.n	80007d6 <Bootloader_CheckApplicationExist+0x2a>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80007d0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007d4:	d901      	bls.n	80007da <Bootloader_CheckApplicationExist+0x2e>
    {
        return false;
 80007d6:	2300      	movs	r3, #0
 80007d8:	e000      	b.n	80007dc <Bootloader_CheckApplicationExist+0x30>
    }

    return true;
 80007da:	2301      	movs	r3, #1
}
 80007dc:	4618      	mov	r0, r3
 80007de:	3708      	adds	r7, #8
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}
 80007e4:	08010000 	.word	0x08010000

080007e8 <Bootloader_EraseApplication>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_ERASE_ERROR: The erase operation failed.
 *			- FLASH_OK: The erase operation was successful.
 */
uint8_t Bootloader_EraseApplication(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t try = 3;
 80007ee:	2303      	movs	r3, #3
 80007f0:	71bb      	strb	r3, [r7, #6]

	for(uint8_t sector_num = APP_START_SECTOR; sector_num < FLASH_TOTAL_SECTORS; sector_num++)
 80007f2:	2304      	movs	r3, #4
 80007f4:	717b      	strb	r3, [r7, #5]
 80007f6:	e016      	b.n	8000826 <Bootloader_EraseApplication+0x3e>
	{
		do
		{
			status = Flash_EraseSector(sector_num);
 80007f8:	797b      	ldrb	r3, [r7, #5]
 80007fa:	4618      	mov	r0, r3
 80007fc:	f000 f89e 	bl	800093c <Flash_EraseSector>
 8000800:	4603      	mov	r3, r0
 8000802:	71fb      	strb	r3, [r7, #7]

		} while((status != FLASH_OK) && --try);
 8000804:	79fb      	ldrb	r3, [r7, #7]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d005      	beq.n	8000816 <Bootloader_EraseApplication+0x2e>
 800080a:	79bb      	ldrb	r3, [r7, #6]
 800080c:	3b01      	subs	r3, #1
 800080e:	71bb      	strb	r3, [r7, #6]
 8000810:	79bb      	ldrb	r3, [r7, #6]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d1f0      	bne.n	80007f8 <Bootloader_EraseApplication+0x10>

		if(status != FLASH_OK)
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d108      	bne.n	800082e <Bootloader_EraseApplication+0x46>
		{
	    	break;
		}

		try = 3;
 800081c:	2303      	movs	r3, #3
 800081e:	71bb      	strb	r3, [r7, #6]
	for(uint8_t sector_num = APP_START_SECTOR; sector_num < FLASH_TOTAL_SECTORS; sector_num++)
 8000820:	797b      	ldrb	r3, [r7, #5]
 8000822:	3301      	adds	r3, #1
 8000824:	717b      	strb	r3, [r7, #5]
 8000826:	797b      	ldrb	r3, [r7, #5]
 8000828:	2b07      	cmp	r3, #7
 800082a:	d9e5      	bls.n	80007f8 <Bootloader_EraseApplication+0x10>
 800082c:	e000      	b.n	8000830 <Bootloader_EraseApplication+0x48>
	    	break;
 800082e:	bf00      	nop
	}

    return status;
 8000830:	79fb      	ldrb	r3, [r7, #7]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <Bootloader_DownloadFW>:


uint8_t Bootloader_DownloadFW(uint16_t total_packets)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b088      	sub	sp, #32
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	uint8_t try_nb = 3;
 8000846:	2303      	movs	r3, #3
 8000848:	75fb      	strb	r3, [r7, #23]
	uint16_t packet_num = 0;
 800084a:	2300      	movs	r3, #0
 800084c:	83bb      	strh	r3, [r7, #28]
	uint16_t packet_size = 64;
 800084e:	2340      	movs	r3, #64	; 0x40
 8000850:	82bb      	strh	r3, [r7, #20]
	uint16_t packet_size_words = packet_size / 4; // 64/4
 8000852:	8abb      	ldrh	r3, [r7, #20]
 8000854:	089b      	lsrs	r3, r3, #2
 8000856:	827b      	strh	r3, [r7, #18]
	uint32_t rcv_timeout = 2000;
 8000858:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800085c:	60fb      	str	r3, [r7, #12]
	uint32_t address = APP_START_ADDRESS;
 800085e:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <Bootloader_DownloadFW+0x9c>)
 8000860:	61bb      	str	r3, [r7, #24]

	status = Bootloader_EraseApplication();
 8000862:	f7ff ffc1 	bl	80007e8 <Bootloader_EraseApplication>
 8000866:	4603      	mov	r3, r0
 8000868:	77fb      	strb	r3, [r7, #31]

	if(status == BL_OK)
 800086a:	7ffb      	ldrb	r3, [r7, #31]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d12d      	bne.n	80008cc <Bootloader_DownloadFW+0x90>
	{
		do
		{
			status = CDC_ReadRxBuffer_FS(packet_buffer, 64, rcv_timeout);
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	2140      	movs	r1, #64	; 0x40
 8000874:	4819      	ldr	r0, [pc, #100]	; (80008dc <Bootloader_DownloadFW+0xa0>)
 8000876:	f006 fe8b 	bl	8007590 <CDC_ReadRxBuffer_FS>
 800087a:	4603      	mov	r3, r0
 800087c:	77fb      	strb	r3, [r7, #31]

			if(status == USBD_OK)
 800087e:	7ffb      	ldrb	r3, [r7, #31]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d11c      	bne.n	80008be <Bootloader_DownloadFW+0x82>
			{
				SendPacketAck(packet_num);
 8000884:	8bbb      	ldrh	r3, [r7, #28]
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff fe6c 	bl	8000564 <SendPacketAck>
				status = Flash_Write_Word(address, (uint32_t *)packet_buffer, packet_size_words);
 800088c:	8a7b      	ldrh	r3, [r7, #18]
 800088e:	461a      	mov	r2, r3
 8000890:	4912      	ldr	r1, [pc, #72]	; (80008dc <Bootloader_DownloadFW+0xa0>)
 8000892:	69b8      	ldr	r0, [r7, #24]
 8000894:	f000 f87a 	bl	800098c <Flash_Write_Word>
 8000898:	4603      	mov	r3, r0
 800089a:	77fb      	strb	r3, [r7, #31]
				address = address + packet_size;
 800089c:	8abb      	ldrh	r3, [r7, #20]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	4413      	add	r3, r2
 80008a2:	61bb      	str	r3, [r7, #24]
				packet_num ++;
 80008a4:	8bbb      	ldrh	r3, [r7, #28]
 80008a6:	3301      	adds	r3, #1
 80008a8:	83bb      	strh	r3, [r7, #28]
				try_nb = 3;
 80008aa:	2303      	movs	r3, #3
 80008ac:	75fb      	strb	r3, [r7, #23]
			else
			{
				break;
			}

		} while((packet_num < total_packets) && (status == USBD_OK));
 80008ae:	8bba      	ldrh	r2, [r7, #28]
 80008b0:	88fb      	ldrh	r3, [r7, #6]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	d204      	bcs.n	80008c0 <Bootloader_DownloadFW+0x84>
 80008b6:	7ffb      	ldrb	r3, [r7, #31]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d0d9      	beq.n	8000870 <Bootloader_DownloadFW+0x34>
 80008bc:	e000      	b.n	80008c0 <Bootloader_DownloadFW+0x84>
				break;
 80008be:	bf00      	nop

		if(packet_num != total_packets)
 80008c0:	8bba      	ldrh	r2, [r7, #28]
 80008c2:	88fb      	ldrh	r3, [r7, #6]
 80008c4:	429a      	cmp	r2, r3
 80008c6:	d001      	beq.n	80008cc <Bootloader_DownloadFW+0x90>
		{
			status = BL_DOWNLOAD_FAILED;
 80008c8:	2383      	movs	r3, #131	; 0x83
 80008ca:	77fb      	strb	r3, [r7, #31]
		}
	}

    return status;
 80008cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3720      	adds	r7, #32
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	08010000 	.word	0x08010000
 80008dc:	20000118 	.word	0x20000118

080008e0 <Bootloader_VerifyAppChecksum>:


uint8_t Bootloader_VerifyAppChecksum(uint32_t app_checksum, uint32_t app_word_size)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	6039      	str	r1, [r7, #0]
	uint32_t calculatedCRC;

	calculatedCRC = Flash_GetChecksum(APP_START_ADDRESS, app_word_size);
 80008ea:	6839      	ldr	r1, [r7, #0]
 80008ec:	4807      	ldr	r0, [pc, #28]	; (800090c <Bootloader_VerifyAppChecksum+0x2c>)
 80008ee:	f000 f8e3 	bl	8000ab8 <Flash_GetChecksum>
 80008f2:	60f8      	str	r0, [r7, #12]

	if(app_checksum != calculatedCRC)
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	429a      	cmp	r2, r3
 80008fa:	d001      	beq.n	8000900 <Bootloader_VerifyAppChecksum+0x20>
	{
		return BL_CHKS_MISMATCH;
 80008fc:	237f      	movs	r3, #127	; 0x7f
 80008fe:	e000      	b.n	8000902 <Bootloader_VerifyAppChecksum+0x22>
	}

	return BL_OK;
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3710      	adds	r7, #16
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	08010000 	.word	0x08010000

08000910 <Flash_Init>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_UNL_ERROR: Flash unlocking failed.
 *			- FLASH_OK: Flash unlocking successful.
 */
uint8_t Flash_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	// Attempt to unlock the flash
    if (HAL_FLASH_Unlock() == HAL_ERROR)
 8000914:	f000 fd1e 	bl	8001354 <HAL_FLASH_Unlock>
 8000918:	4603      	mov	r3, r0
 800091a:	2b01      	cmp	r3, #1
 800091c:	d101      	bne.n	8000922 <Flash_Init+0x12>
    {
    	return FLASH_UNL_ERROR;
 800091e:	2302      	movs	r3, #2
 8000920:	e005      	b.n	800092e <Flash_Init+0x1e>
    }

    // Clear Flash flags
    __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8000922:	4b04      	ldr	r3, [pc, #16]	; (8000934 <Flash_Init+0x24>)
 8000924:	4a04      	ldr	r2, [pc, #16]	; (8000938 <Flash_Init+0x28>)
 8000926:	60da      	str	r2, [r3, #12]
    		FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR | FLASH_FLAG_BSY);

    HAL_FLASH_Lock();
 8000928:	f000 fd36 	bl	8001398 <HAL_FLASH_Lock>

    return FLASH_OK;
 800092c:	2300      	movs	r3, #0
}
 800092e:	4618      	mov	r0, r3
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40023c00 	.word	0x40023c00
 8000938:	000101f3 	.word	0x000101f3

0800093c <Flash_EraseSector>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_ERASE_ERROR: The erase operation failed.
 *			- FLASH_OK: The erase operation was successful.
 */
uint8_t Flash_EraseSector(uint8_t sector)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	4603      	mov	r3, r0
 8000944:	71fb      	strb	r3, [r7, #7]
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t SectorError;
    uint8_t flash_status = FLASH_OK;
 8000946:	2300      	movs	r3, #0
 8000948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_Unlock();
 800094c:	f000 fd02 	bl	8001354 <HAL_FLASH_Unlock>

    // Configure the erase operation
    eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
    eraseInit.Sector = sector;
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	61bb      	str	r3, [r7, #24]
    eraseInit.NbSectors = 1;
 8000958:	2301      	movs	r3, #1
 800095a:	61fb      	str	r3, [r7, #28]
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 800095c:	2302      	movs	r3, #2
 800095e:	623b      	str	r3, [r7, #32]

    // Perform the flash erase operation
    if (HAL_FLASHEx_Erase(&eraseInit, &SectorError) == HAL_ERROR)
 8000960:	f107 020c 	add.w	r2, r7, #12
 8000964:	f107 0310 	add.w	r3, r7, #16
 8000968:	4611      	mov	r1, r2
 800096a:	4618      	mov	r0, r3
 800096c:	f000 fe64 	bl	8001638 <HAL_FLASHEx_Erase>
 8000970:	4603      	mov	r3, r0
 8000972:	2b01      	cmp	r3, #1
 8000974:	d102      	bne.n	800097c <Flash_EraseSector+0x40>
    {
    	flash_status = FLASH_ERASE_ERROR;
 8000976:	2303      	movs	r3, #3
 8000978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    HAL_FLASH_Lock();
 800097c:	f000 fd0c 	bl	8001398 <HAL_FLASH_Lock>

    return flash_status;
 8000980:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000984:	4618      	mov	r0, r3
 8000986:	3728      	adds	r7, #40	; 0x28
 8000988:	46bd      	mov	sp, r7
 800098a:	bd80      	pop	{r7, pc}

0800098c <Flash_Write_Word>:
 *         - FLASH_WRITE_OVER_ERROR: The write operation exceeds the flash memory boundary.
 *         - FLASH_WRITE_CORR_ERROR: The written data is incorrect.
 *         - FLASH_WRITE_ERROR: The write operation failed.
 */
uint8_t Flash_Write_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 800098c:	b5b0      	push	{r4, r5, r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	60f8      	str	r0, [r7, #12]
 8000994:	60b9      	str	r1, [r7, #8]
 8000996:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 8000998:	2300      	movs	r3, #0
 800099a:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();
 800099c:	f000 fcda 	bl	8001354 <HAL_FLASH_Unlock>

    // Check if the write operation exceeds the flash memory boundary
    if ((address < APP_START_ADDRESS) ||
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	4a26      	ldr	r2, [pc, #152]	; (8000a3c <Flash_Write_Word+0xb0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d90b      	bls.n	80009c0 <Flash_Write_Word+0x34>
    	((address + (size * 4)) > (APP_END_ADDRESS)) ||
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	009a      	lsls	r2, r3, #2
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	4413      	add	r3, r2
    if ((address < APP_START_ADDRESS) ||
 80009b0:	4a23      	ldr	r2, [pc, #140]	; (8000a40 <Flash_Write_Word+0xb4>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d804      	bhi.n	80009c0 <Flash_Write_Word+0x34>
	    ((address % 4) != 0))
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	f003 0303 	and.w	r3, r3, #3
    	((address + (size * 4)) > (APP_END_ADDRESS)) ||
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <Flash_Write_Word+0x38>
    {
        flash_status = FLASH_WRITE_OVER_ERROR;
 80009c0:	2306      	movs	r3, #6
 80009c2:	75fb      	strb	r3, [r7, #23]
    }

    // Perform the write operation
    for (uint32_t i = 0; i < size; i += 1)
 80009c4:	2300      	movs	r3, #0
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	e02b      	b.n	8000a22 <Flash_Write_Word+0x96>
    {
    	if(flash_status != FLASH_OK)
 80009ca:	7dfb      	ldrb	r3, [r7, #23]
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d12d      	bne.n	8000a2c <Flash_Write_Word+0xa0>
    	{
    		break;
    	}

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4), data[i]) == HAL_OK)
 80009d0:	693b      	ldr	r3, [r7, #16]
 80009d2:	009a      	lsls	r2, r3, #2
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	4413      	add	r3, r2
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	2200      	movs	r2, #0
 80009e4:	461c      	mov	r4, r3
 80009e6:	4615      	mov	r5, r2
 80009e8:	4622      	mov	r2, r4
 80009ea:	462b      	mov	r3, r5
 80009ec:	2002      	movs	r0, #2
 80009ee:	f000 fc5d 	bl	80012ac <HAL_FLASH_Program>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d10e      	bne.n	8000a16 <Flash_Write_Word+0x8a>
        {
            // Verify the written data
            if (*(uint32_t*)(address + (i * 4)) != data[i])
 80009f8:	693b      	ldr	r3, [r7, #16]
 80009fa:	009a      	lsls	r2, r3, #2
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	68b9      	ldr	r1, [r7, #8]
 8000a08:	440b      	add	r3, r1
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d005      	beq.n	8000a1c <Flash_Write_Word+0x90>
            {
                flash_status = FLASH_WRITE_CORR_ERROR;
 8000a10:	2307      	movs	r3, #7
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e002      	b.n	8000a1c <Flash_Write_Word+0x90>
            }
        }
        else
        {
            flash_status = FLASH_WRITE_ERROR;
 8000a16:	2304      	movs	r3, #4
 8000a18:	75fb      	strb	r3, [r7, #23]
            break;
 8000a1a:	e008      	b.n	8000a2e <Flash_Write_Word+0xa2>
    for (uint32_t i = 0; i < size; i += 1)
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3cf      	bcc.n	80009ca <Flash_Write_Word+0x3e>
 8000a2a:	e000      	b.n	8000a2e <Flash_Write_Word+0xa2>
    		break;
 8000a2c:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 8000a2e:	f000 fcb3 	bl	8001398 <HAL_FLASH_Lock>

    return flash_status;
 8000a32:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bdb0      	pop	{r4, r5, r7, pc}
 8000a3c:	0800ffff 	.word	0x0800ffff
 8000a40:	08080000 	.word	0x08080000

08000a44 <Flash_Read_Word>:
 * @return	Flasg error code ::eFlashErrorCodes
 * 			- FLASH_OK: The flash read operation was successful.
 * 			- FLASH_READ_OVER_ERROR: The read operation exceeded the flash memory boundaries.
 */
uint8_t Flash_Read_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 8000a44:	b480      	push	{r7}
 8000a46:	b087      	sub	sp, #28
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	60f8      	str	r0, [r7, #12]
 8000a4c:	60b9      	str	r1, [r7, #8]
 8000a4e:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 8000a50:	2300      	movs	r3, #0
 8000a52:	75fb      	strb	r3, [r7, #23]

    if ((address < FLASH_BASE_ADDRESS) ||
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000a5a:	d30b      	bcc.n	8000a74 <Flash_Read_Word+0x30>
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	009a      	lsls	r2, r3, #2
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	4413      	add	r3, r2
    if ((address < FLASH_BASE_ADDRESS) ||
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <Flash_Read_Word+0x70>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d804      	bhi.n	8000a74 <Flash_Read_Word+0x30>
		((address % 4) != 0))
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f003 0303 	and.w	r3, r3, #3
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <Flash_Read_Word+0x36>
    {
    	flash_status = FLASH_READ_OVER_ERROR;
 8000a74:	2305      	movs	r3, #5
 8000a76:	75fb      	strb	r3, [r7, #23]
 8000a78:	e014      	b.n	8000aa4 <Flash_Read_Word+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < size; i += 1)
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	613b      	str	r3, [r7, #16]
 8000a7e:	e00d      	b.n	8000a9c <Flash_Read_Word+0x58>
        {
            data[i] = *(uint32_t *)(address + (i * 4));
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	009a      	lsls	r2, r3, #2
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	4413      	add	r3, r2
 8000a88:	4619      	mov	r1, r3
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	009b      	lsls	r3, r3, #2
 8000a8e:	68ba      	ldr	r2, [r7, #8]
 8000a90:	4413      	add	r3, r2
 8000a92:	680a      	ldr	r2, [r1, #0]
 8000a94:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < size; i += 1)
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	3301      	adds	r3, #1
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d3ed      	bcc.n	8000a80 <Flash_Read_Word+0x3c>
        }
    }


    return flash_status;
 8000aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	371c      	adds	r7, #28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	08080000 	.word	0x08080000

08000ab8 <Flash_GetChecksum>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_CHKS_ERROR: Checksum verification failed
 *			- FLASH_OK: Checksum verification successful
 */
uint32_t Flash_GetChecksum(uint32_t start_address, uint32_t size)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)start_address, size);
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	683a      	ldr	r2, [r7, #0]
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <Flash_GetChecksum+0x20>)
 8000aca:	f000 fbbc 	bl	8001246 <HAL_CRC_Calculate>
 8000ace:	4603      	mov	r3, r0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3708      	adds	r7, #8
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	2000021c 	.word	0x2000021c

08000adc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 f9ba 	bl	8000e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f80a 	bl	8000afc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f000 f888 	bl	8000bfc <MX_GPIO_Init>
  MX_CRC_Init();
 8000aec:	f000 f872 	bl	8000bd4 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000af0:	f006 fbf2 	bl	80072d8 <MX_USB_DEVICE_Init>

  while(1){}

   */

  test();
 8000af4:	f7ff fd5c 	bl	80005b0 <test>


  while (1)
 8000af8:	e7fe      	b.n	8000af8 <main+0x1c>
	...

08000afc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b094      	sub	sp, #80	; 0x50
 8000b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b02:	f107 0320 	add.w	r3, r7, #32
 8000b06:	2230      	movs	r2, #48	; 0x30
 8000b08:	2100      	movs	r1, #0
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f007 f9f0 	bl	8007ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b10:	f107 030c 	add.w	r3, r7, #12
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b30:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <SystemClock_Config+0xd0>)
 8000b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b38:	60bb      	str	r3, [r7, #8]
 8000b3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	4b23      	ldr	r3, [pc, #140]	; (8000bd0 <SystemClock_Config+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a22      	ldr	r2, [pc, #136]	; (8000bd0 <SystemClock_Config+0xd4>)
 8000b46:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4a:	6013      	str	r3, [r2, #0]
 8000b4c:	4b20      	ldr	r3, [pc, #128]	; (8000bd0 <SystemClock_Config+0xd4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b54:	607b      	str	r3, [r7, #4]
 8000b56:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000b58:	2303      	movs	r3, #3
 8000b5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b62:	2301      	movs	r3, #1
 8000b64:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b66:	2310      	movs	r3, #16
 8000b68:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b74:	230f      	movs	r3, #15
 8000b76:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b78:	2390      	movs	r3, #144	; 0x90
 8000b7a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b80:	2305      	movs	r3, #5
 8000b82:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b84:	f107 0320 	add.w	r3, r7, #32
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f002 fa91 	bl	80030b0 <HAL_RCC_OscConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b94:	f000 f8a0 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b98:	230f      	movs	r3, #15
 8000b9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	f002 fcf4 	bl	80035a0 <HAL_RCC_ClockConfig>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bbe:	f000 f88b 	bl	8000cd8 <Error_Handler>
  }
}
 8000bc2:	bf00      	nop
 8000bc4:	3750      	adds	r7, #80	; 0x50
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40007000 	.word	0x40007000

08000bd4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <MX_CRC_Init+0x20>)
 8000bda:	4a07      	ldr	r2, [pc, #28]	; (8000bf8 <MX_CRC_Init+0x24>)
 8000bdc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000bde:	4805      	ldr	r0, [pc, #20]	; (8000bf4 <MX_CRC_Init+0x20>)
 8000be0:	f000 fb15 	bl	800120e <HAL_CRC_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000bea:	f000 f875 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000bee:	bf00      	nop
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	2000021c 	.word	0x2000021c
 8000bf8:	40023000 	.word	0x40023000

08000bfc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08a      	sub	sp, #40	; 0x28
 8000c00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c12:	2300      	movs	r3, #0
 8000c14:	613b      	str	r3, [r7, #16]
 8000c16:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	4a2c      	ldr	r2, [pc, #176]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c1c:	f043 0304 	orr.w	r3, r3, #4
 8000c20:	6313      	str	r3, [r2, #48]	; 0x30
 8000c22:	4b2a      	ldr	r3, [pc, #168]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	f003 0304 	and.w	r3, r3, #4
 8000c2a:	613b      	str	r3, [r7, #16]
 8000c2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60fb      	str	r3, [r7, #12]
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a25      	ldr	r2, [pc, #148]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
 8000c4e:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c52:	4a1e      	ldr	r2, [pc, #120]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60bb      	str	r3, [r7, #8]
 8000c64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
 8000c6a:	4b18      	ldr	r3, [pc, #96]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6e:	4a17      	ldr	r2, [pc, #92]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	6313      	str	r3, [r2, #48]	; 0x30
 8000c76:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_GPIO_Init+0xd0>)
 8000c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	607b      	str	r3, [r7, #4]
 8000c80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 8000c82:	2200      	movs	r2, #0
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	4811      	ldr	r0, [pc, #68]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000c8a:	f000 ff7b 	bl	8001b84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000c8e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c94:	2301      	movs	r3, #1
 8000c96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <MX_GPIO_Init+0xd4>)
 8000ca8:	f000 fde8 	bl	800187c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000cac:	2301      	movs	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	4805      	ldr	r0, [pc, #20]	; (8000cd4 <MX_GPIO_Init+0xd8>)
 8000cc0:	f000 fddc 	bl	800187c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	40020800 	.word	0x40020800
 8000cd4:	40020000 	.word	0x40020000

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <Error_Handler+0x8>
	...

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b083      	sub	sp, #12
 8000ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	; 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	; (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	; (8000d70 <HAL_CRC_MspInit+0x3c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10d      	bne.n	8000d62 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	4a09      	ldr	r2, [pc, #36]	; (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d54:	6313      	str	r3, [r2, #48]	; 0x30
 8000d56:	4b07      	ldr	r3, [pc, #28]	; (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023000 	.word	0x40023000
 8000d74:	40023800 	.word	0x40023800

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f8ce 	bl	8000f64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <OTG_FS_IRQHandler+0x10>)
 8000dd2:	f001 f840 	bl	8001e56 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20001b34 	.word	0x20001b34

08000de0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e0a:	490e      	ldr	r1, [pc, #56]	; (8000e44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e0c:	4a0e      	ldr	r2, [pc, #56]	; (8000e48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0b      	ldr	r2, [pc, #44]	; (8000e4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e20:	4c0b      	ldr	r4, [pc, #44]	; (8000e50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e2e:	f7ff ffd7 	bl	8000de0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e32:	f007 f839 	bl	8007ea8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e36:	f7ff fe51 	bl	8000adc <main>
  bx  lr    
 8000e3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000e48:	08007f84 	.word	0x08007f84
  ldr r2, =_sbss
 8000e4c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000e50:	20002260 	.word	0x20002260

08000e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <ADC_IRQHandler>
	...

08000e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e5c:	4b0e      	ldr	r3, [pc, #56]	; (8000e98 <HAL_Init+0x40>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a0d      	ldr	r2, [pc, #52]	; (8000e98 <HAL_Init+0x40>)
 8000e62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a0a      	ldr	r2, [pc, #40]	; (8000e98 <HAL_Init+0x40>)
 8000e6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_Init+0x40>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a07      	ldr	r2, [pc, #28]	; (8000e98 <HAL_Init+0x40>)
 8000e7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e80:	2003      	movs	r0, #3
 8000e82:	f000 f983 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e86:	200f      	movs	r0, #15
 8000e88:	f000 f83c 	bl	8000f04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e8c:	f7ff ff2a 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e90:	2300      	movs	r3, #0
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	40023c00 	.word	0x40023c00

08000e9c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000ea0:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ea2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ea6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000ea8:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_DeInit+0x54>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_DeInit+0x54>)
 8000eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	; (8000ef0 <HAL_DeInit+0x54>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec2:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ed0:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000ed2:	4b07      	ldr	r3, [pc, #28]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_DeInit+0x54>)
 8000eda:	f04f 32ff 	mov.w	r2, #4294967295
 8000ede:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000ee0:	4b03      	ldr	r3, [pc, #12]	; (8000ef0 <HAL_DeInit+0x54>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000ee6:	f000 f805 	bl	8000ef4 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
}
 8000eec:	4618      	mov	r0, r3
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <HAL_InitTick+0x54>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	4b12      	ldr	r3, [pc, #72]	; (8000f5c <HAL_InitTick+0x58>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f22:	4618      	mov	r0, r3
 8000f24:	f000 f967 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d001      	beq.n	8000f32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	e00e      	b.n	8000f50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2b0f      	cmp	r3, #15
 8000f36:	d80a      	bhi.n	8000f4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f38:	2200      	movs	r2, #0
 8000f3a:	6879      	ldr	r1, [r7, #4]
 8000f3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f40:	f000 f92f 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f44:	4a06      	ldr	r2, [pc, #24]	; (8000f60 <HAL_InitTick+0x5c>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	e000      	b.n	8000f50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000000 	.word	0x20000000
 8000f5c:	20000008 	.word	0x20000008
 8000f60:	20000004 	.word	0x20000004

08000f64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f68:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x20>)
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	4b06      	ldr	r3, [pc, #24]	; (8000f88 <HAL_IncTick+0x24>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4413      	add	r3, r2
 8000f74:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <HAL_IncTick+0x24>)
 8000f76:	6013      	str	r3, [r2, #0]
}
 8000f78:	bf00      	nop
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000224 	.word	0x20000224

08000f8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f90:	4b03      	ldr	r3, [pc, #12]	; (8000fa0 <HAL_GetTick+0x14>)
 8000f92:	681b      	ldr	r3, [r3, #0]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	20000224 	.word	0x20000224

08000fa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fac:	f7ff ffee 	bl	8000f8c <HAL_GetTick>
 8000fb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fbc:	d005      	beq.n	8000fca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	; (8000fe8 <HAL_Delay+0x44>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	4413      	add	r3, r2
 8000fc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fca:	bf00      	nop
 8000fcc:	f7ff ffde 	bl	8000f8c <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	1ad3      	subs	r3, r2, r3
 8000fd6:	68fa      	ldr	r2, [r7, #12]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	d8f7      	bhi.n	8000fcc <HAL_Delay+0x28>
  {
  }
}
 8000fdc:	bf00      	nop
 8000fde:	bf00      	nop
 8000fe0:	3710      	adds	r7, #16
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000008 	.word	0x20000008

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4907      	ldr	r1, [pc, #28]	; (8001088 <__NVIC_EnableIRQ+0x38>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000e100 	.word	0xe000e100

0800108c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	4603      	mov	r3, r0
 8001094:	6039      	str	r1, [r7, #0]
 8001096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	2b00      	cmp	r3, #0
 800109e:	db0a      	blt.n	80010b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	490c      	ldr	r1, [pc, #48]	; (80010d8 <__NVIC_SetPriority+0x4c>)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	0112      	lsls	r2, r2, #4
 80010ac:	b2d2      	uxtb	r2, r2
 80010ae:	440b      	add	r3, r1
 80010b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b4:	e00a      	b.n	80010cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4908      	ldr	r1, [pc, #32]	; (80010dc <__NVIC_SetPriority+0x50>)
 80010bc:	79fb      	ldrb	r3, [r7, #7]
 80010be:	f003 030f 	and.w	r3, r3, #15
 80010c2:	3b04      	subs	r3, #4
 80010c4:	0112      	lsls	r2, r2, #4
 80010c6:	b2d2      	uxtb	r2, r2
 80010c8:	440b      	add	r3, r1
 80010ca:	761a      	strb	r2, [r3, #24]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000e100 	.word	0xe000e100
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b089      	sub	sp, #36	; 0x24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	60f8      	str	r0, [r7, #12]
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 0307 	and.w	r3, r3, #7
 80010f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f1c3 0307 	rsb	r3, r3, #7
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	bf28      	it	cs
 80010fe:	2304      	movcs	r3, #4
 8001100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	3304      	adds	r3, #4
 8001106:	2b06      	cmp	r3, #6
 8001108:	d902      	bls.n	8001110 <NVIC_EncodePriority+0x30>
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	3b03      	subs	r3, #3
 800110e:	e000      	b.n	8001112 <NVIC_EncodePriority+0x32>
 8001110:	2300      	movs	r3, #0
 8001112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001114:	f04f 32ff 	mov.w	r2, #4294967295
 8001118:	69bb      	ldr	r3, [r7, #24]
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43da      	mvns	r2, r3
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	401a      	ands	r2, r3
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001128:	f04f 31ff 	mov.w	r1, #4294967295
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	fa01 f303 	lsl.w	r3, r1, r3
 8001132:	43d9      	mvns	r1, r3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	4313      	orrs	r3, r2
         );
}
 800113a:	4618      	mov	r0, r3
 800113c:	3724      	adds	r7, #36	; 0x24
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff8e 	bl	800108c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff29 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff3e 	bl	8001034 <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff8e 	bl	80010e0 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5d 	bl	800108c <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff31 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}

0800120e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b082      	sub	sp, #8
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d101      	bne.n	8001220 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	e00e      	b.n	800123e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	795b      	ldrb	r3, [r3, #5]
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d105      	bne.n	8001236 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2200      	movs	r2, #0
 800122e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff fd7f 	bl	8000d34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2201      	movs	r2, #1
 800123a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001246:	b480      	push	{r7}
 8001248:	b087      	sub	sp, #28
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 8001252:	2300      	movs	r3, #0
 8001254:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	2202      	movs	r2, #2
 800125a:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f042 0201 	orr.w	r2, r2, #1
 800126a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800126c:	2300      	movs	r3, #0
 800126e:	617b      	str	r3, [r7, #20]
 8001270:	e00a      	b.n	8001288 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	68ba      	ldr	r2, [r7, #8]
 8001278:	441a      	add	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	6812      	ldr	r2, [r2, #0]
 8001280:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	3301      	adds	r3, #1
 8001286:	617b      	str	r3, [r7, #20]
 8001288:	697a      	ldr	r2, [r7, #20]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	429a      	cmp	r2, r3
 800128e:	d3f0      	bcc.n	8001272 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	2201      	movs	r2, #1
 800129c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800129e:	693b      	ldr	r3, [r7, #16]
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	371c      	adds	r7, #28
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80012be:	4b23      	ldr	r3, [pc, #140]	; (800134c <HAL_FLASH_Program+0xa0>)
 80012c0:	7e1b      	ldrb	r3, [r3, #24]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d101      	bne.n	80012ca <HAL_FLASH_Program+0x1e>
 80012c6:	2302      	movs	r3, #2
 80012c8:	e03b      	b.n	8001342 <HAL_FLASH_Program+0x96>
 80012ca:	4b20      	ldr	r3, [pc, #128]	; (800134c <HAL_FLASH_Program+0xa0>)
 80012cc:	2201      	movs	r2, #1
 80012ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80012d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80012d4:	f000 f870 	bl	80013b8 <FLASH_WaitForLastOperation>
 80012d8:	4603      	mov	r3, r0
 80012da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12b      	bne.n	800133a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80012e8:	783b      	ldrb	r3, [r7, #0]
 80012ea:	4619      	mov	r1, r3
 80012ec:	68b8      	ldr	r0, [r7, #8]
 80012ee:	f000 f91b 	bl	8001528 <FLASH_Program_Byte>
 80012f2:	e016      	b.n	8001322 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d105      	bne.n	8001306 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80012fa:	883b      	ldrh	r3, [r7, #0]
 80012fc:	4619      	mov	r1, r3
 80012fe:	68b8      	ldr	r0, [r7, #8]
 8001300:	f000 f8ee 	bl	80014e0 <FLASH_Program_HalfWord>
 8001304:	e00d      	b.n	8001322 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d105      	bne.n	8001318 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	4619      	mov	r1, r3
 8001310:	68b8      	ldr	r0, [r7, #8]
 8001312:	f000 f8c3 	bl	800149c <FLASH_Program_Word>
 8001316:	e004      	b.n	8001322 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001318:	e9d7 2300 	ldrd	r2, r3, [r7]
 800131c:	68b8      	ldr	r0, [r7, #8]
 800131e:	f000 f88b 	bl	8001438 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001322:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001326:	f000 f847 	bl	80013b8 <FLASH_WaitForLastOperation>
 800132a:	4603      	mov	r3, r0
 800132c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800132e:	4b08      	ldr	r3, [pc, #32]	; (8001350 <HAL_FLASH_Program+0xa4>)
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	4a07      	ldr	r2, [pc, #28]	; (8001350 <HAL_FLASH_Program+0xa4>)
 8001334:	f023 0301 	bic.w	r3, r3, #1
 8001338:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <HAL_FLASH_Program+0xa0>)
 800133c:	2200      	movs	r2, #0
 800133e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001340:	7dfb      	ldrb	r3, [r7, #23]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000228 	.word	0x20000228
 8001350:	40023c00 	.word	0x40023c00

08001354 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800135a:	2300      	movs	r3, #0
 800135c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800135e:	4b0b      	ldr	r3, [pc, #44]	; (800138c <HAL_FLASH_Unlock+0x38>)
 8001360:	691b      	ldr	r3, [r3, #16]
 8001362:	2b00      	cmp	r3, #0
 8001364:	da0b      	bge.n	800137e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001366:	4b09      	ldr	r3, [pc, #36]	; (800138c <HAL_FLASH_Unlock+0x38>)
 8001368:	4a09      	ldr	r2, [pc, #36]	; (8001390 <HAL_FLASH_Unlock+0x3c>)
 800136a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800136c:	4b07      	ldr	r3, [pc, #28]	; (800138c <HAL_FLASH_Unlock+0x38>)
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <HAL_FLASH_Unlock+0x40>)
 8001370:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001372:	4b06      	ldr	r3, [pc, #24]	; (800138c <HAL_FLASH_Unlock+0x38>)
 8001374:	691b      	ldr	r3, [r3, #16]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da01      	bge.n	800137e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800137e:	79fb      	ldrb	r3, [r7, #7]
}
 8001380:	4618      	mov	r0, r3
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	40023c00 	.word	0x40023c00
 8001390:	45670123 	.word	0x45670123
 8001394:	cdef89ab 	.word	0xcdef89ab

08001398 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <HAL_FLASH_Lock+0x1c>)
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	4a04      	ldr	r2, [pc, #16]	; (80013b4 <HAL_FLASH_Lock+0x1c>)
 80013a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80013a6:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80013a8:	2300      	movs	r3, #0
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	40023c00 	.word	0x40023c00

080013b8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <FLASH_WaitForLastOperation+0x78>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80013ca:	f7ff fddf 	bl	8000f8c <HAL_GetTick>
 80013ce:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013d0:	e010      	b.n	80013f4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013d8:	d00c      	beq.n	80013f4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d007      	beq.n	80013f0 <FLASH_WaitForLastOperation+0x38>
 80013e0:	f7ff fdd4 	bl	8000f8c <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	429a      	cmp	r2, r3
 80013ee:	d201      	bcs.n	80013f4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e019      	b.n	8001428 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <FLASH_WaitForLastOperation+0x7c>)
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1e8      	bne.n	80013d2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <FLASH_WaitForLastOperation+0x7c>)
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	f003 0301 	and.w	r3, r3, #1
 8001408:	2b00      	cmp	r3, #0
 800140a:	d002      	beq.n	8001412 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800140c:	4b09      	ldr	r3, [pc, #36]	; (8001434 <FLASH_WaitForLastOperation+0x7c>)
 800140e:	2201      	movs	r2, #1
 8001410:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001412:	4b08      	ldr	r3, [pc, #32]	; (8001434 <FLASH_WaitForLastOperation+0x7c>)
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d003      	beq.n	8001426 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800141e:	f000 f8a5 	bl	800156c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001426:	2300      	movs	r3, #0
  
}  
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000228 	.word	0x20000228
 8001434:	40023c00 	.word	0x40023c00

08001438 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001444:	4b14      	ldr	r3, [pc, #80]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	4a13      	ldr	r2, [pc, #76]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 800144a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800144e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001450:	4b11      	ldr	r3, [pc, #68]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 8001452:	691b      	ldr	r3, [r3, #16]
 8001454:	4a10      	ldr	r2, [pc, #64]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 8001456:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800145a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 800145e:	691b      	ldr	r3, [r3, #16]
 8001460:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <FLASH_Program_DoubleWord+0x60>)
 8001462:	f043 0301 	orr.w	r3, r3, #1
 8001466:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800146e:	f3bf 8f6f 	isb	sy
}
 8001472:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001474:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001478:	f04f 0200 	mov.w	r2, #0
 800147c:	f04f 0300 	mov.w	r3, #0
 8001480:	000a      	movs	r2, r1
 8001482:	2300      	movs	r3, #0
 8001484:	68f9      	ldr	r1, [r7, #12]
 8001486:	3104      	adds	r1, #4
 8001488:	4613      	mov	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
}
 800148c:	bf00      	nop
 800148e:	3714      	adds	r7, #20
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	40023c00 	.word	0x40023c00

0800149c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014a6:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <FLASH_Program_Word+0x40>)
 80014a8:	691b      	ldr	r3, [r3, #16]
 80014aa:	4a0c      	ldr	r2, [pc, #48]	; (80014dc <FLASH_Program_Word+0x40>)
 80014ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80014b2:	4b0a      	ldr	r3, [pc, #40]	; (80014dc <FLASH_Program_Word+0x40>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	4a09      	ldr	r2, [pc, #36]	; (80014dc <FLASH_Program_Word+0x40>)
 80014b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <FLASH_Program_Word+0x40>)
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4a06      	ldr	r2, [pc, #24]	; (80014dc <FLASH_Program_Word+0x40>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	601a      	str	r2, [r3, #0]
}
 80014d0:	bf00      	nop
 80014d2:	370c      	adds	r7, #12
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	460b      	mov	r3, r1
 80014ea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014ec:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 80014ee:	691b      	ldr	r3, [r3, #16]
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 80014f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014f6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80014f8:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a09      	ldr	r2, [pc, #36]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 80014fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001502:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001504:	4b07      	ldr	r3, [pc, #28]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 8001506:	691b      	ldr	r3, [r3, #16]
 8001508:	4a06      	ldr	r2, [pc, #24]	; (8001524 <FLASH_Program_HalfWord+0x44>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	887a      	ldrh	r2, [r7, #2]
 8001514:	801a      	strh	r2, [r3, #0]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40023c00 	.word	0x40023c00

08001528 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <FLASH_Program_Byte+0x40>)
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <FLASH_Program_Byte+0x40>)
 800153a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800153e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <FLASH_Program_Byte+0x40>)
 8001542:	4a09      	ldr	r2, [pc, #36]	; (8001568 <FLASH_Program_Byte+0x40>)
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001548:	4b07      	ldr	r3, [pc, #28]	; (8001568 <FLASH_Program_Byte+0x40>)
 800154a:	691b      	ldr	r3, [r3, #16]
 800154c:	4a06      	ldr	r2, [pc, #24]	; (8001568 <FLASH_Program_Byte+0x40>)
 800154e:	f043 0301 	orr.w	r3, r3, #1
 8001552:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	78fa      	ldrb	r2, [r7, #3]
 8001558:	701a      	strb	r2, [r3, #0]
}
 800155a:	bf00      	nop
 800155c:	370c      	adds	r7, #12
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	40023c00 	.word	0x40023c00

0800156c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001570:	4b2f      	ldr	r3, [pc, #188]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	d008      	beq.n	800158e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 800157e:	69db      	ldr	r3, [r3, #28]
 8001580:	f043 0310 	orr.w	r3, r3, #16
 8001584:	4a2b      	ldr	r2, [pc, #172]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 8001586:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 800158a:	2210      	movs	r2, #16
 800158c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800158e:	4b28      	ldr	r3, [pc, #160]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f003 0320 	and.w	r3, r3, #32
 8001596:	2b00      	cmp	r3, #0
 8001598:	d008      	beq.n	80015ac <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800159a:	4b26      	ldr	r3, [pc, #152]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	4a24      	ldr	r2, [pc, #144]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015a4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80015a6:	4b22      	ldr	r3, [pc, #136]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015a8:	2220      	movs	r2, #32
 80015aa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80015ac:	4b20      	ldr	r3, [pc, #128]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d008      	beq.n	80015ca <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	4a1c      	ldr	r2, [pc, #112]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80015c4:	4b1a      	ldr	r3, [pc, #104]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015c6:	2240      	movs	r2, #64	; 0x40
 80015c8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015d8:	69db      	ldr	r3, [r3, #28]
 80015da:	f043 0302 	orr.w	r3, r3, #2
 80015de:	4a15      	ldr	r2, [pc, #84]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015e0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80015e2:	4b13      	ldr	r3, [pc, #76]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015e4:	2280      	movs	r2, #128	; 0x80
 80015e6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80015e8:	4b11      	ldr	r3, [pc, #68]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d009      	beq.n	8001608 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	4a0d      	ldr	r2, [pc, #52]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 80015fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 8001602:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001606:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001608:	4b09      	ldr	r3, [pc, #36]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001614:	4b07      	ldr	r3, [pc, #28]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 8001616:	69db      	ldr	r3, [r3, #28]
 8001618:	f043 0320 	orr.w	r3, r3, #32
 800161c:	4a05      	ldr	r2, [pc, #20]	; (8001634 <FLASH_SetErrorCode+0xc8>)
 800161e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001620:	4b03      	ldr	r3, [pc, #12]	; (8001630 <FLASH_SetErrorCode+0xc4>)
 8001622:	2202      	movs	r2, #2
 8001624:	60da      	str	r2, [r3, #12]
  }
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	40023c00 	.word	0x40023c00
 8001634:	20000228 	.word	0x20000228

08001638 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b084      	sub	sp, #16
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001642:	2301      	movs	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001646:	2300      	movs	r3, #0
 8001648:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800164a:	4b31      	ldr	r3, [pc, #196]	; (8001710 <HAL_FLASHEx_Erase+0xd8>)
 800164c:	7e1b      	ldrb	r3, [r3, #24]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d101      	bne.n	8001656 <HAL_FLASHEx_Erase+0x1e>
 8001652:	2302      	movs	r3, #2
 8001654:	e058      	b.n	8001708 <HAL_FLASHEx_Erase+0xd0>
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_FLASHEx_Erase+0xd8>)
 8001658:	2201      	movs	r2, #1
 800165a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800165c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001660:	f7ff feaa 	bl	80013b8 <FLASH_WaitForLastOperation>
 8001664:	4603      	mov	r3, r0
 8001666:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d148      	bne.n	8001700 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	f04f 32ff 	mov.w	r2, #4294967295
 8001674:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d115      	bne.n	80016aa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	b2da      	uxtb	r2, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	4619      	mov	r1, r3
 800168a:	4610      	mov	r0, r2
 800168c:	f000 f844 	bl	8001718 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001690:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001694:	f7ff fe90 	bl	80013b8 <FLASH_WaitForLastOperation>
 8001698:	4603      	mov	r3, r0
 800169a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800169c:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_FLASHEx_Erase+0xdc>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	4a1c      	ldr	r2, [pc, #112]	; (8001714 <HAL_FLASHEx_Erase+0xdc>)
 80016a2:	f023 0304 	bic.w	r3, r3, #4
 80016a6:	6113      	str	r3, [r2, #16]
 80016a8:	e028      	b.n	80016fc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	60bb      	str	r3, [r7, #8]
 80016b0:	e01c      	b.n	80016ec <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4619      	mov	r1, r3
 80016ba:	68b8      	ldr	r0, [r7, #8]
 80016bc:	f000 f850 	bl	8001760 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016c0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016c4:	f7ff fe78 	bl	80013b8 <FLASH_WaitForLastOperation>
 80016c8:	4603      	mov	r3, r0
 80016ca:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80016cc:	4b11      	ldr	r3, [pc, #68]	; (8001714 <HAL_FLASHEx_Erase+0xdc>)
 80016ce:	691b      	ldr	r3, [r3, #16]
 80016d0:	4a10      	ldr	r2, [pc, #64]	; (8001714 <HAL_FLASHEx_Erase+0xdc>)
 80016d2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80016d6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80016d8:	7bfb      	ldrb	r3, [r7, #15]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d003      	beq.n	80016e6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	68ba      	ldr	r2, [r7, #8]
 80016e2:	601a      	str	r2, [r3, #0]
          break;
 80016e4:	e00a      	b.n	80016fc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	3301      	adds	r3, #1
 80016ea:	60bb      	str	r3, [r7, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	4413      	add	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d3da      	bcc.n	80016b2 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80016fc:	f000 f878 	bl	80017f0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <HAL_FLASHEx_Erase+0xd8>)
 8001702:	2200      	movs	r2, #0
 8001704:	761a      	strb	r2, [r3, #24]

  return status;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000228 	.word	0x20000228
 8001714:	40023c00 	.word	0x40023c00

08001718 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	6039      	str	r1, [r7, #0]
 8001722:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001724:	4b0d      	ldr	r3, [pc, #52]	; (800175c <FLASH_MassErase+0x44>)
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	4a0c      	ldr	r2, [pc, #48]	; (800175c <FLASH_MassErase+0x44>)
 800172a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800172e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001730:	4b0a      	ldr	r3, [pc, #40]	; (800175c <FLASH_MassErase+0x44>)
 8001732:	691b      	ldr	r3, [r3, #16]
 8001734:	4a09      	ldr	r2, [pc, #36]	; (800175c <FLASH_MassErase+0x44>)
 8001736:	f043 0304 	orr.w	r3, r3, #4
 800173a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800173c:	4b07      	ldr	r3, [pc, #28]	; (800175c <FLASH_MassErase+0x44>)
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	79fb      	ldrb	r3, [r7, #7]
 8001742:	021b      	lsls	r3, r3, #8
 8001744:	4313      	orrs	r3, r2
 8001746:	4a05      	ldr	r2, [pc, #20]	; (800175c <FLASH_MassErase+0x44>)
 8001748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800174c:	6113      	str	r3, [r2, #16]
}
 800174e:	bf00      	nop
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00

08001760 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800176c:	2300      	movs	r3, #0
 800176e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001770:	78fb      	ldrb	r3, [r7, #3]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d102      	bne.n	800177c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e010      	b.n	800179e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d103      	bne.n	800178a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001782:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e009      	b.n	800179e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800178a:	78fb      	ldrb	r3, [r7, #3]
 800178c:	2b02      	cmp	r3, #2
 800178e:	d103      	bne.n	8001798 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001790:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001794:	60fb      	str	r3, [r7, #12]
 8001796:	e002      	b.n	800179e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001798:	f44f 7340 	mov.w	r3, #768	; 0x300
 800179c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	4a12      	ldr	r2, [pc, #72]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017ac:	691a      	ldr	r2, [r3, #16]
 80017ae:	490f      	ldr	r1, [pc, #60]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017b6:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017b8:	691b      	ldr	r3, [r3, #16]
 80017ba:	4a0c      	ldr	r2, [pc, #48]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017bc:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80017c0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017c4:	691a      	ldr	r2, [r3, #16]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	00db      	lsls	r3, r3, #3
 80017ca:	4313      	orrs	r3, r2
 80017cc:	4a07      	ldr	r2, [pc, #28]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017ce:	f043 0302 	orr.w	r3, r3, #2
 80017d2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80017d4:	4b05      	ldr	r3, [pc, #20]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017d6:	691b      	ldr	r3, [r3, #16]
 80017d8:	4a04      	ldr	r2, [pc, #16]	; (80017ec <FLASH_Erase_Sector+0x8c>)
 80017da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017de:	6113      	str	r3, [r2, #16]
}
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	40023c00 	.word	0x40023c00

080017f0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80017f4:	4b20      	ldr	r3, [pc, #128]	; (8001878 <FLASH_FlushCaches+0x88>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d017      	beq.n	8001830 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001800:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a1c      	ldr	r2, [pc, #112]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001806:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800180a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800180c:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <FLASH_FlushCaches+0x88>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a19      	ldr	r2, [pc, #100]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001812:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b17      	ldr	r3, [pc, #92]	; (8001878 <FLASH_FlushCaches+0x88>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a16      	ldr	r2, [pc, #88]	; (8001878 <FLASH_FlushCaches+0x88>)
 800181e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001822:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001824:	4b14      	ldr	r3, [pc, #80]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a13      	ldr	r2, [pc, #76]	; (8001878 <FLASH_FlushCaches+0x88>)
 800182a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800182e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001838:	2b00      	cmp	r3, #0
 800183a:	d017      	beq.n	800186c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800183c:	4b0e      	ldr	r3, [pc, #56]	; (8001878 <FLASH_FlushCaches+0x88>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0d      	ldr	r2, [pc, #52]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001842:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001846:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001848:	4b0b      	ldr	r3, [pc, #44]	; (8001878 <FLASH_FlushCaches+0x88>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0a      	ldr	r2, [pc, #40]	; (8001878 <FLASH_FlushCaches+0x88>)
 800184e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001852:	6013      	str	r3, [r2, #0]
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a07      	ldr	r2, [pc, #28]	; (8001878 <FLASH_FlushCaches+0x88>)
 800185a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800185e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001860:	4b05      	ldr	r3, [pc, #20]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <FLASH_FlushCaches+0x88>)
 8001866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800186a:	6013      	str	r3, [r2, #0]
  }
}
 800186c:	bf00      	nop
 800186e:	46bd      	mov	sp, r7
 8001870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00

0800187c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800187c:	b480      	push	{r7}
 800187e:	b089      	sub	sp, #36	; 0x24
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001886:	2300      	movs	r3, #0
 8001888:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800188a:	2300      	movs	r3, #0
 800188c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800188e:	2300      	movs	r3, #0
 8001890:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
 8001896:	e159      	b.n	8001b4c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001898:	2201      	movs	r2, #1
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	4013      	ands	r3, r2
 80018aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018ac:	693a      	ldr	r2, [r7, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	f040 8148 	bne.w	8001b46 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d005      	beq.n	80018ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d130      	bne.n	8001930 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	68da      	ldr	r2, [r3, #12]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001904:	2201      	movs	r2, #1
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	43db      	mvns	r3, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4013      	ands	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	091b      	lsrs	r3, r3, #4
 800191a:	f003 0201 	and.w	r2, r3, #1
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	fa02 f303 	lsl.w	r3, r2, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4313      	orrs	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69ba      	ldr	r2, [r7, #24]
 800192e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f003 0303 	and.w	r3, r3, #3
 8001938:	2b03      	cmp	r3, #3
 800193a:	d017      	beq.n	800196c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	69ba      	ldr	r2, [r7, #24]
 8001950:	4013      	ands	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b02      	cmp	r3, #2
 8001976:	d123      	bne.n	80019c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	08da      	lsrs	r2, r3, #3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3208      	adds	r2, #8
 8001980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	220f      	movs	r2, #15
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	691a      	ldr	r2, [r3, #16]
 80019a0:	69fb      	ldr	r3, [r7, #28]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	08da      	lsrs	r2, r3, #3
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3208      	adds	r2, #8
 80019ba:	69b9      	ldr	r1, [r7, #24]
 80019bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	2203      	movs	r2, #3
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	f000 80a2 	beq.w	8001b46 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	60fb      	str	r3, [r7, #12]
 8001a06:	4b57      	ldr	r3, [pc, #348]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0a:	4a56      	ldr	r2, [pc, #344]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6453      	str	r3, [r2, #68]	; 0x44
 8001a12:	4b54      	ldr	r3, [pc, #336]	; (8001b64 <HAL_GPIO_Init+0x2e8>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a1e:	4a52      	ldr	r2, [pc, #328]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	3302      	adds	r3, #2
 8001a26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	220f      	movs	r2, #15
 8001a36:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	69ba      	ldr	r2, [r7, #24]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a49      	ldr	r2, [pc, #292]	; (8001b6c <HAL_GPIO_Init+0x2f0>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d019      	beq.n	8001a7e <HAL_GPIO_Init+0x202>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	4a48      	ldr	r2, [pc, #288]	; (8001b70 <HAL_GPIO_Init+0x2f4>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_GPIO_Init+0x1fe>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_GPIO_Init+0x2f8>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d00d      	beq.n	8001a76 <HAL_GPIO_Init+0x1fa>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <HAL_GPIO_Init+0x2fc>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d007      	beq.n	8001a72 <HAL_GPIO_Init+0x1f6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a45      	ldr	r2, [pc, #276]	; (8001b7c <HAL_GPIO_Init+0x300>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d101      	bne.n	8001a6e <HAL_GPIO_Init+0x1f2>
 8001a6a:	2304      	movs	r3, #4
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a6e:	2307      	movs	r3, #7
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x204>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	; (8001b68 <HAL_GPIO_Init+0x2ec>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9e:	4b38      	ldr	r3, [pc, #224]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac2:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aec:	4a24      	ldr	r2, [pc, #144]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af2:	4b23      	ldr	r3, [pc, #140]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b16:	4a1a      	ldr	r2, [pc, #104]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1c:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b40:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <HAL_GPIO_Init+0x304>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f aea2 	bls.w	8001898 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	; 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40013c00 	.word	0x40013c00

08001b84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	807b      	strh	r3, [r7, #2]
 8001b90:	4613      	mov	r3, r2
 8001b92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001b94:	787b      	ldrb	r3, [r7, #1]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d003      	beq.n	8001ba2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9a:	887a      	ldrh	r2, [r7, #2]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ba0:	e003      	b.n	8001baa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ba2:	887b      	ldrh	r3, [r7, #2]
 8001ba4:	041a      	lsls	r2, r3, #16
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	619a      	str	r2, [r3, #24]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001bb6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bb8:	b08f      	sub	sp, #60	; 0x3c
 8001bba:	af0a      	add	r7, sp, #40	; 0x28
 8001bbc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d101      	bne.n	8001bc8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e10f      	b.n	8001de8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d106      	bne.n	8001be8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f005 fe56 	bl	8007894 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2203      	movs	r2, #3
 8001bec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2200      	movs	r2, #0
 8001c00:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f002 f865 	bl	8003cd6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	603b      	str	r3, [r7, #0]
 8001c12:	687e      	ldr	r6, [r7, #4]
 8001c14:	466d      	mov	r5, sp
 8001c16:	f106 0410 	add.w	r4, r6, #16
 8001c1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c26:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c2a:	1d33      	adds	r3, r6, #4
 8001c2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c2e:	6838      	ldr	r0, [r7, #0]
 8001c30:	f001 ff3c 	bl	8003aac <USB_CoreInit>
 8001c34:	4603      	mov	r3, r0
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d005      	beq.n	8001c46 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2202      	movs	r2, #2
 8001c3e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0d0      	b.n	8001de8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f002 f853 	bl	8003cf8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c52:	2300      	movs	r3, #0
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e04a      	b.n	8001cee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001c58:	7bfa      	ldrb	r2, [r7, #15]
 8001c5a:	6879      	ldr	r1, [r7, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	440b      	add	r3, r1
 8001c66:	333d      	adds	r3, #61	; 0x3d
 8001c68:	2201      	movs	r2, #1
 8001c6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001c6c:	7bfa      	ldrb	r2, [r7, #15]
 8001c6e:	6879      	ldr	r1, [r7, #4]
 8001c70:	4613      	mov	r3, r2
 8001c72:	00db      	lsls	r3, r3, #3
 8001c74:	4413      	add	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	440b      	add	r3, r1
 8001c7a:	333c      	adds	r3, #60	; 0x3c
 8001c7c:	7bfa      	ldrb	r2, [r7, #15]
 8001c7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001c80:	7bfa      	ldrb	r2, [r7, #15]
 8001c82:	7bfb      	ldrb	r3, [r7, #15]
 8001c84:	b298      	uxth	r0, r3
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	3344      	adds	r3, #68	; 0x44
 8001c94:	4602      	mov	r2, r0
 8001c96:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	4413      	add	r3, r2
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	440b      	add	r3, r1
 8001ca6:	3340      	adds	r3, #64	; 0x40
 8001ca8:	2200      	movs	r2, #0
 8001caa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	4413      	add	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	3348      	adds	r3, #72	; 0x48
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001cc0:	7bfa      	ldrb	r2, [r7, #15]
 8001cc2:	6879      	ldr	r1, [r7, #4]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	4413      	add	r3, r2
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	440b      	add	r3, r1
 8001cce:	334c      	adds	r3, #76	; 0x4c
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	6879      	ldr	r1, [r7, #4]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4413      	add	r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	440b      	add	r3, r1
 8001ce2:	3354      	adds	r3, #84	; 0x54
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	3301      	adds	r3, #1
 8001cec:	73fb      	strb	r3, [r7, #15]
 8001cee:	7bfa      	ldrb	r2, [r7, #15]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3af      	bcc.n	8001c58 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	73fb      	strb	r3, [r7, #15]
 8001cfc:	e044      	b.n	8001d88 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001cfe:	7bfa      	ldrb	r2, [r7, #15]
 8001d00:	6879      	ldr	r1, [r7, #4]
 8001d02:	4613      	mov	r3, r2
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001d14:	7bfa      	ldrb	r2, [r7, #15]
 8001d16:	6879      	ldr	r1, [r7, #4]
 8001d18:	4613      	mov	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	440b      	add	r3, r1
 8001d22:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001d26:	7bfa      	ldrb	r2, [r7, #15]
 8001d28:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001d2a:	7bfa      	ldrb	r2, [r7, #15]
 8001d2c:	6879      	ldr	r1, [r7, #4]
 8001d2e:	4613      	mov	r3, r2
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	440b      	add	r3, r1
 8001d38:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	6879      	ldr	r1, [r7, #4]
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	440b      	add	r3, r1
 8001d4e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001d56:	7bfa      	ldrb	r2, [r7, #15]
 8001d58:	6879      	ldr	r1, [r7, #4]
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	00db      	lsls	r3, r3, #3
 8001d5e:	4413      	add	r3, r2
 8001d60:	009b      	lsls	r3, r3, #2
 8001d62:	440b      	add	r3, r1
 8001d64:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001d68:	2200      	movs	r2, #0
 8001d6a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001d6c:	7bfa      	ldrb	r2, [r7, #15]
 8001d6e:	6879      	ldr	r1, [r7, #4]
 8001d70:	4613      	mov	r3, r2
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	440b      	add	r3, r1
 8001d7a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d82:	7bfb      	ldrb	r3, [r7, #15]
 8001d84:	3301      	adds	r3, #1
 8001d86:	73fb      	strb	r3, [r7, #15]
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3b5      	bcc.n	8001cfe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	603b      	str	r3, [r7, #0]
 8001d98:	687e      	ldr	r6, [r7, #4]
 8001d9a:	466d      	mov	r5, sp
 8001d9c:	f106 0410 	add.w	r4, r6, #16
 8001da0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001da6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001da8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001dac:	e885 0003 	stmia.w	r5, {r0, r1}
 8001db0:	1d33      	adds	r3, r6, #4
 8001db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f001 ffeb 	bl	8003d90 <USB_DevInit>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2202      	movs	r2, #2
 8001dc4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e00d      	b.n	8001de8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 f93a 	bl	800505a <USB_DevDisconnect>

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001df0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d101      	bne.n	8001e0c <HAL_PCD_Start+0x1c>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	e020      	b.n	8001e4e <HAL_PCD_Start+0x5e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d109      	bne.n	8001e30 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d005      	beq.n	8001e30 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e28:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4618      	mov	r0, r3
 8001e36:	f001 ff3d 	bl	8003cb4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f003 f8ea 	bl	8005018 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001e56:	b590      	push	{r4, r7, lr}
 8001e58:	b08d      	sub	sp, #52	; 0x34
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e64:	6a3b      	ldr	r3, [r7, #32]
 8001e66:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 f9a8 	bl	80051c2 <USB_GetMode>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f040 848a 	bne.w	800278e <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f003 f90c 	bl	800509c <USB_ReadInterrupts>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	f000 8480 	beq.w	800278c <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	0a1b      	lsrs	r3, r3, #8
 8001e96:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f003 f8f9 	bl	800509c <USB_ReadInterrupts>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	f003 0302 	and.w	r3, r3, #2
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d107      	bne.n	8001ec4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	695a      	ldr	r2, [r3, #20]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f002 0202 	and.w	r2, r2, #2
 8001ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 f8e7 	bl	800509c <USB_ReadInterrupts>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	f003 0310 	and.w	r3, r3, #16
 8001ed4:	2b10      	cmp	r3, #16
 8001ed6:	d161      	bne.n	8001f9c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0210 	bic.w	r2, r2, #16
 8001ee6:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001ee8:	6a3b      	ldr	r3, [r7, #32]
 8001eea:	6a1b      	ldr	r3, [r3, #32]
 8001eec:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 020f 	and.w	r2, r3, #15
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	00db      	lsls	r3, r3, #3
 8001ef8:	4413      	add	r3, r2
 8001efa:	009b      	lsls	r3, r3, #2
 8001efc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	3304      	adds	r3, #4
 8001f06:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	0c5b      	lsrs	r3, r3, #17
 8001f0c:	f003 030f 	and.w	r3, r3, #15
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d124      	bne.n	8001f5e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d035      	beq.n	8001f8c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	091b      	lsrs	r3, r3, #4
 8001f28:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001f2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	461a      	mov	r2, r3
 8001f32:	6a38      	ldr	r0, [r7, #32]
 8001f34:	f002 ff1e 	bl	8004d74 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	091b      	lsrs	r3, r3, #4
 8001f40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f44:	441a      	add	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	6a1a      	ldr	r2, [r3, #32]
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	091b      	lsrs	r3, r3, #4
 8001f52:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f56:	441a      	add	r2, r3
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	621a      	str	r2, [r3, #32]
 8001f5c:	e016      	b.n	8001f8c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	0c5b      	lsrs	r3, r3, #17
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	2b06      	cmp	r3, #6
 8001f68:	d110      	bne.n	8001f8c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f70:	2208      	movs	r2, #8
 8001f72:	4619      	mov	r1, r3
 8001f74:	6a38      	ldr	r0, [r7, #32]
 8001f76:	f002 fefd 	bl	8004d74 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	6a1a      	ldr	r2, [r3, #32]
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001f86:	441a      	add	r2, r3
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	699a      	ldr	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0210 	orr.w	r2, r2, #16
 8001f9a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f003 f87b 	bl	800509c <USB_ReadInterrupts>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001fb0:	f040 80a7 	bne.w	8002102 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f003 f880 	bl	80050c2 <USB_ReadDevAllOutEpInterrupt>
 8001fc2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001fc4:	e099      	b.n	80020fa <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001fc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc8:	f003 0301 	and.w	r3, r3, #1
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 808e 	beq.w	80020ee <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fd8:	b2d2      	uxtb	r2, r2
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f003 f8a4 	bl	800512a <USB_ReadDevOutEPInterrupt>
 8001fe2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00c      	beq.n	8002008 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff0:	015a      	lsls	r2, r3, #5
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	4413      	add	r3, r2
 8001ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fec2 	bl	8002d8c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00c      	beq.n	800202c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2308      	movs	r3, #8
 8002022:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f000 ff98 	bl	8002f5c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	015a      	lsls	r2, r3, #5
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	4413      	add	r3, r2
 800203e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002042:	461a      	mov	r2, r3
 8002044:	2310      	movs	r3, #16
 8002046:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d030      	beq.n	80020b4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002052:	6a3b      	ldr	r3, [r7, #32]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205a:	2b80      	cmp	r3, #128	; 0x80
 800205c:	d109      	bne.n	8002072 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	69fa      	ldr	r2, [r7, #28]
 8002068:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800206c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002070:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	4413      	add	r3, r2
 8002084:	3304      	adds	r3, #4
 8002086:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	78db      	ldrb	r3, [r3, #3]
 800208c:	2b01      	cmp	r3, #1
 800208e:	d108      	bne.n	80020a2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2200      	movs	r2, #0
 8002094:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	b2db      	uxtb	r3, r3
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f005 fcf5 	bl	8007a8c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ae:	461a      	mov	r2, r3
 80020b0:	2302      	movs	r3, #2
 80020b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f003 0320 	and.w	r3, r3, #32
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d008      	beq.n	80020d0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c0:	015a      	lsls	r2, r3, #5
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	4413      	add	r3, r2
 80020c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020ca:	461a      	mov	r2, r3
 80020cc:	2320      	movs	r3, #32
 80020ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d009      	beq.n	80020ee <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	015a      	lsls	r2, r3, #5
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e6:	461a      	mov	r2, r3
 80020e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	3301      	adds	r3, #1
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80020f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020f6:	085b      	lsrs	r3, r3, #1
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80020fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f47f af62 	bne.w	8001fc6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f002 ffc8 	bl	800509c <USB_ReadInterrupts>
 800210c:	4603      	mov	r3, r0
 800210e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002112:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002116:	f040 80db 	bne.w	80022d0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f002 ffe9 	bl	80050f6 <USB_ReadDevAllInEpInterrupt>
 8002124:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002126:	2300      	movs	r3, #0
 8002128:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800212a:	e0cd      	b.n	80022c8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800212c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	2b00      	cmp	r3, #0
 8002134:	f000 80c2 	beq.w	80022bc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800213e:	b2d2      	uxtb	r2, r2
 8002140:	4611      	mov	r1, r2
 8002142:	4618      	mov	r0, r3
 8002144:	f003 f80f 	bl	8005166 <USB_ReadDevInEPInterrupt>
 8002148:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	2b00      	cmp	r3, #0
 8002152:	d057      	beq.n	8002204 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	2201      	movs	r2, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	43db      	mvns	r3, r3
 800216e:	69f9      	ldr	r1, [r7, #28]
 8002170:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002174:	4013      	ands	r3, r2
 8002176:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	015a      	lsls	r2, r3, #5
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	4413      	add	r3, r2
 8002180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002184:	461a      	mov	r2, r3
 8002186:	2301      	movs	r3, #1
 8002188:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d132      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002192:	6879      	ldr	r1, [r7, #4]
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	4613      	mov	r3, r2
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4413      	add	r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	440b      	add	r3, r1
 80021a0:	334c      	adds	r3, #76	; 0x4c
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	4403      	add	r3, r0
 80021b2:	3348      	adds	r3, #72	; 0x48
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4419      	add	r1, r3
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	4403      	add	r3, r0
 80021c6:	334c      	adds	r3, #76	; 0x4c
 80021c8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d113      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x3a2>
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d4:	4613      	mov	r3, r2
 80021d6:	00db      	lsls	r3, r3, #3
 80021d8:	4413      	add	r3, r2
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	440b      	add	r3, r1
 80021de:	3354      	adds	r3, #84	; 0x54
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d108      	bne.n	80021f8 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80021f0:	461a      	mov	r2, r3
 80021f2:	2101      	movs	r1, #1
 80021f4:	f003 f816 	bl	8005224 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	4619      	mov	r1, r3
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f005 fbc9 	bl	8007996 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b00      	cmp	r3, #0
 800220c:	d008      	beq.n	8002220 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	015a      	lsls	r2, r3, #5
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	4413      	add	r3, r2
 8002216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221a:	461a      	mov	r2, r3
 800221c:	2308      	movs	r3, #8
 800221e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f003 0310 	and.w	r3, r3, #16
 8002226:	2b00      	cmp	r3, #0
 8002228:	d008      	beq.n	800223c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800222a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222c:	015a      	lsls	r2, r3, #5
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	4413      	add	r3, r2
 8002232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002236:	461a      	mov	r2, r3
 8002238:	2310      	movs	r3, #16
 800223a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d008      	beq.n	8002258 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002248:	015a      	lsls	r2, r3, #5
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	4413      	add	r3, r2
 800224e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002252:	461a      	mov	r2, r3
 8002254:	2340      	movs	r3, #64	; 0x40
 8002256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	f003 0302 	and.w	r3, r3, #2
 800225e:	2b00      	cmp	r3, #0
 8002260:	d023      	beq.n	80022aa <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002264:	6a38      	ldr	r0, [r7, #32]
 8002266:	f001 fef7 	bl	8004058 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800226a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	3338      	adds	r3, #56	; 0x38
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	3304      	adds	r3, #4
 800227c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	78db      	ldrb	r3, [r3, #3]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d108      	bne.n	8002298 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	2200      	movs	r2, #0
 800228a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800228c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800228e:	b2db      	uxtb	r3, r3
 8002290:	4619      	mov	r1, r3
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f005 fc0c 	bl	8007ab0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	015a      	lsls	r2, r3, #5
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	4413      	add	r3, r2
 80022a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80022a4:	461a      	mov	r2, r3
 80022a6:	2302      	movs	r3, #2
 80022a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d003      	beq.n	80022bc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80022b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f000 fcdb 	bl	8002c72 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	3301      	adds	r3, #1
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	085b      	lsrs	r3, r3, #1
 80022c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80022c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	f47f af2e 	bne.w	800212c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f002 fee1 	bl	800509c <USB_ReadInterrupts>
 80022da:	4603      	mov	r3, r0
 80022dc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80022e4:	d122      	bne.n	800232c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002300:	2b01      	cmp	r3, #1
 8002302:	d108      	bne.n	8002316 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800230c:	2100      	movs	r1, #0
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f000 fec2 	bl	8003098 <HAL_PCDEx_LPM_Callback>
 8002314:	e002      	b.n	800231c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002316:	6878      	ldr	r0, [r7, #4]
 8002318:	f005 fbaa 	bl	8007a70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695a      	ldr	r2, [r3, #20]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800232a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f002 feb3 	bl	800509c <USB_ReadInterrupts>
 8002336:	4603      	mov	r3, r0
 8002338:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800233c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002340:	d112      	bne.n	8002368 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b01      	cmp	r3, #1
 8002350:	d102      	bne.n	8002358 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	f005 fb66 	bl	8007a24 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	695a      	ldr	r2, [r3, #20]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002366:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4618      	mov	r0, r3
 800236e:	f002 fe95 	bl	800509c <USB_ReadInterrupts>
 8002372:	4603      	mov	r3, r0
 8002374:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800237c:	f040 80b7 	bne.w	80024ee <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	69fa      	ldr	r2, [r7, #28]
 800238a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2110      	movs	r1, #16
 800239a:	4618      	mov	r0, r3
 800239c:	f001 fe5c 	bl	8004058 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80023a0:	2300      	movs	r3, #0
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	e046      	b.n	8002434 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80023a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023b2:	461a      	mov	r2, r3
 80023b4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023b8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80023ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023bc:	015a      	lsls	r2, r3, #5
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	4413      	add	r3, r2
 80023c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023ca:	0151      	lsls	r1, r2, #5
 80023cc:	69fa      	ldr	r2, [r7, #28]
 80023ce:	440a      	add	r2, r1
 80023d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80023d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80023d8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e6:	461a      	mov	r2, r3
 80023e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80023ec:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80023ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f0:	015a      	lsls	r2, r3, #5
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	4413      	add	r3, r2
 80023f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80023fe:	0151      	lsls	r1, r2, #5
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	440a      	add	r2, r1
 8002404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002408:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800240c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800240e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	69fb      	ldr	r3, [r7, #28]
 8002414:	4413      	add	r3, r2
 8002416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800241e:	0151      	lsls	r1, r2, #5
 8002420:	69fa      	ldr	r2, [r7, #28]
 8002422:	440a      	add	r2, r1
 8002424:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002428:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800242c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800242e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002430:	3301      	adds	r3, #1
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800243a:	429a      	cmp	r2, r3
 800243c:	d3b3      	bcc.n	80023a6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	69fa      	ldr	r2, [r7, #28]
 8002448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800244c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002450:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	2b00      	cmp	r3, #0
 8002458:	d016      	beq.n	8002488 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002464:	69fa      	ldr	r2, [r7, #28]
 8002466:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800246a:	f043 030b 	orr.w	r3, r3, #11
 800246e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002480:	f043 030b 	orr.w	r3, r3, #11
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	e015      	b.n	80024b4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002488:	69fb      	ldr	r3, [r7, #28]
 800248a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	69fa      	ldr	r2, [r7, #28]
 8002492:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002496:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800249a:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800249e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024ae:	f043 030b 	orr.w	r3, r3, #11
 80024b2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80024c6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80024d8:	461a      	mov	r2, r3
 80024da:	f002 fea3 	bl	8005224 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80024ec:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f002 fdd2 	bl	800509c <USB_ReadInterrupts>
 80024f8:	4603      	mov	r3, r0
 80024fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002502:	d124      	bne.n	800254e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4618      	mov	r0, r3
 800250a:	f002 fe68 	bl	80051de <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f001 fe1d 	bl	8004152 <USB_GetDevSpeed>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681c      	ldr	r4, [r3, #0]
 8002524:	f001 f9e8 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8002528:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800252e:	b2db      	uxtb	r3, r3
 8002530:	461a      	mov	r2, r3
 8002532:	4620      	mov	r0, r4
 8002534:	f001 fb1c 	bl	8003b70 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f005 fa54 	bl	80079e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	695a      	ldr	r2, [r3, #20]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800254c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f002 fda2 	bl	800509c <USB_ReadInterrupts>
 8002558:	4603      	mov	r3, r0
 800255a:	f003 0308 	and.w	r3, r3, #8
 800255e:	2b08      	cmp	r3, #8
 8002560:	d10a      	bne.n	8002578 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f005 fa31 	bl	80079ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	695a      	ldr	r2, [r3, #20]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f002 0208 	and.w	r2, r2, #8
 8002576:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fd8d 	bl	800509c <USB_ReadInterrupts>
 8002582:	4603      	mov	r3, r0
 8002584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002588:	2b80      	cmp	r3, #128	; 0x80
 800258a:	d122      	bne.n	80025d2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800258c:	6a3b      	ldr	r3, [r7, #32]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002594:	6a3b      	ldr	r3, [r7, #32]
 8002596:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002598:	2301      	movs	r3, #1
 800259a:	627b      	str	r3, [r7, #36]	; 0x24
 800259c:	e014      	b.n	80025c8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800259e:	6879      	ldr	r1, [r7, #4]
 80025a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025a2:	4613      	mov	r3, r2
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4413      	add	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d105      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fb27 	bl	8002c10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	3301      	adds	r3, #1
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d3e5      	bcc.n	800259e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f002 fd60 	bl	800509c <USB_ReadInterrupts>
 80025dc:	4603      	mov	r3, r0
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80025e6:	d13b      	bne.n	8002660 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e8:	2301      	movs	r3, #1
 80025ea:	627b      	str	r3, [r7, #36]	; 0x24
 80025ec:	e02b      	b.n	8002646 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	015a      	lsls	r2, r3, #5
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	4413      	add	r3, r2
 80025f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80025fe:	6879      	ldr	r1, [r7, #4]
 8002600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3340      	adds	r3, #64	; 0x40
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d115      	bne.n	8002640 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002614:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	da12      	bge.n	8002640 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800261e:	4613      	mov	r3, r2
 8002620:	00db      	lsls	r3, r3, #3
 8002622:	4413      	add	r3, r2
 8002624:	009b      	lsls	r3, r3, #2
 8002626:	440b      	add	r3, r1
 8002628:	333f      	adds	r3, #63	; 0x3f
 800262a:	2201      	movs	r2, #1
 800262c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	b2db      	uxtb	r3, r3
 8002632:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002636:	b2db      	uxtb	r3, r3
 8002638:	4619      	mov	r1, r3
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f000 fae8 	bl	8002c10 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	3301      	adds	r3, #1
 8002644:	627b      	str	r3, [r7, #36]	; 0x24
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800264c:	429a      	cmp	r2, r3
 800264e:	d3ce      	bcc.n	80025ee <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800265e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f002 fd19 	bl	800509c <USB_ReadInterrupts>
 800266a:	4603      	mov	r3, r0
 800266c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002674:	d155      	bne.n	8002722 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002676:	2301      	movs	r3, #1
 8002678:	627b      	str	r3, [r7, #36]	; 0x24
 800267a:	e045      	b.n	8002708 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800268c:	6879      	ldr	r1, [r7, #4]
 800268e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002690:	4613      	mov	r3, r2
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	440b      	add	r3, r1
 800269a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d12e      	bne.n	8002702 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026a4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	da2b      	bge.n	8002702 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80026b6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d121      	bne.n	8002702 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80026be:	6879      	ldr	r1, [r7, #4]
 80026c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80026e0:	6a3b      	ldr	r3, [r7, #32]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	69fa      	ldr	r2, [r7, #28]
 80026f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80026fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026fe:	6053      	str	r3, [r2, #4]
            break;
 8002700:	e007      	b.n	8002712 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	3301      	adds	r3, #1
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800270e:	429a      	cmp	r2, r3
 8002710:	d3b4      	bcc.n	800267c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002720:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fcb8 	bl	800509c <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002732:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002736:	d10a      	bne.n	800274e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f005 f9cb 	bl	8007ad4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800274c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f002 fca2 	bl	800509c <USB_ReadInterrupts>
 8002758:	4603      	mov	r3, r0
 800275a:	f003 0304 	and.w	r3, r3, #4
 800275e:	2b04      	cmp	r3, #4
 8002760:	d115      	bne.n	800278e <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800276a:	69bb      	ldr	r3, [r7, #24]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d002      	beq.n	800277a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f005 f9bb 	bl	8007af0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	6859      	ldr	r1, [r3, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	430a      	orrs	r2, r1
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	e000      	b.n	800278e <HAL_PCD_IRQHandler+0x938>
      return;
 800278c:	bf00      	nop
    }
  }
}
 800278e:	3734      	adds	r7, #52	; 0x34
 8002790:	46bd      	mov	sp, r7
 8002792:	bd90      	pop	{r4, r7, pc}

08002794 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d101      	bne.n	80027ae <HAL_PCD_SetAddress+0x1a>
 80027aa:	2302      	movs	r3, #2
 80027ac:	e013      	b.n	80027d6 <HAL_PCD_SetAddress+0x42>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	78fa      	ldrb	r2, [r7, #3]
 80027ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	4611      	mov	r1, r2
 80027c6:	4618      	mov	r0, r3
 80027c8:	f002 fc00 	bl	8004fcc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80027de:	b580      	push	{r7, lr}
 80027e0:	b084      	sub	sp, #16
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
 80027e6:	4608      	mov	r0, r1
 80027e8:	4611      	mov	r1, r2
 80027ea:	461a      	mov	r2, r3
 80027ec:	4603      	mov	r3, r0
 80027ee:	70fb      	strb	r3, [r7, #3]
 80027f0:	460b      	mov	r3, r1
 80027f2:	803b      	strh	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80027f8:	2300      	movs	r3, #0
 80027fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80027fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002800:	2b00      	cmp	r3, #0
 8002802:	da0f      	bge.n	8002824 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002804:	78fb      	ldrb	r3, [r7, #3]
 8002806:	f003 020f 	and.w	r2, r3, #15
 800280a:	4613      	mov	r3, r2
 800280c:	00db      	lsls	r3, r3, #3
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3338      	adds	r3, #56	; 0x38
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2201      	movs	r2, #1
 8002820:	705a      	strb	r2, [r3, #1]
 8002822:	e00f      	b.n	8002844 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002824:	78fb      	ldrb	r3, [r7, #3]
 8002826:	f003 020f 	and.w	r2, r3, #15
 800282a:	4613      	mov	r3, r2
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4413      	add	r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	4413      	add	r3, r2
 800283a:	3304      	adds	r3, #4
 800283c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2200      	movs	r2, #0
 8002842:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002844:	78fb      	ldrb	r3, [r7, #3]
 8002846:	f003 030f 	and.w	r3, r3, #15
 800284a:	b2da      	uxtb	r2, r3
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002850:	883a      	ldrh	r2, [r7, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	78ba      	ldrb	r2, [r7, #2]
 800285a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	785b      	ldrb	r3, [r3, #1]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d004      	beq.n	800286e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800286e:	78bb      	ldrb	r3, [r7, #2]
 8002870:	2b02      	cmp	r3, #2
 8002872:	d102      	bne.n	800287a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_PCD_EP_Open+0xaa>
 8002884:	2302      	movs	r3, #2
 8002886:	e00e      	b.n	80028a6 <HAL_PCD_EP_Open+0xc8>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68f9      	ldr	r1, [r7, #12]
 8002896:	4618      	mov	r0, r3
 8002898:	f001 fc80 	bl	800419c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80028a4:	7afb      	ldrb	r3, [r7, #11]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b084      	sub	sp, #16
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	6078      	str	r0, [r7, #4]
 80028b6:	460b      	mov	r3, r1
 80028b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80028ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	da0f      	bge.n	80028e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	78fb      	ldrb	r3, [r7, #3]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	3338      	adds	r3, #56	; 0x38
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	4413      	add	r3, r2
 80028d6:	3304      	adds	r3, #4
 80028d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2201      	movs	r2, #1
 80028de:	705a      	strb	r2, [r3, #1]
 80028e0:	e00f      	b.n	8002902 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028e2:	78fb      	ldrb	r3, [r7, #3]
 80028e4:	f003 020f 	and.w	r2, r3, #15
 80028e8:	4613      	mov	r3, r2
 80028ea:	00db      	lsls	r3, r3, #3
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	4413      	add	r3, r2
 80028f8:	3304      	adds	r3, #4
 80028fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	2200      	movs	r2, #0
 8002900:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002902:	78fb      	ldrb	r3, [r7, #3]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	b2da      	uxtb	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_PCD_EP_Close+0x6e>
 8002918:	2302      	movs	r3, #2
 800291a:	e00e      	b.n	800293a <HAL_PCD_EP_Close+0x8c>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	68f9      	ldr	r1, [r7, #12]
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fcbe 	bl	80042ac <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b086      	sub	sp, #24
 8002946:	af00      	add	r7, sp, #0
 8002948:	60f8      	str	r0, [r7, #12]
 800294a:	607a      	str	r2, [r7, #4]
 800294c:	603b      	str	r3, [r7, #0]
 800294e:	460b      	mov	r3, r1
 8002950:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002952:	7afb      	ldrb	r3, [r7, #11]
 8002954:	f003 020f 	and.w	r2, r3, #15
 8002958:	4613      	mov	r3, r2
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	4413      	add	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	4413      	add	r3, r2
 8002968:	3304      	adds	r3, #4
 800296a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2200      	movs	r2, #0
 800297c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002984:	7afb      	ldrb	r3, [r7, #11]
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	b2da      	uxtb	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	2b01      	cmp	r3, #1
 8002996:	d102      	bne.n	800299e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	f003 030f 	and.w	r3, r3, #15
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d109      	bne.n	80029bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	461a      	mov	r2, r3
 80029b4:	6979      	ldr	r1, [r7, #20]
 80029b6:	f001 ff9d 	bl	80048f4 <USB_EP0StartXfer>
 80029ba:	e008      	b.n	80029ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6818      	ldr	r0, [r3, #0]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	461a      	mov	r2, r3
 80029c8:	6979      	ldr	r1, [r7, #20]
 80029ca:	f001 fd4b 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
 80029e0:	460b      	mov	r3, r1
 80029e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	f003 020f 	and.w	r2, r3, #15
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80029fa:	681b      	ldr	r3, [r3, #0]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b086      	sub	sp, #24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	607a      	str	r2, [r7, #4]
 8002a12:	603b      	str	r3, [r7, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a18:	7afb      	ldrb	r3, [r7, #11]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	4613      	mov	r3, r2
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	4413      	add	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	3338      	adds	r3, #56	; 0x38
 8002a28:	68fa      	ldr	r2, [r7, #12]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	683a      	ldr	r2, [r7, #0]
 8002a3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2201      	movs	r2, #1
 8002a46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a48:	7afb      	ldrb	r3, [r7, #11]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	691b      	ldr	r3, [r3, #16]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d102      	bne.n	8002a62 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d109      	bne.n	8002a80 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6818      	ldr	r0, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	6979      	ldr	r1, [r7, #20]
 8002a7a:	f001 ff3b 	bl	80048f4 <USB_EP0StartXfer>
 8002a7e:	e008      	b.n	8002a92 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	691b      	ldr	r3, [r3, #16]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	6979      	ldr	r1, [r7, #20]
 8002a8e:	f001 fce9 	bl	8004464 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002a92:	2300      	movs	r3, #0
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	3718      	adds	r7, #24
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b084      	sub	sp, #16
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002aa8:	78fb      	ldrb	r3, [r7, #3]
 8002aaa:	f003 020f 	and.w	r2, r3, #15
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d901      	bls.n	8002aba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e050      	b.n	8002b5c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	da0f      	bge.n	8002ae2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	f003 020f 	and.w	r2, r3, #15
 8002ac8:	4613      	mov	r3, r2
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4413      	add	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	3338      	adds	r3, #56	; 0x38
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	705a      	strb	r2, [r3, #1]
 8002ae0:	e00d      	b.n	8002afe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae2:	78fa      	ldrb	r2, [r7, #3]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	4413      	add	r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	4413      	add	r3, r2
 8002af4:	3304      	adds	r3, #4
 8002af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2201      	movs	r2, #1
 8002b02:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b04:	78fb      	ldrb	r3, [r7, #3]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	b2da      	uxtb	r2, r3
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d101      	bne.n	8002b1e <HAL_PCD_EP_SetStall+0x82>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	e01e      	b.n	8002b5c <HAL_PCD_EP_SetStall+0xc0>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68f9      	ldr	r1, [r7, #12]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 f979 	bl	8004e24 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b32:	78fb      	ldrb	r3, [r7, #3]
 8002b34:	f003 030f 	and.w	r3, r3, #15
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	691b      	ldr	r3, [r3, #16]
 8002b44:	b2d9      	uxtb	r1, r3
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b4c:	461a      	mov	r2, r3
 8002b4e:	f002 fb69 	bl	8005224 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	f003 020f 	and.w	r2, r3, #15
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d901      	bls.n	8002b82 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e042      	b.n	8002c08 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002b82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	da0f      	bge.n	8002baa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b8a:	78fb      	ldrb	r3, [r7, #3]
 8002b8c:	f003 020f 	and.w	r2, r3, #15
 8002b90:	4613      	mov	r3, r2
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	4413      	add	r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	3338      	adds	r3, #56	; 0x38
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	705a      	strb	r2, [r3, #1]
 8002ba8:	e00f      	b.n	8002bca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	f003 020f 	and.w	r2, r3, #15
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3304      	adds	r3, #4
 8002bc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002bd0:	78fb      	ldrb	r3, [r7, #3]
 8002bd2:	f003 030f 	and.w	r3, r3, #15
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_PCD_EP_ClrStall+0x86>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e00e      	b.n	8002c08 <HAL_PCD_EP_ClrStall+0xa4>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f002 f981 	bl	8004f00 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002c1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	da0c      	bge.n	8002c3e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c24:	78fb      	ldrb	r3, [r7, #3]
 8002c26:	f003 020f 	and.w	r2, r3, #15
 8002c2a:	4613      	mov	r3, r2
 8002c2c:	00db      	lsls	r3, r3, #3
 8002c2e:	4413      	add	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	3338      	adds	r3, #56	; 0x38
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	4413      	add	r3, r2
 8002c38:	3304      	adds	r3, #4
 8002c3a:	60fb      	str	r3, [r7, #12]
 8002c3c:	e00c      	b.n	8002c58 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c3e:	78fb      	ldrb	r3, [r7, #3]
 8002c40:	f003 020f 	and.w	r2, r3, #15
 8002c44:	4613      	mov	r3, r2
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4413      	add	r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	4413      	add	r3, r2
 8002c54:	3304      	adds	r3, #4
 8002c56:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	68f9      	ldr	r1, [r7, #12]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 ffa0 	bl	8004ba4 <USB_EPStopXfer>
 8002c64:	4603      	mov	r3, r0
 8002c66:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002c68:	7afb      	ldrb	r3, [r7, #11]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b08a      	sub	sp, #40	; 0x28
 8002c76:	af02      	add	r7, sp, #8
 8002c78:	6078      	str	r0, [r7, #4]
 8002c7a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002c86:	683a      	ldr	r2, [r7, #0]
 8002c88:	4613      	mov	r3, r2
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4413      	add	r3, r2
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	3338      	adds	r3, #56	; 0x38
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	3304      	adds	r3, #4
 8002c98:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	6a1a      	ldr	r2, [r3, #32]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e06c      	b.n	8002d84 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	699a      	ldr	r2, [r3, #24]
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d902      	bls.n	8002cc6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	3303      	adds	r3, #3
 8002cca:	089b      	lsrs	r3, r3, #2
 8002ccc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002cce:	e02b      	b.n	8002d28 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6a1b      	ldr	r3, [r3, #32]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	69fa      	ldr	r2, [r7, #28]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d902      	bls.n	8002cec <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	3303      	adds	r3, #3
 8002cf0:	089b      	lsrs	r3, r3, #2
 8002cf2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6919      	ldr	r1, [r3, #16]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	b2da      	uxtb	r2, r3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	9300      	str	r3, [sp, #0]
 8002d08:	4603      	mov	r3, r0
 8002d0a:	6978      	ldr	r0, [r7, #20]
 8002d0c:	f001 fff4 	bl	8004cf8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	691a      	ldr	r2, [r3, #16]
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	441a      	add	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6a1a      	ldr	r2, [r3, #32]
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	441a      	add	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d809      	bhi.n	8002d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6a1a      	ldr	r2, [r3, #32]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d203      	bcs.n	8002d52 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	699b      	ldr	r3, [r3, #24]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1be      	bne.n	8002cd0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	6a1b      	ldr	r3, [r3, #32]
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d811      	bhi.n	8002d82 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	f003 030f 	and.w	r3, r3, #15
 8002d64:	2201      	movs	r2, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	43db      	mvns	r3, r3
 8002d78:	6939      	ldr	r1, [r7, #16]
 8002d7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002d7e:	4013      	ands	r3, r2
 8002d80:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3720      	adds	r7, #32
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b088      	sub	sp, #32
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	333c      	adds	r3, #60	; 0x3c
 8002da4:	3304      	adds	r3, #4
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d17b      	bne.n	8002eba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	f003 0308 	and.w	r3, r3, #8
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d015      	beq.n	8002df8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	4a61      	ldr	r2, [pc, #388]	; (8002f54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	f240 80b9 	bls.w	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80b3 	beq.w	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	015a      	lsls	r2, r3, #5
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dee:	461a      	mov	r2, r3
 8002df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002df4:	6093      	str	r3, [r2, #8]
 8002df6:	e0a7      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	015a      	lsls	r2, r3, #5
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	4413      	add	r3, r2
 8002e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e0e:	461a      	mov	r2, r3
 8002e10:	2320      	movs	r3, #32
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	e098      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f040 8093 	bne.w	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a4b      	ldr	r2, [pc, #300]	; (8002f54 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d90f      	bls.n	8002e4a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	015a      	lsls	r2, r3, #5
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e40:	461a      	mov	r2, r3
 8002e42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e46:	6093      	str	r3, [r2, #8]
 8002e48:	e07e      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002e4a:	683a      	ldr	r2, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4413      	add	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	3304      	adds	r3, #4
 8002e5e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	69da      	ldr	r2, [r3, #28]
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	0159      	lsls	r1, r3, #5
 8002e68:	69bb      	ldr	r3, [r7, #24]
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e76:	1ad2      	subs	r2, r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d114      	bne.n	8002eac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d109      	bne.n	8002e9e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6818      	ldr	r0, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e94:	461a      	mov	r2, r3
 8002e96:	2101      	movs	r1, #1
 8002e98:	f002 f9c4 	bl	8005224 <USB_EP0_OutStart>
 8002e9c:	e006      	b.n	8002eac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	691a      	ldr	r2, [r3, #16]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	441a      	add	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f004 fd54 	bl	8007960 <HAL_PCD_DataOutStageCallback>
 8002eb8:	e046      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d124      	bne.n	8002f0c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d00a      	beq.n	8002ee2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	015a      	lsls	r2, r3, #5
 8002ed0:	69bb      	ldr	r3, [r7, #24]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ed8:	461a      	mov	r2, r3
 8002eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ede:	6093      	str	r3, [r2, #8]
 8002ee0:	e032      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	f003 0320 	and.w	r3, r3, #32
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d008      	beq.n	8002efe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	015a      	lsls	r2, r3, #5
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	4413      	add	r3, r2
 8002ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef8:	461a      	mov	r2, r3
 8002efa:	2320      	movs	r3, #32
 8002efc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f004 fd2b 	bl	8007960 <HAL_PCD_DataOutStageCallback>
 8002f0a:	e01d      	b.n	8002f48 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d114      	bne.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	440b      	add	r3, r1
 8002f20:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d108      	bne.n	8002f3c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6818      	ldr	r0, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f34:	461a      	mov	r2, r3
 8002f36:	2100      	movs	r1, #0
 8002f38:	f002 f974 	bl	8005224 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2db      	uxtb	r3, r3
 8002f40:	4619      	mov	r1, r3
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f004 fd0c 	bl	8007960 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3720      	adds	r7, #32
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	4f54300a 	.word	0x4f54300a
 8002f58:	4f54310a 	.word	0x4f54310a

08002f5c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b086      	sub	sp, #24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	333c      	adds	r3, #60	; 0x3c
 8002f74:	3304      	adds	r3, #4
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	015a      	lsls	r2, r3, #5
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	4413      	add	r3, r2
 8002f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	4a15      	ldr	r2, [pc, #84]	; (8002fe4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d90e      	bls.n	8002fb0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d009      	beq.n	8002fb0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	015a      	lsls	r2, r3, #5
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fa8:	461a      	mov	r2, r3
 8002faa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f004 fcc3 	bl	800793c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4a0a      	ldr	r2, [pc, #40]	; (8002fe4 <PCD_EP_OutSetupPacket_int+0x88>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d90c      	bls.n	8002fd8 <PCD_EP_OutSetupPacket_int+0x7c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	691b      	ldr	r3, [r3, #16]
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d108      	bne.n	8002fd8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6818      	ldr	r0, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	f002 f926 	bl	8005224 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002fd8:	2300      	movs	r3, #0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3718      	adds	r7, #24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	4f54300a 	.word	0x4f54300a

08002fe8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b085      	sub	sp, #20
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	70fb      	strb	r3, [r7, #3]
 8002ff4:	4613      	mov	r3, r2
 8002ff6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003000:	78fb      	ldrb	r3, [r7, #3]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d107      	bne.n	8003016 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003006:	883b      	ldrh	r3, [r7, #0]
 8003008:	0419      	lsls	r1, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	430a      	orrs	r2, r1
 8003012:	629a      	str	r2, [r3, #40]	; 0x28
 8003014:	e028      	b.n	8003068 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301c:	0c1b      	lsrs	r3, r3, #16
 800301e:	68ba      	ldr	r2, [r7, #8]
 8003020:	4413      	add	r3, r2
 8003022:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003024:	2300      	movs	r3, #0
 8003026:	73fb      	strb	r3, [r7, #15]
 8003028:	e00d      	b.n	8003046 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	7bfb      	ldrb	r3, [r7, #15]
 8003030:	3340      	adds	r3, #64	; 0x40
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	4413      	add	r3, r2
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	0c1b      	lsrs	r3, r3, #16
 800303a:	68ba      	ldr	r2, [r7, #8]
 800303c:	4413      	add	r3, r2
 800303e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003040:	7bfb      	ldrb	r3, [r7, #15]
 8003042:	3301      	adds	r3, #1
 8003044:	73fb      	strb	r3, [r7, #15]
 8003046:	7bfa      	ldrb	r2, [r7, #15]
 8003048:	78fb      	ldrb	r3, [r7, #3]
 800304a:	3b01      	subs	r3, #1
 800304c:	429a      	cmp	r2, r3
 800304e:	d3ec      	bcc.n	800302a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003050:	883b      	ldrh	r3, [r7, #0]
 8003052:	0418      	lsls	r0, r3, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	6819      	ldr	r1, [r3, #0]
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	3b01      	subs	r3, #1
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	4302      	orrs	r2, r0
 8003060:	3340      	adds	r3, #64	; 0x40
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	440b      	add	r3, r1
 8003066:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003068:	2300      	movs	r3, #0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	460b      	mov	r3, r1
 8003080:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	887a      	ldrh	r2, [r7, #2]
 8003088:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr

080030b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b086      	sub	sp, #24
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e267      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d075      	beq.n	80031ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030ce:	4b88      	ldr	r3, [pc, #544]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b04      	cmp	r3, #4
 80030d8:	d00c      	beq.n	80030f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030da:	4b85      	ldr	r3, [pc, #532]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d112      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80030e6:	4b82      	ldr	r3, [pc, #520]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80030f2:	d10b      	bne.n	800310c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f4:	4b7e      	ldr	r3, [pc, #504]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d05b      	beq.n	80031b8 <HAL_RCC_OscConfig+0x108>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d157      	bne.n	80031b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e242      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003114:	d106      	bne.n	8003124 <HAL_RCC_OscConfig+0x74>
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a75      	ldr	r2, [pc, #468]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800311c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003120:	6013      	str	r3, [r2, #0]
 8003122:	e01d      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800312c:	d10c      	bne.n	8003148 <HAL_RCC_OscConfig+0x98>
 800312e:	4b70      	ldr	r3, [pc, #448]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a6f      	ldr	r2, [pc, #444]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003138:	6013      	str	r3, [r2, #0]
 800313a:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a6c      	ldr	r2, [pc, #432]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	e00b      	b.n	8003160 <HAL_RCC_OscConfig+0xb0>
 8003148:	4b69      	ldr	r3, [pc, #420]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a68      	ldr	r2, [pc, #416]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b66      	ldr	r3, [pc, #408]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003168:	f7fd ff10 	bl	8000f8c <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd ff0c 	bl	8000f8c <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e207      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003182:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0xc0>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003190:	f7fd fefc 	bl	8000f8c <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd fef8 	bl	8000f8c <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e1f3      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031aa:	4b51      	ldr	r3, [pc, #324]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0xe8>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d063      	beq.n	800328e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031c6:	4b4a      	ldr	r3, [pc, #296]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 030c 	and.w	r3, r3, #12
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00b      	beq.n	80031ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031d2:	4b47      	ldr	r3, [pc, #284]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80031da:	2b08      	cmp	r3, #8
 80031dc:	d11c      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80031de:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d116      	bne.n	8003218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ea:	4b41      	ldr	r3, [pc, #260]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0302 	and.w	r3, r3, #2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d005      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d001      	beq.n	8003202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e1c7      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	691b      	ldr	r3, [r3, #16]
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	4937      	ldr	r1, [pc, #220]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003212:	4313      	orrs	r3, r2
 8003214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003216:	e03a      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d020      	beq.n	8003262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003220:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003222:	2201      	movs	r2, #1
 8003224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003226:	f7fd feb1 	bl	8000f8c <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800322e:	f7fd fead 	bl	8000f8c <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e1a8      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003240:	4b2b      	ldr	r3, [pc, #172]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0f0      	beq.n	800322e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800324c:	4b28      	ldr	r3, [pc, #160]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	00db      	lsls	r3, r3, #3
 800325a:	4925      	ldr	r1, [pc, #148]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 800325c:	4313      	orrs	r3, r2
 800325e:	600b      	str	r3, [r1, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003262:	4b24      	ldr	r3, [pc, #144]	; (80032f4 <HAL_RCC_OscConfig+0x244>)
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003268:	f7fd fe90 	bl	8000f8c <HAL_GetTick>
 800326c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003270:	f7fd fe8c 	bl	8000f8c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b02      	cmp	r3, #2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e187      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f003 0308 	and.w	r3, r3, #8
 8003296:	2b00      	cmp	r3, #0
 8003298:	d036      	beq.n	8003308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d016      	beq.n	80032d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032a4:	2201      	movs	r2, #1
 80032a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a8:	f7fd fe70 	bl	8000f8c <HAL_GetTick>
 80032ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032ae:	e008      	b.n	80032c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032b0:	f7fd fe6c 	bl	8000f8c <HAL_GetTick>
 80032b4:	4602      	mov	r2, r0
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	1ad3      	subs	r3, r2, r3
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e167      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80032c2:	4b0b      	ldr	r3, [pc, #44]	; (80032f0 <HAL_RCC_OscConfig+0x240>)
 80032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f0      	beq.n	80032b0 <HAL_RCC_OscConfig+0x200>
 80032ce:	e01b      	b.n	8003308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d0:	4b09      	ldr	r3, [pc, #36]	; (80032f8 <HAL_RCC_OscConfig+0x248>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d6:	f7fd fe59 	bl	8000f8c <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032dc:	e00e      	b.n	80032fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80032de:	f7fd fe55 	bl	8000f8c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d907      	bls.n	80032fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e150      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 80032f0:	40023800 	.word	0x40023800
 80032f4:	42470000 	.word	0x42470000
 80032f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032fc:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1ea      	bne.n	80032de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	f000 8097 	beq.w	8003444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003316:	2300      	movs	r3, #0
 8003318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800331a:	4b81      	ldr	r3, [pc, #516]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10f      	bne.n	8003346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b7d      	ldr	r3, [pc, #500]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800332c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332e:	4a7c      	ldr	r2, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003334:	6413      	str	r3, [r2, #64]	; 0x40
 8003336:	4b7a      	ldr	r3, [pc, #488]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003342:	2301      	movs	r3, #1
 8003344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003346:	4b77      	ldr	r3, [pc, #476]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800334e:	2b00      	cmp	r3, #0
 8003350:	d118      	bne.n	8003384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003352:	4b74      	ldr	r3, [pc, #464]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a73      	ldr	r2, [pc, #460]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 8003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800335e:	f7fd fe15 	bl	8000f8c <HAL_GetTick>
 8003362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003364:	e008      	b.n	8003378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003366:	f7fd fe11 	bl	8000f8c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b02      	cmp	r3, #2
 8003372:	d901      	bls.n	8003378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e10c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003378:	4b6a      	ldr	r3, [pc, #424]	; (8003524 <HAL_RCC_OscConfig+0x474>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003380:	2b00      	cmp	r3, #0
 8003382:	d0f0      	beq.n	8003366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <HAL_RCC_OscConfig+0x2ea>
 800338c:	4b64      	ldr	r3, [pc, #400]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a63      	ldr	r2, [pc, #396]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e01c      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	d10c      	bne.n	80033bc <HAL_RCC_OscConfig+0x30c>
 80033a2:	4b5f      	ldr	r3, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a6:	4a5e      	ldr	r2, [pc, #376]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6713      	str	r3, [r2, #112]	; 0x70
 80033ae:	4b5c      	ldr	r3, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b2:	4a5b      	ldr	r2, [pc, #364]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033b4:	f043 0301 	orr.w	r3, r3, #1
 80033b8:	6713      	str	r3, [r2, #112]	; 0x70
 80033ba:	e00b      	b.n	80033d4 <HAL_RCC_OscConfig+0x324>
 80033bc:	4b58      	ldr	r3, [pc, #352]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c0:	4a57      	ldr	r2, [pc, #348]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033c2:	f023 0301 	bic.w	r3, r3, #1
 80033c6:	6713      	str	r3, [r2, #112]	; 0x70
 80033c8:	4b55      	ldr	r3, [pc, #340]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033cc:	4a54      	ldr	r2, [pc, #336]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033ce:	f023 0304 	bic.w	r3, r3, #4
 80033d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d015      	beq.n	8003408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033dc:	f7fd fdd6 	bl	8000f8c <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033e2:	e00a      	b.n	80033fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033e4:	f7fd fdd2 	bl	8000f8c <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80033f2:	4293      	cmp	r3, r2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e0cb      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033fa:	4b49      	ldr	r3, [pc, #292]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80033fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d0ee      	beq.n	80033e4 <HAL_RCC_OscConfig+0x334>
 8003406:	e014      	b.n	8003432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003408:	f7fd fdc0 	bl	8000f8c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800340e:	e00a      	b.n	8003426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003410:	f7fd fdbc 	bl	8000f8c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	f241 3288 	movw	r2, #5000	; 0x1388
 800341e:	4293      	cmp	r3, r2
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e0b5      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003426:	4b3e      	ldr	r3, [pc, #248]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1ee      	bne.n	8003410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003432:	7dfb      	ldrb	r3, [r7, #23]
 8003434:	2b01      	cmp	r3, #1
 8003436:	d105      	bne.n	8003444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003438:	4b39      	ldr	r3, [pc, #228]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343c:	4a38      	ldr	r2, [pc, #224]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 800343e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 80a1 	beq.w	8003590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800344e:	4b34      	ldr	r3, [pc, #208]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b08      	cmp	r3, #8
 8003458:	d05c      	beq.n	8003514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	2b02      	cmp	r3, #2
 8003460:	d141      	bne.n	80034e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003462:	4b31      	ldr	r3, [pc, #196]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003468:	f7fd fd90 	bl	8000f8c <HAL_GetTick>
 800346c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fd fd8c 	bl	8000f8c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e087      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003482:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69da      	ldr	r2, [r3, #28]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a1b      	ldr	r3, [r3, #32]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349c:	019b      	lsls	r3, r3, #6
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a4:	085b      	lsrs	r3, r3, #1
 80034a6:	3b01      	subs	r3, #1
 80034a8:	041b      	lsls	r3, r3, #16
 80034aa:	431a      	orrs	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	061b      	lsls	r3, r3, #24
 80034b2:	491b      	ldr	r1, [pc, #108]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034b8:	4b1b      	ldr	r3, [pc, #108]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034be:	f7fd fd65 	bl	8000f8c <HAL_GetTick>
 80034c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c4:	e008      	b.n	80034d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034c6:	f7fd fd61 	bl	8000f8c <HAL_GetTick>
 80034ca:	4602      	mov	r2, r0
 80034cc:	693b      	ldr	r3, [r7, #16]
 80034ce:	1ad3      	subs	r3, r2, r3
 80034d0:	2b02      	cmp	r3, #2
 80034d2:	d901      	bls.n	80034d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80034d4:	2303      	movs	r3, #3
 80034d6:	e05c      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d0f0      	beq.n	80034c6 <HAL_RCC_OscConfig+0x416>
 80034e4:	e054      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e6:	4b10      	ldr	r3, [pc, #64]	; (8003528 <HAL_RCC_OscConfig+0x478>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ec:	f7fd fd4e 	bl	8000f8c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fd fd4a 	bl	8000f8c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e045      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b06      	ldr	r3, [pc, #24]	; (8003520 <HAL_RCC_OscConfig+0x470>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x444>
 8003512:	e03d      	b.n	8003590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	699b      	ldr	r3, [r3, #24]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e038      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
 8003520:	40023800 	.word	0x40023800
 8003524:	40007000 	.word	0x40007000
 8003528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800352c:	4b1b      	ldr	r3, [pc, #108]	; (800359c <HAL_RCC_OscConfig+0x4ec>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d028      	beq.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d121      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003552:	429a      	cmp	r2, r3
 8003554:	d11a      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800355c:	4013      	ands	r3, r2
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003564:	4293      	cmp	r3, r2
 8003566:	d111      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	085b      	lsrs	r3, r3, #1
 8003574:	3b01      	subs	r3, #1
 8003576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003578:	429a      	cmp	r2, r3
 800357a:	d107      	bne.n	800358c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003588:	429a      	cmp	r2, r3
 800358a:	d001      	beq.n	8003590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	e000      	b.n	8003592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003590:	2300      	movs	r3, #0
}
 8003592:	4618      	mov	r0, r3
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	e0cc      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80035b4:	4b68      	ldr	r3, [pc, #416]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0307 	and.w	r3, r3, #7
 80035bc:	683a      	ldr	r2, [r7, #0]
 80035be:	429a      	cmp	r2, r3
 80035c0:	d90c      	bls.n	80035dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035c2:	4b65      	ldr	r3, [pc, #404]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	4b63      	ldr	r3, [pc, #396]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0307 	and.w	r3, r3, #7
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d001      	beq.n	80035dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e0b8      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d020      	beq.n	800362a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d005      	beq.n	8003600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f4:	4b59      	ldr	r3, [pc, #356]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	4a58      	ldr	r2, [pc, #352]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80035fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80035fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0308 	and.w	r3, r3, #8
 8003608:	2b00      	cmp	r3, #0
 800360a:	d005      	beq.n	8003618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800360c:	4b53      	ldr	r3, [pc, #332]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800360e:	689b      	ldr	r3, [r3, #8]
 8003610:	4a52      	ldr	r2, [pc, #328]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003618:	4b50      	ldr	r3, [pc, #320]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	494d      	ldr	r1, [pc, #308]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003626:	4313      	orrs	r3, r2
 8003628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	d044      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d107      	bne.n	800364e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800363e:	4b47      	ldr	r3, [pc, #284]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d119      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e07f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	2b02      	cmp	r3, #2
 8003654:	d003      	beq.n	800365e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800365a:	2b03      	cmp	r3, #3
 800365c:	d107      	bne.n	800366e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365e:	4b3f      	ldr	r3, [pc, #252]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003666:	2b00      	cmp	r3, #0
 8003668:	d109      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e06f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366e:	4b3b      	ldr	r3, [pc, #236]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d101      	bne.n	800367e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e067      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	f023 0203 	bic.w	r2, r3, #3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	4934      	ldr	r1, [pc, #208]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800368c:	4313      	orrs	r3, r2
 800368e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003690:	f7fd fc7c 	bl	8000f8c <HAL_GetTick>
 8003694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003696:	e00a      	b.n	80036ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003698:	f7fd fc78 	bl	8000f8c <HAL_GetTick>
 800369c:	4602      	mov	r2, r0
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1ad3      	subs	r3, r2, r3
 80036a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e04f      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ae:	4b2b      	ldr	r3, [pc, #172]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 020c 	and.w	r2, r3, #12
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	429a      	cmp	r2, r3
 80036be:	d1eb      	bne.n	8003698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80036c0:	4b25      	ldr	r3, [pc, #148]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0307 	and.w	r3, r3, #7
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d20c      	bcs.n	80036e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b22      	ldr	r3, [pc, #136]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b20      	ldr	r3, [pc, #128]	; (8003758 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e032      	b.n	800374e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0304 	and.w	r3, r3, #4
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f4:	4b19      	ldr	r3, [pc, #100]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	4916      	ldr	r1, [pc, #88]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	4313      	orrs	r3, r2
 8003704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b00      	cmp	r3, #0
 8003710:	d009      	beq.n	8003726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003712:	4b12      	ldr	r3, [pc, #72]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	691b      	ldr	r3, [r3, #16]
 800371e:	00db      	lsls	r3, r3, #3
 8003720:	490e      	ldr	r1, [pc, #56]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 8003722:	4313      	orrs	r3, r2
 8003724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003726:	f000 f821 	bl	800376c <HAL_RCC_GetSysClockFreq>
 800372a:	4602      	mov	r2, r0
 800372c:	4b0b      	ldr	r3, [pc, #44]	; (800375c <HAL_RCC_ClockConfig+0x1bc>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	091b      	lsrs	r3, r3, #4
 8003732:	f003 030f 	and.w	r3, r3, #15
 8003736:	490a      	ldr	r1, [pc, #40]	; (8003760 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	5ccb      	ldrb	r3, [r1, r3]
 800373a:	fa22 f303 	lsr.w	r3, r2, r3
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_ClockConfig+0x1c4>)
 8003740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003742:	4b09      	ldr	r3, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1c8>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd fbdc 	bl	8000f04 <HAL_InitTick>

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40023c00 	.word	0x40023c00
 800375c:	40023800 	.word	0x40023800
 8003760:	08007f64 	.word	0x08007f64
 8003764:	20000000 	.word	0x20000000
 8003768:	20000004 	.word	0x20000004

0800376c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800376c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003770:	b090      	sub	sp, #64	; 0x40
 8003772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
 8003778:	2300      	movs	r3, #0
 800377a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800377c:	2300      	movs	r3, #0
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003784:	4b59      	ldr	r3, [pc, #356]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f003 030c 	and.w	r3, r3, #12
 800378c:	2b08      	cmp	r3, #8
 800378e:	d00d      	beq.n	80037ac <HAL_RCC_GetSysClockFreq+0x40>
 8003790:	2b08      	cmp	r3, #8
 8003792:	f200 80a1 	bhi.w	80038d8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_RCC_GetSysClockFreq+0x34>
 800379a:	2b04      	cmp	r3, #4
 800379c:	d003      	beq.n	80037a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800379e:	e09b      	b.n	80038d8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80037a2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80037a4:	e09b      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a6:	4b53      	ldr	r3, [pc, #332]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037a8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80037aa:	e098      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037ac:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80037b6:	4b4d      	ldr	r3, [pc, #308]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d028      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b4a      	ldr	r3, [pc, #296]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	2200      	movs	r2, #0
 80037ca:	623b      	str	r3, [r7, #32]
 80037cc:	627a      	str	r2, [r7, #36]	; 0x24
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80037d4:	2100      	movs	r1, #0
 80037d6:	4b47      	ldr	r3, [pc, #284]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037d8:	fb03 f201 	mul.w	r2, r3, r1
 80037dc:	2300      	movs	r3, #0
 80037de:	fb00 f303 	mul.w	r3, r0, r3
 80037e2:	4413      	add	r3, r2
 80037e4:	4a43      	ldr	r2, [pc, #268]	; (80038f4 <HAL_RCC_GetSysClockFreq+0x188>)
 80037e6:	fba0 1202 	umull	r1, r2, r0, r2
 80037ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037ec:	460a      	mov	r2, r1
 80037ee:	62ba      	str	r2, [r7, #40]	; 0x28
 80037f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037f2:	4413      	add	r3, r2
 80037f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f8:	2200      	movs	r2, #0
 80037fa:	61bb      	str	r3, [r7, #24]
 80037fc:	61fa      	str	r2, [r7, #28]
 80037fe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003802:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003806:	f7fc fce7 	bl	80001d8 <__aeabi_uldivmod>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4613      	mov	r3, r2
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003812:	e053      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003814:	4b35      	ldr	r3, [pc, #212]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	099b      	lsrs	r3, r3, #6
 800381a:	2200      	movs	r2, #0
 800381c:	613b      	str	r3, [r7, #16]
 800381e:	617a      	str	r2, [r7, #20]
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003826:	f04f 0b00 	mov.w	fp, #0
 800382a:	4652      	mov	r2, sl
 800382c:	465b      	mov	r3, fp
 800382e:	f04f 0000 	mov.w	r0, #0
 8003832:	f04f 0100 	mov.w	r1, #0
 8003836:	0159      	lsls	r1, r3, #5
 8003838:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800383c:	0150      	lsls	r0, r2, #5
 800383e:	4602      	mov	r2, r0
 8003840:	460b      	mov	r3, r1
 8003842:	ebb2 080a 	subs.w	r8, r2, sl
 8003846:	eb63 090b 	sbc.w	r9, r3, fp
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	f04f 0300 	mov.w	r3, #0
 8003852:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003856:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800385a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800385e:	ebb2 0408 	subs.w	r4, r2, r8
 8003862:	eb63 0509 	sbc.w	r5, r3, r9
 8003866:	f04f 0200 	mov.w	r2, #0
 800386a:	f04f 0300 	mov.w	r3, #0
 800386e:	00eb      	lsls	r3, r5, #3
 8003870:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003874:	00e2      	lsls	r2, r4, #3
 8003876:	4614      	mov	r4, r2
 8003878:	461d      	mov	r5, r3
 800387a:	eb14 030a 	adds.w	r3, r4, sl
 800387e:	603b      	str	r3, [r7, #0]
 8003880:	eb45 030b 	adc.w	r3, r5, fp
 8003884:	607b      	str	r3, [r7, #4]
 8003886:	f04f 0200 	mov.w	r2, #0
 800388a:	f04f 0300 	mov.w	r3, #0
 800388e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003892:	4629      	mov	r1, r5
 8003894:	028b      	lsls	r3, r1, #10
 8003896:	4621      	mov	r1, r4
 8003898:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800389c:	4621      	mov	r1, r4
 800389e:	028a      	lsls	r2, r1, #10
 80038a0:	4610      	mov	r0, r2
 80038a2:	4619      	mov	r1, r3
 80038a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038a6:	2200      	movs	r2, #0
 80038a8:	60bb      	str	r3, [r7, #8]
 80038aa:	60fa      	str	r2, [r7, #12]
 80038ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80038b0:	f7fc fc92 	bl	80001d8 <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4613      	mov	r3, r2
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0x180>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	0c1b      	lsrs	r3, r3, #16
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80038cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038d6:	e002      	b.n	80038de <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038d8:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetSysClockFreq+0x184>)
 80038da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3740      	adds	r7, #64	; 0x40
 80038e4:	46bd      	mov	sp, r7
 80038e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	017d7840 	.word	0x017d7840

080038f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003916:	f7fd fb39 	bl	8000f8c <HAL_GetTick>
 800391a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800391c:	4b5d      	ldr	r3, [pc, #372]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a5c      	ldr	r2, [pc, #368]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003922:	f043 0301 	orr.w	r3, r3, #1
 8003926:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003928:	e008      	b.n	800393c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800392a:	f7fd fb2f 	bl	8000f8c <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	2b02      	cmp	r3, #2
 8003936:	d901      	bls.n	800393c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e0a7      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 800393c:	4b55      	ldr	r3, [pc, #340]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0f0      	beq.n	800392a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003948:	4b52      	ldr	r3, [pc, #328]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800394e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003952:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003954:	f7fd fb1a 	bl	8000f8c <HAL_GetTick>
 8003958:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 800395a:	4b4e      	ldr	r3, [pc, #312]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800395c:	2200      	movs	r2, #0
 800395e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003962:	f7fd fb13 	bl	8000f8c <HAL_GetTick>
 8003966:	4602      	mov	r2, r0
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003970:	4293      	cmp	r3, r2
 8003972:	d901      	bls.n	8003978 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003974:	2303      	movs	r3, #3
 8003976:	e089      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003978:	4b46      	ldr	r3, [pc, #280]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1ee      	bne.n	8003962 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003984:	f7fd fb02 	bl	8000f8c <HAL_GetTick>
 8003988:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 800398a:	4b42      	ldr	r3, [pc, #264]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a41      	ldr	r2, [pc, #260]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003990:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003994:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003998:	f7fd faf8 	bl	8000f8c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b64      	cmp	r3, #100	; 0x64
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e070      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80039aa:	4b3a      	ldr	r3, [pc, #232]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1f0      	bne.n	8003998 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039b6:	f7fd fae9 	bl	8000f8c <HAL_GetTick>
 80039ba:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80039bc:	4b35      	ldr	r3, [pc, #212]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039c6:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80039c8:	e008      	b.n	80039dc <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ca:	f7fd fadf 	bl	8000f8c <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d901      	bls.n	80039dc <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	e057      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80039dc:	4b2d      	ldr	r3, [pc, #180]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1f0      	bne.n	80039ca <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 80039e8:	f7fd fad0 	bl	8000f8c <HAL_GetTick>
 80039ec:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a28      	ldr	r2, [pc, #160]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 80039f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80039f8:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039fc:	f7fd fac6 	bl	8000f8c <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e03e      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003a0e:	4b21      	ldr	r3, [pc, #132]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003a1a:	4b1e      	ldr	r3, [pc, #120]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a1c:	4a1e      	ldr	r2, [pc, #120]	; (8003a98 <HAL_RCC_DeInit+0x188>)
 8003a1e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003a20:	4b1c      	ldr	r3, [pc, #112]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a22:	4a1e      	ldr	r2, [pc, #120]	; (8003a9c <HAL_RCC_DeInit+0x18c>)
 8003a24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003a28:	4b1a      	ldr	r3, [pc, #104]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a19      	ldr	r2, [pc, #100]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a2e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003a32:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003a34:	4b17      	ldr	r3, [pc, #92]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a3a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a3e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a46:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003a4a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4a10      	ldr	r2, [pc, #64]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003a56:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003a58:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a5c:	4a0d      	ldr	r2, [pc, #52]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a5e:	f023 0301 	bic.w	r3, r3, #1
 8003a62:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003a64:	4b0b      	ldr	r3, [pc, #44]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a68:	4a0a      	ldr	r2, [pc, #40]	; (8003a94 <HAL_RCC_DeInit+0x184>)
 8003a6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a6e:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003a70:	4b0b      	ldr	r3, [pc, #44]	; (8003aa0 <HAL_RCC_DeInit+0x190>)
 8003a72:	4a0c      	ldr	r2, [pc, #48]	; (8003aa4 <HAL_RCC_DeInit+0x194>)
 8003a74:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003a76:	4b0c      	ldr	r3, [pc, #48]	; (8003aa8 <HAL_RCC_DeInit+0x198>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fd fa42 	bl	8000f04 <HAL_InitTick>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d001      	beq.n	8003a8a <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
  }
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40023800 	.word	0x40023800
 8003a98:	04003010 	.word	0x04003010
 8003a9c:	20003010 	.word	0x20003010
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	00f42400 	.word	0x00f42400
 8003aa8:	20000004 	.word	0x20000004

08003aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b084      	sub	sp, #16
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	f107 001c 	add.w	r0, r7, #28
 8003aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d122      	bne.n	8003b0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003adc:	687a      	ldr	r2, [r7, #4]
 8003ade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 fbee 	bl	80052e0 <USB_CoreReset>
 8003b04:	4603      	mov	r3, r0
 8003b06:	73fb      	strb	r3, [r7, #15]
 8003b08:	e01a      	b.n	8003b40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	68db      	ldr	r3, [r3, #12]
 8003b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f001 fbe2 	bl	80052e0 <USB_CoreReset>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d106      	bne.n	8003b34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
 8003b32:	e005      	b.n	8003b40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d10b      	bne.n	8003b5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f043 0206 	orr.w	r2, r3, #6
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f043 0220 	orr.w	r2, r3, #32
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b6a:	b004      	add	sp, #16
 8003b6c:	4770      	bx	lr
	...

08003b70 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b7e:	79fb      	ldrb	r3, [r7, #7]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d165      	bne.n	8003c50 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a41      	ldr	r2, [pc, #260]	; (8003c8c <USB_SetTurnaroundTime+0x11c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d906      	bls.n	8003b9a <USB_SetTurnaroundTime+0x2a>
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	4a40      	ldr	r2, [pc, #256]	; (8003c90 <USB_SetTurnaroundTime+0x120>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d202      	bcs.n	8003b9a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b94:	230f      	movs	r3, #15
 8003b96:	617b      	str	r3, [r7, #20]
 8003b98:	e062      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a3c      	ldr	r2, [pc, #240]	; (8003c90 <USB_SetTurnaroundTime+0x120>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d306      	bcc.n	8003bb0 <USB_SetTurnaroundTime+0x40>
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	4a3b      	ldr	r2, [pc, #236]	; (8003c94 <USB_SetTurnaroundTime+0x124>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d202      	bcs.n	8003bb0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003baa:	230e      	movs	r3, #14
 8003bac:	617b      	str	r3, [r7, #20]
 8003bae:	e057      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a38      	ldr	r2, [pc, #224]	; (8003c94 <USB_SetTurnaroundTime+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d306      	bcc.n	8003bc6 <USB_SetTurnaroundTime+0x56>
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	4a37      	ldr	r2, [pc, #220]	; (8003c98 <USB_SetTurnaroundTime+0x128>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d202      	bcs.n	8003bc6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003bc0:	230d      	movs	r3, #13
 8003bc2:	617b      	str	r3, [r7, #20]
 8003bc4:	e04c      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a33      	ldr	r2, [pc, #204]	; (8003c98 <USB_SetTurnaroundTime+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d306      	bcc.n	8003bdc <USB_SetTurnaroundTime+0x6c>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	4a32      	ldr	r2, [pc, #200]	; (8003c9c <USB_SetTurnaroundTime+0x12c>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d802      	bhi.n	8003bdc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003bd6:	230c      	movs	r3, #12
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e041      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a2f      	ldr	r2, [pc, #188]	; (8003c9c <USB_SetTurnaroundTime+0x12c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d906      	bls.n	8003bf2 <USB_SetTurnaroundTime+0x82>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4a2e      	ldr	r2, [pc, #184]	; (8003ca0 <USB_SetTurnaroundTime+0x130>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d802      	bhi.n	8003bf2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bec:	230b      	movs	r3, #11
 8003bee:	617b      	str	r3, [r7, #20]
 8003bf0:	e036      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a2a      	ldr	r2, [pc, #168]	; (8003ca0 <USB_SetTurnaroundTime+0x130>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d906      	bls.n	8003c08 <USB_SetTurnaroundTime+0x98>
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	4a29      	ldr	r2, [pc, #164]	; (8003ca4 <USB_SetTurnaroundTime+0x134>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d802      	bhi.n	8003c08 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003c02:	230a      	movs	r3, #10
 8003c04:	617b      	str	r3, [r7, #20]
 8003c06:	e02b      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a26      	ldr	r2, [pc, #152]	; (8003ca4 <USB_SetTurnaroundTime+0x134>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d906      	bls.n	8003c1e <USB_SetTurnaroundTime+0xae>
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	4a25      	ldr	r2, [pc, #148]	; (8003ca8 <USB_SetTurnaroundTime+0x138>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d202      	bcs.n	8003c1e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003c18:	2309      	movs	r3, #9
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e020      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4a21      	ldr	r2, [pc, #132]	; (8003ca8 <USB_SetTurnaroundTime+0x138>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d306      	bcc.n	8003c34 <USB_SetTurnaroundTime+0xc4>
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	4a20      	ldr	r2, [pc, #128]	; (8003cac <USB_SetTurnaroundTime+0x13c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d802      	bhi.n	8003c34 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003c2e:	2308      	movs	r3, #8
 8003c30:	617b      	str	r3, [r7, #20]
 8003c32:	e015      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	4a1d      	ldr	r2, [pc, #116]	; (8003cac <USB_SetTurnaroundTime+0x13c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d906      	bls.n	8003c4a <USB_SetTurnaroundTime+0xda>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	4a1c      	ldr	r2, [pc, #112]	; (8003cb0 <USB_SetTurnaroundTime+0x140>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d202      	bcs.n	8003c4a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c44:	2307      	movs	r3, #7
 8003c46:	617b      	str	r3, [r7, #20]
 8003c48:	e00a      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c4a:	2306      	movs	r3, #6
 8003c4c:	617b      	str	r3, [r7, #20]
 8003c4e:	e007      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003c50:	79fb      	ldrb	r3, [r7, #7]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003c56:	2309      	movs	r3, #9
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e001      	b.n	8003c60 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c5c:	2309      	movs	r3, #9
 8003c5e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	68da      	ldr	r2, [r3, #12]
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	029b      	lsls	r3, r3, #10
 8003c74:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c78:	431a      	orrs	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	371c      	adds	r7, #28
 8003c84:	46bd      	mov	sp, r7
 8003c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8a:	4770      	bx	lr
 8003c8c:	00d8acbf 	.word	0x00d8acbf
 8003c90:	00e4e1c0 	.word	0x00e4e1c0
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	01067380 	.word	0x01067380
 8003c9c:	011a499f 	.word	0x011a499f
 8003ca0:	01312cff 	.word	0x01312cff
 8003ca4:	014ca43f 	.word	0x014ca43f
 8003ca8:	016e3600 	.word	0x016e3600
 8003cac:	01a6ab1f 	.word	0x01a6ab1f
 8003cb0:	01e84800 	.word	0x01e84800

08003cb4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b083      	sub	sp, #12
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f043 0201 	orr.w	r2, r3, #1
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f023 0201 	bic.w	r2, r3, #1
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b084      	sub	sp, #16
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	460b      	mov	r3, r1
 8003d02:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003d14:	78fb      	ldrb	r3, [r7, #3]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d115      	bne.n	8003d46 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d26:	2001      	movs	r0, #1
 8003d28:	f7fd f93c 	bl	8000fa4 <HAL_Delay>
      ms++;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	3301      	adds	r3, #1
 8003d30:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003d32:	6878      	ldr	r0, [r7, #4]
 8003d34:	f001 fa45 	bl	80051c2 <USB_GetMode>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d01e      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2b31      	cmp	r3, #49	; 0x31
 8003d42:	d9f0      	bls.n	8003d26 <USB_SetCurrentMode+0x2e>
 8003d44:	e01a      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d46:	78fb      	ldrb	r3, [r7, #3]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d115      	bne.n	8003d78 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d58:	2001      	movs	r0, #1
 8003d5a:	f7fd f923 	bl	8000fa4 <HAL_Delay>
      ms++;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	3301      	adds	r3, #1
 8003d62:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f001 fa2c 	bl	80051c2 <USB_GetMode>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d005      	beq.n	8003d7c <USB_SetCurrentMode+0x84>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2b31      	cmp	r3, #49	; 0x31
 8003d74:	d9f0      	bls.n	8003d58 <USB_SetCurrentMode+0x60>
 8003d76:	e001      	b.n	8003d7c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e005      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2b32      	cmp	r3, #50	; 0x32
 8003d80:	d101      	bne.n	8003d86 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3710      	adds	r7, #16
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d90:	b084      	sub	sp, #16
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b086      	sub	sp, #24
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003da2:	2300      	movs	r3, #0
 8003da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	613b      	str	r3, [r7, #16]
 8003dae:	e009      	b.n	8003dc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	3340      	adds	r3, #64	; 0x40
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4413      	add	r3, r2
 8003dba:	2200      	movs	r2, #0
 8003dbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b0e      	cmp	r3, #14
 8003dc8:	d9f2      	bls.n	8003db0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11c      	bne.n	8003e0a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	68fa      	ldr	r2, [r7, #12]
 8003dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003dde:	f043 0302 	orr.w	r3, r3, #2
 8003de2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003df4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e00:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	639a      	str	r2, [r3, #56]	; 0x38
 8003e08:	e00b      	b.n	8003e22 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003e28:	461a      	mov	r2, r3
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e34:	4619      	mov	r1, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	680b      	ldr	r3, [r1, #0]
 8003e40:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d10c      	bne.n	8003e62 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d104      	bne.n	8003e58 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003e4e:	2100      	movs	r1, #0
 8003e50:	6878      	ldr	r0, [r7, #4]
 8003e52:	f000 f965 	bl	8004120 <USB_SetDevSpeed>
 8003e56:	e008      	b.n	8003e6a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003e58:	2101      	movs	r1, #1
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f960 	bl	8004120 <USB_SetDevSpeed>
 8003e60:	e003      	b.n	8003e6a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003e62:	2103      	movs	r1, #3
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f95b 	bl	8004120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003e6a:	2110      	movs	r1, #16
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f8f3 	bl	8004058 <USB_FlushTxFifo>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d001      	beq.n	8003e7c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f91f 	bl	80040c0 <USB_FlushRxFifo>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d001      	beq.n	8003e8c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	461a      	mov	r2, r3
 8003e94:	2300      	movs	r3, #0
 8003e96:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2300      	movs	r3, #0
 8003eae:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	613b      	str	r3, [r7, #16]
 8003eb4:	e043      	b.n	8003f3e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ec8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ecc:	d118      	bne.n	8003f00 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	015a      	lsls	r2, r3, #5
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4413      	add	r3, r2
 8003edc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003ee6:	6013      	str	r3, [r2, #0]
 8003ee8:	e013      	b.n	8003f12 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	015a      	lsls	r2, r3, #5
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	e008      	b.n	8003f12 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	2300      	movs	r3, #0
 8003f10:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	015a      	lsls	r2, r3, #5
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	4413      	add	r3, r2
 8003f1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1e:	461a      	mov	r2, r3
 8003f20:	2300      	movs	r3, #0
 8003f22:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	461a      	mov	r2, r3
 8003f32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	613b      	str	r3, [r7, #16]
 8003f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d3b7      	bcc.n	8003eb6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f46:	2300      	movs	r3, #0
 8003f48:	613b      	str	r3, [r7, #16]
 8003f4a:	e043      	b.n	8003fd4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	015a      	lsls	r2, r3, #5
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4413      	add	r3, r2
 8003f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f62:	d118      	bne.n	8003f96 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d10a      	bne.n	8003f80 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f76:	461a      	mov	r2, r3
 8003f78:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e013      	b.n	8003fa8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	015a      	lsls	r2, r3, #5
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	4413      	add	r3, r2
 8003f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e008      	b.n	8003fa8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	015a      	lsls	r2, r3, #5
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	4413      	add	r3, r2
 8003f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	015a      	lsls	r2, r3, #5
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4413      	add	r3, r2
 8003fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb4:	461a      	mov	r2, r3
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003fcc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd6:	693a      	ldr	r2, [r7, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3b7      	bcc.n	8003f4c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fe2:	691b      	ldr	r3, [r3, #16]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fee:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ffc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004000:	2b00      	cmp	r3, #0
 8004002:	d105      	bne.n	8004010 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	f043 0210 	orr.w	r2, r3, #16
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	699a      	ldr	r2, [r3, #24]
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <USB_DevInit+0x2c4>)
 8004016:	4313      	orrs	r3, r2
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800401c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	699b      	ldr	r3, [r3, #24]
 8004026:	f043 0208 	orr.w	r2, r3, #8
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800402e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403c:	f043 0304 	orr.w	r3, r3, #4
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004044:	7dfb      	ldrb	r3, [r7, #23]
}
 8004046:	4618      	mov	r0, r3
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004050:	b004      	add	sp, #16
 8004052:	4770      	bx	lr
 8004054:	803c3800 	.word	0x803c3800

08004058 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a13      	ldr	r2, [pc, #76]	; (80040bc <USB_FlushTxFifo+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e01b      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	2b00      	cmp	r3, #0
 800407e:	daf2      	bge.n	8004066 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004080:	2300      	movs	r3, #0
 8004082:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	019b      	lsls	r3, r3, #6
 8004088:	f043 0220 	orr.w	r2, r3, #32
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	3301      	adds	r3, #1
 8004094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	4a08      	ldr	r2, [pc, #32]	; (80040bc <USB_FlushTxFifo+0x64>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d901      	bls.n	80040a2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e006      	b.n	80040b0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b20      	cmp	r3, #32
 80040ac:	d0f0      	beq.n	8004090 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80040ae:	2300      	movs	r3, #0
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr
 80040bc:	00030d40 	.word	0x00030d40

080040c0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b085      	sub	sp, #20
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80040c8:	2300      	movs	r3, #0
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	3301      	adds	r3, #1
 80040d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	4a11      	ldr	r2, [pc, #68]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d901      	bls.n	80040de <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e018      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	daf2      	bge.n	80040cc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	2210      	movs	r2, #16
 80040ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	3301      	adds	r3, #1
 80040f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	4a08      	ldr	r2, [pc, #32]	; (800411c <USB_FlushRxFifo+0x5c>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d901      	bls.n	8004102 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e006      	b.n	8004110 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	f003 0310 	and.w	r3, r3, #16
 800410a:	2b10      	cmp	r3, #16
 800410c:	d0f0      	beq.n	80040f0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800410e:	2300      	movs	r3, #0
}
 8004110:	4618      	mov	r0, r3
 8004112:	3714      	adds	r7, #20
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	00030d40 	.word	0x00030d40

08004120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004120:	b480      	push	{r7}
 8004122:	b085      	sub	sp, #20
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	78fb      	ldrb	r3, [r7, #3]
 800413a:	68f9      	ldr	r1, [r7, #12]
 800413c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004140:	4313      	orrs	r3, r2
 8004142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3714      	adds	r7, #20
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004152:	b480      	push	{r7}
 8004154:	b087      	sub	sp, #28
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 0306 	and.w	r3, r3, #6
 800416a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d102      	bne.n	8004178 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004172:	2300      	movs	r3, #0
 8004174:	75fb      	strb	r3, [r7, #23]
 8004176:	e00a      	b.n	800418e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d002      	beq.n	8004184 <USB_GetDevSpeed+0x32>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2b06      	cmp	r3, #6
 8004182:	d102      	bne.n	800418a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004184:	2302      	movs	r3, #2
 8004186:	75fb      	strb	r3, [r7, #23]
 8004188:	e001      	b.n	800418e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800418a:	230f      	movs	r3, #15
 800418c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800418e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004190:	4618      	mov	r0, r3
 8004192:	371c      	adds	r7, #28
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
 80041a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	781b      	ldrb	r3, [r3, #0]
 80041ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	785b      	ldrb	r3, [r3, #1]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d13a      	bne.n	800422e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	2101      	movs	r1, #1
 80041ca:	fa01 f303 	lsl.w	r3, r1, r3
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	68f9      	ldr	r1, [r7, #12]
 80041d2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d6:	4313      	orrs	r3, r2
 80041d8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	015a      	lsls	r2, r3, #5
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	4413      	add	r3, r2
 80041e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d155      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80041f0:	68bb      	ldr	r3, [r7, #8]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	791b      	ldrb	r3, [r3, #4]
 800420a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800420c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	059b      	lsls	r3, r3, #22
 8004212:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004214:	4313      	orrs	r3, r2
 8004216:	68ba      	ldr	r2, [r7, #8]
 8004218:	0151      	lsls	r1, r2, #5
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	440a      	add	r2, r1
 800421e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004226:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	e036      	b.n	800429c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004234:	69da      	ldr	r2, [r3, #28]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	f003 030f 	and.w	r3, r3, #15
 800423e:	2101      	movs	r1, #1
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	041b      	lsls	r3, r3, #16
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800424c:	4313      	orrs	r3, r2
 800424e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	015a      	lsls	r2, r3, #5
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	4413      	add	r3, r2
 8004258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d11a      	bne.n	800429c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	791b      	ldrb	r3, [r3, #4]
 8004280:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004282:	430b      	orrs	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	0151      	lsls	r1, r2, #5
 800428a:	68fa      	ldr	r2, [r7, #12]
 800428c:	440a      	add	r2, r1
 800428e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004292:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b085      	sub	sp, #20
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	785b      	ldrb	r3, [r3, #1]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d161      	bne.n	800438c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042de:	d11f      	bne.n	8004320 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	68fa      	ldr	r2, [r7, #12]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042fa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80042fe:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	68ba      	ldr	r2, [r7, #8]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800431a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800431e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004326:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f003 030f 	and.w	r3, r3, #15
 8004330:	2101      	movs	r1, #1
 8004332:	fa01 f303 	lsl.w	r3, r1, r3
 8004336:	b29b      	uxth	r3, r3
 8004338:	43db      	mvns	r3, r3
 800433a:	68f9      	ldr	r1, [r7, #12]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4013      	ands	r3, r2
 8004342:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800434a:	69da      	ldr	r2, [r3, #28]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	2101      	movs	r1, #1
 8004356:	fa01 f303 	lsl.w	r3, r1, r3
 800435a:	b29b      	uxth	r3, r3
 800435c:	43db      	mvns	r3, r3
 800435e:	68f9      	ldr	r1, [r7, #12]
 8004360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004364:	4013      	ands	r3, r2
 8004366:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	015a      	lsls	r2, r3, #5
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004374:	681a      	ldr	r2, [r3, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	0159      	lsls	r1, r3, #5
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	440b      	add	r3, r1
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	4619      	mov	r1, r3
 8004384:	4b35      	ldr	r3, [pc, #212]	; (800445c <USB_DeactivateEndpoint+0x1b0>)
 8004386:	4013      	ands	r3, r2
 8004388:	600b      	str	r3, [r1, #0]
 800438a:	e060      	b.n	800444e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	015a      	lsls	r2, r3, #5
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	4413      	add	r3, r2
 8004394:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800439e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043a2:	d11f      	bne.n	80043e4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68ba      	ldr	r2, [r7, #8]
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	68fa      	ldr	r2, [r7, #12]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043c2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68ba      	ldr	r2, [r7, #8]
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043de:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80043e2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f003 030f 	and.w	r3, r3, #15
 80043f4:	2101      	movs	r1, #1
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	041b      	lsls	r3, r3, #16
 80043fc:	43db      	mvns	r3, r3
 80043fe:	68f9      	ldr	r1, [r7, #12]
 8004400:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004404:	4013      	ands	r3, r2
 8004406:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440e:	69da      	ldr	r2, [r3, #28]
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	f003 030f 	and.w	r3, r3, #15
 8004418:	2101      	movs	r1, #1
 800441a:	fa01 f303 	lsl.w	r3, r1, r3
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	43db      	mvns	r3, r3
 8004422:	68f9      	ldr	r1, [r7, #12]
 8004424:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004428:	4013      	ands	r3, r2
 800442a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	0159      	lsls	r1, r3, #5
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	440b      	add	r3, r1
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	4619      	mov	r1, r3
 8004448:	4b05      	ldr	r3, [pc, #20]	; (8004460 <USB_DeactivateEndpoint+0x1b4>)
 800444a:	4013      	ands	r3, r2
 800444c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800444e:	2300      	movs	r3, #0
}
 8004450:	4618      	mov	r0, r3
 8004452:	3714      	adds	r7, #20
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr
 800445c:	ec337800 	.word	0xec337800
 8004460:	eff37800 	.word	0xeff37800

08004464 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af02      	add	r7, sp, #8
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	4613      	mov	r3, r2
 8004470:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	785b      	ldrb	r3, [r3, #1]
 8004480:	2b01      	cmp	r3, #1
 8004482:	f040 815c 	bne.w	800473e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d132      	bne.n	80044f4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448e:	69bb      	ldr	r3, [r7, #24]
 8004490:	015a      	lsls	r2, r3, #5
 8004492:	69fb      	ldr	r3, [r7, #28]
 8004494:	4413      	add	r3, r2
 8004496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	0151      	lsls	r1, r2, #5
 80044a0:	69fa      	ldr	r2, [r7, #28]
 80044a2:	440a      	add	r2, r1
 80044a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044b2:	69bb      	ldr	r3, [r7, #24]
 80044b4:	015a      	lsls	r2, r3, #5
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	4413      	add	r3, r2
 80044ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	0151      	lsls	r1, r2, #5
 80044c4:	69fa      	ldr	r2, [r7, #28]
 80044c6:	440a      	add	r2, r1
 80044c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044d2:	69bb      	ldr	r3, [r7, #24]
 80044d4:	015a      	lsls	r2, r3, #5
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	4413      	add	r3, r2
 80044da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	0151      	lsls	r1, r2, #5
 80044e4:	69fa      	ldr	r2, [r7, #28]
 80044e6:	440a      	add	r2, r1
 80044e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044ec:	0cdb      	lsrs	r3, r3, #19
 80044ee:	04db      	lsls	r3, r3, #19
 80044f0:	6113      	str	r3, [r2, #16]
 80044f2:	e074      	b.n	80045de <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f4:	69bb      	ldr	r3, [r7, #24]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	69ba      	ldr	r2, [r7, #24]
 8004504:	0151      	lsls	r1, r2, #5
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	440a      	add	r2, r1
 800450a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450e:	0cdb      	lsrs	r3, r3, #19
 8004510:	04db      	lsls	r3, r3, #19
 8004512:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	015a      	lsls	r2, r3, #5
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	4413      	add	r3, r2
 800451c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	0151      	lsls	r1, r2, #5
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	440a      	add	r2, r1
 800452a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004532:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004536:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	015a      	lsls	r2, r3, #5
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	4413      	add	r3, r2
 8004540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004544:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	6999      	ldr	r1, [r3, #24]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	440b      	add	r3, r1
 8004550:	1e59      	subs	r1, r3, #1
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	fbb1 f3f3 	udiv	r3, r1, r3
 800455a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800455c:	4b9d      	ldr	r3, [pc, #628]	; (80047d4 <USB_EPStartXfer+0x370>)
 800455e:	400b      	ands	r3, r1
 8004560:	69b9      	ldr	r1, [r7, #24]
 8004562:	0148      	lsls	r0, r1, #5
 8004564:	69f9      	ldr	r1, [r7, #28]
 8004566:	4401      	add	r1, r0
 8004568:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800456c:	4313      	orrs	r3, r2
 800456e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	015a      	lsls	r2, r3, #5
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	4413      	add	r3, r2
 8004578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	699b      	ldr	r3, [r3, #24]
 8004582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004586:	69b9      	ldr	r1, [r7, #24]
 8004588:	0148      	lsls	r0, r1, #5
 800458a:	69f9      	ldr	r1, [r7, #28]
 800458c:	4401      	add	r1, r0
 800458e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004592:	4313      	orrs	r3, r2
 8004594:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	791b      	ldrb	r3, [r3, #4]
 800459a:	2b01      	cmp	r3, #1
 800459c:	d11f      	bne.n	80045de <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045aa:	691b      	ldr	r3, [r3, #16]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045b8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80045bc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	015a      	lsls	r2, r3, #5
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	4413      	add	r3, r2
 80045c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	69ba      	ldr	r2, [r7, #24]
 80045ce:	0151      	lsls	r1, r2, #5
 80045d0:	69fa      	ldr	r2, [r7, #28]
 80045d2:	440a      	add	r2, r1
 80045d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045dc:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80045de:	79fb      	ldrb	r3, [r7, #7]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d14b      	bne.n	800467c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d009      	beq.n	8004600 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045f8:	461a      	mov	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	791b      	ldrb	r3, [r3, #4]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d128      	bne.n	800465a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460e:	689b      	ldr	r3, [r3, #8]
 8004610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004614:	2b00      	cmp	r3, #0
 8004616:	d110      	bne.n	800463a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004632:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004636:	6013      	str	r3, [r2, #0]
 8004638:	e00f      	b.n	800465a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	69fa      	ldr	r2, [r7, #28]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004658:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800465a:	69bb      	ldr	r3, [r7, #24]
 800465c:	015a      	lsls	r2, r3, #5
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	4413      	add	r3, r2
 8004662:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	0151      	lsls	r1, r2, #5
 800466c:	69fa      	ldr	r2, [r7, #28]
 800466e:	440a      	add	r2, r1
 8004670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004674:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	e133      	b.n	80048e4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800467c:	69bb      	ldr	r3, [r7, #24]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	791b      	ldrb	r3, [r3, #4]
 80046a0:	2b01      	cmp	r3, #1
 80046a2:	d015      	beq.n	80046d0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 811b 	beq.w	80048e4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	f003 030f 	and.w	r3, r3, #15
 80046be:	2101      	movs	r1, #1
 80046c0:	fa01 f303 	lsl.w	r3, r1, r3
 80046c4:	69f9      	ldr	r1, [r7, #28]
 80046c6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046ca:	4313      	orrs	r3, r2
 80046cc:	634b      	str	r3, [r1, #52]	; 0x34
 80046ce:	e109      	b.n	80048e4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d110      	bne.n	8004702 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	69fb      	ldr	r3, [r7, #28]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	0151      	lsls	r1, r2, #5
 80046f2:	69fa      	ldr	r2, [r7, #28]
 80046f4:	440a      	add	r2, r1
 80046f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046fe:	6013      	str	r3, [r2, #0]
 8004700:	e00f      	b.n	8004722 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004702:	69bb      	ldr	r3, [r7, #24]
 8004704:	015a      	lsls	r2, r3, #5
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	0151      	lsls	r1, r2, #5
 8004714:	69fa      	ldr	r2, [r7, #28]
 8004716:	440a      	add	r2, r1
 8004718:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800471c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004720:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004722:	68bb      	ldr	r3, [r7, #8]
 8004724:	6919      	ldr	r1, [r3, #16]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	b298      	uxth	r0, r3
 8004730:	79fb      	ldrb	r3, [r7, #7]
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4603      	mov	r3, r0
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fade 	bl	8004cf8 <USB_WritePacket>
 800473c:	e0d2      	b.n	80048e4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004758:	0cdb      	lsrs	r3, r3, #19
 800475a:	04db      	lsls	r3, r3, #19
 800475c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004778:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800477c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004780:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	699b      	ldr	r3, [r3, #24]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d126      	bne.n	80047d8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	691a      	ldr	r2, [r3, #16]
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a0:	69b9      	ldr	r1, [r7, #24]
 80047a2:	0148      	lsls	r0, r1, #5
 80047a4:	69f9      	ldr	r1, [r7, #28]
 80047a6:	4401      	add	r1, r0
 80047a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80047ac:	4313      	orrs	r3, r2
 80047ae:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	69ba      	ldr	r2, [r7, #24]
 80047c0:	0151      	lsls	r1, r2, #5
 80047c2:	69fa      	ldr	r2, [r7, #28]
 80047c4:	440a      	add	r2, r1
 80047c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047ca:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ce:	6113      	str	r3, [r2, #16]
 80047d0:	e03a      	b.n	8004848 <USB_EPStartXfer+0x3e4>
 80047d2:	bf00      	nop
 80047d4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	699a      	ldr	r2, [r3, #24]
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	68db      	ldr	r3, [r3, #12]
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	8afa      	ldrh	r2, [r7, #22]
 80047f4:	fb03 f202 	mul.w	r2, r3, r2
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	015a      	lsls	r2, r3, #5
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	4413      	add	r3, r2
 8004804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	8afb      	ldrh	r3, [r7, #22]
 800480c:	04d9      	lsls	r1, r3, #19
 800480e:	4b38      	ldr	r3, [pc, #224]	; (80048f0 <USB_EPStartXfer+0x48c>)
 8004810:	400b      	ands	r3, r1
 8004812:	69b9      	ldr	r1, [r7, #24]
 8004814:	0148      	lsls	r0, r1, #5
 8004816:	69f9      	ldr	r1, [r7, #28]
 8004818:	4401      	add	r1, r0
 800481a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800481e:	4313      	orrs	r3, r2
 8004820:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	015a      	lsls	r2, r3, #5
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	4413      	add	r3, r2
 800482a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482e:	691a      	ldr	r2, [r3, #16]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	69db      	ldr	r3, [r3, #28]
 8004834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	0148      	lsls	r0, r1, #5
 800483c:	69f9      	ldr	r1, [r7, #28]
 800483e:	4401      	add	r1, r0
 8004840:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004844:	4313      	orrs	r3, r2
 8004846:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004848:	79fb      	ldrb	r3, [r7, #7]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d10d      	bne.n	800486a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6919      	ldr	r1, [r3, #16]
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	4413      	add	r3, r2
 8004862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004866:	460a      	mov	r2, r1
 8004868:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	791b      	ldrb	r3, [r3, #4]
 800486e:	2b01      	cmp	r3, #1
 8004870:	d128      	bne.n	80048c4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004872:	69fb      	ldr	r3, [r7, #28]
 8004874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800487e:	2b00      	cmp	r3, #0
 8004880:	d110      	bne.n	80048a4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004882:	69bb      	ldr	r3, [r7, #24]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	69fb      	ldr	r3, [r7, #28]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	69ba      	ldr	r2, [r7, #24]
 8004892:	0151      	lsls	r1, r2, #5
 8004894:	69fa      	ldr	r2, [r7, #28]
 8004896:	440a      	add	r2, r1
 8004898:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800489c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00f      	b.n	80048c4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	015a      	lsls	r2, r3, #5
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	4413      	add	r3, r2
 80048ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	0151      	lsls	r1, r2, #5
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	440a      	add	r2, r1
 80048ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048c2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	0151      	lsls	r1, r2, #5
 80048d6:	69fa      	ldr	r2, [r7, #28]
 80048d8:	440a      	add	r2, r1
 80048da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048de:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048e2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048e4:	2300      	movs	r3, #0
}
 80048e6:	4618      	mov	r0, r3
 80048e8:	3720      	adds	r7, #32
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	1ff80000 	.word	0x1ff80000

080048f4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80048f4:	b480      	push	{r7}
 80048f6:	b087      	sub	sp, #28
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	60f8      	str	r0, [r7, #12]
 80048fc:	60b9      	str	r1, [r7, #8]
 80048fe:	4613      	mov	r3, r2
 8004900:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	785b      	ldrb	r3, [r3, #1]
 8004910:	2b01      	cmp	r3, #1
 8004912:	f040 80ce 	bne.w	8004ab2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d132      	bne.n	8004984 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	015a      	lsls	r2, r3, #5
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	4413      	add	r3, r2
 8004926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	0151      	lsls	r1, r2, #5
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	440a      	add	r2, r1
 8004934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004938:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800493c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004940:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	015a      	lsls	r2, r3, #5
 8004946:	697b      	ldr	r3, [r7, #20]
 8004948:	4413      	add	r3, r2
 800494a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494e:	691b      	ldr	r3, [r3, #16]
 8004950:	693a      	ldr	r2, [r7, #16]
 8004952:	0151      	lsls	r1, r2, #5
 8004954:	697a      	ldr	r2, [r7, #20]
 8004956:	440a      	add	r2, r1
 8004958:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800495c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004960:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	693a      	ldr	r2, [r7, #16]
 8004972:	0151      	lsls	r1, r2, #5
 8004974:	697a      	ldr	r2, [r7, #20]
 8004976:	440a      	add	r2, r1
 8004978:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800497c:	0cdb      	lsrs	r3, r3, #19
 800497e:	04db      	lsls	r3, r3, #19
 8004980:	6113      	str	r3, [r2, #16]
 8004982:	e04e      	b.n	8004a22 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	697a      	ldr	r2, [r7, #20]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499e:	0cdb      	lsrs	r3, r3, #19
 80049a0:	04db      	lsls	r3, r3, #19
 80049a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	0151      	lsls	r1, r2, #5
 80049b6:	697a      	ldr	r2, [r7, #20]
 80049b8:	440a      	add	r2, r1
 80049ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049be:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80049c2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80049c6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	699a      	ldr	r2, [r3, #24]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	68da      	ldr	r2, [r3, #12]
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	0151      	lsls	r1, r2, #5
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	440a      	add	r2, r1
 80049f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80049fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	015a      	lsls	r2, r3, #5
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	4413      	add	r3, r2
 8004a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	699b      	ldr	r3, [r3, #24]
 8004a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a12:	6939      	ldr	r1, [r7, #16]
 8004a14:	0148      	lsls	r0, r1, #5
 8004a16:	6979      	ldr	r1, [r7, #20]
 8004a18:	4401      	add	r1, r0
 8004a1a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004a22:	79fb      	ldrb	r3, [r7, #7]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d11e      	bne.n	8004a66 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	695b      	ldr	r3, [r3, #20]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	015a      	lsls	r2, r3, #5
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	4413      	add	r3, r2
 8004a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	693a      	ldr	r2, [r7, #16]
 8004a54:	0151      	lsls	r1, r2, #5
 8004a56:	697a      	ldr	r2, [r7, #20]
 8004a58:	440a      	add	r2, r1
 8004a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e097      	b.n	8004b96 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004a84:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 8083 	beq.w	8004b96 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa6:	6979      	ldr	r1, [r7, #20]
 8004aa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aac:	4313      	orrs	r3, r2
 8004aae:	634b      	str	r3, [r1, #52]	; 0x34
 8004ab0:	e071      	b.n	8004b96 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	697a      	ldr	r2, [r7, #20]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004acc:	0cdb      	lsrs	r3, r3, #19
 8004ace:	04db      	lsls	r3, r3, #19
 8004ad0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	015a      	lsls	r2, r3, #5
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	4413      	add	r3, r2
 8004ada:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	0151      	lsls	r1, r2, #5
 8004ae4:	697a      	ldr	r2, [r7, #20]
 8004ae6:	440a      	add	r2, r1
 8004ae8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004af0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004af4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	0151      	lsls	r1, r2, #5
 8004b20:	697a      	ldr	r2, [r7, #20]
 8004b22:	440a      	add	r2, r1
 8004b24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	015a      	lsls	r2, r3, #5
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	4413      	add	r3, r2
 8004b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b3a:	691a      	ldr	r2, [r3, #16]
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b44:	6939      	ldr	r1, [r7, #16]
 8004b46:	0148      	lsls	r0, r1, #5
 8004b48:	6979      	ldr	r1, [r7, #20]
 8004b4a:	4401      	add	r1, r0
 8004b4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b50:	4313      	orrs	r3, r2
 8004b52:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004b54:	79fb      	ldrb	r3, [r7, #7]
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d10d      	bne.n	8004b76 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d009      	beq.n	8004b76 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	015a      	lsls	r2, r3, #5
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	4413      	add	r3, r2
 8004b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b72:	460a      	mov	r2, r1
 8004b74:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	693a      	ldr	r2, [r7, #16]
 8004b86:	0151      	lsls	r1, r2, #5
 8004b88:	697a      	ldr	r2, [r7, #20]
 8004b8a:	440a      	add	r2, r1
 8004b8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b96:	2300      	movs	r3, #0
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	371c      	adds	r7, #28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba2:	4770      	bx	lr

08004ba4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b087      	sub	sp, #28
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	785b      	ldrb	r3, [r3, #1]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d14a      	bne.n	8004c58 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	015a      	lsls	r2, r3, #5
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	4413      	add	r3, r2
 8004bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bda:	f040 8086 	bne.w	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	015a      	lsls	r2, r3, #5
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	4413      	add	r3, r2
 8004be8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	7812      	ldrb	r2, [r2, #0]
 8004bf2:	0151      	lsls	r1, r2, #5
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	440a      	add	r2, r1
 8004bf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bfc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c00:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	693a      	ldr	r2, [r7, #16]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c24:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d902      	bls.n	8004c3c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
          break;
 8004c3a:	e056      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c50:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c54:	d0e7      	beq.n	8004c26 <USB_EPStopXfer+0x82>
 8004c56:	e048      	b.n	8004cea <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c70:	d13b      	bne.n	8004cea <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	015a      	lsls	r2, r3, #5
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	4413      	add	r3, r2
 8004c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	683a      	ldr	r2, [r7, #0]
 8004c84:	7812      	ldrb	r2, [r2, #0]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c94:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	015a      	lsls	r2, r3, #5
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	4413      	add	r3, r2
 8004ca0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	7812      	ldrb	r2, [r2, #0]
 8004caa:	0151      	lsls	r1, r2, #5
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	440a      	add	r2, r1
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cb8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d902      	bls.n	8004cd0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
          break;
 8004cce:	e00c      	b.n	8004cea <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	015a      	lsls	r2, r3, #5
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	4413      	add	r3, r2
 8004cda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ce4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ce8:	d0e7      	beq.n	8004cba <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	371c      	adds	r7, #28
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b089      	sub	sp, #36	; 0x24
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	4611      	mov	r1, r2
 8004d04:	461a      	mov	r2, r3
 8004d06:	460b      	mov	r3, r1
 8004d08:	71fb      	strb	r3, [r7, #7]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004d16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d123      	bne.n	8004d66 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004d1e:	88bb      	ldrh	r3, [r7, #4]
 8004d20:	3303      	adds	r3, #3
 8004d22:	089b      	lsrs	r3, r3, #2
 8004d24:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61bb      	str	r3, [r7, #24]
 8004d2a:	e018      	b.n	8004d5e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	031a      	lsls	r2, r3, #12
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d38:	461a      	mov	r2, r3
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	3301      	adds	r3, #1
 8004d44:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	3301      	adds	r3, #1
 8004d4a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d4c:	69fb      	ldr	r3, [r7, #28]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	3301      	adds	r3, #1
 8004d56:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61bb      	str	r3, [r7, #24]
 8004d5e:	69ba      	ldr	r2, [r7, #24]
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d3e2      	bcc.n	8004d2c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3724      	adds	r7, #36	; 0x24
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b08b      	sub	sp, #44	; 0x2c
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	60f8      	str	r0, [r7, #12]
 8004d7c:	60b9      	str	r1, [r7, #8]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d8a:	88fb      	ldrh	r3, [r7, #6]
 8004d8c:	089b      	lsrs	r3, r3, #2
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	623b      	str	r3, [r7, #32]
 8004d9e:	e014      	b.n	8004dca <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004daa:	601a      	str	r2, [r3, #0]
    pDest++;
 8004dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dae:	3301      	adds	r3, #1
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db4:	3301      	adds	r3, #1
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	3301      	adds	r3, #1
 8004dbc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004dc4:	6a3b      	ldr	r3, [r7, #32]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	623b      	str	r3, [r7, #32]
 8004dca:	6a3a      	ldr	r2, [r7, #32]
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d3e6      	bcc.n	8004da0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d01e      	beq.n	8004e16 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004de2:	461a      	mov	r2, r3
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	6a3b      	ldr	r3, [r7, #32]
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	00db      	lsls	r3, r3, #3
 8004df4:	fa22 f303 	lsr.w	r3, r2, r3
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	701a      	strb	r2, [r3, #0]
      i++;
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3301      	adds	r3, #1
 8004e02:	623b      	str	r3, [r7, #32]
      pDest++;
 8004e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e06:	3301      	adds	r3, #1
 8004e08:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004e0a:	8bfb      	ldrh	r3, [r7, #30]
 8004e0c:	3b01      	subs	r3, #1
 8004e0e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004e10:	8bfb      	ldrh	r3, [r7, #30]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1ea      	bne.n	8004dec <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	372c      	adds	r7, #44	; 0x2c
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e22:	4770      	bx	lr

08004e24 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e24:	b480      	push	{r7}
 8004e26:	b085      	sub	sp, #20
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	785b      	ldrb	r3, [r3, #1]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d12c      	bne.n	8004e9a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	db12      	blt.n	8004e78 <USB_EPSetStall+0x54>
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00f      	beq.n	8004e78 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004e76:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004e78:	68bb      	ldr	r3, [r7, #8]
 8004e7a:	015a      	lsls	r2, r3, #5
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4413      	add	r3, r2
 8004e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	0151      	lsls	r1, r2, #5
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	440a      	add	r2, r1
 8004e8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e96:	6013      	str	r3, [r2, #0]
 8004e98:	e02b      	b.n	8004ef2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	015a      	lsls	r2, r3, #5
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	db12      	blt.n	8004ed2 <USB_EPSetStall+0xae>
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d00f      	beq.n	8004ed2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	015a      	lsls	r2, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4413      	add	r3, r2
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	68ba      	ldr	r2, [r7, #8]
 8004ec2:	0151      	lsls	r1, r2, #5
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	440a      	add	r2, r1
 8004ec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ecc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ed0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68ba      	ldr	r2, [r7, #8]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ef0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	785b      	ldrb	r3, [r3, #1]
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d128      	bne.n	8004f6e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	015a      	lsls	r2, r3, #5
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	4413      	add	r3, r2
 8004f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68ba      	ldr	r2, [r7, #8]
 8004f2c:	0151      	lsls	r1, r2, #5
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	440a      	add	r2, r1
 8004f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f3a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	791b      	ldrb	r3, [r3, #4]
 8004f40:	2b03      	cmp	r3, #3
 8004f42:	d003      	beq.n	8004f4c <USB_EPClearStall+0x4c>
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	791b      	ldrb	r3, [r3, #4]
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d138      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	015a      	lsls	r2, r3, #5
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	4413      	add	r3, r2
 8004f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68ba      	ldr	r2, [r7, #8]
 8004f5c:	0151      	lsls	r1, r2, #5
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	440a      	add	r2, r1
 8004f62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f6a:	6013      	str	r3, [r2, #0]
 8004f6c:	e027      	b.n	8004fbe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	68ba      	ldr	r2, [r7, #8]
 8004f7e:	0151      	lsls	r1, r2, #5
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	440a      	add	r2, r1
 8004f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f88:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004f8c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	791b      	ldrb	r3, [r3, #4]
 8004f92:	2b03      	cmp	r3, #3
 8004f94:	d003      	beq.n	8004f9e <USB_EPClearStall+0x9e>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	791b      	ldrb	r3, [r3, #4]
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d10f      	bne.n	8004fbe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	0151      	lsls	r1, r2, #5
 8004fb0:	68fa      	ldr	r2, [r7, #12]
 8004fb2:	440a      	add	r2, r1
 8004fb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b085      	sub	sp, #20
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	460b      	mov	r3, r1
 8004fd6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fea:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004fee:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	78fb      	ldrb	r3, [r7, #3]
 8004ffa:	011b      	lsls	r3, r3, #4
 8004ffc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005000:	68f9      	ldr	r1, [r7, #12]
 8005002:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005032:	f023 0303 	bic.w	r3, r3, #3
 8005036:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	68fa      	ldr	r2, [r7, #12]
 8005042:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005046:	f023 0302 	bic.w	r3, r3, #2
 800504a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800504c:	2300      	movs	r3, #0
}
 800504e:	4618      	mov	r0, r3
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68fa      	ldr	r2, [r7, #12]
 8005070:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005074:	f023 0303 	bic.w	r3, r3, #3
 8005078:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68fa      	ldr	r2, [r7, #12]
 8005084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005088:	f043 0302 	orr.w	r3, r3, #2
 800508c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800508e:	2300      	movs	r3, #0
}
 8005090:	4618      	mov	r0, r3
 8005092:	3714      	adds	r7, #20
 8005094:	46bd      	mov	sp, r7
 8005096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509a:	4770      	bx	lr

0800509c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800509c:	b480      	push	{r7}
 800509e:	b085      	sub	sp, #20
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	68fa      	ldr	r2, [r7, #12]
 80050b0:	4013      	ands	r3, r2
 80050b2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80050b4:	68fb      	ldr	r3, [r7, #12]
}
 80050b6:	4618      	mov	r0, r3
 80050b8:	3714      	adds	r7, #20
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr

080050c2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050c2:	b480      	push	{r7}
 80050c4:	b085      	sub	sp, #20
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	68ba      	ldr	r2, [r7, #8]
 80050e2:	4013      	ands	r3, r2
 80050e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80050e6:	68bb      	ldr	r3, [r7, #8]
 80050e8:	0c1b      	lsrs	r3, r3, #16
}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3714      	adds	r7, #20
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	68ba      	ldr	r2, [r7, #8]
 8005116:	4013      	ands	r3, r2
 8005118:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	b29b      	uxth	r3, r3
}
 800511e:	4618      	mov	r0, r3
 8005120:	3714      	adds	r7, #20
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr

0800512a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800512a:	b480      	push	{r7}
 800512c:	b085      	sub	sp, #20
 800512e:	af00      	add	r7, sp, #0
 8005130:	6078      	str	r0, [r7, #4]
 8005132:	460b      	mov	r3, r1
 8005134:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800513a:	78fb      	ldrb	r3, [r7, #3]
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	68ba      	ldr	r2, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005158:	68bb      	ldr	r3, [r7, #8]
}
 800515a:	4618      	mov	r0, r3
 800515c:	3714      	adds	r7, #20
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005166:	b480      	push	{r7}
 8005168:	b087      	sub	sp, #28
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005176:	697b      	ldr	r3, [r7, #20]
 8005178:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005186:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005188:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800518a:	78fb      	ldrb	r3, [r7, #3]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	01db      	lsls	r3, r3, #7
 8005198:	b2db      	uxtb	r3, r3
 800519a:	693a      	ldr	r2, [r7, #16]
 800519c:	4313      	orrs	r3, r2
 800519e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80051a0:	78fb      	ldrb	r3, [r7, #3]
 80051a2:	015a      	lsls	r2, r3, #5
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	693a      	ldr	r2, [r7, #16]
 80051b0:	4013      	ands	r3, r2
 80051b2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80051b4:	68bb      	ldr	r3, [r7, #8]
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	371c      	adds	r7, #28
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b083      	sub	sp, #12
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f003 0301 	and.w	r3, r3, #1
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	370c      	adds	r7, #12
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr

080051de <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80051de:	b480      	push	{r7}
 80051e0:	b085      	sub	sp, #20
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68fa      	ldr	r2, [r7, #12]
 80051f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80051fc:	f023 0307 	bic.w	r3, r3, #7
 8005200:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005214:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	460b      	mov	r3, r1
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	333c      	adds	r3, #60	; 0x3c
 800523a:	3304      	adds	r3, #4
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005240:	693b      	ldr	r3, [r7, #16]
 8005242:	4a26      	ldr	r2, [pc, #152]	; (80052dc <USB_EP0_OutStart+0xb8>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d90a      	bls.n	800525e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005254:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005258:	d101      	bne.n	800525e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	e037      	b.n	80052ce <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005264:	461a      	mov	r2, r3
 8005266:	2300      	movs	r3, #0
 8005268:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005270:	691b      	ldr	r3, [r3, #16]
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	697a      	ldr	r2, [r7, #20]
 8005288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800528c:	f043 0318 	orr.w	r3, r3, #24
 8005290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005298:	691b      	ldr	r3, [r3, #16]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052a0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80052a4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80052a6:	7afb      	ldrb	r3, [r7, #11]
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	d10f      	bne.n	80052cc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052b2:	461a      	mov	r2, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052c6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80052ca:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	4f54300a 	.word	0x4f54300a

080052e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	3301      	adds	r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4a13      	ldr	r2, [pc, #76]	; (8005344 <USB_CoreReset+0x64>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d901      	bls.n	80052fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e01b      	b.n	8005336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	daf2      	bge.n	80052ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005306:	2300      	movs	r3, #0
 8005308:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	f043 0201 	orr.w	r2, r3, #1
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3301      	adds	r3, #1
 800531a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <USB_CoreReset+0x64>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d901      	bls.n	8005328 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	691b      	ldr	r3, [r3, #16]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d0f0      	beq.n	8005316 <USB_CoreReset+0x36>

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
 8005342:	bf00      	nop
 8005344:	00030d40 	.word	0x00030d40

08005348 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	460b      	mov	r3, r1
 8005352:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005354:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005358:	f002 fd62 	bl	8007e20 <USBD_static_malloc>
 800535c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d109      	bne.n	8005378 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	32b0      	adds	r2, #176	; 0xb0
 800536e:	2100      	movs	r1, #0
 8005370:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005374:	2302      	movs	r3, #2
 8005376:	e0d4      	b.n	8005522 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005378:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800537c:	2100      	movs	r1, #0
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f002 fdb6 	bl	8007ef0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	32b0      	adds	r2, #176	; 0xb0
 800538e:	68f9      	ldr	r1, [r7, #12]
 8005390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	32b0      	adds	r2, #176	; 0xb0
 800539e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	7c1b      	ldrb	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d138      	bne.n	8005422 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80053b0:	4b5e      	ldr	r3, [pc, #376]	; (800552c <USBD_CDC_Init+0x1e4>)
 80053b2:	7819      	ldrb	r1, [r3, #0]
 80053b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053b8:	2202      	movs	r2, #2
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f002 fc0d 	bl	8007bda <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80053c0:	4b5a      	ldr	r3, [pc, #360]	; (800552c <USBD_CDC_Init+0x1e4>)
 80053c2:	781b      	ldrb	r3, [r3, #0]
 80053c4:	f003 020f 	and.w	r2, r3, #15
 80053c8:	6879      	ldr	r1, [r7, #4]
 80053ca:	4613      	mov	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	4413      	add	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	440b      	add	r3, r1
 80053d4:	3324      	adds	r3, #36	; 0x24
 80053d6:	2201      	movs	r2, #1
 80053d8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80053da:	4b55      	ldr	r3, [pc, #340]	; (8005530 <USBD_CDC_Init+0x1e8>)
 80053dc:	7819      	ldrb	r1, [r3, #0]
 80053de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80053e2:	2202      	movs	r2, #2
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f002 fbf8 	bl	8007bda <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80053ea:	4b51      	ldr	r3, [pc, #324]	; (8005530 <USBD_CDC_Init+0x1e8>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	f003 020f 	and.w	r2, r3, #15
 80053f2:	6879      	ldr	r1, [r7, #4]
 80053f4:	4613      	mov	r3, r2
 80053f6:	009b      	lsls	r3, r3, #2
 80053f8:	4413      	add	r3, r2
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005402:	2201      	movs	r2, #1
 8005404:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005406:	4b4b      	ldr	r3, [pc, #300]	; (8005534 <USBD_CDC_Init+0x1ec>)
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	f003 020f 	and.w	r2, r3, #15
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	440b      	add	r3, r1
 800541a:	3326      	adds	r3, #38	; 0x26
 800541c:	2210      	movs	r2, #16
 800541e:	801a      	strh	r2, [r3, #0]
 8005420:	e035      	b.n	800548e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005422:	4b42      	ldr	r3, [pc, #264]	; (800552c <USBD_CDC_Init+0x1e4>)
 8005424:	7819      	ldrb	r1, [r3, #0]
 8005426:	2340      	movs	r3, #64	; 0x40
 8005428:	2202      	movs	r2, #2
 800542a:	6878      	ldr	r0, [r7, #4]
 800542c:	f002 fbd5 	bl	8007bda <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005430:	4b3e      	ldr	r3, [pc, #248]	; (800552c <USBD_CDC_Init+0x1e4>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	f003 020f 	and.w	r2, r3, #15
 8005438:	6879      	ldr	r1, [r7, #4]
 800543a:	4613      	mov	r3, r2
 800543c:	009b      	lsls	r3, r3, #2
 800543e:	4413      	add	r3, r2
 8005440:	009b      	lsls	r3, r3, #2
 8005442:	440b      	add	r3, r1
 8005444:	3324      	adds	r3, #36	; 0x24
 8005446:	2201      	movs	r2, #1
 8005448:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800544a:	4b39      	ldr	r3, [pc, #228]	; (8005530 <USBD_CDC_Init+0x1e8>)
 800544c:	7819      	ldrb	r1, [r3, #0]
 800544e:	2340      	movs	r3, #64	; 0x40
 8005450:	2202      	movs	r2, #2
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f002 fbc1 	bl	8007bda <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005458:	4b35      	ldr	r3, [pc, #212]	; (8005530 <USBD_CDC_Init+0x1e8>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f003 020f 	and.w	r2, r3, #15
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	009b      	lsls	r3, r3, #2
 8005466:	4413      	add	r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005470:	2201      	movs	r2, #1
 8005472:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005474:	4b2f      	ldr	r3, [pc, #188]	; (8005534 <USBD_CDC_Init+0x1ec>)
 8005476:	781b      	ldrb	r3, [r3, #0]
 8005478:	f003 020f 	and.w	r2, r3, #15
 800547c:	6879      	ldr	r1, [r7, #4]
 800547e:	4613      	mov	r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	4413      	add	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	440b      	add	r3, r1
 8005488:	3326      	adds	r3, #38	; 0x26
 800548a:	2210      	movs	r2, #16
 800548c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800548e:	4b29      	ldr	r3, [pc, #164]	; (8005534 <USBD_CDC_Init+0x1ec>)
 8005490:	7819      	ldrb	r1, [r3, #0]
 8005492:	2308      	movs	r3, #8
 8005494:	2203      	movs	r2, #3
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f002 fb9f 	bl	8007bda <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800549c:	4b25      	ldr	r3, [pc, #148]	; (8005534 <USBD_CDC_Init+0x1ec>)
 800549e:	781b      	ldrb	r3, [r3, #0]
 80054a0:	f003 020f 	and.w	r2, r3, #15
 80054a4:	6879      	ldr	r1, [r7, #4]
 80054a6:	4613      	mov	r3, r2
 80054a8:	009b      	lsls	r3, r3, #2
 80054aa:	4413      	add	r3, r2
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	440b      	add	r3, r1
 80054b0:	3324      	adds	r3, #36	; 0x24
 80054b2:	2201      	movs	r2, #1
 80054b4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	33b0      	adds	r3, #176	; 0xb0
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80054ec:	2302      	movs	r3, #2
 80054ee:	e018      	b.n	8005522 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	7c1b      	ldrb	r3, [r3, #16]
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d10a      	bne.n	800550e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80054f8:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <USBD_CDC_Init+0x1e8>)
 80054fa:	7819      	ldrb	r1, [r3, #0]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f002 fc56 	bl	8007db8 <USBD_LL_PrepareReceive>
 800550c:	e008      	b.n	8005520 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800550e:	4b08      	ldr	r3, [pc, #32]	; (8005530 <USBD_CDC_Init+0x1e8>)
 8005510:	7819      	ldrb	r1, [r3, #0]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005518:	2340      	movs	r3, #64	; 0x40
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f002 fc4c 	bl	8007db8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005520:	2300      	movs	r3, #0
}
 8005522:	4618      	mov	r0, r3
 8005524:	3710      	adds	r7, #16
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	20000093 	.word	0x20000093
 8005530:	20000094 	.word	0x20000094
 8005534:	20000095 	.word	0x20000095

08005538 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b082      	sub	sp, #8
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	460b      	mov	r3, r1
 8005542:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005544:	4b3a      	ldr	r3, [pc, #232]	; (8005630 <USBD_CDC_DeInit+0xf8>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f002 fb6b 	bl	8007c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005550:	4b37      	ldr	r3, [pc, #220]	; (8005630 <USBD_CDC_DeInit+0xf8>)
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	f003 020f 	and.w	r2, r3, #15
 8005558:	6879      	ldr	r1, [r7, #4]
 800555a:	4613      	mov	r3, r2
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	4413      	add	r3, r2
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	440b      	add	r3, r1
 8005564:	3324      	adds	r3, #36	; 0x24
 8005566:	2200      	movs	r2, #0
 8005568:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800556a:	4b32      	ldr	r3, [pc, #200]	; (8005634 <USBD_CDC_DeInit+0xfc>)
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	4619      	mov	r1, r3
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f002 fb58 	bl	8007c26 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005576:	4b2f      	ldr	r3, [pc, #188]	; (8005634 <USBD_CDC_DeInit+0xfc>)
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	f003 020f 	and.w	r2, r3, #15
 800557e:	6879      	ldr	r1, [r7, #4]
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009b      	lsls	r3, r3, #2
 8005588:	440b      	add	r3, r1
 800558a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800558e:	2200      	movs	r2, #0
 8005590:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <USBD_CDC_DeInit+0x100>)
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	4619      	mov	r1, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f002 fb44 	bl	8007c26 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800559e:	4b26      	ldr	r3, [pc, #152]	; (8005638 <USBD_CDC_DeInit+0x100>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	f003 020f 	and.w	r2, r3, #15
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	4613      	mov	r3, r2
 80055aa:	009b      	lsls	r3, r3, #2
 80055ac:	4413      	add	r3, r2
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	440b      	add	r3, r1
 80055b2:	3324      	adds	r3, #36	; 0x24
 80055b4:	2200      	movs	r2, #0
 80055b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <USBD_CDC_DeInit+0x100>)
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	f003 020f 	and.w	r2, r3, #15
 80055c0:	6879      	ldr	r1, [r7, #4]
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	440b      	add	r3, r1
 80055cc:	3326      	adds	r3, #38	; 0x26
 80055ce:	2200      	movs	r2, #0
 80055d0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	32b0      	adds	r2, #176	; 0xb0
 80055dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d01f      	beq.n	8005624 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	33b0      	adds	r3, #176	; 0xb0
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	32b0      	adds	r2, #176	; 0xb0
 8005602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005606:	4618      	mov	r0, r3
 8005608:	f002 fc18 	bl	8007e3c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	32b0      	adds	r2, #176	; 0xb0
 8005616:	2100      	movs	r1, #0
 8005618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2200      	movs	r2, #0
 8005620:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3708      	adds	r7, #8
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000093 	.word	0x20000093
 8005634:	20000094 	.word	0x20000094
 8005638:	20000095 	.word	0x20000095

0800563c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	32b0      	adds	r2, #176	; 0xb0
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800565e:	2300      	movs	r3, #0
 8005660:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d101      	bne.n	800566c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005668:	2303      	movs	r3, #3
 800566a:	e0bf      	b.n	80057ec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005674:	2b00      	cmp	r3, #0
 8005676:	d050      	beq.n	800571a <USBD_CDC_Setup+0xde>
 8005678:	2b20      	cmp	r3, #32
 800567a:	f040 80af 	bne.w	80057dc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	88db      	ldrh	r3, [r3, #6]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d03a      	beq.n	80056fc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	b25b      	sxtb	r3, r3
 800568c:	2b00      	cmp	r3, #0
 800568e:	da1b      	bge.n	80056c8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	33b0      	adds	r3, #176	; 0xb0
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	4413      	add	r3, r2
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	683a      	ldr	r2, [r7, #0]
 80056a4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80056a6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	88d2      	ldrh	r2, [r2, #6]
 80056ac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	88db      	ldrh	r3, [r3, #6]
 80056b2:	2b07      	cmp	r3, #7
 80056b4:	bf28      	it	cs
 80056b6:	2307      	movcs	r3, #7
 80056b8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	89fa      	ldrh	r2, [r7, #14]
 80056be:	4619      	mov	r1, r3
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f001 fd89 	bl	80071d8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80056c6:	e090      	b.n	80057ea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	785a      	ldrb	r2, [r3, #1]
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	88db      	ldrh	r3, [r3, #6]
 80056d6:	2b3f      	cmp	r3, #63	; 0x3f
 80056d8:	d803      	bhi.n	80056e2 <USBD_CDC_Setup+0xa6>
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	88db      	ldrh	r3, [r3, #6]
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	e000      	b.n	80056e4 <USBD_CDC_Setup+0xa8>
 80056e2:	2240      	movs	r2, #64	; 0x40
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80056ea:	6939      	ldr	r1, [r7, #16]
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80056f2:	461a      	mov	r2, r3
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 fd9b 	bl	8007230 <USBD_CtlPrepareRx>
      break;
 80056fa:	e076      	b.n	80057ea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	33b0      	adds	r3, #176	; 0xb0
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	4413      	add	r3, r2
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	7850      	ldrb	r0, [r2, #1]
 8005712:	2200      	movs	r2, #0
 8005714:	6839      	ldr	r1, [r7, #0]
 8005716:	4798      	blx	r3
      break;
 8005718:	e067      	b.n	80057ea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	785b      	ldrb	r3, [r3, #1]
 800571e:	2b0b      	cmp	r3, #11
 8005720:	d851      	bhi.n	80057c6 <USBD_CDC_Setup+0x18a>
 8005722:	a201      	add	r2, pc, #4	; (adr r2, 8005728 <USBD_CDC_Setup+0xec>)
 8005724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005728:	08005759 	.word	0x08005759
 800572c:	080057d5 	.word	0x080057d5
 8005730:	080057c7 	.word	0x080057c7
 8005734:	080057c7 	.word	0x080057c7
 8005738:	080057c7 	.word	0x080057c7
 800573c:	080057c7 	.word	0x080057c7
 8005740:	080057c7 	.word	0x080057c7
 8005744:	080057c7 	.word	0x080057c7
 8005748:	080057c7 	.word	0x080057c7
 800574c:	080057c7 	.word	0x080057c7
 8005750:	08005783 	.word	0x08005783
 8005754:	080057ad 	.word	0x080057ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b03      	cmp	r3, #3
 8005762:	d107      	bne.n	8005774 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005764:	f107 030a 	add.w	r3, r7, #10
 8005768:	2202      	movs	r2, #2
 800576a:	4619      	mov	r1, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f001 fd33 	bl	80071d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005772:	e032      	b.n	80057da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005774:	6839      	ldr	r1, [r7, #0]
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f001 fcbd 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	75fb      	strb	r3, [r7, #23]
          break;
 8005780:	e02b      	b.n	80057da <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005788:	b2db      	uxtb	r3, r3
 800578a:	2b03      	cmp	r3, #3
 800578c:	d107      	bne.n	800579e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800578e:	f107 030d 	add.w	r3, r7, #13
 8005792:	2201      	movs	r2, #1
 8005794:	4619      	mov	r1, r3
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f001 fd1e 	bl	80071d8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800579c:	e01d      	b.n	80057da <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f001 fca8 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80057a6:	2303      	movs	r3, #3
 80057a8:	75fb      	strb	r3, [r7, #23]
          break;
 80057aa:	e016      	b.n	80057da <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b2:	b2db      	uxtb	r3, r3
 80057b4:	2b03      	cmp	r3, #3
 80057b6:	d00f      	beq.n	80057d8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80057b8:	6839      	ldr	r1, [r7, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f001 fc9b 	bl	80070f6 <USBD_CtlError>
            ret = USBD_FAIL;
 80057c0:	2303      	movs	r3, #3
 80057c2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80057c4:	e008      	b.n	80057d8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80057c6:	6839      	ldr	r1, [r7, #0]
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	f001 fc94 	bl	80070f6 <USBD_CtlError>
          ret = USBD_FAIL;
 80057ce:	2303      	movs	r3, #3
 80057d0:	75fb      	strb	r3, [r7, #23]
          break;
 80057d2:	e002      	b.n	80057da <USBD_CDC_Setup+0x19e>
          break;
 80057d4:	bf00      	nop
 80057d6:	e008      	b.n	80057ea <USBD_CDC_Setup+0x1ae>
          break;
 80057d8:	bf00      	nop
      }
      break;
 80057da:	e006      	b.n	80057ea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80057dc:	6839      	ldr	r1, [r7, #0]
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f001 fc89 	bl	80070f6 <USBD_CtlError>
      ret = USBD_FAIL;
 80057e4:	2303      	movs	r3, #3
 80057e6:	75fb      	strb	r3, [r7, #23]
      break;
 80057e8:	bf00      	nop
  }

  return (uint8_t)ret;
 80057ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3718      	adds	r7, #24
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}

080057f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005806:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	32b0      	adds	r2, #176	; 0xb0
 8005812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800581a:	2303      	movs	r3, #3
 800581c:	e065      	b.n	80058ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	32b0      	adds	r2, #176	; 0xb0
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800582e:	78fb      	ldrb	r3, [r7, #3]
 8005830:	f003 020f 	and.w	r2, r3, #15
 8005834:	6879      	ldr	r1, [r7, #4]
 8005836:	4613      	mov	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	4413      	add	r3, r2
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	440b      	add	r3, r1
 8005840:	3318      	adds	r3, #24
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d02f      	beq.n	80058a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f003 020f 	and.w	r2, r3, #15
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	009b      	lsls	r3, r3, #2
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	3318      	adds	r3, #24
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	78fb      	ldrb	r3, [r7, #3]
 8005860:	f003 010f 	and.w	r1, r3, #15
 8005864:	68f8      	ldr	r0, [r7, #12]
 8005866:	460b      	mov	r3, r1
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	440b      	add	r3, r1
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	4403      	add	r3, r0
 8005870:	3348      	adds	r3, #72	; 0x48
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	fbb2 f1f3 	udiv	r1, r2, r3
 8005878:	fb01 f303 	mul.w	r3, r1, r3
 800587c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800587e:	2b00      	cmp	r3, #0
 8005880:	d112      	bne.n	80058a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005882:	78fb      	ldrb	r3, [r7, #3]
 8005884:	f003 020f 	and.w	r2, r3, #15
 8005888:	6879      	ldr	r1, [r7, #4]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	009b      	lsls	r3, r3, #2
 8005892:	440b      	add	r3, r1
 8005894:	3318      	adds	r3, #24
 8005896:	2200      	movs	r2, #0
 8005898:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800589a:	78f9      	ldrb	r1, [r7, #3]
 800589c:	2300      	movs	r3, #0
 800589e:	2200      	movs	r2, #0
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f002 fa68 	bl	8007d76 <USBD_LL_Transmit>
 80058a6:	e01f      	b.n	80058e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	33b0      	adds	r3, #176	; 0xb0
 80058ba:	009b      	lsls	r3, r3, #2
 80058bc:	4413      	add	r3, r2
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	691b      	ldr	r3, [r3, #16]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d010      	beq.n	80058e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	33b0      	adds	r3, #176	; 0xb0
 80058d0:	009b      	lsls	r3, r3, #2
 80058d2:	4413      	add	r3, r2
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	691b      	ldr	r3, [r3, #16]
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80058e4:	78fa      	ldrb	r2, [r7, #3]
 80058e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80058e8:	2300      	movs	r3, #0
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b084      	sub	sp, #16
 80058f6:	af00      	add	r7, sp, #0
 80058f8:	6078      	str	r0, [r7, #4]
 80058fa:	460b      	mov	r3, r1
 80058fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	32b0      	adds	r2, #176	; 0xb0
 8005908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800590c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	32b0      	adds	r2, #176	; 0xb0
 8005918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d101      	bne.n	8005924 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005920:	2303      	movs	r3, #3
 8005922:	e01a      	b.n	800595a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	4619      	mov	r1, r3
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f002 fa66 	bl	8007dfa <USBD_LL_GetRxDataSize>
 800592e:	4602      	mov	r2, r0
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	33b0      	adds	r3, #176	; 0xb0
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	4413      	add	r3, r2
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005954:	4611      	mov	r1, r2
 8005956:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3710      	adds	r7, #16
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	32b0      	adds	r2, #176	; 0xb0
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d101      	bne.n	8005984 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005980:	2303      	movs	r3, #3
 8005982:	e025      	b.n	80059d0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800598a:	687a      	ldr	r2, [r7, #4]
 800598c:	33b0      	adds	r3, #176	; 0xb0
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	4413      	add	r3, r2
 8005992:	685b      	ldr	r3, [r3, #4]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01a      	beq.n	80059ce <USBD_CDC_EP0_RxReady+0x6c>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800599e:	2bff      	cmp	r3, #255	; 0xff
 80059a0:	d015      	beq.n	80059ce <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	33b0      	adds	r3, #176	; 0xb0
 80059ac:	009b      	lsls	r3, r3, #2
 80059ae:	4413      	add	r3, r2
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80059ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80059bc:	68fa      	ldr	r2, [r7, #12]
 80059be:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80059c2:	b292      	uxth	r2, r2
 80059c4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	22ff      	movs	r2, #255	; 0xff
 80059ca:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3710      	adds	r7, #16
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b086      	sub	sp, #24
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80059e0:	2182      	movs	r1, #130	; 0x82
 80059e2:	4818      	ldr	r0, [pc, #96]	; (8005a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059e4:	f000 fd4f 	bl	8006486 <USBD_GetEpDesc>
 80059e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80059ea:	2101      	movs	r1, #1
 80059ec:	4815      	ldr	r0, [pc, #84]	; (8005a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059ee:	f000 fd4a 	bl	8006486 <USBD_GetEpDesc>
 80059f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80059f4:	2181      	movs	r1, #129	; 0x81
 80059f6:	4813      	ldr	r0, [pc, #76]	; (8005a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80059f8:	f000 fd45 	bl	8006486 <USBD_GetEpDesc>
 80059fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2210      	movs	r2, #16
 8005a08:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d006      	beq.n	8005a1e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a10:	693b      	ldr	r3, [r7, #16]
 8005a12:	2200      	movs	r2, #0
 8005a14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a18:	711a      	strb	r2, [r3, #4]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d006      	beq.n	8005a32 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a2c:	711a      	strb	r2, [r3, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2243      	movs	r2, #67	; 0x43
 8005a36:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005a38:	4b02      	ldr	r3, [pc, #8]	; (8005a44 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3718      	adds	r7, #24
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}
 8005a42:	bf00      	nop
 8005a44:	20000050 	.word	0x20000050

08005a48 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b086      	sub	sp, #24
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005a50:	2182      	movs	r1, #130	; 0x82
 8005a52:	4818      	ldr	r0, [pc, #96]	; (8005ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a54:	f000 fd17 	bl	8006486 <USBD_GetEpDesc>
 8005a58:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	4815      	ldr	r0, [pc, #84]	; (8005ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a5e:	f000 fd12 	bl	8006486 <USBD_GetEpDesc>
 8005a62:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005a64:	2181      	movs	r1, #129	; 0x81
 8005a66:	4813      	ldr	r0, [pc, #76]	; (8005ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005a68:	f000 fd0d 	bl	8006486 <USBD_GetEpDesc>
 8005a6c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d002      	beq.n	8005a7a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	2210      	movs	r2, #16
 8005a78:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d006      	beq.n	8005a8e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2200      	movs	r2, #0
 8005a84:	711a      	strb	r2, [r3, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f042 0202 	orr.w	r2, r2, #2
 8005a8c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d006      	beq.n	8005aa2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	711a      	strb	r2, [r3, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f042 0202 	orr.w	r2, r2, #2
 8005aa0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2243      	movs	r2, #67	; 0x43
 8005aa6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005aa8:	4b02      	ldr	r3, [pc, #8]	; (8005ab4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	20000050 	.word	0x20000050

08005ab8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b086      	sub	sp, #24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ac0:	2182      	movs	r1, #130	; 0x82
 8005ac2:	4818      	ldr	r0, [pc, #96]	; (8005b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ac4:	f000 fcdf 	bl	8006486 <USBD_GetEpDesc>
 8005ac8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005aca:	2101      	movs	r1, #1
 8005acc:	4815      	ldr	r0, [pc, #84]	; (8005b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ace:	f000 fcda 	bl	8006486 <USBD_GetEpDesc>
 8005ad2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005ad4:	2181      	movs	r1, #129	; 0x81
 8005ad6:	4813      	ldr	r0, [pc, #76]	; (8005b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005ad8:	f000 fcd5 	bl	8006486 <USBD_GetEpDesc>
 8005adc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d002      	beq.n	8005aea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	2210      	movs	r2, #16
 8005ae8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d006      	beq.n	8005afe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005af8:	711a      	strb	r2, [r3, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d006      	beq.n	8005b12 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0c:	711a      	strb	r2, [r3, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2243      	movs	r2, #67	; 0x43
 8005b16:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3718      	adds	r7, #24
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000050 	.word	0x20000050

08005b28 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	220a      	movs	r2, #10
 8005b34:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005b36:	4b03      	ldr	r3, [pc, #12]	; (8005b44 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	2000000c 	.word	0x2000000c

08005b48 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b083      	sub	sp, #12
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005b58:	2303      	movs	r3, #3
 8005b5a:	e009      	b.n	8005b70 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	33b0      	adds	r3, #176	; 0xb0
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	32b0      	adds	r2, #176	; 0xb0
 8005b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b96:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d101      	bne.n	8005ba2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e008      	b.n	8005bb4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	68ba      	ldr	r2, [r7, #8]
 8005ba6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	687a      	ldr	r2, [r7, #4]
 8005bae:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	371c      	adds	r7, #28
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	32b0      	adds	r2, #176	; 0xb0
 8005bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bd8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d101      	bne.n	8005be4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e004      	b.n	8005bee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005bec:	2300      	movs	r3, #0
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
	...

08005bfc <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b084      	sub	sp, #16
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	32b0      	adds	r2, #176	; 0xb0
 8005c0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c12:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005c14:	2301      	movs	r3, #1
 8005c16:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	32b0      	adds	r2, #176	; 0xb0
 8005c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d101      	bne.n	8005c2e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	e025      	b.n	8005c7a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11f      	bne.n	8005c78 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005c40:	4b10      	ldr	r3, [pc, #64]	; (8005c84 <USBD_CDC_TransmitPacket+0x88>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	4613      	mov	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4413      	add	r3, r2
 8005c56:	009b      	lsls	r3, r3, #2
 8005c58:	4403      	add	r3, r0
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005c5e:	4b09      	ldr	r3, [pc, #36]	; (8005c84 <USBD_CDC_TransmitPacket+0x88>)
 8005c60:	7819      	ldrb	r1, [r3, #0]
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005c68:	68bb      	ldr	r3, [r7, #8]
 8005c6a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f002 f881 	bl	8007d76 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005c74:	2300      	movs	r3, #0
 8005c76:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	20000093 	.word	0x20000093

08005c88 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	32b0      	adds	r2, #176	; 0xb0
 8005c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32b0      	adds	r2, #176	; 0xb0
 8005caa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d101      	bne.n	8005cb6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005cb2:	2303      	movs	r3, #3
 8005cb4:	e018      	b.n	8005ce8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	7c1b      	ldrb	r3, [r3, #16]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cbe:	4b0c      	ldr	r3, [pc, #48]	; (8005cf0 <USBD_CDC_ReceivePacket+0x68>)
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f002 f873 	bl	8007db8 <USBD_LL_PrepareReceive>
 8005cd2:	e008      	b.n	8005ce6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005cd4:	4b06      	ldr	r3, [pc, #24]	; (8005cf0 <USBD_CDC_ReceivePacket+0x68>)
 8005cd6:	7819      	ldrb	r1, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cde:	2340      	movs	r3, #64	; 0x40
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f002 f869 	bl	8007db8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	20000094 	.word	0x20000094

08005cf4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b086      	sub	sp, #24
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d08:	2303      	movs	r3, #3
 8005d0a:	e01f      	b.n	8005d4c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d003      	beq.n	8005d32 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	79fa      	ldrb	r2, [r7, #7]
 8005d3e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005d40:	68f8      	ldr	r0, [r7, #12]
 8005d42:	f001 fee3 	bl	8007b0c <USBD_LL_Init>
 8005d46:	4603      	mov	r3, r0
 8005d48:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005d4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	3718      	adds	r7, #24
 8005d50:	46bd      	mov	sp, r7
 8005d52:	bd80      	pop	{r7, pc}

08005d54 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005d68:	2303      	movs	r3, #3
 8005d6a:	e025      	b.n	8005db8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	32ae      	adds	r2, #174	; 0xae
 8005d7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	32ae      	adds	r2, #174	; 0xae
 8005d92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	f107 020e 	add.w	r2, r7, #14
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	4798      	blx	r3
 8005da0:	4602      	mov	r2, r0
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005dae:	1c5a      	adds	r2, r3, #1
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005db6:	2300      	movs	r3, #0
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	3710      	adds	r7, #16
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}

08005dc0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f001 feeb 	bl	8007ba4 <USBD_LL_Start>
 8005dce:	4603      	mov	r3, r0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}

08005dd8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b083      	sub	sp, #12
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005de0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr

08005dee <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b084      	sub	sp, #16
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
 8005df6:	460b      	mov	r3, r1
 8005df8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d009      	beq.n	8005e1c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	78fa      	ldrb	r2, [r7, #3]
 8005e12:	4611      	mov	r1, r2
 8005e14:	6878      	ldr	r0, [r7, #4]
 8005e16:	4798      	blx	r3
 8005e18:	4603      	mov	r3, r0
 8005e1a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	3710      	adds	r7, #16
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}

08005e26 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e26:	b580      	push	{r7, lr}
 8005e28:	b084      	sub	sp, #16
 8005e2a:	af00      	add	r7, sp, #0
 8005e2c:	6078      	str	r0, [r7, #4]
 8005e2e:	460b      	mov	r3, r1
 8005e30:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d001      	beq.n	8005e50 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005e50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3710      	adds	r7, #16
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}

08005e5a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005e5a:	b580      	push	{r7, lr}
 8005e5c:	b084      	sub	sp, #16
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	4618      	mov	r0, r3
 8005e6e:	f001 f908 	bl	8007082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005e80:	461a      	mov	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005e8e:	f003 031f 	and.w	r3, r3, #31
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d01a      	beq.n	8005ecc <USBD_LL_SetupStage+0x72>
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d822      	bhi.n	8005ee0 <USBD_LL_SetupStage+0x86>
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d002      	beq.n	8005ea4 <USBD_LL_SetupStage+0x4a>
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d00a      	beq.n	8005eb8 <USBD_LL_SetupStage+0x5e>
 8005ea2:	e01d      	b.n	8005ee0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005eaa:	4619      	mov	r1, r3
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fb5f 	bl	8006570 <USBD_StdDevReq>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
      break;
 8005eb6:	e020      	b.n	8005efa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fbc7 	bl	8006654 <USBD_StdItfReq>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	73fb      	strb	r3, [r7, #15]
      break;
 8005eca:	e016      	b.n	8005efa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fc29 	bl	800672c <USBD_StdEPReq>
 8005eda:	4603      	mov	r3, r0
 8005edc:	73fb      	strb	r3, [r7, #15]
      break;
 8005ede:	e00c      	b.n	8005efa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005ee6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	4619      	mov	r1, r3
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f001 feb8 	bl	8007c64 <USBD_LL_StallEP>
 8005ef4:	4603      	mov	r3, r0
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	bf00      	nop
  }

  return ret;
 8005efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3710      	adds	r7, #16
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	60f8      	str	r0, [r7, #12]
 8005f0c:	460b      	mov	r3, r1
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f12:	2300      	movs	r3, #0
 8005f14:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d16e      	bne.n	8005ffa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005f22:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005f2a:	2b03      	cmp	r3, #3
 8005f2c:	f040 8098 	bne.w	8006060 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	429a      	cmp	r2, r3
 8005f3a:	d913      	bls.n	8005f64 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	689a      	ldr	r2, [r3, #8]
 8005f40:	693b      	ldr	r3, [r7, #16]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	1ad2      	subs	r2, r2, r3
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	4293      	cmp	r3, r2
 8005f54:	bf28      	it	cs
 8005f56:	4613      	movcs	r3, r2
 8005f58:	461a      	mov	r2, r3
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f001 f984 	bl	800726a <USBD_CtlContinueRx>
 8005f62:	e07d      	b.n	8006060 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f6a:	f003 031f 	and.w	r3, r3, #31
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	d014      	beq.n	8005f9c <USBD_LL_DataOutStage+0x98>
 8005f72:	2b02      	cmp	r3, #2
 8005f74:	d81d      	bhi.n	8005fb2 <USBD_LL_DataOutStage+0xae>
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d002      	beq.n	8005f80 <USBD_LL_DataOutStage+0x7c>
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d003      	beq.n	8005f86 <USBD_LL_DataOutStage+0x82>
 8005f7e:	e018      	b.n	8005fb2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005f80:	2300      	movs	r3, #0
 8005f82:	75bb      	strb	r3, [r7, #22]
            break;
 8005f84:	e018      	b.n	8005fb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	4619      	mov	r1, r3
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f000 fa5e 	bl	8006452 <USBD_CoreFindIF>
 8005f96:	4603      	mov	r3, r0
 8005f98:	75bb      	strb	r3, [r7, #22]
            break;
 8005f9a:	e00d      	b.n	8005fb8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005fa2:	b2db      	uxtb	r3, r3
 8005fa4:	4619      	mov	r1, r3
 8005fa6:	68f8      	ldr	r0, [r7, #12]
 8005fa8:	f000 fa60 	bl	800646c <USBD_CoreFindEP>
 8005fac:	4603      	mov	r3, r0
 8005fae:	75bb      	strb	r3, [r7, #22]
            break;
 8005fb0:	e002      	b.n	8005fb8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	75bb      	strb	r3, [r7, #22]
            break;
 8005fb6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005fb8:	7dbb      	ldrb	r3, [r7, #22]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d119      	bne.n	8005ff2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b03      	cmp	r3, #3
 8005fc8:	d113      	bne.n	8005ff2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005fca:	7dba      	ldrb	r2, [r7, #22]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	32ae      	adds	r2, #174	; 0xae
 8005fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd4:	691b      	ldr	r3, [r3, #16]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00b      	beq.n	8005ff2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005fda:	7dba      	ldrb	r2, [r7, #22]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005fe2:	7dba      	ldrb	r2, [r7, #22]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	32ae      	adds	r2, #174	; 0xae
 8005fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005ff2:	68f8      	ldr	r0, [r7, #12]
 8005ff4:	f001 f94a 	bl	800728c <USBD_CtlSendStatus>
 8005ff8:	e032      	b.n	8006060 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005ffa:	7afb      	ldrb	r3, [r7, #11]
 8005ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006000:	b2db      	uxtb	r3, r3
 8006002:	4619      	mov	r1, r3
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 fa31 	bl	800646c <USBD_CoreFindEP>
 800600a:	4603      	mov	r3, r0
 800600c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800600e:	7dbb      	ldrb	r3, [r7, #22]
 8006010:	2bff      	cmp	r3, #255	; 0xff
 8006012:	d025      	beq.n	8006060 <USBD_LL_DataOutStage+0x15c>
 8006014:	7dbb      	ldrb	r3, [r7, #22]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d122      	bne.n	8006060 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b03      	cmp	r3, #3
 8006024:	d117      	bne.n	8006056 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006026:	7dba      	ldrb	r2, [r7, #22]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	32ae      	adds	r2, #174	; 0xae
 800602c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00f      	beq.n	8006056 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006036:	7dba      	ldrb	r2, [r7, #22]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800603e:	7dba      	ldrb	r2, [r7, #22]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	32ae      	adds	r2, #174	; 0xae
 8006044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006048:	699b      	ldr	r3, [r3, #24]
 800604a:	7afa      	ldrb	r2, [r7, #11]
 800604c:	4611      	mov	r1, r2
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	4798      	blx	r3
 8006052:	4603      	mov	r3, r0
 8006054:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006056:	7dfb      	ldrb	r3, [r7, #23]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d001      	beq.n	8006060 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800605c:	7dfb      	ldrb	r3, [r7, #23]
 800605e:	e000      	b.n	8006062 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3718      	adds	r7, #24
 8006066:	46bd      	mov	sp, r7
 8006068:	bd80      	pop	{r7, pc}

0800606a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800606a:	b580      	push	{r7, lr}
 800606c:	b086      	sub	sp, #24
 800606e:	af00      	add	r7, sp, #0
 8006070:	60f8      	str	r0, [r7, #12]
 8006072:	460b      	mov	r3, r1
 8006074:	607a      	str	r2, [r7, #4]
 8006076:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006078:	7afb      	ldrb	r3, [r7, #11]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d16f      	bne.n	800615e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3314      	adds	r3, #20
 8006082:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800608a:	2b02      	cmp	r3, #2
 800608c:	d15a      	bne.n	8006144 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800608e:	693b      	ldr	r3, [r7, #16]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	68db      	ldr	r3, [r3, #12]
 8006096:	429a      	cmp	r2, r3
 8006098:	d914      	bls.n	80060c4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	68db      	ldr	r3, [r3, #12]
 80060a2:	1ad2      	subs	r2, r2, r3
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	689b      	ldr	r3, [r3, #8]
 80060ac:	461a      	mov	r2, r3
 80060ae:	6879      	ldr	r1, [r7, #4]
 80060b0:	68f8      	ldr	r0, [r7, #12]
 80060b2:	f001 f8ac 	bl	800720e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060b6:	2300      	movs	r3, #0
 80060b8:	2200      	movs	r2, #0
 80060ba:	2100      	movs	r1, #0
 80060bc:	68f8      	ldr	r0, [r7, #12]
 80060be:	f001 fe7b 	bl	8007db8 <USBD_LL_PrepareReceive>
 80060c2:	e03f      	b.n	8006144 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	68da      	ldr	r2, [r3, #12]
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d11c      	bne.n	800610a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80060d8:	429a      	cmp	r2, r3
 80060da:	d316      	bcc.n	800610a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80060e6:	429a      	cmp	r2, r3
 80060e8:	d20f      	bcs.n	800610a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80060ea:	2200      	movs	r2, #0
 80060ec:	2100      	movs	r1, #0
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f001 f88d 	bl	800720e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80060fc:	2300      	movs	r3, #0
 80060fe:	2200      	movs	r2, #0
 8006100:	2100      	movs	r1, #0
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f001 fe58 	bl	8007db8 <USBD_LL_PrepareReceive>
 8006108:	e01c      	b.n	8006144 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b03      	cmp	r3, #3
 8006114:	d10f      	bne.n	8006136 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d009      	beq.n	8006136 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2200      	movs	r2, #0
 8006126:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006130:	68db      	ldr	r3, [r3, #12]
 8006132:	68f8      	ldr	r0, [r7, #12]
 8006134:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006136:	2180      	movs	r1, #128	; 0x80
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f001 fd93 	bl	8007c64 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f001 f8b7 	bl	80072b2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d03a      	beq.n	80061c4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800614e:	68f8      	ldr	r0, [r7, #12]
 8006150:	f7ff fe42 	bl	8005dd8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800615c:	e032      	b.n	80061c4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006164:	b2db      	uxtb	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	68f8      	ldr	r0, [r7, #12]
 800616a:	f000 f97f 	bl	800646c <USBD_CoreFindEP>
 800616e:	4603      	mov	r3, r0
 8006170:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006172:	7dfb      	ldrb	r3, [r7, #23]
 8006174:	2bff      	cmp	r3, #255	; 0xff
 8006176:	d025      	beq.n	80061c4 <USBD_LL_DataInStage+0x15a>
 8006178:	7dfb      	ldrb	r3, [r7, #23]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d122      	bne.n	80061c4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b03      	cmp	r3, #3
 8006188:	d11c      	bne.n	80061c4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800618a:	7dfa      	ldrb	r2, [r7, #23]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	32ae      	adds	r2, #174	; 0xae
 8006190:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006194:	695b      	ldr	r3, [r3, #20]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d014      	beq.n	80061c4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800619a:	7dfa      	ldrb	r2, [r7, #23]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80061a2:	7dfa      	ldrb	r2, [r7, #23]
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	32ae      	adds	r2, #174	; 0xae
 80061a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	7afa      	ldrb	r2, [r7, #11]
 80061b0:	4611      	mov	r1, r2
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	4798      	blx	r3
 80061b6:	4603      	mov	r3, r0
 80061b8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80061ba:	7dbb      	ldrb	r3, [r7, #22]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d001      	beq.n	80061c4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80061c0:	7dbb      	ldrb	r3, [r7, #22]
 80061c2:	e000      	b.n	80061c6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80061d6:	2300      	movs	r3, #0
 80061d8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006206:	2b00      	cmp	r3, #0
 8006208:	d014      	beq.n	8006234 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006210:	685b      	ldr	r3, [r3, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00e      	beq.n	8006234 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	6852      	ldr	r2, [r2, #4]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	4611      	mov	r1, r2
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	4798      	blx	r3
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006230:	2303      	movs	r3, #3
 8006232:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006234:	2340      	movs	r3, #64	; 0x40
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 fccd 	bl	8007bda <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2240      	movs	r2, #64	; 0x40
 800624c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	2200      	movs	r2, #0
 8006254:	2180      	movs	r1, #128	; 0x80
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f001 fcbf 	bl	8007bda <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2240      	movs	r2, #64	; 0x40
 8006266:	621a      	str	r2, [r3, #32]

  return ret;
 8006268:	7bfb      	ldrb	r3, [r7, #15]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006272:	b480      	push	{r7}
 8006274:	b083      	sub	sp, #12
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006292:	b480      	push	{r7}
 8006294:	b083      	sub	sp, #12
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062a0:	b2da      	uxtb	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2204      	movs	r2, #4
 80062ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80062b0:	2300      	movs	r3, #0
}
 80062b2:	4618      	mov	r0, r3
 80062b4:	370c      	adds	r7, #12
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr

080062be <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80062be:	b480      	push	{r7}
 80062c0:	b083      	sub	sp, #12
 80062c2:	af00      	add	r7, sp, #0
 80062c4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b04      	cmp	r3, #4
 80062d0:	d106      	bne.n	80062e0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80062d8:	b2da      	uxtb	r2, r3
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b03      	cmp	r3, #3
 8006300:	d110      	bne.n	8006324 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00b      	beq.n	8006324 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006312:	69db      	ldr	r3, [r3, #28]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d005      	beq.n	8006324 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006324:	2300      	movs	r3, #0
}
 8006326:	4618      	mov	r0, r3
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800632e:	b580      	push	{r7, lr}
 8006330:	b082      	sub	sp, #8
 8006332:	af00      	add	r7, sp, #0
 8006334:	6078      	str	r0, [r7, #4]
 8006336:	460b      	mov	r3, r1
 8006338:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	32ae      	adds	r2, #174	; 0xae
 8006344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800634c:	2303      	movs	r3, #3
 800634e:	e01c      	b.n	800638a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006356:	b2db      	uxtb	r3, r3
 8006358:	2b03      	cmp	r3, #3
 800635a:	d115      	bne.n	8006388 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	32ae      	adds	r2, #174	; 0xae
 8006366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d00b      	beq.n	8006388 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	32ae      	adds	r2, #174	; 0xae
 800637a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800637e:	6a1b      	ldr	r3, [r3, #32]
 8006380:	78fa      	ldrb	r2, [r7, #3]
 8006382:	4611      	mov	r1, r2
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	3708      	adds	r7, #8
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}

08006392 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006392:	b580      	push	{r7, lr}
 8006394:	b082      	sub	sp, #8
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	460b      	mov	r3, r1
 800639c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	32ae      	adds	r2, #174	; 0xae
 80063a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d101      	bne.n	80063b4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80063b0:	2303      	movs	r3, #3
 80063b2:	e01c      	b.n	80063ee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b03      	cmp	r3, #3
 80063be:	d115      	bne.n	80063ec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	32ae      	adds	r2, #174	; 0xae
 80063ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d00b      	beq.n	80063ec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	32ae      	adds	r2, #174	; 0xae
 80063de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e4:	78fa      	ldrb	r2, [r7, #3]
 80063e6:	4611      	mov	r1, r2
 80063e8:	6878      	ldr	r0, [r7, #4]
 80063ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006414:	2300      	movs	r3, #0
 8006416:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006426:	2b00      	cmp	r3, #0
 8006428:	d00e      	beq.n	8006448 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6852      	ldr	r2, [r2, #4]
 8006436:	b2d2      	uxtb	r2, r2
 8006438:	4611      	mov	r1, r2
 800643a:	6878      	ldr	r0, [r7, #4]
 800643c:	4798      	blx	r3
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006444:	2303      	movs	r3, #3
 8006446:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006448:	7bfb      	ldrb	r3, [r7, #15]
}
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006452:	b480      	push	{r7}
 8006454:	b083      	sub	sp, #12
 8006456:	af00      	add	r7, sp, #0
 8006458:	6078      	str	r0, [r7, #4]
 800645a:	460b      	mov	r3, r1
 800645c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800645e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006460:	4618      	mov	r0, r3
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	460b      	mov	r3, r1
 8006476:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006478:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800647a:	4618      	mov	r0, r3
 800647c:	370c      	adds	r7, #12
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr

08006486 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006486:	b580      	push	{r7, lr}
 8006488:	b086      	sub	sp, #24
 800648a:	af00      	add	r7, sp, #0
 800648c:	6078      	str	r0, [r7, #4]
 800648e:	460b      	mov	r3, r1
 8006490:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800649a:	2300      	movs	r3, #0
 800649c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	885b      	ldrh	r3, [r3, #2]
 80064a2:	b29a      	uxth	r2, r3
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	b29b      	uxth	r3, r3
 80064aa:	429a      	cmp	r2, r3
 80064ac:	d920      	bls.n	80064f0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80064b6:	e013      	b.n	80064e0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80064b8:	f107 030a 	add.w	r3, r7, #10
 80064bc:	4619      	mov	r1, r3
 80064be:	6978      	ldr	r0, [r7, #20]
 80064c0:	f000 f81b 	bl	80064fa <USBD_GetNextDesc>
 80064c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	785b      	ldrb	r3, [r3, #1]
 80064ca:	2b05      	cmp	r3, #5
 80064cc:	d108      	bne.n	80064e0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	789b      	ldrb	r3, [r3, #2]
 80064d6:	78fa      	ldrb	r2, [r7, #3]
 80064d8:	429a      	cmp	r2, r3
 80064da:	d008      	beq.n	80064ee <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80064dc:	2300      	movs	r3, #0
 80064de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	885b      	ldrh	r3, [r3, #2]
 80064e4:	b29a      	uxth	r2, r3
 80064e6:	897b      	ldrh	r3, [r7, #10]
 80064e8:	429a      	cmp	r2, r3
 80064ea:	d8e5      	bhi.n	80064b8 <USBD_GetEpDesc+0x32>
 80064ec:	e000      	b.n	80064f0 <USBD_GetEpDesc+0x6a>
          break;
 80064ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80064f0:	693b      	ldr	r3, [r7, #16]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
 8006502:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	881a      	ldrh	r2, [r3, #0]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	781b      	ldrb	r3, [r3, #0]
 8006510:	b29b      	uxth	r3, r3
 8006512:	4413      	add	r3, r2
 8006514:	b29a      	uxth	r2, r3
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	461a      	mov	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4413      	add	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006526:	68fb      	ldr	r3, [r7, #12]
}
 8006528:	4618      	mov	r0, r3
 800652a:	3714      	adds	r7, #20
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006534:	b480      	push	{r7}
 8006536:	b087      	sub	sp, #28
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	3301      	adds	r3, #1
 800654a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	781b      	ldrb	r3, [r3, #0]
 8006550:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006552:	8a3b      	ldrh	r3, [r7, #16]
 8006554:	021b      	lsls	r3, r3, #8
 8006556:	b21a      	sxth	r2, r3
 8006558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800655c:	4313      	orrs	r3, r2
 800655e:	b21b      	sxth	r3, r3
 8006560:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006562:	89fb      	ldrh	r3, [r7, #14]
}
 8006564:	4618      	mov	r0, r3
 8006566:	371c      	adds	r7, #28
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800657a:	2300      	movs	r3, #0
 800657c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	781b      	ldrb	r3, [r3, #0]
 8006582:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006586:	2b40      	cmp	r3, #64	; 0x40
 8006588:	d005      	beq.n	8006596 <USBD_StdDevReq+0x26>
 800658a:	2b40      	cmp	r3, #64	; 0x40
 800658c:	d857      	bhi.n	800663e <USBD_StdDevReq+0xce>
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00f      	beq.n	80065b2 <USBD_StdDevReq+0x42>
 8006592:	2b20      	cmp	r3, #32
 8006594:	d153      	bne.n	800663e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	32ae      	adds	r2, #174	; 0xae
 80065a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	4798      	blx	r3
 80065ac:	4603      	mov	r3, r0
 80065ae:	73fb      	strb	r3, [r7, #15]
      break;
 80065b0:	e04a      	b.n	8006648 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	785b      	ldrb	r3, [r3, #1]
 80065b6:	2b09      	cmp	r3, #9
 80065b8:	d83b      	bhi.n	8006632 <USBD_StdDevReq+0xc2>
 80065ba:	a201      	add	r2, pc, #4	; (adr r2, 80065c0 <USBD_StdDevReq+0x50>)
 80065bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c0:	08006615 	.word	0x08006615
 80065c4:	08006629 	.word	0x08006629
 80065c8:	08006633 	.word	0x08006633
 80065cc:	0800661f 	.word	0x0800661f
 80065d0:	08006633 	.word	0x08006633
 80065d4:	080065f3 	.word	0x080065f3
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	08006633 	.word	0x08006633
 80065e0:	0800660b 	.word	0x0800660b
 80065e4:	080065fd 	.word	0x080065fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80065e8:	6839      	ldr	r1, [r7, #0]
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f000 fa3c 	bl	8006a68 <USBD_GetDescriptor>
          break;
 80065f0:	e024      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80065f2:	6839      	ldr	r1, [r7, #0]
 80065f4:	6878      	ldr	r0, [r7, #4]
 80065f6:	f000 fba1 	bl	8006d3c <USBD_SetAddress>
          break;
 80065fa:	e01f      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 fbe0 	bl	8006dc4 <USBD_SetConfig>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]
          break;
 8006608:	e018      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800660a:	6839      	ldr	r1, [r7, #0]
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 fc83 	bl	8006f18 <USBD_GetConfig>
          break;
 8006612:	e013      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006614:	6839      	ldr	r1, [r7, #0]
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 fcb4 	bl	8006f84 <USBD_GetStatus>
          break;
 800661c:	e00e      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fce3 	bl	8006fec <USBD_SetFeature>
          break;
 8006626:	e009      	b.n	800663c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006628:	6839      	ldr	r1, [r7, #0]
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 fd07 	bl	800703e <USBD_ClrFeature>
          break;
 8006630:	e004      	b.n	800663c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006632:	6839      	ldr	r1, [r7, #0]
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 fd5e 	bl	80070f6 <USBD_CtlError>
          break;
 800663a:	bf00      	nop
      }
      break;
 800663c:	e004      	b.n	8006648 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fd58 	bl	80070f6 <USBD_CtlError>
      break;
 8006646:	bf00      	nop
  }

  return ret;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop

08006654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b084      	sub	sp, #16
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	781b      	ldrb	r3, [r3, #0]
 8006666:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d005      	beq.n	800667a <USBD_StdItfReq+0x26>
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d852      	bhi.n	8006718 <USBD_StdItfReq+0xc4>
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <USBD_StdItfReq+0x26>
 8006676:	2b20      	cmp	r3, #32
 8006678:	d14e      	bne.n	8006718 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006680:	b2db      	uxtb	r3, r3
 8006682:	3b01      	subs	r3, #1
 8006684:	2b02      	cmp	r3, #2
 8006686:	d840      	bhi.n	800670a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	889b      	ldrh	r3, [r3, #4]
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b01      	cmp	r3, #1
 8006690:	d836      	bhi.n	8006700 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	889b      	ldrh	r3, [r3, #4]
 8006696:	b2db      	uxtb	r3, r3
 8006698:	4619      	mov	r1, r3
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f7ff fed9 	bl	8006452 <USBD_CoreFindIF>
 80066a0:	4603      	mov	r3, r0
 80066a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066a4:	7bbb      	ldrb	r3, [r7, #14]
 80066a6:	2bff      	cmp	r3, #255	; 0xff
 80066a8:	d01d      	beq.n	80066e6 <USBD_StdItfReq+0x92>
 80066aa:	7bbb      	ldrb	r3, [r7, #14]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d11a      	bne.n	80066e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80066b0:	7bba      	ldrb	r2, [r7, #14]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	32ae      	adds	r2, #174	; 0xae
 80066b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00f      	beq.n	80066e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80066c0:	7bba      	ldrb	r2, [r7, #14]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80066c8:	7bba      	ldrb	r2, [r7, #14]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	32ae      	adds	r2, #174	; 0xae
 80066ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066d2:	689b      	ldr	r3, [r3, #8]
 80066d4:	6839      	ldr	r1, [r7, #0]
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	4798      	blx	r3
 80066da:	4603      	mov	r3, r0
 80066dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066de:	e004      	b.n	80066ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80066e0:	2303      	movs	r3, #3
 80066e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80066e4:	e001      	b.n	80066ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	88db      	ldrh	r3, [r3, #6]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d110      	bne.n	8006714 <USBD_StdItfReq+0xc0>
 80066f2:	7bfb      	ldrb	r3, [r7, #15]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d10d      	bne.n	8006714 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fdc7 	bl	800728c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80066fe:	e009      	b.n	8006714 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fcf7 	bl	80070f6 <USBD_CtlError>
          break;
 8006708:	e004      	b.n	8006714 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800670a:	6839      	ldr	r1, [r7, #0]
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 fcf2 	bl	80070f6 <USBD_CtlError>
          break;
 8006712:	e000      	b.n	8006716 <USBD_StdItfReq+0xc2>
          break;
 8006714:	bf00      	nop
      }
      break;
 8006716:	e004      	b.n	8006722 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fceb 	bl	80070f6 <USBD_CtlError>
      break;
 8006720:	bf00      	nop
  }

  return ret;
 8006722:	7bfb      	ldrb	r3, [r7, #15]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006736:	2300      	movs	r3, #0
 8006738:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	889b      	ldrh	r3, [r3, #4]
 800673e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006748:	2b40      	cmp	r3, #64	; 0x40
 800674a:	d007      	beq.n	800675c <USBD_StdEPReq+0x30>
 800674c:	2b40      	cmp	r3, #64	; 0x40
 800674e:	f200 817f 	bhi.w	8006a50 <USBD_StdEPReq+0x324>
 8006752:	2b00      	cmp	r3, #0
 8006754:	d02a      	beq.n	80067ac <USBD_StdEPReq+0x80>
 8006756:	2b20      	cmp	r3, #32
 8006758:	f040 817a 	bne.w	8006a50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800675c:	7bbb      	ldrb	r3, [r7, #14]
 800675e:	4619      	mov	r1, r3
 8006760:	6878      	ldr	r0, [r7, #4]
 8006762:	f7ff fe83 	bl	800646c <USBD_CoreFindEP>
 8006766:	4603      	mov	r3, r0
 8006768:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800676a:	7b7b      	ldrb	r3, [r7, #13]
 800676c:	2bff      	cmp	r3, #255	; 0xff
 800676e:	f000 8174 	beq.w	8006a5a <USBD_StdEPReq+0x32e>
 8006772:	7b7b      	ldrb	r3, [r7, #13]
 8006774:	2b00      	cmp	r3, #0
 8006776:	f040 8170 	bne.w	8006a5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800677a:	7b7a      	ldrb	r2, [r7, #13]
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006782:	7b7a      	ldrb	r2, [r7, #13]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	32ae      	adds	r2, #174	; 0xae
 8006788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	2b00      	cmp	r3, #0
 8006790:	f000 8163 	beq.w	8006a5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006794:	7b7a      	ldrb	r2, [r7, #13]
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	32ae      	adds	r2, #174	; 0xae
 800679a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800679e:	689b      	ldr	r3, [r3, #8]
 80067a0:	6839      	ldr	r1, [r7, #0]
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	4798      	blx	r3
 80067a6:	4603      	mov	r3, r0
 80067a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80067aa:	e156      	b.n	8006a5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	785b      	ldrb	r3, [r3, #1]
 80067b0:	2b03      	cmp	r3, #3
 80067b2:	d008      	beq.n	80067c6 <USBD_StdEPReq+0x9a>
 80067b4:	2b03      	cmp	r3, #3
 80067b6:	f300 8145 	bgt.w	8006a44 <USBD_StdEPReq+0x318>
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	f000 809b 	beq.w	80068f6 <USBD_StdEPReq+0x1ca>
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d03c      	beq.n	800683e <USBD_StdEPReq+0x112>
 80067c4:	e13e      	b.n	8006a44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	d002      	beq.n	80067d8 <USBD_StdEPReq+0xac>
 80067d2:	2b03      	cmp	r3, #3
 80067d4:	d016      	beq.n	8006804 <USBD_StdEPReq+0xd8>
 80067d6:	e02c      	b.n	8006832 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80067d8:	7bbb      	ldrb	r3, [r7, #14]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00d      	beq.n	80067fa <USBD_StdEPReq+0xce>
 80067de:	7bbb      	ldrb	r3, [r7, #14]
 80067e0:	2b80      	cmp	r3, #128	; 0x80
 80067e2:	d00a      	beq.n	80067fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80067e4:	7bbb      	ldrb	r3, [r7, #14]
 80067e6:	4619      	mov	r1, r3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f001 fa3b 	bl	8007c64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80067ee:	2180      	movs	r1, #128	; 0x80
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f001 fa37 	bl	8007c64 <USBD_LL_StallEP>
 80067f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80067f8:	e020      	b.n	800683c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80067fa:	6839      	ldr	r1, [r7, #0]
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fc7a 	bl	80070f6 <USBD_CtlError>
              break;
 8006802:	e01b      	b.n	800683c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	885b      	ldrh	r3, [r3, #2]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10e      	bne.n	800682a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800680c:	7bbb      	ldrb	r3, [r7, #14]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00b      	beq.n	800682a <USBD_StdEPReq+0xfe>
 8006812:	7bbb      	ldrb	r3, [r7, #14]
 8006814:	2b80      	cmp	r3, #128	; 0x80
 8006816:	d008      	beq.n	800682a <USBD_StdEPReq+0xfe>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	88db      	ldrh	r3, [r3, #6]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006820:	7bbb      	ldrb	r3, [r7, #14]
 8006822:	4619      	mov	r1, r3
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f001 fa1d 	bl	8007c64 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f000 fd2e 	bl	800728c <USBD_CtlSendStatus>

              break;
 8006830:	e004      	b.n	800683c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006832:	6839      	ldr	r1, [r7, #0]
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fc5e 	bl	80070f6 <USBD_CtlError>
              break;
 800683a:	bf00      	nop
          }
          break;
 800683c:	e107      	b.n	8006a4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b02      	cmp	r3, #2
 8006848:	d002      	beq.n	8006850 <USBD_StdEPReq+0x124>
 800684a:	2b03      	cmp	r3, #3
 800684c:	d016      	beq.n	800687c <USBD_StdEPReq+0x150>
 800684e:	e04b      	b.n	80068e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006850:	7bbb      	ldrb	r3, [r7, #14]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d00d      	beq.n	8006872 <USBD_StdEPReq+0x146>
 8006856:	7bbb      	ldrb	r3, [r7, #14]
 8006858:	2b80      	cmp	r3, #128	; 0x80
 800685a:	d00a      	beq.n	8006872 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800685c:	7bbb      	ldrb	r3, [r7, #14]
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f001 f9ff 	bl	8007c64 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006866:	2180      	movs	r1, #128	; 0x80
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f001 f9fb 	bl	8007c64 <USBD_LL_StallEP>
 800686e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006870:	e040      	b.n	80068f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fc3e 	bl	80070f6 <USBD_CtlError>
              break;
 800687a:	e03b      	b.n	80068f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	885b      	ldrh	r3, [r3, #2]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d136      	bne.n	80068f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006884:	7bbb      	ldrb	r3, [r7, #14]
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	2b00      	cmp	r3, #0
 800688c:	d004      	beq.n	8006898 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800688e:	7bbb      	ldrb	r3, [r7, #14]
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 fa05 	bl	8007ca2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f000 fcf7 	bl	800728c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800689e:	7bbb      	ldrb	r3, [r7, #14]
 80068a0:	4619      	mov	r1, r3
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7ff fde2 	bl	800646c <USBD_CoreFindEP>
 80068a8:	4603      	mov	r3, r0
 80068aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068ac:	7b7b      	ldrb	r3, [r7, #13]
 80068ae:	2bff      	cmp	r3, #255	; 0xff
 80068b0:	d01f      	beq.n	80068f2 <USBD_StdEPReq+0x1c6>
 80068b2:	7b7b      	ldrb	r3, [r7, #13]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d11c      	bne.n	80068f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80068b8:	7b7a      	ldrb	r2, [r7, #13]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80068c0:	7b7a      	ldrb	r2, [r7, #13]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	32ae      	adds	r2, #174	; 0xae
 80068c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d010      	beq.n	80068f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068d0:	7b7a      	ldrb	r2, [r7, #13]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	32ae      	adds	r2, #174	; 0xae
 80068d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068da:	689b      	ldr	r3, [r3, #8]
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80068e6:	e004      	b.n	80068f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80068e8:	6839      	ldr	r1, [r7, #0]
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fc03 	bl	80070f6 <USBD_CtlError>
              break;
 80068f0:	e000      	b.n	80068f4 <USBD_StdEPReq+0x1c8>
              break;
 80068f2:	bf00      	nop
          }
          break;
 80068f4:	e0ab      	b.n	8006a4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d002      	beq.n	8006908 <USBD_StdEPReq+0x1dc>
 8006902:	2b03      	cmp	r3, #3
 8006904:	d032      	beq.n	800696c <USBD_StdEPReq+0x240>
 8006906:	e097      	b.n	8006a38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006908:	7bbb      	ldrb	r3, [r7, #14]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d007      	beq.n	800691e <USBD_StdEPReq+0x1f2>
 800690e:	7bbb      	ldrb	r3, [r7, #14]
 8006910:	2b80      	cmp	r3, #128	; 0x80
 8006912:	d004      	beq.n	800691e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fbed 	bl	80070f6 <USBD_CtlError>
                break;
 800691c:	e091      	b.n	8006a42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800691e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006922:	2b00      	cmp	r3, #0
 8006924:	da0b      	bge.n	800693e <USBD_StdEPReq+0x212>
 8006926:	7bbb      	ldrb	r3, [r7, #14]
 8006928:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800692c:	4613      	mov	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4413      	add	r3, r2
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	3310      	adds	r3, #16
 8006936:	687a      	ldr	r2, [r7, #4]
 8006938:	4413      	add	r3, r2
 800693a:	3304      	adds	r3, #4
 800693c:	e00b      	b.n	8006956 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800693e:	7bbb      	ldrb	r3, [r7, #14]
 8006940:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006944:	4613      	mov	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4413      	add	r3, r2
 800694a:	009b      	lsls	r3, r3, #2
 800694c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	3304      	adds	r3, #4
 8006956:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800695e:	68bb      	ldr	r3, [r7, #8]
 8006960:	2202      	movs	r2, #2
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f000 fc37 	bl	80071d8 <USBD_CtlSendData>
              break;
 800696a:	e06a      	b.n	8006a42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800696c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006970:	2b00      	cmp	r3, #0
 8006972:	da11      	bge.n	8006998 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006974:	7bbb      	ldrb	r3, [r7, #14]
 8006976:	f003 020f 	and.w	r2, r3, #15
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	440b      	add	r3, r1
 8006986:	3324      	adds	r3, #36	; 0x24
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d117      	bne.n	80069be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f000 fbb0 	bl	80070f6 <USBD_CtlError>
                  break;
 8006996:	e054      	b.n	8006a42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	f003 020f 	and.w	r2, r3, #15
 800699e:	6879      	ldr	r1, [r7, #4]
 80069a0:	4613      	mov	r3, r2
 80069a2:	009b      	lsls	r3, r3, #2
 80069a4:	4413      	add	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80069ae:	881b      	ldrh	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d104      	bne.n	80069be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fb9d 	bl	80070f6 <USBD_CtlError>
                  break;
 80069bc:	e041      	b.n	8006a42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	da0b      	bge.n	80069de <USBD_StdEPReq+0x2b2>
 80069c6:	7bbb      	ldrb	r3, [r7, #14]
 80069c8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	3310      	adds	r3, #16
 80069d6:	687a      	ldr	r2, [r7, #4]
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	e00b      	b.n	80069f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80069e4:	4613      	mov	r3, r2
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	4413      	add	r3, r2
 80069ea:	009b      	lsls	r3, r3, #2
 80069ec:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	4413      	add	r3, r2
 80069f4:	3304      	adds	r3, #4
 80069f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80069f8:	7bbb      	ldrb	r3, [r7, #14]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d002      	beq.n	8006a04 <USBD_StdEPReq+0x2d8>
 80069fe:	7bbb      	ldrb	r3, [r7, #14]
 8006a00:	2b80      	cmp	r3, #128	; 0x80
 8006a02:	d103      	bne.n	8006a0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
 8006a0a:	e00e      	b.n	8006a2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f001 f965 	bl	8007ce0 <USBD_LL_IsStallEP>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d003      	beq.n	8006a24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	601a      	str	r2, [r3, #0]
 8006a22:	e002      	b.n	8006a2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006a24:	68bb      	ldr	r3, [r7, #8]
 8006a26:	2200      	movs	r2, #0
 8006a28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	2202      	movs	r2, #2
 8006a2e:	4619      	mov	r1, r3
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fbd1 	bl	80071d8 <USBD_CtlSendData>
              break;
 8006a36:	e004      	b.n	8006a42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006a38:	6839      	ldr	r1, [r7, #0]
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 fb5b 	bl	80070f6 <USBD_CtlError>
              break;
 8006a40:	bf00      	nop
          }
          break;
 8006a42:	e004      	b.n	8006a4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fb55 	bl	80070f6 <USBD_CtlError>
          break;
 8006a4c:	bf00      	nop
      }
      break;
 8006a4e:	e005      	b.n	8006a5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fb4f 	bl	80070f6 <USBD_CtlError>
      break;
 8006a58:	e000      	b.n	8006a5c <USBD_StdEPReq+0x330>
      break;
 8006a5a:	bf00      	nop
  }

  return ret;
 8006a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
	...

08006a68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b084      	sub	sp, #16
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006a72:	2300      	movs	r3, #0
 8006a74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006a7e:	683b      	ldr	r3, [r7, #0]
 8006a80:	885b      	ldrh	r3, [r3, #2]
 8006a82:	0a1b      	lsrs	r3, r3, #8
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	3b01      	subs	r3, #1
 8006a88:	2b06      	cmp	r3, #6
 8006a8a:	f200 8128 	bhi.w	8006cde <USBD_GetDescriptor+0x276>
 8006a8e:	a201      	add	r2, pc, #4	; (adr r2, 8006a94 <USBD_GetDescriptor+0x2c>)
 8006a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a94:	08006ab1 	.word	0x08006ab1
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006b09 	.word	0x08006b09
 8006aa0:	08006cdf 	.word	0x08006cdf
 8006aa4:	08006cdf 	.word	0x08006cdf
 8006aa8:	08006c7f 	.word	0x08006c7f
 8006aac:	08006cab 	.word	0x08006cab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	7c12      	ldrb	r2, [r2, #16]
 8006abc:	f107 0108 	add.w	r1, r7, #8
 8006ac0:	4610      	mov	r0, r2
 8006ac2:	4798      	blx	r3
 8006ac4:	60f8      	str	r0, [r7, #12]
      break;
 8006ac6:	e112      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	7c1b      	ldrb	r3, [r3, #16]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10d      	bne.n	8006aec <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ad8:	f107 0208 	add.w	r2, r7, #8
 8006adc:	4610      	mov	r0, r2
 8006ade:	4798      	blx	r3
 8006ae0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	2202      	movs	r2, #2
 8006ae8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006aea:	e100      	b.n	8006cee <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006af4:	f107 0208 	add.w	r2, r7, #8
 8006af8:	4610      	mov	r0, r2
 8006afa:	4798      	blx	r3
 8006afc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	3301      	adds	r3, #1
 8006b02:	2202      	movs	r2, #2
 8006b04:	701a      	strb	r2, [r3, #0]
      break;
 8006b06:	e0f2      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	885b      	ldrh	r3, [r3, #2]
 8006b0c:	b2db      	uxtb	r3, r3
 8006b0e:	2b05      	cmp	r3, #5
 8006b10:	f200 80ac 	bhi.w	8006c6c <USBD_GetDescriptor+0x204>
 8006b14:	a201      	add	r2, pc, #4	; (adr r2, 8006b1c <USBD_GetDescriptor+0xb4>)
 8006b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b1a:	bf00      	nop
 8006b1c:	08006b35 	.word	0x08006b35
 8006b20:	08006b69 	.word	0x08006b69
 8006b24:	08006b9d 	.word	0x08006b9d
 8006b28:	08006bd1 	.word	0x08006bd1
 8006b2c:	08006c05 	.word	0x08006c05
 8006b30:	08006c39 	.word	0x08006c39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00b      	beq.n	8006b58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	687a      	ldr	r2, [r7, #4]
 8006b4a:	7c12      	ldrb	r2, [r2, #16]
 8006b4c:	f107 0108 	add.w	r1, r7, #8
 8006b50:	4610      	mov	r0, r2
 8006b52:	4798      	blx	r3
 8006b54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b56:	e091      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b58:	6839      	ldr	r1, [r7, #0]
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	f000 facb 	bl	80070f6 <USBD_CtlError>
            err++;
 8006b60:	7afb      	ldrb	r3, [r7, #11]
 8006b62:	3301      	adds	r3, #1
 8006b64:	72fb      	strb	r3, [r7, #11]
          break;
 8006b66:	e089      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b6e:	689b      	ldr	r3, [r3, #8]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	7c12      	ldrb	r2, [r2, #16]
 8006b80:	f107 0108 	add.w	r1, r7, #8
 8006b84:	4610      	mov	r0, r2
 8006b86:	4798      	blx	r3
 8006b88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006b8a:	e077      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006b8c:	6839      	ldr	r1, [r7, #0]
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fab1 	bl	80070f6 <USBD_CtlError>
            err++;
 8006b94:	7afb      	ldrb	r3, [r7, #11]
 8006b96:	3301      	adds	r3, #1
 8006b98:	72fb      	strb	r3, [r7, #11]
          break;
 8006b9a:	e06f      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00b      	beq.n	8006bc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	7c12      	ldrb	r2, [r2, #16]
 8006bb4:	f107 0108 	add.w	r1, r7, #8
 8006bb8:	4610      	mov	r0, r2
 8006bba:	4798      	blx	r3
 8006bbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bbe:	e05d      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa97 	bl	80070f6 <USBD_CtlError>
            err++;
 8006bc8:	7afb      	ldrb	r3, [r7, #11]
 8006bca:	3301      	adds	r3, #1
 8006bcc:	72fb      	strb	r3, [r7, #11]
          break;
 8006bce:	e055      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d00b      	beq.n	8006bf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006be2:	691b      	ldr	r3, [r3, #16]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	7c12      	ldrb	r2, [r2, #16]
 8006be8:	f107 0108 	add.w	r1, r7, #8
 8006bec:	4610      	mov	r0, r2
 8006bee:	4798      	blx	r3
 8006bf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006bf2:	e043      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006bf4:	6839      	ldr	r1, [r7, #0]
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f000 fa7d 	bl	80070f6 <USBD_CtlError>
            err++;
 8006bfc:	7afb      	ldrb	r3, [r7, #11]
 8006bfe:	3301      	adds	r3, #1
 8006c00:	72fb      	strb	r3, [r7, #11]
          break;
 8006c02:	e03b      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00b      	beq.n	8006c28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c16:	695b      	ldr	r3, [r3, #20]
 8006c18:	687a      	ldr	r2, [r7, #4]
 8006c1a:	7c12      	ldrb	r2, [r2, #16]
 8006c1c:	f107 0108 	add.w	r1, r7, #8
 8006c20:	4610      	mov	r0, r2
 8006c22:	4798      	blx	r3
 8006c24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c26:	e029      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c28:	6839      	ldr	r1, [r7, #0]
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 fa63 	bl	80070f6 <USBD_CtlError>
            err++;
 8006c30:	7afb      	ldrb	r3, [r7, #11]
 8006c32:	3301      	adds	r3, #1
 8006c34:	72fb      	strb	r3, [r7, #11]
          break;
 8006c36:	e021      	b.n	8006c7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	699b      	ldr	r3, [r3, #24]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e00f      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 fa49 	bl	80070f6 <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e007      	b.n	8006c7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006c6c:	6839      	ldr	r1, [r7, #0]
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa41 	bl	80070f6 <USBD_CtlError>
          err++;
 8006c74:	7afb      	ldrb	r3, [r7, #11]
 8006c76:	3301      	adds	r3, #1
 8006c78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006c7a:	bf00      	nop
      }
      break;
 8006c7c:	e037      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	7c1b      	ldrb	r3, [r3, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d109      	bne.n	8006c9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006c8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c8e:	f107 0208 	add.w	r2, r7, #8
 8006c92:	4610      	mov	r0, r2
 8006c94:	4798      	blx	r3
 8006c96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006c98:	e029      	b.n	8006cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 fa2a 	bl	80070f6 <USBD_CtlError>
        err++;
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	3301      	adds	r3, #1
 8006ca6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ca8:	e021      	b.n	8006cee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	7c1b      	ldrb	r3, [r3, #16]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10d      	bne.n	8006cce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cba:	f107 0208 	add.w	r2, r7, #8
 8006cbe:	4610      	mov	r0, r2
 8006cc0:	4798      	blx	r3
 8006cc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	3301      	adds	r3, #1
 8006cc8:	2207      	movs	r2, #7
 8006cca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ccc:	e00f      	b.n	8006cee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006cce:	6839      	ldr	r1, [r7, #0]
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa10 	bl	80070f6 <USBD_CtlError>
        err++;
 8006cd6:	7afb      	ldrb	r3, [r7, #11]
 8006cd8:	3301      	adds	r3, #1
 8006cda:	72fb      	strb	r3, [r7, #11]
      break;
 8006cdc:	e007      	b.n	8006cee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006cde:	6839      	ldr	r1, [r7, #0]
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 fa08 	bl	80070f6 <USBD_CtlError>
      err++;
 8006ce6:	7afb      	ldrb	r3, [r7, #11]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	72fb      	strb	r3, [r7, #11]
      break;
 8006cec:	bf00      	nop
  }

  if (err != 0U)
 8006cee:	7afb      	ldrb	r3, [r7, #11]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d11e      	bne.n	8006d32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	88db      	ldrh	r3, [r3, #6]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d016      	beq.n	8006d2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006cfc:	893b      	ldrh	r3, [r7, #8]
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d00e      	beq.n	8006d20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	88da      	ldrh	r2, [r3, #6]
 8006d06:	893b      	ldrh	r3, [r7, #8]
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	bf28      	it	cs
 8006d0c:	4613      	movcs	r3, r2
 8006d0e:	b29b      	uxth	r3, r3
 8006d10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006d12:	893b      	ldrh	r3, [r7, #8]
 8006d14:	461a      	mov	r2, r3
 8006d16:	68f9      	ldr	r1, [r7, #12]
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 fa5d 	bl	80071d8 <USBD_CtlSendData>
 8006d1e:	e009      	b.n	8006d34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9e7 	bl	80070f6 <USBD_CtlError>
 8006d28:	e004      	b.n	8006d34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f000 faae 	bl	800728c <USBD_CtlSendStatus>
 8006d30:	e000      	b.n	8006d34 <USBD_GetDescriptor+0x2cc>
    return;
 8006d32:	bf00      	nop
  }
}
 8006d34:	3710      	adds	r7, #16
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}
 8006d3a:	bf00      	nop

08006d3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
 8006d44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	889b      	ldrh	r3, [r3, #4]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d131      	bne.n	8006db2 <USBD_SetAddress+0x76>
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	88db      	ldrh	r3, [r3, #6]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d12d      	bne.n	8006db2 <USBD_SetAddress+0x76>
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	885b      	ldrh	r3, [r3, #2]
 8006d5a:	2b7f      	cmp	r3, #127	; 0x7f
 8006d5c:	d829      	bhi.n	8006db2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	885b      	ldrh	r3, [r3, #2]
 8006d62:	b2db      	uxtb	r3, r3
 8006d64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006d68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	2b03      	cmp	r3, #3
 8006d74:	d104      	bne.n	8006d80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006d76:	6839      	ldr	r1, [r7, #0]
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f9bc 	bl	80070f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d7e:	e01d      	b.n	8006dbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	7bfa      	ldrb	r2, [r7, #15]
 8006d84:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006d88:	7bfb      	ldrb	r3, [r7, #15]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 ffd3 	bl	8007d38 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 fa7a 	bl	800728c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006d98:	7bfb      	ldrb	r3, [r7, #15]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d004      	beq.n	8006da8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2202      	movs	r2, #2
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006da6:	e009      	b.n	8006dbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006db0:	e004      	b.n	8006dbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f99e 	bl	80070f6 <USBD_CtlError>
  }
}
 8006dba:	bf00      	nop
 8006dbc:	bf00      	nop
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	885b      	ldrh	r3, [r3, #2]
 8006dd6:	b2da      	uxtb	r2, r3
 8006dd8:	4b4e      	ldr	r3, [pc, #312]	; (8006f14 <USBD_SetConfig+0x150>)
 8006dda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ddc:	4b4d      	ldr	r3, [pc, #308]	; (8006f14 <USBD_SetConfig+0x150>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d905      	bls.n	8006df0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 f985 	bl	80070f6 <USBD_CtlError>
    return USBD_FAIL;
 8006dec:	2303      	movs	r3, #3
 8006dee:	e08c      	b.n	8006f0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df6:	b2db      	uxtb	r3, r3
 8006df8:	2b02      	cmp	r3, #2
 8006dfa:	d002      	beq.n	8006e02 <USBD_SetConfig+0x3e>
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d029      	beq.n	8006e54 <USBD_SetConfig+0x90>
 8006e00:	e075      	b.n	8006eee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006e02:	4b44      	ldr	r3, [pc, #272]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d020      	beq.n	8006e4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006e0a:	4b42      	ldr	r3, [pc, #264]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	461a      	mov	r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006e14:	4b3f      	ldr	r3, [pc, #252]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f7fe ffe7 	bl	8005dee <USBD_SetClassConfig>
 8006e20:	4603      	mov	r3, r0
 8006e22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006e24:	7bfb      	ldrb	r3, [r7, #15]
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d008      	beq.n	8006e3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006e2a:	6839      	ldr	r1, [r7, #0]
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f962 	bl	80070f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2202      	movs	r2, #2
 8006e36:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e3a:	e065      	b.n	8006f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fa25 	bl	800728c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2203      	movs	r2, #3
 8006e46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006e4a:	e05d      	b.n	8006f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fa1d 	bl	800728c <USBD_CtlSendStatus>
      break;
 8006e52:	e059      	b.n	8006f08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006e54:	4b2f      	ldr	r3, [pc, #188]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e56:	781b      	ldrb	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d112      	bne.n	8006e82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006e64:	4b2b      	ldr	r3, [pc, #172]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e66:	781b      	ldrb	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006e6e:	4b29      	ldr	r3, [pc, #164]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	4619      	mov	r1, r3
 8006e74:	6878      	ldr	r0, [r7, #4]
 8006e76:	f7fe ffd6 	bl	8005e26 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa06 	bl	800728c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006e80:	e042      	b.n	8006f08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006e82:	4b24      	ldr	r3, [pc, #144]	; (8006f14 <USBD_SetConfig+0x150>)
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	461a      	mov	r2, r3
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d02a      	beq.n	8006ee6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	4619      	mov	r1, r3
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f7fe ffc4 	bl	8005e26 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006e9e:	4b1d      	ldr	r3, [pc, #116]	; (8006f14 <USBD_SetConfig+0x150>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006ea8:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <USBD_SetConfig+0x150>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7fe ff9d 	bl	8005dee <USBD_SetClassConfig>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d00f      	beq.n	8006ede <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006ebe:	6839      	ldr	r1, [r7, #0]
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f918 	bl	80070f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	b2db      	uxtb	r3, r3
 8006ecc:	4619      	mov	r1, r3
 8006ece:	6878      	ldr	r0, [r7, #4]
 8006ed0:	f7fe ffa9 	bl	8005e26 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006edc:	e014      	b.n	8006f08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f9d4 	bl	800728c <USBD_CtlSendStatus>
      break;
 8006ee4:	e010      	b.n	8006f08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f000 f9d0 	bl	800728c <USBD_CtlSendStatus>
      break;
 8006eec:	e00c      	b.n	8006f08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006eee:	6839      	ldr	r1, [r7, #0]
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f900 	bl	80070f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ef6:	4b07      	ldr	r3, [pc, #28]	; (8006f14 <USBD_SetConfig+0x150>)
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f7fe ff92 	bl	8005e26 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006f02:	2303      	movs	r3, #3
 8006f04:	73fb      	strb	r3, [r7, #15]
      break;
 8006f06:	bf00      	nop
  }

  return ret;
 8006f08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3710      	adds	r7, #16
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000248 	.word	0x20000248

08006f18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b082      	sub	sp, #8
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	88db      	ldrh	r3, [r3, #6]
 8006f26:	2b01      	cmp	r3, #1
 8006f28:	d004      	beq.n	8006f34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006f2a:	6839      	ldr	r1, [r7, #0]
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 f8e2 	bl	80070f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006f32:	e023      	b.n	8006f7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f3a:	b2db      	uxtb	r3, r3
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	dc02      	bgt.n	8006f46 <USBD_GetConfig+0x2e>
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	dc03      	bgt.n	8006f4c <USBD_GetConfig+0x34>
 8006f44:	e015      	b.n	8006f72 <USBD_GetConfig+0x5a>
 8006f46:	2b03      	cmp	r3, #3
 8006f48:	d00b      	beq.n	8006f62 <USBD_GetConfig+0x4a>
 8006f4a:	e012      	b.n	8006f72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	3308      	adds	r3, #8
 8006f56:	2201      	movs	r2, #1
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f93c 	bl	80071d8 <USBD_CtlSendData>
        break;
 8006f60:	e00c      	b.n	8006f7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3304      	adds	r3, #4
 8006f66:	2201      	movs	r2, #1
 8006f68:	4619      	mov	r1, r3
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f000 f934 	bl	80071d8 <USBD_CtlSendData>
        break;
 8006f70:	e004      	b.n	8006f7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006f72:	6839      	ldr	r1, [r7, #0]
 8006f74:	6878      	ldr	r0, [r7, #4]
 8006f76:	f000 f8be 	bl	80070f6 <USBD_CtlError>
        break;
 8006f7a:	bf00      	nop
}
 8006f7c:	bf00      	nop
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b082      	sub	sp, #8
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	3b01      	subs	r3, #1
 8006f98:	2b02      	cmp	r3, #2
 8006f9a:	d81e      	bhi.n	8006fda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	88db      	ldrh	r3, [r3, #6]
 8006fa0:	2b02      	cmp	r3, #2
 8006fa2:	d004      	beq.n	8006fae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006fa4:	6839      	ldr	r1, [r7, #0]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f8a5 	bl	80070f6 <USBD_CtlError>
        break;
 8006fac:	e01a      	b.n	8006fe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2201      	movs	r2, #1
 8006fb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d005      	beq.n	8006fca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f043 0202 	orr.w	r2, r3, #2
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	330c      	adds	r3, #12
 8006fce:	2202      	movs	r2, #2
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 f900 	bl	80071d8 <USBD_CtlSendData>
      break;
 8006fd8:	e004      	b.n	8006fe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006fda:	6839      	ldr	r1, [r7, #0]
 8006fdc:	6878      	ldr	r0, [r7, #4]
 8006fde:	f000 f88a 	bl	80070f6 <USBD_CtlError>
      break;
 8006fe2:	bf00      	nop
  }
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
 8006ff4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	885b      	ldrh	r3, [r3, #2]
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d107      	bne.n	800700e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f000 f940 	bl	800728c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800700c:	e013      	b.n	8007036 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	885b      	ldrh	r3, [r3, #2]
 8007012:	2b02      	cmp	r3, #2
 8007014:	d10b      	bne.n	800702e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	889b      	ldrh	r3, [r3, #4]
 800701a:	0a1b      	lsrs	r3, r3, #8
 800701c:	b29b      	uxth	r3, r3
 800701e:	b2da      	uxtb	r2, r3
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f930 	bl	800728c <USBD_CtlSendStatus>
}
 800702c:	e003      	b.n	8007036 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f860 	bl	80070f6 <USBD_CtlError>
}
 8007036:	bf00      	nop
 8007038:	3708      	adds	r7, #8
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b082      	sub	sp, #8
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800704e:	b2db      	uxtb	r3, r3
 8007050:	3b01      	subs	r3, #1
 8007052:	2b02      	cmp	r3, #2
 8007054:	d80b      	bhi.n	800706e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	2b01      	cmp	r3, #1
 800705c:	d10c      	bne.n	8007078 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f910 	bl	800728c <USBD_CtlSendStatus>
      }
      break;
 800706c:	e004      	b.n	8007078 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 f840 	bl	80070f6 <USBD_CtlError>
      break;
 8007076:	e000      	b.n	800707a <USBD_ClrFeature+0x3c>
      break;
 8007078:	bf00      	nop
  }
}
 800707a:	bf00      	nop
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	781a      	ldrb	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	3301      	adds	r3, #1
 800709c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	781a      	ldrb	r2, [r3, #0]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	3301      	adds	r3, #1
 80070aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f7ff fa41 	bl	8006534 <SWAPBYTE>
 80070b2:	4603      	mov	r3, r0
 80070b4:	461a      	mov	r2, r3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	3301      	adds	r3, #1
 80070c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fa34 	bl	8006534 <SWAPBYTE>
 80070cc:	4603      	mov	r3, r0
 80070ce:	461a      	mov	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	3301      	adds	r3, #1
 80070d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	3301      	adds	r3, #1
 80070de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80070e0:	68f8      	ldr	r0, [r7, #12]
 80070e2:	f7ff fa27 	bl	8006534 <SWAPBYTE>
 80070e6:	4603      	mov	r3, r0
 80070e8:	461a      	mov	r2, r3
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	80da      	strh	r2, [r3, #6]
}
 80070ee:	bf00      	nop
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007100:	2180      	movs	r1, #128	; 0x80
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 fdae 	bl	8007c64 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007108:	2100      	movs	r1, #0
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 fdaa 	bl	8007c64 <USBD_LL_StallEP>
}
 8007110:	bf00      	nop
 8007112:	3708      	adds	r7, #8
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b086      	sub	sp, #24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007124:	2300      	movs	r3, #0
 8007126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d036      	beq.n	800719c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007132:	6938      	ldr	r0, [r7, #16]
 8007134:	f000 f836 	bl	80071a4 <USBD_GetLen>
 8007138:	4603      	mov	r3, r0
 800713a:	3301      	adds	r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	005b      	lsls	r3, r3, #1
 8007140:	b29a      	uxth	r2, r3
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007146:	7dfb      	ldrb	r3, [r7, #23]
 8007148:	68ba      	ldr	r2, [r7, #8]
 800714a:	4413      	add	r3, r2
 800714c:	687a      	ldr	r2, [r7, #4]
 800714e:	7812      	ldrb	r2, [r2, #0]
 8007150:	701a      	strb	r2, [r3, #0]
  idx++;
 8007152:	7dfb      	ldrb	r3, [r7, #23]
 8007154:	3301      	adds	r3, #1
 8007156:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
 800715a:	68ba      	ldr	r2, [r7, #8]
 800715c:	4413      	add	r3, r2
 800715e:	2203      	movs	r2, #3
 8007160:	701a      	strb	r2, [r3, #0]
  idx++;
 8007162:	7dfb      	ldrb	r3, [r7, #23]
 8007164:	3301      	adds	r3, #1
 8007166:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007168:	e013      	b.n	8007192 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800716a:	7dfb      	ldrb	r3, [r7, #23]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	4413      	add	r3, r2
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	7812      	ldrb	r2, [r2, #0]
 8007174:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007176:	693b      	ldr	r3, [r7, #16]
 8007178:	3301      	adds	r3, #1
 800717a:	613b      	str	r3, [r7, #16]
    idx++;
 800717c:	7dfb      	ldrb	r3, [r7, #23]
 800717e:	3301      	adds	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007182:	7dfb      	ldrb	r3, [r7, #23]
 8007184:	68ba      	ldr	r2, [r7, #8]
 8007186:	4413      	add	r3, r2
 8007188:	2200      	movs	r2, #0
 800718a:	701a      	strb	r2, [r3, #0]
    idx++;
 800718c:	7dfb      	ldrb	r3, [r7, #23]
 800718e:	3301      	adds	r3, #1
 8007190:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	781b      	ldrb	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d1e7      	bne.n	800716a <USBD_GetString+0x52>
 800719a:	e000      	b.n	800719e <USBD_GetString+0x86>
    return;
 800719c:	bf00      	nop
  }
}
 800719e:	3718      	adds	r7, #24
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b085      	sub	sp, #20
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80071b4:	e005      	b.n	80071c2 <USBD_GetLen+0x1e>
  {
    len++;
 80071b6:	7bfb      	ldrb	r3, [r7, #15]
 80071b8:	3301      	adds	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	3301      	adds	r3, #1
 80071c0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d1f5      	bne.n	80071b6 <USBD_GetLen+0x12>
  }

  return len;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3714      	adds	r7, #20
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80071d8:	b580      	push	{r7, lr}
 80071da:	b084      	sub	sp, #16
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2202      	movs	r2, #2
 80071e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	68ba      	ldr	r2, [r7, #8]
 80071fc:	2100      	movs	r1, #0
 80071fe:	68f8      	ldr	r0, [r7, #12]
 8007200:	f000 fdb9 	bl	8007d76 <USBD_LL_Transmit>

  return USBD_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3710      	adds	r7, #16
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b084      	sub	sp, #16
 8007212:	af00      	add	r7, sp, #0
 8007214:	60f8      	str	r0, [r7, #12]
 8007216:	60b9      	str	r1, [r7, #8]
 8007218:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	68ba      	ldr	r2, [r7, #8]
 800721e:	2100      	movs	r1, #0
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fda8 	bl	8007d76 <USBD_LL_Transmit>

  return USBD_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b084      	sub	sp, #16
 8007234:	af00      	add	r7, sp, #0
 8007236:	60f8      	str	r0, [r7, #12]
 8007238:	60b9      	str	r1, [r7, #8]
 800723a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2203      	movs	r2, #3
 8007240:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	2100      	movs	r1, #0
 800725a:	68f8      	ldr	r0, [r7, #12]
 800725c:	f000 fdac 	bl	8007db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800726a:	b580      	push	{r7, lr}
 800726c:	b084      	sub	sp, #16
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	68ba      	ldr	r2, [r7, #8]
 800727a:	2100      	movs	r1, #0
 800727c:	68f8      	ldr	r0, [r7, #12]
 800727e:	f000 fd9b 	bl	8007db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2204      	movs	r2, #4
 8007298:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800729c:	2300      	movs	r3, #0
 800729e:	2200      	movs	r2, #0
 80072a0:	2100      	movs	r1, #0
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 fd67 	bl	8007d76 <USBD_LL_Transmit>

  return USBD_OK;
 80072a8:	2300      	movs	r3, #0
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	2205      	movs	r2, #5
 80072be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80072c2:	2300      	movs	r3, #0
 80072c4:	2200      	movs	r2, #0
 80072c6:	2100      	movs	r1, #0
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f000 fd75 	bl	8007db8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80072ce:	2300      	movs	r3, #0
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80072dc:	2200      	movs	r2, #0
 80072de:	4912      	ldr	r1, [pc, #72]	; (8007328 <MX_USB_DEVICE_Init+0x50>)
 80072e0:	4812      	ldr	r0, [pc, #72]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 80072e2:	f7fe fd07 	bl	8005cf4 <USBD_Init>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d001      	beq.n	80072f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80072ec:	f7f9 fcf4 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80072f0:	490f      	ldr	r1, [pc, #60]	; (8007330 <MX_USB_DEVICE_Init+0x58>)
 80072f2:	480e      	ldr	r0, [pc, #56]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 80072f4:	f7fe fd2e 	bl	8005d54 <USBD_RegisterClass>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d001      	beq.n	8007302 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80072fe:	f7f9 fceb 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007302:	490c      	ldr	r1, [pc, #48]	; (8007334 <MX_USB_DEVICE_Init+0x5c>)
 8007304:	4809      	ldr	r0, [pc, #36]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 8007306:	f7fe fc1f 	bl	8005b48 <USBD_CDC_RegisterInterface>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007310:	f7f9 fce2 	bl	8000cd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007314:	4805      	ldr	r0, [pc, #20]	; (800732c <MX_USB_DEVICE_Init+0x54>)
 8007316:	f7fe fd53 	bl	8005dc0 <USBD_Start>
 800731a:	4603      	mov	r3, r0
 800731c:	2b00      	cmp	r3, #0
 800731e:	d001      	beq.n	8007324 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007320:	f7f9 fcda 	bl	8000cd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007324:	bf00      	nop
 8007326:	bd80      	pop	{r7, pc}
 8007328:	200000ac 	.word	0x200000ac
 800732c:	2000024c 	.word	0x2000024c
 8007330:	20000018 	.word	0x20000018
 8007334:	20000098 	.word	0x20000098

08007338 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800733e:	2200      	movs	r2, #0
 8007340:	4915      	ldr	r1, [pc, #84]	; (8007398 <CDC_Init_FS+0x60>)
 8007342:	4816      	ldr	r0, [pc, #88]	; (800739c <CDC_Init_FS+0x64>)
 8007344:	f7fe fc1a 	bl	8005b7c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007348:	4915      	ldr	r1, [pc, #84]	; (80073a0 <CDC_Init_FS+0x68>)
 800734a:	4814      	ldr	r0, [pc, #80]	; (800739c <CDC_Init_FS+0x64>)
 800734c:	f7fe fc38 	bl	8005bc0 <USBD_CDC_SetRxBuffer>

  // set default config
  uint32_t baudrate = 115200;
 8007350:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007354:	607b      	str	r3, [r7, #4]
  linecoding_cfg[0] = (uint8_t)(baudrate);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	b2da      	uxtb	r2, r3
 800735a:	4b12      	ldr	r3, [pc, #72]	; (80073a4 <CDC_Init_FS+0x6c>)
 800735c:	701a      	strb	r2, [r3, #0]
  linecoding_cfg[1] = (uint8_t)(baudrate >> 8);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	0a1b      	lsrs	r3, r3, #8
 8007362:	b2da      	uxtb	r2, r3
 8007364:	4b0f      	ldr	r3, [pc, #60]	; (80073a4 <CDC_Init_FS+0x6c>)
 8007366:	705a      	strb	r2, [r3, #1]
  linecoding_cfg[2] = (uint8_t)(baudrate >> 16);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	0c1b      	lsrs	r3, r3, #16
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <CDC_Init_FS+0x6c>)
 8007370:	709a      	strb	r2, [r3, #2]
  linecoding_cfg[3] = (uint8_t)(baudrate >> 24);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	0e1b      	lsrs	r3, r3, #24
 8007376:	b2da      	uxtb	r2, r3
 8007378:	4b0a      	ldr	r3, [pc, #40]	; (80073a4 <CDC_Init_FS+0x6c>)
 800737a:	70da      	strb	r2, [r3, #3]
  linecoding_cfg[4] = 0; // 1 Stop bit
 800737c:	4b09      	ldr	r3, [pc, #36]	; (80073a4 <CDC_Init_FS+0x6c>)
 800737e:	2200      	movs	r2, #0
 8007380:	711a      	strb	r2, [r3, #4]
  linecoding_cfg[5] = 0; // No parity
 8007382:	4b08      	ldr	r3, [pc, #32]	; (80073a4 <CDC_Init_FS+0x6c>)
 8007384:	2200      	movs	r2, #0
 8007386:	715a      	strb	r2, [r3, #5]
  linecoding_cfg[6] = 8; // 8 data bits
 8007388:	4b06      	ldr	r3, [pc, #24]	; (80073a4 <CDC_Init_FS+0x6c>)
 800738a:	2208      	movs	r2, #8
 800738c:	719a      	strb	r2, [r3, #6]


  return (USBD_OK);
 800738e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007390:	4618      	mov	r0, r3
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000d28 	.word	0x20000d28
 800739c:	2000024c 	.word	0x2000024c
 80073a0:	20000528 	.word	0x20000528
 80073a4:	20001528 	.word	0x20001528

080073a8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80073a8:	b480      	push	{r7}
 80073aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80073ac:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80073b8:	b480      	push	{r7}
 80073ba:	b083      	sub	sp, #12
 80073bc:	af00      	add	r7, sp, #0
 80073be:	4603      	mov	r3, r0
 80073c0:	6039      	str	r1, [r7, #0]
 80073c2:	71fb      	strb	r3, [r7, #7]
 80073c4:	4613      	mov	r3, r2
 80073c6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80073c8:	79fb      	ldrb	r3, [r7, #7]
 80073ca:	2b23      	cmp	r3, #35	; 0x23
 80073cc:	d85c      	bhi.n	8007488 <CDC_Control_FS+0xd0>
 80073ce:	a201      	add	r2, pc, #4	; (adr r2, 80073d4 <CDC_Control_FS+0x1c>)
 80073d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073d4:	08007489 	.word	0x08007489
 80073d8:	08007489 	.word	0x08007489
 80073dc:	08007489 	.word	0x08007489
 80073e0:	08007489 	.word	0x08007489
 80073e4:	08007489 	.word	0x08007489
 80073e8:	08007489 	.word	0x08007489
 80073ec:	08007489 	.word	0x08007489
 80073f0:	08007489 	.word	0x08007489
 80073f4:	08007489 	.word	0x08007489
 80073f8:	08007489 	.word	0x08007489
 80073fc:	08007489 	.word	0x08007489
 8007400:	08007489 	.word	0x08007489
 8007404:	08007489 	.word	0x08007489
 8007408:	08007489 	.word	0x08007489
 800740c:	08007489 	.word	0x08007489
 8007410:	08007489 	.word	0x08007489
 8007414:	08007489 	.word	0x08007489
 8007418:	08007489 	.word	0x08007489
 800741c:	08007489 	.word	0x08007489
 8007420:	08007489 	.word	0x08007489
 8007424:	08007489 	.word	0x08007489
 8007428:	08007489 	.word	0x08007489
 800742c:	08007489 	.word	0x08007489
 8007430:	08007489 	.word	0x08007489
 8007434:	08007489 	.word	0x08007489
 8007438:	08007489 	.word	0x08007489
 800743c:	08007489 	.word	0x08007489
 8007440:	08007489 	.word	0x08007489
 8007444:	08007489 	.word	0x08007489
 8007448:	08007489 	.word	0x08007489
 800744c:	08007489 	.word	0x08007489
 8007450:	08007489 	.word	0x08007489
 8007454:	08007465 	.word	0x08007465
 8007458:	08007477 	.word	0x08007477
 800745c:	08007489 	.word	0x08007489
 8007460:	08007489 	.word	0x08007489
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(linecoding_cfg, pbuf, 7);
 8007464:	4b0c      	ldr	r3, [pc, #48]	; (8007498 <CDC_Control_FS+0xe0>)
 8007466:	683a      	ldr	r2, [r7, #0]
 8007468:	6810      	ldr	r0, [r2, #0]
 800746a:	6018      	str	r0, [r3, #0]
 800746c:	8891      	ldrh	r1, [r2, #4]
 800746e:	7992      	ldrb	r2, [r2, #6]
 8007470:	8099      	strh	r1, [r3, #4]
 8007472:	719a      	strb	r2, [r3, #6]
    break;
 8007474:	e009      	b.n	800748a <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, linecoding_cfg, 7);
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	4a07      	ldr	r2, [pc, #28]	; (8007498 <CDC_Control_FS+0xe0>)
 800747a:	6810      	ldr	r0, [r2, #0]
 800747c:	6018      	str	r0, [r3, #0]
 800747e:	8891      	ldrh	r1, [r2, #4]
 8007480:	7992      	ldrb	r2, [r2, #6]
 8007482:	8099      	strh	r1, [r3, #4]
 8007484:	719a      	strb	r2, [r3, #6]
    break;
 8007486:	e000      	b.n	800748a <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007488:	bf00      	nop
  }

  return (USBD_OK);
 800748a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800748c:	4618      	mov	r0, r3
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	20001528 	.word	0x20001528

0800749c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80074a6:	6879      	ldr	r1, [r7, #4]
 80074a8:	4819      	ldr	r0, [pc, #100]	; (8007510 <CDC_Receive_FS+0x74>)
 80074aa:	f7fe fb89 	bl	8005bc0 <USBD_CDC_SetRxBuffer>

  uint8_t len = (uint8_t) *Len;				// Get length
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	73fb      	strb	r3, [r7, #15]
  uint16_t tempHeadPos = rxBufferHeadPos;	// Increment temp head pos while writing, then update main variable when complete
 80074b4:	4b17      	ldr	r3, [pc, #92]	; (8007514 <CDC_Receive_FS+0x78>)
 80074b6:	881b      	ldrh	r3, [r3, #0]
 80074b8:	82fb      	strh	r3, [r7, #22]

  for (uint32_t i = 0; i < len; i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	613b      	str	r3, [r7, #16]
 80074be:	e017      	b.n	80074f0 <CDC_Receive_FS+0x54>
  {
	  rxBuffer[tempHeadPos] = Buf[i];
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	693b      	ldr	r3, [r7, #16]
 80074c4:	441a      	add	r2, r3
 80074c6:	8afb      	ldrh	r3, [r7, #22]
 80074c8:	7811      	ldrb	r1, [r2, #0]
 80074ca:	4a13      	ldr	r2, [pc, #76]	; (8007518 <CDC_Receive_FS+0x7c>)
 80074cc:	54d1      	strb	r1, [r2, r3]
	  tempHeadPos = (uint16_t)((uint16_t)(tempHeadPos + 1) % RX_BUFFER_SIZE);
 80074ce:	8afb      	ldrh	r3, [r7, #22]
 80074d0:	3301      	adds	r3, #1
 80074d2:	b29b      	uxth	r3, r3
 80074d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074d8:	82fb      	strh	r3, [r7, #22]

	  if (tempHeadPos == rxBufferTailPos)
 80074da:	4b10      	ldr	r3, [pc, #64]	; (800751c <CDC_Receive_FS+0x80>)
 80074dc:	881b      	ldrh	r3, [r3, #0]
 80074de:	b29b      	uxth	r3, r3
 80074e0:	8afa      	ldrh	r2, [r7, #22]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d101      	bne.n	80074ea <CDC_Receive_FS+0x4e>
	  {
		  return USBD_FAIL; 				// Full buffer
 80074e6:	2303      	movs	r3, #3
 80074e8:	e00d      	b.n	8007506 <CDC_Receive_FS+0x6a>
  for (uint32_t i = 0; i < len; i++)
 80074ea:	693b      	ldr	r3, [r7, #16]
 80074ec:	3301      	adds	r3, #1
 80074ee:	613b      	str	r3, [r7, #16]
 80074f0:	7bfb      	ldrb	r3, [r7, #15]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d3e3      	bcc.n	80074c0 <CDC_Receive_FS+0x24>
	  }
  }

  rxBufferHeadPos = tempHeadPos;
 80074f8:	4a06      	ldr	r2, [pc, #24]	; (8007514 <CDC_Receive_FS+0x78>)
 80074fa:	8afb      	ldrh	r3, [r7, #22]
 80074fc:	8013      	strh	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80074fe:	4804      	ldr	r0, [pc, #16]	; (8007510 <CDC_Receive_FS+0x74>)
 8007500:	f7fe fbc2 	bl	8005c88 <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007504:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007506:	4618      	mov	r0, r3
 8007508:	3718      	adds	r7, #24
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	2000024c 	.word	0x2000024c
 8007514:	20001930 	.word	0x20001930
 8007518:	20001530 	.word	0x20001530
 800751c:	20001932 	.word	0x20001932

08007520 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b084      	sub	sp, #16
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	460b      	mov	r3, r1
 800752a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800752c:	2300      	movs	r3, #0
 800752e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007530:	4b0d      	ldr	r3, [pc, #52]	; (8007568 <CDC_Transmit_FS+0x48>)
 8007532:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007536:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007542:	2301      	movs	r3, #1
 8007544:	e00b      	b.n	800755e <CDC_Transmit_FS+0x3e>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007546:	887b      	ldrh	r3, [r7, #2]
 8007548:	461a      	mov	r2, r3
 800754a:	6879      	ldr	r1, [r7, #4]
 800754c:	4806      	ldr	r0, [pc, #24]	; (8007568 <CDC_Transmit_FS+0x48>)
 800754e:	f7fe fb15 	bl	8005b7c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007552:	4805      	ldr	r0, [pc, #20]	; (8007568 <CDC_Transmit_FS+0x48>)
 8007554:	f7fe fb52 	bl	8005bfc <USBD_CDC_TransmitPacket>
 8007558:	4603      	mov	r3, r0
 800755a:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 7 */
  return result;
 800755c:	7bfb      	ldrb	r3, [r7, #15]
}
 800755e:	4618      	mov	r0, r3
 8007560:	3710      	adds	r7, #16
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	2000024c 	.word	0x2000024c

0800756c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800756c:	b480      	push	{r7}
 800756e:	b087      	sub	sp, #28
 8007570:	af00      	add	r7, sp, #0
 8007572:	60f8      	str	r0, [r7, #12]
 8007574:	60b9      	str	r1, [r7, #8]
 8007576:	4613      	mov	r3, r2
 8007578:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800757a:	2300      	movs	r3, #0
 800757c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800757e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
	...

08007590 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


uint8_t CDC_ReadRxBuffer_FS(uint8_t* Buf, uint16_t Len, uint32_t timeout)
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	60f8      	str	r0, [r7, #12]
 8007598:	460b      	mov	r3, r1
 800759a:	607a      	str	r2, [r7, #4]
 800759c:	817b      	strh	r3, [r7, #10]
	uint16_t bytesAvailable = 0;
 800759e:	2300      	movs	r3, #0
 80075a0:	82bb      	strh	r3, [r7, #20]
	uint32_t prev_time = HAL_GetTick();
 80075a2:	f7f9 fcf3 	bl	8000f8c <HAL_GetTick>
 80075a6:	6138      	str	r0, [r7, #16]

	do
	{
		bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 80075a8:	f000 f83c 	bl	8007624 <CDC_GetRxBufferBytesAvailable_FS>
 80075ac:	4603      	mov	r3, r0
 80075ae:	82bb      	strh	r3, [r7, #20]

	} while((bytesAvailable < Len) && ((HAL_GetTick() - prev_time) < timeout));
 80075b0:	8aba      	ldrh	r2, [r7, #20]
 80075b2:	897b      	ldrh	r3, [r7, #10]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d207      	bcs.n	80075c8 <CDC_ReadRxBuffer_FS+0x38>
 80075b8:	f7f9 fce8 	bl	8000f8c <HAL_GetTick>
 80075bc:	4602      	mov	r2, r0
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d8ef      	bhi.n	80075a8 <CDC_ReadRxBuffer_FS+0x18>

	if (bytesAvailable < Len)
 80075c8:	8aba      	ldrh	r2, [r7, #20]
 80075ca:	897b      	ldrh	r3, [r7, #10]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d201      	bcs.n	80075d4 <CDC_ReadRxBuffer_FS+0x44>
	{
		return USBD_FAIL;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e01f      	b.n	8007614 <CDC_ReadRxBuffer_FS+0x84>
	}

	for (uint16_t i = 0; i < Len; i++)
 80075d4:	2300      	movs	r3, #0
 80075d6:	82fb      	strh	r3, [r7, #22]
 80075d8:	e017      	b.n	800760a <CDC_ReadRxBuffer_FS+0x7a>
	{
		Buf[i] = rxBuffer[rxBufferTailPos];
 80075da:	4b10      	ldr	r3, [pc, #64]	; (800761c <CDC_ReadRxBuffer_FS+0x8c>)
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4619      	mov	r1, r3
 80075e2:	8afb      	ldrh	r3, [r7, #22]
 80075e4:	68fa      	ldr	r2, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	4a0d      	ldr	r2, [pc, #52]	; (8007620 <CDC_ReadRxBuffer_FS+0x90>)
 80075ea:	5c52      	ldrb	r2, [r2, r1]
 80075ec:	b2d2      	uxtb	r2, r2
 80075ee:	701a      	strb	r2, [r3, #0]
		rxBufferTailPos = (uint16_t)((uint16_t)(rxBufferTailPos + 1) % RX_BUFFER_SIZE);
 80075f0:	4b0a      	ldr	r3, [pc, #40]	; (800761c <CDC_ReadRxBuffer_FS+0x8c>)
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	3301      	adds	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075fe:	b29a      	uxth	r2, r3
 8007600:	4b06      	ldr	r3, [pc, #24]	; (800761c <CDC_ReadRxBuffer_FS+0x8c>)
 8007602:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < Len; i++)
 8007604:	8afb      	ldrh	r3, [r7, #22]
 8007606:	3301      	adds	r3, #1
 8007608:	82fb      	strh	r3, [r7, #22]
 800760a:	8afa      	ldrh	r2, [r7, #22]
 800760c:	897b      	ldrh	r3, [r7, #10]
 800760e:	429a      	cmp	r2, r3
 8007610:	d3e3      	bcc.n	80075da <CDC_ReadRxBuffer_FS+0x4a>
	}

	return USBD_OK;
 8007612:	2300      	movs	r3, #0
}
 8007614:	4618      	mov	r0, r3
 8007616:	3718      	adds	r7, #24
 8007618:	46bd      	mov	sp, r7
 800761a:	bd80      	pop	{r7, pc}
 800761c:	20001932 	.word	0x20001932
 8007620:	20001530 	.word	0x20001530

08007624 <CDC_GetRxBufferBytesAvailable_FS>:


uint16_t CDC_GetRxBufferBytesAvailable_FS(void)
{
 8007624:	b480      	push	{r7}
 8007626:	af00      	add	r7, sp, #0
	if (rxBufferHeadPos >= rxBufferTailPos)
 8007628:	4b10      	ldr	r3, [pc, #64]	; (800766c <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	b29a      	uxth	r2, r3
 800762e:	4b10      	ldr	r3, [pc, #64]	; (8007670 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 8007630:	881b      	ldrh	r3, [r3, #0]
 8007632:	b29b      	uxth	r3, r3
 8007634:	429a      	cmp	r2, r3
 8007636:	d308      	bcc.n	800764a <CDC_GetRxBufferBytesAvailable_FS+0x26>
	{
		return (uint16_t)(rxBufferHeadPos - rxBufferTailPos);
 8007638:	4b0c      	ldr	r3, [pc, #48]	; (800766c <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	b29a      	uxth	r2, r3
 800763e:	4b0c      	ldr	r3, [pc, #48]	; (8007670 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 8007640:	881b      	ldrh	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	b29b      	uxth	r3, r3
 8007648:	e00a      	b.n	8007660 <CDC_GetRxBufferBytesAvailable_FS+0x3c>
	}

	return (uint16_t)(RX_BUFFER_SIZE + rxBufferHeadPos - rxBufferTailPos);
 800764a:	4b08      	ldr	r3, [pc, #32]	; (800766c <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	b29a      	uxth	r2, r3
 8007650:	4b07      	ldr	r3, [pc, #28]	; (8007670 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 8007652:	881b      	ldrh	r3, [r3, #0]
 8007654:	b29b      	uxth	r3, r3
 8007656:	1ad3      	subs	r3, r2, r3
 8007658:	b29b      	uxth	r3, r3
 800765a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800765e:	b29b      	uxth	r3, r3
}
 8007660:	4618      	mov	r0, r3
 8007662:	46bd      	mov	sp, r7
 8007664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007668:	4770      	bx	lr
 800766a:	bf00      	nop
 800766c:	20001930 	.word	0x20001930
 8007670:	20001932 	.word	0x20001932

08007674 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	4603      	mov	r3, r0
 800767c:	6039      	str	r1, [r7, #0]
 800767e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	2212      	movs	r2, #18
 8007684:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007686:	4b03      	ldr	r3, [pc, #12]	; (8007694 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007688:	4618      	mov	r0, r3
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr
 8007694:	200000c8 	.word	0x200000c8

08007698 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007698:	b480      	push	{r7}
 800769a:	b083      	sub	sp, #12
 800769c:	af00      	add	r7, sp, #0
 800769e:	4603      	mov	r3, r0
 80076a0:	6039      	str	r1, [r7, #0]
 80076a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	2204      	movs	r2, #4
 80076a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80076aa:	4b03      	ldr	r3, [pc, #12]	; (80076b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	370c      	adds	r7, #12
 80076b0:	46bd      	mov	sp, r7
 80076b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b6:	4770      	bx	lr
 80076b8:	200000dc 	.word	0x200000dc

080076bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	4603      	mov	r3, r0
 80076c4:	6039      	str	r1, [r7, #0]
 80076c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80076c8:	79fb      	ldrb	r3, [r7, #7]
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d105      	bne.n	80076da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	4907      	ldr	r1, [pc, #28]	; (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076d2:	4808      	ldr	r0, [pc, #32]	; (80076f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076d4:	f7ff fd20 	bl	8007118 <USBD_GetString>
 80076d8:	e004      	b.n	80076e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4904      	ldr	r1, [pc, #16]	; (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80076de:	4805      	ldr	r0, [pc, #20]	; (80076f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80076e0:	f7ff fd1a 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80076e4:	4b02      	ldr	r3, [pc, #8]	; (80076f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
 80076ee:	bf00      	nop
 80076f0:	20001934 	.word	0x20001934
 80076f4:	08007f1c 	.word	0x08007f1c

080076f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	4603      	mov	r3, r0
 8007700:	6039      	str	r1, [r7, #0]
 8007702:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007704:	683a      	ldr	r2, [r7, #0]
 8007706:	4904      	ldr	r1, [pc, #16]	; (8007718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007708:	4804      	ldr	r0, [pc, #16]	; (800771c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800770a:	f7ff fd05 	bl	8007118 <USBD_GetString>
  return USBD_StrDesc;
 800770e:	4b02      	ldr	r3, [pc, #8]	; (8007718 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007710:	4618      	mov	r0, r3
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	20001934 	.word	0x20001934
 800771c:	08007f34 	.word	0x08007f34

08007720 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	4603      	mov	r3, r0
 8007728:	6039      	str	r1, [r7, #0]
 800772a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	221a      	movs	r2, #26
 8007730:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007732:	f000 f843 	bl	80077bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007736:	4b02      	ldr	r3, [pc, #8]	; (8007740 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007738:	4618      	mov	r0, r3
 800773a:	3708      	adds	r7, #8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	200000e0 	.word	0x200000e0

08007744 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	4603      	mov	r3, r0
 800774c:	6039      	str	r1, [r7, #0]
 800774e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007750:	79fb      	ldrb	r3, [r7, #7]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d105      	bne.n	8007762 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007756:	683a      	ldr	r2, [r7, #0]
 8007758:	4907      	ldr	r1, [pc, #28]	; (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
 800775a:	4808      	ldr	r0, [pc, #32]	; (800777c <USBD_FS_ConfigStrDescriptor+0x38>)
 800775c:	f7ff fcdc 	bl	8007118 <USBD_GetString>
 8007760:	e004      	b.n	800776c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007762:	683a      	ldr	r2, [r7, #0]
 8007764:	4904      	ldr	r1, [pc, #16]	; (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007766:	4805      	ldr	r0, [pc, #20]	; (800777c <USBD_FS_ConfigStrDescriptor+0x38>)
 8007768:	f7ff fcd6 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800776c:	4b02      	ldr	r3, [pc, #8]	; (8007778 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800776e:	4618      	mov	r0, r3
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20001934 	.word	0x20001934
 800777c:	08007f48 	.word	0x08007f48

08007780 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	4603      	mov	r3, r0
 8007788:	6039      	str	r1, [r7, #0]
 800778a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800778c:	79fb      	ldrb	r3, [r7, #7]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d105      	bne.n	800779e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007792:	683a      	ldr	r2, [r7, #0]
 8007794:	4907      	ldr	r1, [pc, #28]	; (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007796:	4808      	ldr	r0, [pc, #32]	; (80077b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007798:	f7ff fcbe 	bl	8007118 <USBD_GetString>
 800779c:	e004      	b.n	80077a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800779e:	683a      	ldr	r2, [r7, #0]
 80077a0:	4904      	ldr	r1, [pc, #16]	; (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80077a2:	4805      	ldr	r0, [pc, #20]	; (80077b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80077a4:	f7ff fcb8 	bl	8007118 <USBD_GetString>
  }
  return USBD_StrDesc;
 80077a8:	4b02      	ldr	r3, [pc, #8]	; (80077b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	20001934 	.word	0x20001934
 80077b8:	08007f54 	.word	0x08007f54

080077bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80077c2:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <Get_SerialNum+0x44>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80077c8:	4b0e      	ldr	r3, [pc, #56]	; (8007804 <Get_SerialNum+0x48>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80077ce:	4b0e      	ldr	r3, [pc, #56]	; (8007808 <Get_SerialNum+0x4c>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80077d4:	68fa      	ldr	r2, [r7, #12]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	4413      	add	r3, r2
 80077da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d009      	beq.n	80077f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80077e2:	2208      	movs	r2, #8
 80077e4:	4909      	ldr	r1, [pc, #36]	; (800780c <Get_SerialNum+0x50>)
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f000 f814 	bl	8007814 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80077ec:	2204      	movs	r2, #4
 80077ee:	4908      	ldr	r1, [pc, #32]	; (8007810 <Get_SerialNum+0x54>)
 80077f0:	68b8      	ldr	r0, [r7, #8]
 80077f2:	f000 f80f 	bl	8007814 <IntToUnicode>
  }
}
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	1fff7a10 	.word	0x1fff7a10
 8007804:	1fff7a14 	.word	0x1fff7a14
 8007808:	1fff7a18 	.word	0x1fff7a18
 800780c:	200000e2 	.word	0x200000e2
 8007810:	200000f2 	.word	0x200000f2

08007814 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007814:	b480      	push	{r7}
 8007816:	b087      	sub	sp, #28
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	4613      	mov	r3, r2
 8007820:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007822:	2300      	movs	r3, #0
 8007824:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007826:	2300      	movs	r3, #0
 8007828:	75fb      	strb	r3, [r7, #23]
 800782a:	e027      	b.n	800787c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	0f1b      	lsrs	r3, r3, #28
 8007830:	2b09      	cmp	r3, #9
 8007832:	d80b      	bhi.n	800784c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	0f1b      	lsrs	r3, r3, #28
 8007838:	b2da      	uxtb	r2, r3
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4619      	mov	r1, r3
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	440b      	add	r3, r1
 8007844:	3230      	adds	r2, #48	; 0x30
 8007846:	b2d2      	uxtb	r2, r2
 8007848:	701a      	strb	r2, [r3, #0]
 800784a:	e00a      	b.n	8007862 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	0f1b      	lsrs	r3, r3, #28
 8007850:	b2da      	uxtb	r2, r3
 8007852:	7dfb      	ldrb	r3, [r7, #23]
 8007854:	005b      	lsls	r3, r3, #1
 8007856:	4619      	mov	r1, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	440b      	add	r3, r1
 800785c:	3237      	adds	r2, #55	; 0x37
 800785e:	b2d2      	uxtb	r2, r2
 8007860:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	011b      	lsls	r3, r3, #4
 8007866:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007868:	7dfb      	ldrb	r3, [r7, #23]
 800786a:	005b      	lsls	r3, r3, #1
 800786c:	3301      	adds	r3, #1
 800786e:	68ba      	ldr	r2, [r7, #8]
 8007870:	4413      	add	r3, r2
 8007872:	2200      	movs	r2, #0
 8007874:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	3301      	adds	r3, #1
 800787a:	75fb      	strb	r3, [r7, #23]
 800787c:	7dfa      	ldrb	r2, [r7, #23]
 800787e:	79fb      	ldrb	r3, [r7, #7]
 8007880:	429a      	cmp	r2, r3
 8007882:	d3d3      	bcc.n	800782c <IntToUnicode+0x18>
  }
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop
 8007888:	371c      	adds	r7, #28
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr
	...

08007894 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b08a      	sub	sp, #40	; 0x28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800789c:	f107 0314 	add.w	r3, r7, #20
 80078a0:	2200      	movs	r2, #0
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	605a      	str	r2, [r3, #4]
 80078a6:	609a      	str	r2, [r3, #8]
 80078a8:	60da      	str	r2, [r3, #12]
 80078aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80078b4:	d13a      	bne.n	800792c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078b6:	2300      	movs	r3, #0
 80078b8:	613b      	str	r3, [r7, #16]
 80078ba:	4b1e      	ldr	r3, [pc, #120]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 80078bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078be:	4a1d      	ldr	r2, [pc, #116]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 80078c0:	f043 0301 	orr.w	r3, r3, #1
 80078c4:	6313      	str	r3, [r2, #48]	; 0x30
 80078c6:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	f003 0301 	and.w	r3, r3, #1
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80078d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80078d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078d8:	2302      	movs	r3, #2
 80078da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078dc:	2300      	movs	r3, #0
 80078de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078e0:	2303      	movs	r3, #3
 80078e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80078e4:	230a      	movs	r3, #10
 80078e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078e8:	f107 0314 	add.w	r3, r7, #20
 80078ec:	4619      	mov	r1, r3
 80078ee:	4812      	ldr	r0, [pc, #72]	; (8007938 <HAL_PCD_MspInit+0xa4>)
 80078f0:	f7f9 ffc4 	bl	800187c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 80078f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078f8:	4a0e      	ldr	r2, [pc, #56]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 80078fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078fe:	6353      	str	r3, [r2, #52]	; 0x34
 8007900:	2300      	movs	r3, #0
 8007902:	60fb      	str	r3, [r7, #12]
 8007904:	4b0b      	ldr	r3, [pc, #44]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 8007906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007908:	4a0a      	ldr	r2, [pc, #40]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 800790a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800790e:	6453      	str	r3, [r2, #68]	; 0x44
 8007910:	4b08      	ldr	r3, [pc, #32]	; (8007934 <HAL_PCD_MspInit+0xa0>)
 8007912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007918:	60fb      	str	r3, [r7, #12]
 800791a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800791c:	2200      	movs	r2, #0
 800791e:	2100      	movs	r1, #0
 8007920:	2043      	movs	r0, #67	; 0x43
 8007922:	f7f9 fc3e 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007926:	2043      	movs	r0, #67	; 0x43
 8007928:	f7f9 fc57 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800792c:	bf00      	nop
 800792e:	3728      	adds	r7, #40	; 0x28
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	40023800 	.word	0x40023800
 8007938:	40020000 	.word	0x40020000

0800793c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007950:	4619      	mov	r1, r3
 8007952:	4610      	mov	r0, r2
 8007954:	f7fe fa81 	bl	8005e5a <USBD_LL_SetupStage>
}
 8007958:	bf00      	nop
 800795a:	3708      	adds	r7, #8
 800795c:	46bd      	mov	sp, r7
 800795e:	bd80      	pop	{r7, pc}

08007960 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b082      	sub	sp, #8
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
 8007968:	460b      	mov	r3, r1
 800796a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007972:	78fa      	ldrb	r2, [r7, #3]
 8007974:	6879      	ldr	r1, [r7, #4]
 8007976:	4613      	mov	r3, r2
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4413      	add	r3, r2
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	440b      	add	r3, r1
 8007980:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	78fb      	ldrb	r3, [r7, #3]
 8007988:	4619      	mov	r1, r3
 800798a:	f7fe fabb 	bl	8005f04 <USBD_LL_DataOutStage>
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007996:	b580      	push	{r7, lr}
 8007998:	b082      	sub	sp, #8
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	460b      	mov	r3, r1
 80079a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80079a8:	78fa      	ldrb	r2, [r7, #3]
 80079aa:	6879      	ldr	r1, [r7, #4]
 80079ac:	4613      	mov	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4413      	add	r3, r2
 80079b2:	009b      	lsls	r3, r3, #2
 80079b4:	440b      	add	r3, r1
 80079b6:	334c      	adds	r3, #76	; 0x4c
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	78fb      	ldrb	r3, [r7, #3]
 80079bc:	4619      	mov	r1, r3
 80079be:	f7fe fb54 	bl	800606a <USBD_LL_DataInStage>
}
 80079c2:	bf00      	nop
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}

080079ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079ca:	b580      	push	{r7, lr}
 80079cc:	b082      	sub	sp, #8
 80079ce:	af00      	add	r7, sp, #0
 80079d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079d8:	4618      	mov	r0, r3
 80079da:	f7fe fc88 	bl	80062ee <USBD_LL_SOF>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b084      	sub	sp, #16
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80079ee:	2301      	movs	r3, #1
 80079f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	68db      	ldr	r3, [r3, #12]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d001      	beq.n	80079fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80079fa:	f7f9 f96d 	bl	8000cd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a04:	7bfa      	ldrb	r2, [r7, #15]
 8007a06:	4611      	mov	r1, r2
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fc32 	bl	8006272 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fe fbda 	bl	80061ce <USBD_LL_Reset>
}
 8007a1a:	bf00      	nop
 8007a1c:	3710      	adds	r7, #16
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	bd80      	pop	{r7, pc}
	...

08007a24 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b082      	sub	sp, #8
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a32:	4618      	mov	r0, r3
 8007a34:	f7fe fc2d 	bl	8006292 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	687a      	ldr	r2, [r7, #4]
 8007a44:	6812      	ldr	r2, [r2, #0]
 8007a46:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a4a:	f043 0301 	orr.w	r3, r3, #1
 8007a4e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007a58:	4b04      	ldr	r3, [pc, #16]	; (8007a6c <HAL_PCD_SuspendCallback+0x48>)
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	4a03      	ldr	r2, [pc, #12]	; (8007a6c <HAL_PCD_SuspendCallback+0x48>)
 8007a5e:	f043 0306 	orr.w	r3, r3, #6
 8007a62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007a64:	bf00      	nop
 8007a66:	3708      	adds	r7, #8
 8007a68:	46bd      	mov	sp, r7
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	e000ed00 	.word	0xe000ed00

08007a70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fe fc1d 	bl	80062be <USBD_LL_Resume>
}
 8007a84:	bf00      	nop
 8007a86:	3708      	adds	r7, #8
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}

08007a8c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b082      	sub	sp, #8
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007a9e:	78fa      	ldrb	r2, [r7, #3]
 8007aa0:	4611      	mov	r1, r2
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f7fe fc75 	bl	8006392 <USBD_LL_IsoOUTIncomplete>
}
 8007aa8:	bf00      	nop
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	460b      	mov	r3, r1
 8007aba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ac2:	78fa      	ldrb	r2, [r7, #3]
 8007ac4:	4611      	mov	r1, r2
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f7fe fc31 	bl	800632e <USBD_LL_IsoINIncomplete>
}
 8007acc:	bf00      	nop
 8007ace:	3708      	adds	r7, #8
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b082      	sub	sp, #8
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007ae2:	4618      	mov	r0, r3
 8007ae4:	f7fe fc87 	bl	80063f6 <USBD_LL_DevConnected>
}
 8007ae8:	bf00      	nop
 8007aea:	3708      	adds	r7, #8
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007afe:	4618      	mov	r0, r3
 8007b00:	f7fe fc84 	bl	800640c <USBD_LL_DevDisconnected>
}
 8007b04:	bf00      	nop
 8007b06:	3708      	adds	r7, #8
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b082      	sub	sp, #8
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	781b      	ldrb	r3, [r3, #0]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d13c      	bne.n	8007b96 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007b1c:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	4a1e      	ldr	r2, [pc, #120]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b28:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007b2c:	4b1c      	ldr	r3, [pc, #112]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b2e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007b32:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007b34:	4b1a      	ldr	r3, [pc, #104]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b36:	2204      	movs	r2, #4
 8007b38:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007b3a:	4b19      	ldr	r3, [pc, #100]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007b40:	4b17      	ldr	r3, [pc, #92]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007b46:	4b16      	ldr	r3, [pc, #88]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b48:	2202      	movs	r2, #2
 8007b4a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007b4c:	4b14      	ldr	r3, [pc, #80]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b4e:	2200      	movs	r2, #0
 8007b50:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007b52:	4b13      	ldr	r3, [pc, #76]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007b58:	4b11      	ldr	r3, [pc, #68]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007b5e:	4b10      	ldr	r3, [pc, #64]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007b64:	4b0e      	ldr	r3, [pc, #56]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007b6a:	480d      	ldr	r0, [pc, #52]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b6c:	f7fa f823 	bl	8001bb6 <HAL_PCD_Init>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007b76:	f7f9 f8af 	bl	8000cd8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007b7a:	2180      	movs	r1, #128	; 0x80
 8007b7c:	4808      	ldr	r0, [pc, #32]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b7e:	f7fb fa7a 	bl	8003076 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007b82:	2240      	movs	r2, #64	; 0x40
 8007b84:	2100      	movs	r1, #0
 8007b86:	4806      	ldr	r0, [pc, #24]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b88:	f7fb fa2e 	bl	8002fe8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007b8c:	2280      	movs	r2, #128	; 0x80
 8007b8e:	2101      	movs	r1, #1
 8007b90:	4803      	ldr	r0, [pc, #12]	; (8007ba0 <USBD_LL_Init+0x94>)
 8007b92:	f7fb fa29 	bl	8002fe8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	20001b34 	.word	0x20001b34

08007ba4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b084      	sub	sp, #16
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bac:	2300      	movs	r3, #0
 8007bae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bba:	4618      	mov	r0, r3
 8007bbc:	f7fa f918 	bl	8001df0 <HAL_PCD_Start>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007bc4:	7bfb      	ldrb	r3, [r7, #15]
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f000 f942 	bl	8007e50 <USBD_Get_USB_Status>
 8007bcc:	4603      	mov	r3, r0
 8007bce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007bd0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	4608      	mov	r0, r1
 8007be4:	4611      	mov	r1, r2
 8007be6:	461a      	mov	r2, r3
 8007be8:	4603      	mov	r3, r0
 8007bea:	70fb      	strb	r3, [r7, #3]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70bb      	strb	r3, [r7, #2]
 8007bf0:	4613      	mov	r3, r2
 8007bf2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c02:	78bb      	ldrb	r3, [r7, #2]
 8007c04:	883a      	ldrh	r2, [r7, #0]
 8007c06:	78f9      	ldrb	r1, [r7, #3]
 8007c08:	f7fa fde9 	bl	80027de <HAL_PCD_EP_Open>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c10:	7bfb      	ldrb	r3, [r7, #15]
 8007c12:	4618      	mov	r0, r3
 8007c14:	f000 f91c 	bl	8007e50 <USBD_Get_USB_Status>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3710      	adds	r7, #16
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	b084      	sub	sp, #16
 8007c2a:	af00      	add	r7, sp, #0
 8007c2c:	6078      	str	r0, [r7, #4]
 8007c2e:	460b      	mov	r3, r1
 8007c30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c40:	78fa      	ldrb	r2, [r7, #3]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fa fe32 	bl	80028ae <HAL_PCD_EP_Close>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4e:	7bfb      	ldrb	r3, [r7, #15]
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 f8fd 	bl	8007e50 <USBD_Get_USB_Status>
 8007c56:	4603      	mov	r3, r0
 8007c58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3710      	adds	r7, #16
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b084      	sub	sp, #16
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c7e:	78fa      	ldrb	r2, [r7, #3]
 8007c80:	4611      	mov	r1, r2
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fa ff0a 	bl	8002a9c <HAL_PCD_EP_SetStall>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8c:	7bfb      	ldrb	r3, [r7, #15]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f8de 	bl	8007e50 <USBD_Get_USB_Status>
 8007c94:	4603      	mov	r3, r0
 8007c96:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c98:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3710      	adds	r7, #16
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b084      	sub	sp, #16
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	460b      	mov	r3, r1
 8007cac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cae:	2300      	movs	r3, #0
 8007cb0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	4611      	mov	r1, r2
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fa ff4f 	bl	8002b64 <HAL_PCD_EP_ClrStall>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cca:	7bfb      	ldrb	r3, [r7, #15]
 8007ccc:	4618      	mov	r0, r3
 8007cce:	f000 f8bf 	bl	8007e50 <USBD_Get_USB_Status>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cd6:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3710      	adds	r7, #16
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	bd80      	pop	{r7, pc}

08007ce0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cf2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da0b      	bge.n	8007d14 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	4613      	mov	r3, r2
 8007d06:	00db      	lsls	r3, r3, #3
 8007d08:	4413      	add	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	440b      	add	r3, r1
 8007d0e:	333e      	adds	r3, #62	; 0x3e
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	e00b      	b.n	8007d2c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d14:	78fb      	ldrb	r3, [r7, #3]
 8007d16:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d1a:	68f9      	ldr	r1, [r7, #12]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	00db      	lsls	r3, r3, #3
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007d2a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b084      	sub	sp, #16
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	460b      	mov	r3, r1
 8007d42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d52:	78fa      	ldrb	r2, [r7, #3]
 8007d54:	4611      	mov	r1, r2
 8007d56:	4618      	mov	r0, r3
 8007d58:	f7fa fd1c 	bl	8002794 <HAL_PCD_SetAddress>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d60:	7bfb      	ldrb	r3, [r7, #15]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f000 f874 	bl	8007e50 <USBD_Get_USB_Status>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b086      	sub	sp, #24
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	607a      	str	r2, [r7, #4]
 8007d80:	603b      	str	r3, [r7, #0]
 8007d82:	460b      	mov	r3, r1
 8007d84:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d94:	7af9      	ldrb	r1, [r7, #11]
 8007d96:	683b      	ldr	r3, [r7, #0]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	f7fa fe35 	bl	8002a08 <HAL_PCD_EP_Transmit>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007da2:	7dfb      	ldrb	r3, [r7, #23]
 8007da4:	4618      	mov	r0, r3
 8007da6:	f000 f853 	bl	8007e50 <USBD_Get_USB_Status>
 8007daa:	4603      	mov	r3, r0
 8007dac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007dae:	7dbb      	ldrb	r3, [r7, #22]
}
 8007db0:	4618      	mov	r0, r3
 8007db2:	3718      	adds	r7, #24
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}

08007db8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b086      	sub	sp, #24
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	60f8      	str	r0, [r7, #12]
 8007dc0:	607a      	str	r2, [r7, #4]
 8007dc2:	603b      	str	r3, [r7, #0]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dd6:	7af9      	ldrb	r1, [r7, #11]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	f7fa fdb1 	bl	8002942 <HAL_PCD_EP_Receive>
 8007de0:	4603      	mov	r3, r0
 8007de2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007de4:	7dfb      	ldrb	r3, [r7, #23]
 8007de6:	4618      	mov	r0, r3
 8007de8:	f000 f832 	bl	8007e50 <USBD_Get_USB_Status>
 8007dec:	4603      	mov	r3, r0
 8007dee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007df0:	7dbb      	ldrb	r3, [r7, #22]
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3718      	adds	r7, #24
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}

08007dfa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dfa:	b580      	push	{r7, lr}
 8007dfc:	b082      	sub	sp, #8
 8007dfe:	af00      	add	r7, sp, #0
 8007e00:	6078      	str	r0, [r7, #4]
 8007e02:	460b      	mov	r3, r1
 8007e04:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e0c:	78fa      	ldrb	r2, [r7, #3]
 8007e0e:	4611      	mov	r1, r2
 8007e10:	4618      	mov	r0, r3
 8007e12:	f7fa fde1 	bl	80029d8 <HAL_PCD_EP_GetRxCount>
 8007e16:	4603      	mov	r3, r0
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3708      	adds	r7, #8
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e28:	4b03      	ldr	r3, [pc, #12]	; (8007e38 <USBD_static_malloc+0x18>)
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20002040 	.word	0x20002040

08007e3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]

}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	4603      	mov	r3, r0
 8007e58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007e5e:	79fb      	ldrb	r3, [r7, #7]
 8007e60:	2b03      	cmp	r3, #3
 8007e62:	d817      	bhi.n	8007e94 <USBD_Get_USB_Status+0x44>
 8007e64:	a201      	add	r2, pc, #4	; (adr r2, 8007e6c <USBD_Get_USB_Status+0x1c>)
 8007e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e6a:	bf00      	nop
 8007e6c:	08007e7d 	.word	0x08007e7d
 8007e70:	08007e83 	.word	0x08007e83
 8007e74:	08007e89 	.word	0x08007e89
 8007e78:	08007e8f 	.word	0x08007e8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73fb      	strb	r3, [r7, #15]
    break;
 8007e80:	e00b      	b.n	8007e9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007e82:	2303      	movs	r3, #3
 8007e84:	73fb      	strb	r3, [r7, #15]
    break;
 8007e86:	e008      	b.n	8007e9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007e88:	2301      	movs	r3, #1
 8007e8a:	73fb      	strb	r3, [r7, #15]
    break;
 8007e8c:	e005      	b.n	8007e9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	73fb      	strb	r3, [r7, #15]
    break;
 8007e92:	e002      	b.n	8007e9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007e94:	2303      	movs	r3, #3
 8007e96:	73fb      	strb	r3, [r7, #15]
    break;
 8007e98:	bf00      	nop
  }
  return usb_status;
 8007e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3714      	adds	r7, #20
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea6:	4770      	bx	lr

08007ea8 <__libc_init_array>:
 8007ea8:	b570      	push	{r4, r5, r6, lr}
 8007eaa:	4d0d      	ldr	r5, [pc, #52]	; (8007ee0 <__libc_init_array+0x38>)
 8007eac:	4c0d      	ldr	r4, [pc, #52]	; (8007ee4 <__libc_init_array+0x3c>)
 8007eae:	1b64      	subs	r4, r4, r5
 8007eb0:	10a4      	asrs	r4, r4, #2
 8007eb2:	2600      	movs	r6, #0
 8007eb4:	42a6      	cmp	r6, r4
 8007eb6:	d109      	bne.n	8007ecc <__libc_init_array+0x24>
 8007eb8:	4d0b      	ldr	r5, [pc, #44]	; (8007ee8 <__libc_init_array+0x40>)
 8007eba:	4c0c      	ldr	r4, [pc, #48]	; (8007eec <__libc_init_array+0x44>)
 8007ebc:	f000 f820 	bl	8007f00 <_init>
 8007ec0:	1b64      	subs	r4, r4, r5
 8007ec2:	10a4      	asrs	r4, r4, #2
 8007ec4:	2600      	movs	r6, #0
 8007ec6:	42a6      	cmp	r6, r4
 8007ec8:	d105      	bne.n	8007ed6 <__libc_init_array+0x2e>
 8007eca:	bd70      	pop	{r4, r5, r6, pc}
 8007ecc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed0:	4798      	blx	r3
 8007ed2:	3601      	adds	r6, #1
 8007ed4:	e7ee      	b.n	8007eb4 <__libc_init_array+0xc>
 8007ed6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eda:	4798      	blx	r3
 8007edc:	3601      	adds	r6, #1
 8007ede:	e7f2      	b.n	8007ec6 <__libc_init_array+0x1e>
 8007ee0:	08007f7c 	.word	0x08007f7c
 8007ee4:	08007f7c 	.word	0x08007f7c
 8007ee8:	08007f7c 	.word	0x08007f7c
 8007eec:	08007f80 	.word	0x08007f80

08007ef0 <memset>:
 8007ef0:	4402      	add	r2, r0
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d100      	bne.n	8007efa <memset+0xa>
 8007ef8:	4770      	bx	lr
 8007efa:	f803 1b01 	strb.w	r1, [r3], #1
 8007efe:	e7f9      	b.n	8007ef4 <memset+0x4>

08007f00 <_init>:
 8007f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f02:	bf00      	nop
 8007f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	469e      	mov	lr, r3
 8007f0a:	4770      	bx	lr

08007f0c <_fini>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr
