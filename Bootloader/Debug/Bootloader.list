
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007eb4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080a8  080080a8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080080a8  080080a8  000180a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080b0  080080b0  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080b0  080080b0  000180b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080080b4  080080b4  000180b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  080080b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020e4  200000fc  080081b4  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200021e0  080081b4  000221e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001077e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035c1  00000000  00000000  000308aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00033e70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  00034c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001942d  00000000  00000000  00035908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f86  00000000  00000000  0004ed35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088313  00000000  00000000  00061cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e9fce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003750  00000000  00000000  000ea020  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08008034 	.word	0x08008034

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08008034 	.word	0x08008034

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SendError>:
 * @brief	Send the error command with the error identifier.
 * @param	None
 * @return	None
 */
static void SendError(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
	uint8_t error_msg[CMD_RESP_PACKET_SIZE] = {0};
 80004e2:	4b0d      	ldr	r3, [pc, #52]	; (8000518 <SendError+0x3c>)
 80004e4:	881b      	ldrh	r3, [r3, #0]
 80004e6:	80bb      	strh	r3, [r7, #4]
 80004e8:	2300      	movs	r3, #0
 80004ea:	71bb      	strb	r3, [r7, #6]

	error_msg[0] = CMD_ID_ERROR;
 80004ec:	2350      	movs	r3, #80	; 0x50
 80004ee:	713b      	strb	r3, [r7, #4]
	error_msg[1] = error_id;
 80004f0:	4b0a      	ldr	r3, [pc, #40]	; (800051c <SendError+0x40>)
 80004f2:	781b      	ldrb	r3, [r3, #0]
 80004f4:	717b      	strb	r3, [r7, #5]
	error_msg[2] = 0;				// padding to complete CMD_RESP_PACKET_SIZE
 80004f6:	2300      	movs	r3, #0
 80004f8:	71bb      	strb	r3, [r7, #6]

	while(CDC_Transmit_FS(error_msg, CMD_RESP_PACKET_SIZE) == USBD_BUSY);
 80004fa:	bf00      	nop
 80004fc:	1d3b      	adds	r3, r7, #4
 80004fe:	2103      	movs	r1, #3
 8000500:	4618      	mov	r0, r3
 8000502:	f007 f88f 	bl	8007624 <CDC_Transmit_FS>
 8000506:	4603      	mov	r3, r0
 8000508:	2b01      	cmp	r3, #1
 800050a:	d0f7      	beq.n	80004fc <SendError+0x20>
}
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	0800804c 	.word	0x0800804c
 800051c:	20000198 	.word	0x20000198

08000520 <SendCmdAck>:
 * @brief	Send command acknowledgment message.
 * @param	command_id: The ID of the command being acknowledged.
 * @return	None
 */
static void SendCmdAck(uint8_t command_id)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b084      	sub	sp, #16
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd_ack_msg[CMD_RESP_PACKET_SIZE] = {0};
 800052a:	4b0d      	ldr	r3, [pc, #52]	; (8000560 <SendCmdAck+0x40>)
 800052c:	881b      	ldrh	r3, [r3, #0]
 800052e:	81bb      	strh	r3, [r7, #12]
 8000530:	2300      	movs	r3, #0
 8000532:	73bb      	strb	r3, [r7, #14]

	cmd_ack_msg[0] = CMD_ID_ACK;
 8000534:	2310      	movs	r3, #16
 8000536:	733b      	strb	r3, [r7, #12]
	cmd_ack_msg[1] = command_id;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	737b      	strb	r3, [r7, #13]
	cmd_ack_msg[2] = 0; 			// padding to complete CMD_RESP_PACKET_SIZE
 800053c:	2300      	movs	r3, #0
 800053e:	73bb      	strb	r3, [r7, #14]

	while(CDC_Transmit_FS(cmd_ack_msg, CMD_RESP_PACKET_SIZE) == USBD_BUSY);
 8000540:	bf00      	nop
 8000542:	f107 030c 	add.w	r3, r7, #12
 8000546:	2103      	movs	r1, #3
 8000548:	4618      	mov	r0, r3
 800054a:	f007 f86b 	bl	8007624 <CDC_Transmit_FS>
 800054e:	4603      	mov	r3, r0
 8000550:	2b01      	cmp	r3, #1
 8000552:	d0f6      	beq.n	8000542 <SendCmdAck+0x22>
}
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	3710      	adds	r7, #16
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	0800804c 	.word	0x0800804c

08000564 <SendPacketAck>:
 * @brief	Send packet acknowledgment message.
 * @param	packet_number: The number of the packet being acknowledged.
 * @return	None
 */
static void SendPacketAck(uint16_t packet_number)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	80fb      	strh	r3, [r7, #6]
	uint8_t packet_ack_msg[CMD_RESP_PACKET_SIZE] = {0};
 800056e:	4b0f      	ldr	r3, [pc, #60]	; (80005ac <SendPacketAck+0x48>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	81bb      	strh	r3, [r7, #12]
 8000574:	2300      	movs	r3, #0
 8000576:	73bb      	strb	r3, [r7, #14]

	packet_ack_msg[0] = CMD_ID_PACKET_ACK;
 8000578:	2330      	movs	r3, #48	; 0x30
 800057a:	733b      	strb	r3, [r7, #12]
	packet_ack_msg[1] = (uint8_t)(packet_number);			// Set the lower byte of the packet number
 800057c:	88fb      	ldrh	r3, [r7, #6]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	737b      	strb	r3, [r7, #13]
	packet_ack_msg[2] = (uint8_t)(packet_number >> 8);		// Set the upper byte of the packet number
 8000582:	88fb      	ldrh	r3, [r7, #6]
 8000584:	0a1b      	lsrs	r3, r3, #8
 8000586:	b29b      	uxth	r3, r3
 8000588:	b2db      	uxtb	r3, r3
 800058a:	73bb      	strb	r3, [r7, #14]

	while(CDC_Transmit_FS(packet_ack_msg, CMD_RESP_PACKET_SIZE) == USBD_BUSY);
 800058c:	bf00      	nop
 800058e:	f107 030c 	add.w	r3, r7, #12
 8000592:	2103      	movs	r1, #3
 8000594:	4618      	mov	r0, r3
 8000596:	f007 f845 	bl	8007624 <CDC_Transmit_FS>
 800059a:	4603      	mov	r3, r0
 800059c:	2b01      	cmp	r3, #1
 800059e:	d0f6      	beq.n	800058e <SendPacketAck+0x2a>
}
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	3710      	adds	r7, #16
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	0800804c 	.word	0x0800804c

080005b0 <SendPacketNAck>:
 * @brief	Send packet non-acknowledgment message.
 * @param	packet_number: The number of the packet being non-acknowledged.
 * @return	None
 */
static void SendPacketNAck(uint16_t packet_number)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b084      	sub	sp, #16
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
	uint8_t packet_nack_msg[CMD_RESP_PACKET_SIZE] = {0};
 80005ba:	4b0f      	ldr	r3, [pc, #60]	; (80005f8 <SendPacketNAck+0x48>)
 80005bc:	881b      	ldrh	r3, [r3, #0]
 80005be:	81bb      	strh	r3, [r7, #12]
 80005c0:	2300      	movs	r3, #0
 80005c2:	73bb      	strb	r3, [r7, #14]

	packet_nack_msg[0] = CMD_ID_PACKET_NACK;
 80005c4:	2340      	movs	r3, #64	; 0x40
 80005c6:	733b      	strb	r3, [r7, #12]
	packet_nack_msg[1] = (uint8_t)(packet_number);			// Set the lower byte of the packet number
 80005c8:	88fb      	ldrh	r3, [r7, #6]
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	737b      	strb	r3, [r7, #13]
	packet_nack_msg[2] = (uint8_t)(packet_number >> 8);		// Set the upper byte of the packet number
 80005ce:	88fb      	ldrh	r3, [r7, #6]
 80005d0:	0a1b      	lsrs	r3, r3, #8
 80005d2:	b29b      	uxth	r3, r3
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	73bb      	strb	r3, [r7, #14]

	while(CDC_Transmit_FS(packet_nack_msg, CMD_RESP_PACKET_SIZE) == USBD_BUSY);
 80005d8:	bf00      	nop
 80005da:	f107 030c 	add.w	r3, r7, #12
 80005de:	2103      	movs	r1, #3
 80005e0:	4618      	mov	r0, r3
 80005e2:	f007 f81f 	bl	8007624 <CDC_Transmit_FS>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d0f6      	beq.n	80005da <SendPacketNAck+0x2a>
}
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	3710      	adds	r7, #16
 80005f2:	46bd      	mov	sp, r7
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	0800804c 	.word	0x0800804c

080005fc <Bootloader_Run>:
 * @brief	Run the Bootloader state machine
 * @param	None
 * @return	None
 */
void Bootloader_Run(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
    uint8_t status;
    uint16_t total_packets = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	81bb      	strh	r3, [r7, #12]
    uint32_t app_total_words = 0;
 8000606:	2300      	movs	r3, #0
 8000608:	603b      	str	r3, [r7, #0]
    uint32_t app_checksum = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]

    e_Bootloader_State currentState = BL_STATE_IDLE;
 800060e:	2300      	movs	r3, #0
 8000610:	71fb      	strb	r3, [r7, #7]

    // Initialize the Flash Memory
	status = Flash_Init();
 8000612:	f000 f9a7 	bl	8000964 <Flash_Init>
 8000616:	4603      	mov	r3, r0
 8000618:	73fb      	strb	r3, [r7, #15]

	if(status != FLASH_OK)
 800061a:	7bfb      	ldrb	r3, [r7, #15]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d004      	beq.n	800062a <Bootloader_Run+0x2e>
	{
		error_id = status;
 8000620:	4a5a      	ldr	r2, [pc, #360]	; (800078c <Bootloader_Run+0x190>)
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	7013      	strb	r3, [r2, #0]
		currentState = BL_STATE_SEND_ERROR;
 8000626:	2304      	movs	r3, #4
 8000628:	71fb      	strb	r3, [r7, #7]
	}

    while(1)
    {

    	switch (currentState)
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2b05      	cmp	r3, #5
 800062e:	f200 80a6 	bhi.w	800077e <Bootloader_Run+0x182>
 8000632:	a201      	add	r2, pc, #4	; (adr r2, 8000638 <Bootloader_Run+0x3c>)
 8000634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000638:	08000651 	.word	0x08000651
 800063c:	080006dd 	.word	0x080006dd
 8000640:	080006eb 	.word	0x080006eb
 8000644:	08000759 	.word	0x08000759
 8000648:	0800070d 	.word	0x0800070d
 800064c:	08000717 	.word	0x08000717
    	{
    		case BL_STATE_IDLE:

    			CDC_FlushRxBuffer_FS();
 8000650:	f007 f894 	bl	800777c <CDC_FlushRxBuffer_FS>

    			status = CDC_ReadRxBuffer_FS(packet_buffer, CMD_PACKET_SIZE, MAX_TIMEOUT);
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	2107      	movs	r1, #7
 800065a:	484d      	ldr	r0, [pc, #308]	; (8000790 <Bootloader_Run+0x194>)
 800065c:	f007 f81a 	bl	8007694 <CDC_ReadRxBuffer_FS>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]

    			if(status == USBD_OK)
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d136      	bne.n	80006d8 <Bootloader_Run+0xdc>
    			{
    				switch (packet_buffer[0])
 800066a:	4b49      	ldr	r3, [pc, #292]	; (8000790 <Bootloader_Run+0x194>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b80      	cmp	r3, #128	; 0x80
 8000670:	d009      	beq.n	8000686 <Bootloader_Run+0x8a>
 8000672:	2b80      	cmp	r3, #128	; 0x80
 8000674:	dc2a      	bgt.n	80006cc <Bootloader_Run+0xd0>
 8000676:	2b60      	cmp	r3, #96	; 0x60
 8000678:	d002      	beq.n	8000680 <Bootloader_Run+0x84>
 800067a:	2b70      	cmp	r3, #112	; 0x70
 800067c:	d023      	beq.n	80006c6 <Bootloader_Run+0xca>
 800067e:	e025      	b.n	80006cc <Bootloader_Run+0xd0>
    				{
    					case CMD_ID_EXECUTE:
    						currentState = BL_STATE_EXECUTE;
 8000680:	2302      	movs	r3, #2
 8000682:	71fb      	strb	r3, [r7, #7]
    						break;
 8000684:	e029      	b.n	80006da <Bootloader_Run+0xde>

    					case CMD_ID_DOWNLOAD_FW:
    		    			total_packets = ((uint16_t)packet_buffer[1] & 0xFF) | (((uint16_t)packet_buffer[2] << 8) & 0xFF00);
 8000686:	4b42      	ldr	r3, [pc, #264]	; (8000790 <Bootloader_Run+0x194>)
 8000688:	785b      	ldrb	r3, [r3, #1]
 800068a:	b21a      	sxth	r2, r3
 800068c:	4b40      	ldr	r3, [pc, #256]	; (8000790 <Bootloader_Run+0x194>)
 800068e:	789b      	ldrb	r3, [r3, #2]
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	b21b      	sxth	r3, r3
 8000694:	4313      	orrs	r3, r2
 8000696:	b21b      	sxth	r3, r3
 8000698:	81bb      	strh	r3, [r7, #12]

    		    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 800069a:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <Bootloader_Run+0x194>)
 800069c:	78db      	ldrb	r3, [r3, #3]
 800069e:	461a      	mov	r2, r3
 80006a0:	4b3b      	ldr	r3, [pc, #236]	; (8000790 <Bootloader_Run+0x194>)
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	021b      	lsls	r3, r3, #8
 80006a6:	b29b      	uxth	r3, r3
 80006a8:	431a      	orrs	r2, r3
    		    					(((uint32_t)packet_buffer[5] << 16) & 0xFF0000) | (((uint32_t)packet_buffer[6] << 24) & 0xFF000000);
 80006aa:	4b39      	ldr	r3, [pc, #228]	; (8000790 <Bootloader_Run+0x194>)
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	041b      	lsls	r3, r3, #16
 80006b0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
    		    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 80006b4:	431a      	orrs	r2, r3
    		    					(((uint32_t)packet_buffer[5] << 16) & 0xFF0000) | (((uint32_t)packet_buffer[6] << 24) & 0xFF000000);
 80006b6:	4b36      	ldr	r3, [pc, #216]	; (8000790 <Bootloader_Run+0x194>)
 80006b8:	799b      	ldrb	r3, [r3, #6]
 80006ba:	061b      	lsls	r3, r3, #24
    		    			app_checksum = ((uint32_t)packet_buffer[3] & 0xFF) | (((uint32_t)packet_buffer[4] << 8) & 0xFF00) |
 80006bc:	4313      	orrs	r3, r2
 80006be:	60bb      	str	r3, [r7, #8]

    						currentState = BL_STATE_DOWNLOAD_FW;
 80006c0:	2305      	movs	r3, #5
 80006c2:	71fb      	strb	r3, [r7, #7]
    						break;
 80006c4:	e009      	b.n	80006da <Bootloader_Run+0xde>

    					case CMD_ID_ERASE_APP:
    						currentState = BL_STATE_ERASE_APP;
 80006c6:	2303      	movs	r3, #3
 80006c8:	71fb      	strb	r3, [r7, #7]
    						break;
 80006ca:	e006      	b.n	80006da <Bootloader_Run+0xde>

    					default:
    						error_id = BL_CMD_INVALID;
 80006cc:	4b2f      	ldr	r3, [pc, #188]	; (800078c <Bootloader_Run+0x190>)
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	701a      	strb	r2, [r3, #0]
    						currentState = BL_STATE_SEND_ERROR;
 80006d2:	2304      	movs	r3, #4
 80006d4:	71fb      	strb	r3, [r7, #7]
    						break;
 80006d6:	e000      	b.n	80006da <Bootloader_Run+0xde>
    				}
    			}
 80006d8:	bf00      	nop

    			break;
 80006da:	e056      	b.n	800078a <Bootloader_Run+0x18e>

    		// This state comes after failing to download the new firmware
    		case BL_STATE_ABORT:

    			Bootloader_EraseApplication();
 80006dc:	f000 f8a6 	bl	800082c <Bootloader_EraseApplication>
    			SendError();
 80006e0:	f7ff fefc 	bl	80004dc <SendError>
    			currentState = BL_STATE_IDLE;
 80006e4:	2300      	movs	r3, #0
 80006e6:	71fb      	strb	r3, [r7, #7]

    			break;
 80006e8:	e04f      	b.n	800078a <Bootloader_Run+0x18e>


    		case BL_STATE_EXECUTE:

    			if(Bootloader_CheckApplicationExist() == true)
 80006ea:	f000 f881 	bl	80007f0 <Bootloader_CheckApplicationExist>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d005      	beq.n	8000700 <Bootloader_Run+0x104>
    			{
					SendCmdAck(CMD_ID_EXECUTE);
 80006f4:	2060      	movs	r0, #96	; 0x60
 80006f6:	f7ff ff13 	bl	8000520 <SendCmdAck>
    				Bootloader_JumToApplication();
 80006fa:	f000 f84b 	bl	8000794 <Bootloader_JumToApplication>
    			{
    				error_id = BL_NO_USER_APP;
    				currentState = BL_STATE_SEND_ERROR;
    			}

    			break;
 80006fe:	e044      	b.n	800078a <Bootloader_Run+0x18e>
    				error_id = BL_NO_USER_APP;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <Bootloader_Run+0x190>)
 8000702:	2284      	movs	r2, #132	; 0x84
 8000704:	701a      	strb	r2, [r3, #0]
    				currentState = BL_STATE_SEND_ERROR;
 8000706:	2304      	movs	r3, #4
 8000708:	71fb      	strb	r3, [r7, #7]
    			break;
 800070a:	e03e      	b.n	800078a <Bootloader_Run+0x18e>


    		case BL_STATE_SEND_ERROR:

    			SendError();
 800070c:	f7ff fee6 	bl	80004dc <SendError>
    			currentState = BL_STATE_IDLE;
 8000710:	2300      	movs	r3, #0
 8000712:	71fb      	strb	r3, [r7, #7]

    			break;
 8000714:	e039      	b.n	800078a <Bootloader_Run+0x18e>


    		case BL_STATE_DOWNLOAD_FW:

    			SendCmdAck(CMD_ID_DOWNLOAD_FW);
 8000716:	2080      	movs	r0, #128	; 0x80
 8000718:	f7ff ff02 	bl	8000520 <SendCmdAck>

    			status = Bootloader_DownloadFW(total_packets);
 800071c:	89bb      	ldrh	r3, [r7, #12]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f8ae 	bl	8000880 <Bootloader_DownloadFW>
 8000724:	4603      	mov	r3, r0
 8000726:	73fb      	strb	r3, [r7, #15]

    			if(status == BL_OK)
 8000728:	7bfb      	ldrb	r3, [r7, #15]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d108      	bne.n	8000740 <Bootloader_Run+0x144>
    			{
        			app_total_words = (total_packets * 64) / 4;								// Calculate total words in the application
 800072e:	89bb      	ldrh	r3, [r7, #12]
 8000730:	011b      	lsls	r3, r3, #4
 8000732:	603b      	str	r3, [r7, #0]
    				status = Bootloader_VerifyAppChecksum(app_checksum, app_total_words);	// Verify application checksum
 8000734:	6839      	ldr	r1, [r7, #0]
 8000736:	68b8      	ldr	r0, [r7, #8]
 8000738:	f000 f8fc 	bl	8000934 <Bootloader_VerifyAppChecksum>
 800073c:	4603      	mov	r3, r0
 800073e:	73fb      	strb	r3, [r7, #15]
    			}

    			if(status == BL_OK)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d102      	bne.n	800074c <Bootloader_Run+0x150>
    			{
        			currentState = BL_STATE_EXECUTE;
 8000746:	2302      	movs	r3, #2
 8000748:	71fb      	strb	r3, [r7, #7]
    			{
    				error_id = status;
    				currentState = BL_STATE_ABORT;
    			}

    			break;
 800074a:	e01e      	b.n	800078a <Bootloader_Run+0x18e>
    				error_id = status;
 800074c:	4a0f      	ldr	r2, [pc, #60]	; (800078c <Bootloader_Run+0x190>)
 800074e:	7bfb      	ldrb	r3, [r7, #15]
 8000750:	7013      	strb	r3, [r2, #0]
    				currentState = BL_STATE_ABORT;
 8000752:	2301      	movs	r3, #1
 8000754:	71fb      	strb	r3, [r7, #7]
    			break;
 8000756:	e018      	b.n	800078a <Bootloader_Run+0x18e>


    		case BL_STATE_ERASE_APP:

    			status = Bootloader_EraseApplication();
 8000758:	f000 f868 	bl	800082c <Bootloader_EraseApplication>
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]

    			if(status != BL_OK)
 8000760:	7bfb      	ldrb	r3, [r7, #15]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d005      	beq.n	8000772 <Bootloader_Run+0x176>
    			{
    				error_id = status;
 8000766:	4a09      	ldr	r2, [pc, #36]	; (800078c <Bootloader_Run+0x190>)
 8000768:	7bfb      	ldrb	r3, [r7, #15]
 800076a:	7013      	strb	r3, [r2, #0]
    				currentState = BL_STATE_SEND_ERROR;
 800076c:	2304      	movs	r3, #4
 800076e:	71fb      	strb	r3, [r7, #7]
    			{
					SendCmdAck(CMD_ID_ERASE_APP);
					currentState = BL_STATE_IDLE;
    			}

    			break;
 8000770:	e00b      	b.n	800078a <Bootloader_Run+0x18e>
					SendCmdAck(CMD_ID_ERASE_APP);
 8000772:	2070      	movs	r0, #112	; 0x70
 8000774:	f7ff fed4 	bl	8000520 <SendCmdAck>
					currentState = BL_STATE_IDLE;
 8000778:	2300      	movs	r3, #0
 800077a:	71fb      	strb	r3, [r7, #7]
    			break;
 800077c:	e005      	b.n	800078a <Bootloader_Run+0x18e>


    		default:

    			error_id = BL_INVALID_STATE;
 800077e:	4b03      	ldr	r3, [pc, #12]	; (800078c <Bootloader_Run+0x190>)
 8000780:	2281      	movs	r2, #129	; 0x81
 8000782:	701a      	strb	r2, [r3, #0]
    			currentState = BL_STATE_SEND_ERROR;
 8000784:	2304      	movs	r3, #4
 8000786:	71fb      	strb	r3, [r7, #7]

    			break;
 8000788:	bf00      	nop
    	switch (currentState)
 800078a:	e74e      	b.n	800062a <Bootloader_Run+0x2e>
 800078c:	20000198 	.word	0x20000198
 8000790:	20000118 	.word	0x20000118

08000794 <Bootloader_JumToApplication>:
 * @brief	Jumps to the user application
 * @param	None
 * @return	None
 */
void Bootloader_JumToApplication(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
    uint32_t application_entry_point_address = *(volatile uint32_t *)(APP_BASE_ADDRESS + 4);
 800079a:	4b11      	ldr	r3, [pc, #68]	; (80007e0 <Bootloader_JumToApplication+0x4c>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	60fb      	str	r3, [r7, #12]

    pFunction application_entry_point = (pFunction)application_entry_point_address ;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	60bb      	str	r3, [r7, #8]

    // Reset peripherals
    HAL_RCC_DeInit();
 80007a4:	f003 f936 	bl	8003a14 <HAL_RCC_DeInit>
    HAL_DeInit();
 80007a8:	f000 fbc8 	bl	8000f3c <HAL_DeInit>

    // Reset Systick
    SysTick->CTRL = 0;  // Disable SysTick
 80007ac:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <Bootloader_JumToApplication+0x50>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
    SysTick->VAL = 0;   // Reset current value
 80007b2:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <Bootloader_JumToApplication+0x50>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = 0;  // Reset reload value
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <Bootloader_JumToApplication+0x50>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	605a      	str	r2, [r3, #4]

    // Set the vector table base address
    SCB->VTOR = APP_BASE_ADDRESS;
 80007be:	4b0a      	ldr	r3, [pc, #40]	; (80007e8 <Bootloader_JumToApplication+0x54>)
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <Bootloader_JumToApplication+0x58>)
 80007c2:	609a      	str	r2, [r3, #8]

    // Set the stack pointer
    __set_MSP(*(volatile uint32_t*)(APP_BASE_ADDRESS));
 80007c4:	4b09      	ldr	r3, [pc, #36]	; (80007ec <Bootloader_JumToApplication+0x58>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f383 8808 	msr	MSP, r3
}
 80007d0:	bf00      	nop

    // Jump to the application
    application_entry_point();
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	4798      	blx	r3
}
 80007d6:	bf00      	nop
 80007d8:	3710      	adds	r7, #16
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	08010004 	.word	0x08010004
 80007e4:	e000e010 	.word	0xe000e010
 80007e8:	e000ed00 	.word	0xe000ed00
 80007ec:	08010000 	.word	0x08010000

080007f0 <Bootloader_CheckApplicationExist>:
 * @brief	Checks if a user application exists in the flash memory.
 * @param	None
 * @return	True if a user application exists, false otherwise.
 */
bool Bootloader_CheckApplicationExist(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
    uint32_t stack_address = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]

    Flash_Read_Word(APP_BASE_ADDRESS, &stack_address, (uint32_t)1);
 80007fa:	1d3b      	adds	r3, r7, #4
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4809      	ldr	r0, [pc, #36]	; (8000828 <Bootloader_CheckApplicationExist+0x38>)
 8000802:	f000 f949 	bl	8000a98 <Flash_Read_Word>

    if ((stack_address < RAM_BASE_ADDRESS) || ((stack_address - RAM_BASE_ADDRESS) > RAM_SIZE))
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800080c:	d305      	bcc.n	800081a <Bootloader_CheckApplicationExist+0x2a>
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000814:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000818:	d901      	bls.n	800081e <Bootloader_CheckApplicationExist+0x2e>
    {
        return false;
 800081a:	2300      	movs	r3, #0
 800081c:	e000      	b.n	8000820 <Bootloader_CheckApplicationExist+0x30>
    }

    return true;
 800081e:	2301      	movs	r3, #1
}
 8000820:	4618      	mov	r0, r3
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	08010000 	.word	0x08010000

0800082c <Bootloader_EraseApplication>:
 * @return	Flash error code: e_Flash_Status
 *			- FLASH_ERASE_ERROR: The erase operation failed.
 *			- FLASH_OK: The erase operation was successful.
 */
uint8_t Bootloader_EraseApplication(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
	uint8_t status;
	uint8_t try = 3;
 8000832:	2303      	movs	r3, #3
 8000834:	71bb      	strb	r3, [r7, #6]

	for(uint8_t sector_num = APP_START_SECTOR; sector_num < FLASH_TOTAL_SECTORS; sector_num++)
 8000836:	2304      	movs	r3, #4
 8000838:	717b      	strb	r3, [r7, #5]
 800083a:	e016      	b.n	800086a <Bootloader_EraseApplication+0x3e>
	{
		do
		{
			status = Flash_EraseSector(sector_num);
 800083c:	797b      	ldrb	r3, [r7, #5]
 800083e:	4618      	mov	r0, r3
 8000840:	f000 f8a6 	bl	8000990 <Flash_EraseSector>
 8000844:	4603      	mov	r3, r0
 8000846:	71fb      	strb	r3, [r7, #7]

		} while((status != FLASH_OK) && --try);
 8000848:	79fb      	ldrb	r3, [r7, #7]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d005      	beq.n	800085a <Bootloader_EraseApplication+0x2e>
 800084e:	79bb      	ldrb	r3, [r7, #6]
 8000850:	3b01      	subs	r3, #1
 8000852:	71bb      	strb	r3, [r7, #6]
 8000854:	79bb      	ldrb	r3, [r7, #6]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d1f0      	bne.n	800083c <Bootloader_EraseApplication+0x10>

		if(status != FLASH_OK)
 800085a:	79fb      	ldrb	r3, [r7, #7]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d108      	bne.n	8000872 <Bootloader_EraseApplication+0x46>
		{
	    	break;
		}

		try = 3;
 8000860:	2303      	movs	r3, #3
 8000862:	71bb      	strb	r3, [r7, #6]
	for(uint8_t sector_num = APP_START_SECTOR; sector_num < FLASH_TOTAL_SECTORS; sector_num++)
 8000864:	797b      	ldrb	r3, [r7, #5]
 8000866:	3301      	adds	r3, #1
 8000868:	717b      	strb	r3, [r7, #5]
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	2b07      	cmp	r3, #7
 800086e:	d9e5      	bls.n	800083c <Bootloader_EraseApplication+0x10>
 8000870:	e000      	b.n	8000874 <Bootloader_EraseApplication+0x48>
	    	break;
 8000872:	bf00      	nop
	}

    return status;
 8000874:	79fb      	ldrb	r3, [r7, #7]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <Bootloader_DownloadFW>:
 * @return	Bootloader status code: e_Bootloader_Status
 * 			- BL_DOWNLOAD_FAILED: Failed to download the new firmware.
 *			- BL_OK: The download operation was successful.
 */
uint8_t Bootloader_DownloadFW(uint16_t total_packets)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	80fb      	strh	r3, [r7, #6]
	uint8_t status;
	uint8_t try_nb = 3;
 800088a:	2303      	movs	r3, #3
 800088c:	75bb      	strb	r3, [r7, #22]
	uint16_t packet_num = 0;
 800088e:	2300      	movs	r3, #0
 8000890:	82bb      	strh	r3, [r7, #20]
	uint16_t packet_size = 64;
 8000892:	2340      	movs	r3, #64	; 0x40
 8000894:	81fb      	strh	r3, [r7, #14]
	uint16_t packet_total_words = packet_size / 4; // 64/4
 8000896:	89fb      	ldrh	r3, [r7, #14]
 8000898:	089b      	lsrs	r3, r3, #2
 800089a:	81bb      	strh	r3, [r7, #12]
	uint32_t rcv_timeout = 2000;
 800089c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80008a0:	60bb      	str	r3, [r7, #8]
	uint32_t address = APP_BASE_ADDRESS;
 80008a2:	4b22      	ldr	r3, [pc, #136]	; (800092c <Bootloader_DownloadFW+0xac>)
 80008a4:	613b      	str	r3, [r7, #16]

	status = Bootloader_EraseApplication();
 80008a6:	f7ff ffc1 	bl	800082c <Bootloader_EraseApplication>
 80008aa:	4603      	mov	r3, r0
 80008ac:	75fb      	strb	r3, [r7, #23]

	if(status == BL_OK)
 80008ae:	7dfb      	ldrb	r3, [r7, #23]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d135      	bne.n	8000920 <Bootloader_DownloadFW+0xa0>
	{
		do
		{
			status = CDC_ReadRxBuffer_FS(packet_buffer, 64, rcv_timeout);
 80008b4:	68ba      	ldr	r2, [r7, #8]
 80008b6:	2140      	movs	r1, #64	; 0x40
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <Bootloader_DownloadFW+0xb0>)
 80008ba:	f006 feeb 	bl	8007694 <CDC_ReadRxBuffer_FS>
 80008be:	4603      	mov	r3, r0
 80008c0:	75fb      	strb	r3, [r7, #23]

			if(status == USBD_OK)
 80008c2:	7dfb      	ldrb	r3, [r7, #23]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d115      	bne.n	80008f4 <Bootloader_DownloadFW+0x74>
			{
				SendPacketAck(packet_num);
 80008c8:	8abb      	ldrh	r3, [r7, #20]
 80008ca:	4618      	mov	r0, r3
 80008cc:	f7ff fe4a 	bl	8000564 <SendPacketAck>
				status = Flash_Write_Word(address, (uint32_t *)packet_buffer, packet_total_words);
 80008d0:	89bb      	ldrh	r3, [r7, #12]
 80008d2:	461a      	mov	r2, r3
 80008d4:	4916      	ldr	r1, [pc, #88]	; (8000930 <Bootloader_DownloadFW+0xb0>)
 80008d6:	6938      	ldr	r0, [r7, #16]
 80008d8:	f000 f882 	bl	80009e0 <Flash_Write_Word>
 80008dc:	4603      	mov	r3, r0
 80008de:	75fb      	strb	r3, [r7, #23]
				address = address + packet_size;
 80008e0:	89fb      	ldrh	r3, [r7, #14]
 80008e2:	693a      	ldr	r2, [r7, #16]
 80008e4:	4413      	add	r3, r2
 80008e6:	613b      	str	r3, [r7, #16]
				packet_num ++;
 80008e8:	8abb      	ldrh	r3, [r7, #20]
 80008ea:	3301      	adds	r3, #1
 80008ec:	82bb      	strh	r3, [r7, #20]
				try_nb = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	75bb      	strb	r3, [r7, #22]
 80008f2:	e009      	b.n	8000908 <Bootloader_DownloadFW+0x88>

				//while(CDC_Transmit_FS(packet_buffer, 64) == USBD_BUSY);
			}
			else if(try_nb > 0)
 80008f4:	7dbb      	ldrb	r3, [r7, #22]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d00b      	beq.n	8000912 <Bootloader_DownloadFW+0x92>
			{
				SendPacketNAck(packet_num);
 80008fa:	8abb      	ldrh	r3, [r7, #20]
 80008fc:	4618      	mov	r0, r3
 80008fe:	f7ff fe57 	bl	80005b0 <SendPacketNAck>
				try_nb --;
 8000902:	7dbb      	ldrb	r3, [r7, #22]
 8000904:	3b01      	subs	r3, #1
 8000906:	75bb      	strb	r3, [r7, #22]
			else
			{
				break;
			}

		} while(packet_num < total_packets);
 8000908:	8aba      	ldrh	r2, [r7, #20]
 800090a:	88fb      	ldrh	r3, [r7, #6]
 800090c:	429a      	cmp	r2, r3
 800090e:	d3d1      	bcc.n	80008b4 <Bootloader_DownloadFW+0x34>
 8000910:	e000      	b.n	8000914 <Bootloader_DownloadFW+0x94>
				break;
 8000912:	bf00      	nop

		if(packet_num != total_packets)
 8000914:	8aba      	ldrh	r2, [r7, #20]
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	429a      	cmp	r2, r3
 800091a:	d001      	beq.n	8000920 <Bootloader_DownloadFW+0xa0>
		{
			status = BL_DOWNLOAD_FAILED;
 800091c:	2383      	movs	r3, #131	; 0x83
 800091e:	75fb      	strb	r3, [r7, #23]
		}
	}

    return status;
 8000920:	7dfb      	ldrb	r3, [r7, #23]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	08010000 	.word	0x08010000
 8000930:	20000118 	.word	0x20000118

08000934 <Bootloader_VerifyAppChecksum>:
 * @return	Bootloader status code: e_Bootloader_Status
 * 			- BL_CHKS_MISMATCH: The calculated checksum doesn't match with the expected checksum
 *			- BL_OK: The calculated checksum match with the expected checksum
 */
uint8_t Bootloader_VerifyAppChecksum(uint32_t app_checksum, uint32_t app_word_size)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
 800093c:	6039      	str	r1, [r7, #0]
	uint32_t calculatedCRC;

	calculatedCRC = Flash_GetChecksum(APP_BASE_ADDRESS, app_word_size);
 800093e:	6839      	ldr	r1, [r7, #0]
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <Bootloader_VerifyAppChecksum+0x2c>)
 8000942:	f000 f8e3 	bl	8000b0c <Flash_GetChecksum>
 8000946:	60f8      	str	r0, [r7, #12]

	if(app_checksum != calculatedCRC)
 8000948:	687a      	ldr	r2, [r7, #4]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	429a      	cmp	r2, r3
 800094e:	d001      	beq.n	8000954 <Bootloader_VerifyAppChecksum+0x20>
	{
		return BL_CHKS_MISMATCH;
 8000950:	237f      	movs	r3, #127	; 0x7f
 8000952:	e000      	b.n	8000956 <Bootloader_VerifyAppChecksum+0x22>
	}

	return BL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	08010000 	.word	0x08010000

08000964 <Flash_Init>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_UNL_ERROR: Flash unlocking failed.
 *			- FLASH_OK: Flash unlocking successful.
 */
uint8_t Flash_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	// Attempt to unlock the flash
    if (HAL_FLASH_Unlock() == HAL_ERROR)
 8000968:	f000 fd44 	bl	80013f4 <HAL_FLASH_Unlock>
 800096c:	4603      	mov	r3, r0
 800096e:	2b01      	cmp	r3, #1
 8000970:	d101      	bne.n	8000976 <Flash_Init+0x12>
    {
    	return FLASH_UNL_ERROR;
 8000972:	2302      	movs	r3, #2
 8000974:	e005      	b.n	8000982 <Flash_Init+0x1e>
    }

    // Clear Flash flags
    __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <Flash_Init+0x24>)
 8000978:	4a04      	ldr	r2, [pc, #16]	; (800098c <Flash_Init+0x28>)
 800097a:	60da      	str	r2, [r3, #12]
    		FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR | FLASH_FLAG_BSY);

    HAL_FLASH_Lock();
 800097c:	f000 fd5c 	bl	8001438 <HAL_FLASH_Lock>

    return FLASH_OK;
 8000980:	2300      	movs	r3, #0
}
 8000982:	4618      	mov	r0, r3
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40023c00 	.word	0x40023c00
 800098c:	000101f3 	.word	0x000101f3

08000990 <Flash_EraseSector>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_ERASE_ERROR: The erase operation failed.
 *			- FLASH_OK: The erase operation was successful.
 */
uint8_t Flash_EraseSector(uint8_t sector)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	; 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t SectorError;
    uint8_t flash_status = FLASH_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    HAL_FLASH_Unlock();
 80009a0:	f000 fd28 	bl	80013f4 <HAL_FLASH_Unlock>

    // Configure the erase operation
    eraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
    eraseInit.Sector = sector;
 80009a8:	79fb      	ldrb	r3, [r7, #7]
 80009aa:	61bb      	str	r3, [r7, #24]
    eraseInit.NbSectors = 1;
 80009ac:	2301      	movs	r3, #1
 80009ae:	61fb      	str	r3, [r7, #28]
    eraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 80009b0:	2302      	movs	r3, #2
 80009b2:	623b      	str	r3, [r7, #32]

    // Perform the flash erase operation
    if (HAL_FLASHEx_Erase(&eraseInit, &SectorError) == HAL_ERROR)
 80009b4:	f107 020c 	add.w	r2, r7, #12
 80009b8:	f107 0310 	add.w	r3, r7, #16
 80009bc:	4611      	mov	r1, r2
 80009be:	4618      	mov	r0, r3
 80009c0:	f000 fe8a 	bl	80016d8 <HAL_FLASHEx_Erase>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d102      	bne.n	80009d0 <Flash_EraseSector+0x40>
    {
    	flash_status = FLASH_ERASE_ERROR;
 80009ca:	2303      	movs	r3, #3
 80009cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    HAL_FLASH_Lock();
 80009d0:	f000 fd32 	bl	8001438 <HAL_FLASH_Lock>

    return flash_status;
 80009d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009d8:	4618      	mov	r0, r3
 80009da:	3728      	adds	r7, #40	; 0x28
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}

080009e0 <Flash_Write_Word>:
 *         - FLASH_WRITE_OVER_ERROR: The write operation exceeds the flash memory boundary.
 *         - FLASH_WRITE_CORR_ERROR: The written data is incorrect.
 *         - FLASH_WRITE_ERROR: The write operation failed.
 */
uint8_t Flash_Write_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 80009e0:	b5b0      	push	{r4, r5, r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 80009ec:	2300      	movs	r3, #0
 80009ee:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();
 80009f0:	f000 fd00 	bl	80013f4 <HAL_FLASH_Unlock>

    // Check if the write operation exceeds the flash memory boundary
    if ((address < APP_BASE_ADDRESS) ||
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	4a26      	ldr	r2, [pc, #152]	; (8000a90 <Flash_Write_Word+0xb0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d90b      	bls.n	8000a14 <Flash_Write_Word+0x34>
    	((address + (size * 4)) > (APP_END_ADDRESS)) ||
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	009a      	lsls	r2, r3, #2
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
    if ((address < APP_BASE_ADDRESS) ||
 8000a04:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <Flash_Write_Word+0xb4>)
 8000a06:	4293      	cmp	r3, r2
 8000a08:	d804      	bhi.n	8000a14 <Flash_Write_Word+0x34>
	    ((address % 4) != 0))
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
    	((address + (size * 4)) > (APP_END_ADDRESS)) ||
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <Flash_Write_Word+0x38>
    {
        flash_status = FLASH_WRITE_OVER_ERROR;
 8000a14:	2306      	movs	r3, #6
 8000a16:	75fb      	strb	r3, [r7, #23]
    }

    // Perform the write operation
    for (uint32_t i = 0; i < size; i += 1)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	e02b      	b.n	8000a76 <Flash_Write_Word+0x96>
    {
    	if(flash_status != FLASH_OK)
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12d      	bne.n	8000a80 <Flash_Write_Word+0xa0>
    	{
    		break;
    	}

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address + (i * 4), data[i]) == HAL_OK)
 8000a24:	693b      	ldr	r3, [r7, #16]
 8000a26:	009a      	lsls	r2, r3, #2
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	18d1      	adds	r1, r2, r3
 8000a2c:	693b      	ldr	r3, [r7, #16]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	2200      	movs	r2, #0
 8000a38:	461c      	mov	r4, r3
 8000a3a:	4615      	mov	r5, r2
 8000a3c:	4622      	mov	r2, r4
 8000a3e:	462b      	mov	r3, r5
 8000a40:	2002      	movs	r0, #2
 8000a42:	f000 fc83 	bl	800134c <HAL_FLASH_Program>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d10e      	bne.n	8000a6a <Flash_Write_Word+0x8a>
        {
            // Verify the written data
            if (*(uint32_t*)(address + (i * 4)) != data[i])
 8000a4c:	693b      	ldr	r3, [r7, #16]
 8000a4e:	009a      	lsls	r2, r3, #2
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4413      	add	r3, r2
 8000a54:	681a      	ldr	r2, [r3, #0]
 8000a56:	693b      	ldr	r3, [r7, #16]
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	68b9      	ldr	r1, [r7, #8]
 8000a5c:	440b      	add	r3, r1
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d005      	beq.n	8000a70 <Flash_Write_Word+0x90>
            {
                flash_status = FLASH_WRITE_CORR_ERROR;
 8000a64:	2307      	movs	r3, #7
 8000a66:	75fb      	strb	r3, [r7, #23]
 8000a68:	e002      	b.n	8000a70 <Flash_Write_Word+0x90>
            }
        }
        else
        {
            flash_status = FLASH_WRITE_ERROR;
 8000a6a:	2304      	movs	r3, #4
 8000a6c:	75fb      	strb	r3, [r7, #23]
            break;
 8000a6e:	e008      	b.n	8000a82 <Flash_Write_Word+0xa2>
    for (uint32_t i = 0; i < size; i += 1)
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	3301      	adds	r3, #1
 8000a74:	613b      	str	r3, [r7, #16]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d3cf      	bcc.n	8000a1e <Flash_Write_Word+0x3e>
 8000a7e:	e000      	b.n	8000a82 <Flash_Write_Word+0xa2>
    		break;
 8000a80:	bf00      	nop
        }
    }

    HAL_FLASH_Lock();
 8000a82:	f000 fcd9 	bl	8001438 <HAL_FLASH_Lock>

    return flash_status;
 8000a86:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000a90:	0800ffff 	.word	0x0800ffff
 8000a94:	08080000 	.word	0x08080000

08000a98 <Flash_Read_Word>:
 * @return	Flasg error code ::eFlashErrorCodes
 * 			- FLASH_OK: The flash read operation was successful.
 * 			- FLASH_READ_OVER_ERROR: The read operation exceeded the flash memory boundaries.
 */
uint8_t Flash_Read_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	60f8      	str	r0, [r7, #12]
 8000aa0:	60b9      	str	r1, [r7, #8]
 8000aa2:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	75fb      	strb	r3, [r7, #23]

    if ((address < FLASH_BASE_ADDRESS) ||
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000aae:	d30b      	bcc.n	8000ac8 <Flash_Read_Word+0x30>
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	009a      	lsls	r2, r3, #2
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
    if ((address < FLASH_BASE_ADDRESS) ||
 8000ab8:	4a13      	ldr	r2, [pc, #76]	; (8000b08 <Flash_Read_Word+0x70>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d804      	bhi.n	8000ac8 <Flash_Read_Word+0x30>
		((address % 4) != 0))
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	f003 0303 	and.w	r3, r3, #3
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d002      	beq.n	8000ace <Flash_Read_Word+0x36>
    {
    	flash_status = FLASH_READ_OVER_ERROR;
 8000ac8:	2305      	movs	r3, #5
 8000aca:	75fb      	strb	r3, [r7, #23]
 8000acc:	e014      	b.n	8000af8 <Flash_Read_Word+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < size; i += 1)
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
 8000ad2:	e00d      	b.n	8000af0 <Flash_Read_Word+0x58>
        {
            data[i] = *(uint32_t *)(address + (i * 4));
 8000ad4:	693b      	ldr	r3, [r7, #16]
 8000ad6:	009a      	lsls	r2, r3, #2
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	4619      	mov	r1, r3
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	009b      	lsls	r3, r3, #2
 8000ae2:	68ba      	ldr	r2, [r7, #8]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	680a      	ldr	r2, [r1, #0]
 8000ae8:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < size; i += 1)
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	3301      	adds	r3, #1
 8000aee:	613b      	str	r3, [r7, #16]
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d3ed      	bcc.n	8000ad4 <Flash_Read_Word+0x3c>
        }
    }


    return flash_status;
 8000af8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	371c      	adds	r7, #28
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop
 8000b08:	08080000 	.word	0x08080000

08000b0c <Flash_GetChecksum>:
 * @return	Flash error code ::eFlashErrorCodes
 *			- FLASH_CHKS_ERROR: Checksum verification failed
 *			- FLASH_OK: Checksum verification successful
 */
uint32_t Flash_GetChecksum(uint32_t start_address, uint32_t size)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
 8000b14:	6039      	str	r1, [r7, #0]
    return HAL_CRC_Calculate(&hcrc, (uint32_t *)start_address, size);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4803      	ldr	r0, [pc, #12]	; (8000b2c <Flash_GetChecksum+0x20>)
 8000b1e:	f000 fbe2 	bl	80012e6 <HAL_CRC_Calculate>
 8000b22:	4603      	mov	r3, r0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	2000019c 	.word	0x2000019c

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b36:	f000 f9df 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b3a:	f000 f82f 	bl	8000b9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  // Initialize GPIO to read the user key input state and blink the blue LED if the bootloader mode is selected
  MX_GPIO_Init();
 8000b3e:	f000 f8ad 	bl	8000c9c <MX_GPIO_Init>

  // Check if user key is not pressed
  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) != GPIO_PIN_RESET)
 8000b42:	2101      	movs	r1, #1
 8000b44:	4813      	ldr	r0, [pc, #76]	; (8000b94 <main+0x64>)
 8000b46:	f001 f86d 	bl	8001c24 <HAL_GPIO_ReadPin>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d007      	beq.n	8000b60 <main+0x30>
  {
	// Check if user application exist in flash memory
	if(Bootloader_CheckApplicationExist() == true)
 8000b50:	f7ff fe4e 	bl	80007f0 <Bootloader_CheckApplicationExist>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d01b      	beq.n	8000b92 <main+0x62>
	{
	  // Jump to user application
	  Bootloader_JumToApplication();
 8000b5a:	f7ff fe1b 	bl	8000794 <Bootloader_JumToApplication>
 8000b5e:	e018      	b.n	8000b92 <main+0x62>

  // User key is pressed
  else
  {
	// Blink the Blue LED 3 times to indicate the Bootloader mode
	uint8_t i = 6;
 8000b60:	2306      	movs	r3, #6
 8000b62:	71fb      	strb	r3, [r7, #7]

	while(i--)
 8000b64:	e008      	b.n	8000b78 <main+0x48>
	{
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000b66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b6a:	480b      	ldr	r0, [pc, #44]	; (8000b98 <main+0x68>)
 8000b6c:	f001 f88b 	bl	8001c86 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8000b70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b74:	f000 fa66 	bl	8001044 <HAL_Delay>
	while(i--)
 8000b78:	79fb      	ldrb	r3, [r7, #7]
 8000b7a:	1e5a      	subs	r2, r3, #1
 8000b7c:	71fa      	strb	r2, [r7, #7]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1f1      	bne.n	8000b66 <main+0x36>
	}

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b82:	f000 f88b 	bl	8000c9c <MX_GPIO_Init>
  MX_CRC_Init();
 8000b86:	f000 f875 	bl	8000c74 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000b8a:	f006 fc27 	bl	80073dc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  	// Run the Bootloader
	Bootloader_Run();
 8000b8e:	f7ff fd35 	bl	80005fc <Bootloader_Run>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8000b92:	e7fe      	b.n	8000b92 <main+0x62>
 8000b94:	40020000 	.word	0x40020000
 8000b98:	40020800 	.word	0x40020800

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0320 	add.w	r3, r7, #32
 8000ba6:	2230      	movs	r2, #48	; 0x30
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f007 fa3a 	bl	8008024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	f107 030c 	add.w	r3, r7, #12
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	601a      	str	r2, [r3, #0]
 8000bb8:	605a      	str	r2, [r3, #4]
 8000bba:	609a      	str	r2, [r3, #8]
 8000bbc:	60da      	str	r2, [r3, #12]
 8000bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60bb      	str	r3, [r7, #8]
 8000bc4:	4b29      	ldr	r3, [pc, #164]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	4a28      	ldr	r2, [pc, #160]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bce:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd0:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <SystemClock_Config+0xd0>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bd8:	60bb      	str	r3, [r7, #8]
 8000bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bdc:	2300      	movs	r3, #0
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	4b23      	ldr	r3, [pc, #140]	; (8000c70 <SystemClock_Config+0xd4>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a22      	ldr	r2, [pc, #136]	; (8000c70 <SystemClock_Config+0xd4>)
 8000be6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000bea:	6013      	str	r3, [r2, #0]
 8000bec:	4b20      	ldr	r3, [pc, #128]	; (8000c70 <SystemClock_Config+0xd4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bf4:	607b      	str	r3, [r7, #4]
 8000bf6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c02:	2301      	movs	r3, #1
 8000c04:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c06:	2310      	movs	r3, #16
 8000c08:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000c14:	230f      	movs	r3, #15
 8000c16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000c18:	2390      	movs	r3, #144	; 0x90
 8000c1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000c20:	2305      	movs	r3, #5
 8000c22:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c24:	f107 0320 	add.w	r3, r7, #32
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 fac3 	bl	80031b4 <HAL_RCC_OscConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000c34:	f000 f8a0 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c38:	230f      	movs	r3, #15
 8000c3a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c44:	2300      	movs	r3, #0
 8000c46:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c4c:	f107 030c 	add.w	r3, r7, #12
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f002 fd26 	bl	80036a4 <HAL_RCC_ClockConfig>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c5e:	f000 f88b 	bl	8000d78 <Error_Handler>
  }
}
 8000c62:	bf00      	nop
 8000c64:	3750      	adds	r7, #80	; 0x50
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40007000 	.word	0x40007000

08000c74 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <MX_CRC_Init+0x20>)
 8000c7a:	4a07      	ldr	r2, [pc, #28]	; (8000c98 <MX_CRC_Init+0x24>)
 8000c7c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000c7e:	4805      	ldr	r0, [pc, #20]	; (8000c94 <MX_CRC_Init+0x20>)
 8000c80:	f000 fb15 	bl	80012ae <HAL_CRC_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000c8a:	f000 f875 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	2000019c 	.word	0x2000019c
 8000c98:	40023000 	.word	0x40023000

08000c9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b08a      	sub	sp, #40	; 0x28
 8000ca0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	609a      	str	r2, [r3, #8]
 8000cae:	60da      	str	r2, [r3, #12]
 8000cb0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	613b      	str	r3, [r7, #16]
 8000cb6:	4b2d      	ldr	r3, [pc, #180]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a2c      	ldr	r2, [pc, #176]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cbc:	f043 0304 	orr.w	r3, r3, #4
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b2a      	ldr	r3, [pc, #168]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0304 	and.w	r3, r3, #4
 8000cca:	613b      	str	r3, [r7, #16]
 8000ccc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd6:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cde:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce6:	60fb      	str	r3, [r7, #12]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60bb      	str	r3, [r7, #8]
 8000cee:	4b1f      	ldr	r3, [pc, #124]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a1e      	ldr	r2, [pc, #120]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60bb      	str	r3, [r7, #8]
 8000d04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <MX_GPIO_Init+0xd0>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_SET);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d28:	4811      	ldr	r0, [pc, #68]	; (8000d70 <MX_GPIO_Init+0xd4>)
 8000d2a:	f000 ff93 	bl	8001c54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000d2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d34:	2301      	movs	r3, #1
 8000d36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4619      	mov	r1, r3
 8000d46:	480a      	ldr	r0, [pc, #40]	; (8000d70 <MX_GPIO_Init+0xd4>)
 8000d48:	f000 fde8 	bl	800191c <HAL_GPIO_Init>

  /*Configure GPIO pin : User_Key_Pin */
  GPIO_InitStruct.Pin = User_Key_Pin;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(User_Key_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <MX_GPIO_Init+0xd8>)
 8000d60:	f000 fddc 	bl	800191c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40023800 	.word	0x40023800
 8000d70:	40020800 	.word	0x40020800
 8000d74:	40020000 	.word	0x40020000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	607b      	str	r3, [r7, #4]
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d92:	4a0f      	ldr	r2, [pc, #60]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d98:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	4a08      	ldr	r2, [pc, #32]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db4:	6413      	str	r3, [r2, #64]	; 0x40
 8000db6:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <HAL_MspInit+0x4c>)
 8000db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	603b      	str	r3, [r7, #0]
 8000dc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40023800 	.word	0x40023800

08000dd4 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a0b      	ldr	r2, [pc, #44]	; (8000e10 <HAL_CRC_MspInit+0x3c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d10d      	bne.n	8000e02 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a09      	ldr	r2, [pc, #36]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000df0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b07      	ldr	r3, [pc, #28]	; (8000e14 <HAL_CRC_MspInit+0x40>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dfe:	60fb      	str	r3, [r7, #12]
 8000e00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000e02:	bf00      	nop
 8000e04:	3714      	adds	r7, #20
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40023000 	.word	0x40023000
 8000e14:	40023800 	.word	0x40023800

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e1c:	e7fe      	b.n	8000e1c <NMI_Handler+0x4>

08000e1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e22:	e7fe      	b.n	8000e22 <HardFault_Handler+0x4>

08000e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e28:	e7fe      	b.n	8000e28 <MemManage_Handler+0x4>

08000e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e2a:	b480      	push	{r7}
 8000e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <BusFault_Handler+0x4>

08000e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <UsageFault_Handler+0x4>

08000e36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e36:	b480      	push	{r7}
 8000e38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr

08000e52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e56:	bf00      	nop
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5e:	4770      	bx	lr

08000e60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e64:	f000 f8ce 	bl	8001004 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e68:	bf00      	nop
 8000e6a:	bd80      	pop	{r7, pc}

08000e6c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000e70:	4802      	ldr	r0, [pc, #8]	; (8000e7c <OTG_FS_IRQHandler+0x10>)
 8000e72:	f001 f872 	bl	8001f5a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e76:	bf00      	nop
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20001ab4 	.word	0x20001ab4

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd7 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f007 f883 	bl	8007fdc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff fe2b 	bl	8000b30 <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000ee8:	080080b8 	.word	0x080080b8
  ldr r2, =_sbss
 8000eec:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000ef0:	200021e0 	.word	0x200021e0

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f983 	bl	800122c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	200f      	movs	r0, #15
 8000f28:	f000 f83c 	bl	8000fa4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff ff2a 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000f40:	4b13      	ldr	r3, [pc, #76]	; (8000f90 <HAL_DeInit+0x54>)
 8000f42:	f04f 32ff 	mov.w	r2, #4294967295
 8000f46:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_DeInit+0x54>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000f4e:	4b10      	ldr	r3, [pc, #64]	; (8000f90 <HAL_DeInit+0x54>)
 8000f50:	f04f 32ff 	mov.w	r2, #4294967295
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000f56:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_DeInit+0x54>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000f5c:	4b0c      	ldr	r3, [pc, #48]	; (8000f90 <HAL_DeInit+0x54>)
 8000f5e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f62:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000f64:	4b0a      	ldr	r3, [pc, #40]	; (8000f90 <HAL_DeInit+0x54>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000f6a:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <HAL_DeInit+0x54>)
 8000f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f70:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000f72:	4b07      	ldr	r3, [pc, #28]	; (8000f90 <HAL_DeInit+0x54>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_DeInit+0x54>)
 8000f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000f7e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000f80:	4b03      	ldr	r3, [pc, #12]	; (8000f90 <HAL_DeInit+0x54>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000f86:	f000 f805 	bl	8000f94 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000f8a:	2300      	movs	r3, #0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	40023800 	.word	0x40023800

08000f94 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fac:	4b12      	ldr	r3, [pc, #72]	; (8000ff8 <HAL_InitTick+0x54>)
 8000fae:	681a      	ldr	r2, [r3, #0]
 8000fb0:	4b12      	ldr	r3, [pc, #72]	; (8000ffc <HAL_InitTick+0x58>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f000 f967 	bl	8001296 <HAL_SYSTICK_Config>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e00e      	b.n	8000ff0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2b0f      	cmp	r3, #15
 8000fd6:	d80a      	bhi.n	8000fee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd8:	2200      	movs	r2, #0
 8000fda:	6879      	ldr	r1, [r7, #4]
 8000fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000fe0:	f000 f92f 	bl	8001242 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <HAL_InitTick+0x5c>)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e000      	b.n	8000ff0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fee:	2301      	movs	r3, #1
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008
 8001000:	20000004 	.word	0x20000004

08001004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001008:	4b06      	ldr	r3, [pc, #24]	; (8001024 <HAL_IncTick+0x20>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	461a      	mov	r2, r3
 800100e:	4b06      	ldr	r3, [pc, #24]	; (8001028 <HAL_IncTick+0x24>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4413      	add	r3, r2
 8001014:	4a04      	ldr	r2, [pc, #16]	; (8001028 <HAL_IncTick+0x24>)
 8001016:	6013      	str	r3, [r2, #0]
}
 8001018:	bf00      	nop
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000008 	.word	0x20000008
 8001028:	200001a4 	.word	0x200001a4

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <HAL_GetTick+0x14>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	4618      	mov	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	200001a4 	.word	0x200001a4

08001044 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800104c:	f7ff ffee 	bl	800102c <HAL_GetTick>
 8001050:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105c:	d005      	beq.n	800106a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_Delay+0x44>)
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	461a      	mov	r2, r3
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	4413      	add	r3, r2
 8001068:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800106a:	bf00      	nop
 800106c:	f7ff ffde 	bl	800102c <HAL_GetTick>
 8001070:	4602      	mov	r2, r0
 8001072:	68bb      	ldr	r3, [r7, #8]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	429a      	cmp	r2, r3
 800107a:	d8f7      	bhi.n	800106c <HAL_Delay+0x28>
  {
  }
}
 800107c:	bf00      	nop
 800107e:	bf00      	nop
 8001080:	3710      	adds	r7, #16
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000008 	.word	0x20000008

0800108c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f003 0307 	and.w	r3, r3, #7
 800109a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800109c:	4b0c      	ldr	r3, [pc, #48]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a2:	68ba      	ldr	r2, [r7, #8]
 80010a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010a8:	4013      	ands	r3, r2
 80010aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010be:	4a04      	ldr	r2, [pc, #16]	; (80010d0 <__NVIC_SetPriorityGrouping+0x44>)
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	60d3      	str	r3, [r2, #12]
}
 80010c4:	bf00      	nop
 80010c6:	3714      	adds	r7, #20
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	e000ed00 	.word	0xe000ed00

080010d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <__NVIC_GetPriorityGrouping+0x18>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	0a1b      	lsrs	r3, r3, #8
 80010de:	f003 0307 	and.w	r3, r3, #7
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000ed00 	.word	0xe000ed00

080010f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	db0b      	blt.n	800111a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	f003 021f 	and.w	r2, r3, #31
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__NVIC_EnableIRQ+0x38>)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	095b      	lsrs	r3, r3, #5
 8001110:	2001      	movs	r0, #1
 8001112:	fa00 f202 	lsl.w	r2, r0, r2
 8001116:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop
 8001128:	e000e100 	.word	0xe000e100

0800112c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	6039      	str	r1, [r7, #0]
 8001136:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001138:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	db0a      	blt.n	8001156 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	b2da      	uxtb	r2, r3
 8001144:	490c      	ldr	r1, [pc, #48]	; (8001178 <__NVIC_SetPriority+0x4c>)
 8001146:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114a:	0112      	lsls	r2, r2, #4
 800114c:	b2d2      	uxtb	r2, r2
 800114e:	440b      	add	r3, r1
 8001150:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001154:	e00a      	b.n	800116c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	b2da      	uxtb	r2, r3
 800115a:	4908      	ldr	r1, [pc, #32]	; (800117c <__NVIC_SetPriority+0x50>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	f003 030f 	and.w	r3, r3, #15
 8001162:	3b04      	subs	r3, #4
 8001164:	0112      	lsls	r2, r2, #4
 8001166:	b2d2      	uxtb	r2, r2
 8001168:	440b      	add	r3, r1
 800116a:	761a      	strb	r2, [r3, #24]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000e100 	.word	0xe000e100
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001180:	b480      	push	{r7}
 8001182:	b089      	sub	sp, #36	; 0x24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	f1c3 0307 	rsb	r3, r3, #7
 800119a:	2b04      	cmp	r3, #4
 800119c:	bf28      	it	cs
 800119e:	2304      	movcs	r3, #4
 80011a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3304      	adds	r3, #4
 80011a6:	2b06      	cmp	r3, #6
 80011a8:	d902      	bls.n	80011b0 <NVIC_EncodePriority+0x30>
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	3b03      	subs	r3, #3
 80011ae:	e000      	b.n	80011b2 <NVIC_EncodePriority+0x32>
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	f04f 32ff 	mov.w	r2, #4294967295
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43da      	mvns	r2, r3
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	401a      	ands	r2, r3
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c8:	f04f 31ff 	mov.w	r1, #4294967295
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	fa01 f303 	lsl.w	r3, r1, r3
 80011d2:	43d9      	mvns	r1, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d8:	4313      	orrs	r3, r2
         );
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3724      	adds	r7, #36	; 0x24
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f8:	d301      	bcc.n	80011fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fa:	2301      	movs	r3, #1
 80011fc:	e00f      	b.n	800121e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fe:	4a0a      	ldr	r2, [pc, #40]	; (8001228 <SysTick_Config+0x40>)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001206:	210f      	movs	r1, #15
 8001208:	f04f 30ff 	mov.w	r0, #4294967295
 800120c:	f7ff ff8e 	bl	800112c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001210:	4b05      	ldr	r3, [pc, #20]	; (8001228 <SysTick_Config+0x40>)
 8001212:	2200      	movs	r2, #0
 8001214:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001216:	4b04      	ldr	r3, [pc, #16]	; (8001228 <SysTick_Config+0x40>)
 8001218:	2207      	movs	r2, #7
 800121a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800121c:	2300      	movs	r3, #0
}
 800121e:	4618      	mov	r0, r3
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	e000e010 	.word	0xe000e010

0800122c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff29 	bl	800108c <__NVIC_SetPriorityGrouping>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001242:	b580      	push	{r7, lr}
 8001244:	b086      	sub	sp, #24
 8001246:	af00      	add	r7, sp, #0
 8001248:	4603      	mov	r3, r0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001250:	2300      	movs	r3, #0
 8001252:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff3e 	bl	80010d4 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff8e 	bl	8001180 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5d 	bl	800112c <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	4603      	mov	r3, r0
 8001282:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001288:	4618      	mov	r0, r3
 800128a:	f7ff ff31 	bl	80010f0 <__NVIC_EnableIRQ>
}
 800128e:	bf00      	nop
 8001290:	3708      	adds	r7, #8
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}

08001296 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001296:	b580      	push	{r7, lr}
 8001298:	b082      	sub	sp, #8
 800129a:	af00      	add	r7, sp, #0
 800129c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffa2 	bl	80011e8 <SysTick_Config>
 80012a4:	4603      	mov	r3, r0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b082      	sub	sp, #8
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d101      	bne.n	80012c0 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012bc:	2301      	movs	r3, #1
 80012be:	e00e      	b.n	80012de <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	795b      	ldrb	r3, [r3, #5]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d105      	bne.n	80012d6 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f7ff fd7f 	bl	8000dd4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2201      	movs	r2, #1
 80012da:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012dc:	2300      	movs	r3, #0
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_CRC_Calculate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b087      	sub	sp, #28
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	60f8      	str	r0, [r7, #12]
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012f2:	2300      	movs	r3, #0
 80012f4:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2202      	movs	r2, #2
 80012fa:	715a      	strb	r2, [r3, #5]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f042 0201 	orr.w	r2, r2, #1
 800130a:	609a      	str	r2, [r3, #8]

  /* Enter 32-bit input data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <HAL_CRC_Calculate+0x42>
  {
    hcrc->Instance->DR = pBuffer[index];
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	441a      	add	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	6812      	ldr	r2, [r2, #0]
 8001320:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	d3f0      	bcc.n	8001312 <HAL_CRC_Calculate+0x2c>
  }
  temp = hcrc->Instance->DR;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	2201      	movs	r2, #1
 800133c:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800133e:	693b      	ldr	r3, [r7, #16]
}
 8001340:	4618      	mov	r0, r3
 8001342:	371c      	adds	r7, #28
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr

0800134c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b086      	sub	sp, #24
 8001350:	af00      	add	r7, sp, #0
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800135e:	4b23      	ldr	r3, [pc, #140]	; (80013ec <HAL_FLASH_Program+0xa0>)
 8001360:	7e1b      	ldrb	r3, [r3, #24]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d101      	bne.n	800136a <HAL_FLASH_Program+0x1e>
 8001366:	2302      	movs	r3, #2
 8001368:	e03b      	b.n	80013e2 <HAL_FLASH_Program+0x96>
 800136a:	4b20      	ldr	r3, [pc, #128]	; (80013ec <HAL_FLASH_Program+0xa0>)
 800136c:	2201      	movs	r2, #1
 800136e:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001370:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001374:	f000 f870 	bl	8001458 <FLASH_WaitForLastOperation>
 8001378:	4603      	mov	r3, r0
 800137a:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d12b      	bne.n	80013da <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d105      	bne.n	8001394 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001388:	783b      	ldrb	r3, [r7, #0]
 800138a:	4619      	mov	r1, r3
 800138c:	68b8      	ldr	r0, [r7, #8]
 800138e:	f000 f91b 	bl	80015c8 <FLASH_Program_Byte>
 8001392:	e016      	b.n	80013c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	2b01      	cmp	r3, #1
 8001398:	d105      	bne.n	80013a6 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800139a:	883b      	ldrh	r3, [r7, #0]
 800139c:	4619      	mov	r1, r3
 800139e:	68b8      	ldr	r0, [r7, #8]
 80013a0:	f000 f8ee 	bl	8001580 <FLASH_Program_HalfWord>
 80013a4:	e00d      	b.n	80013c2 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d105      	bne.n	80013b8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	4619      	mov	r1, r3
 80013b0:	68b8      	ldr	r0, [r7, #8]
 80013b2:	f000 f8c3 	bl	800153c <FLASH_Program_Word>
 80013b6:	e004      	b.n	80013c2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80013b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013bc:	68b8      	ldr	r0, [r7, #8]
 80013be:	f000 f88b 	bl	80014d8 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80013c2:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013c6:	f000 f847 	bl	8001458 <FLASH_WaitForLastOperation>
 80013ca:	4603      	mov	r3, r0
 80013cc:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <HAL_FLASH_Program+0xa4>)
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	4a07      	ldr	r2, [pc, #28]	; (80013f0 <HAL_FLASH_Program+0xa4>)
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013da:	4b04      	ldr	r3, [pc, #16]	; (80013ec <HAL_FLASH_Program+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	761a      	strb	r2, [r3, #24]
  
  return status;
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3718      	adds	r7, #24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	200001a8 	.word	0x200001a8
 80013f0:	40023c00 	.word	0x40023c00

080013f4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013fa:	2300      	movs	r3, #0
 80013fc:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_FLASH_Unlock+0x38>)
 8001400:	691b      	ldr	r3, [r3, #16]
 8001402:	2b00      	cmp	r3, #0
 8001404:	da0b      	bge.n	800141e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_FLASH_Unlock+0x38>)
 8001408:	4a09      	ldr	r2, [pc, #36]	; (8001430 <HAL_FLASH_Unlock+0x3c>)
 800140a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800140c:	4b07      	ldr	r3, [pc, #28]	; (800142c <HAL_FLASH_Unlock+0x38>)
 800140e:	4a09      	ldr	r2, [pc, #36]	; (8001434 <HAL_FLASH_Unlock+0x40>)
 8001410:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001412:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_FLASH_Unlock+0x38>)
 8001414:	691b      	ldr	r3, [r3, #16]
 8001416:	2b00      	cmp	r3, #0
 8001418:	da01      	bge.n	800141e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800141e:	79fb      	ldrb	r3, [r7, #7]
}
 8001420:	4618      	mov	r0, r3
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr
 800142c:	40023c00 	.word	0x40023c00
 8001430:	45670123 	.word	0x45670123
 8001434:	cdef89ab 	.word	0xcdef89ab

08001438 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800143c:	4b05      	ldr	r3, [pc, #20]	; (8001454 <HAL_FLASH_Lock+0x1c>)
 800143e:	691b      	ldr	r3, [r3, #16]
 8001440:	4a04      	ldr	r2, [pc, #16]	; (8001454 <HAL_FLASH_Lock+0x1c>)
 8001442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001446:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	40023c00 	.word	0x40023c00

08001458 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001460:	2300      	movs	r3, #0
 8001462:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001464:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <FLASH_WaitForLastOperation+0x78>)
 8001466:	2200      	movs	r2, #0
 8001468:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800146a:	f7ff fddf 	bl	800102c <HAL_GetTick>
 800146e:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001470:	e010      	b.n	8001494 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001478:	d00c      	beq.n	8001494 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <FLASH_WaitForLastOperation+0x38>
 8001480:	f7ff fdd4 	bl	800102c <HAL_GetTick>
 8001484:	4602      	mov	r2, r0
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	429a      	cmp	r2, r3
 800148e:	d201      	bcs.n	8001494 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e019      	b.n	80014c8 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <FLASH_WaitForLastOperation+0x7c>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d1e8      	bne.n	8001472 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <FLASH_WaitForLastOperation+0x7c>)
 80014a2:	68db      	ldr	r3, [r3, #12]
 80014a4:	f003 0301 	and.w	r3, r3, #1
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <FLASH_WaitForLastOperation+0x7c>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80014b2:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <FLASH_WaitForLastOperation+0x7c>)
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d003      	beq.n	80014c6 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80014be:	f000 f8a5 	bl	800160c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e000      	b.n	80014c8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
  
}  
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200001a8 	.word	0x200001a8
 80014d4:	40023c00 	.word	0x40023c00

080014d8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014e4:	4b14      	ldr	r3, [pc, #80]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	4a13      	ldr	r2, [pc, #76]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 80014ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014f0:	4b11      	ldr	r3, [pc, #68]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	4a10      	ldr	r2, [pc, #64]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 80014f6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <FLASH_Program_DoubleWord+0x60>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800150e:	f3bf 8f6f 	isb	sy
}
 8001512:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001514:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	000a      	movs	r2, r1
 8001522:	2300      	movs	r3, #0
 8001524:	68f9      	ldr	r1, [r7, #12]
 8001526:	3104      	adds	r1, #4
 8001528:	4613      	mov	r3, r2
 800152a:	600b      	str	r3, [r1, #0]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	40023c00 	.word	0x40023c00

0800153c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001546:	4b0d      	ldr	r3, [pc, #52]	; (800157c <FLASH_Program_Word+0x40>)
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	4a0c      	ldr	r2, [pc, #48]	; (800157c <FLASH_Program_Word+0x40>)
 800154c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001550:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001552:	4b0a      	ldr	r3, [pc, #40]	; (800157c <FLASH_Program_Word+0x40>)
 8001554:	691b      	ldr	r3, [r3, #16]
 8001556:	4a09      	ldr	r2, [pc, #36]	; (800157c <FLASH_Program_Word+0x40>)
 8001558:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800155c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800155e:	4b07      	ldr	r3, [pc, #28]	; (800157c <FLASH_Program_Word+0x40>)
 8001560:	691b      	ldr	r3, [r3, #16]
 8001562:	4a06      	ldr	r2, [pc, #24]	; (800157c <FLASH_Program_Word+0x40>)
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40023c00 	.word	0x40023c00

08001580 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800158c:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 800158e:	691b      	ldr	r3, [r3, #16]
 8001590:	4a0c      	ldr	r2, [pc, #48]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 8001592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001596:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001598:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 800159e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015a4:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	4a06      	ldr	r2, [pc, #24]	; (80015c4 <FLASH_Program_HalfWord+0x44>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	801a      	strh	r2, [r3, #0]
}
 80015b6:	bf00      	nop
 80015b8:	370c      	adds	r7, #12
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr
 80015c2:	bf00      	nop
 80015c4:	40023c00 	.word	0x40023c00

080015c8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80015d4:	4b0c      	ldr	r3, [pc, #48]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015d6:	691b      	ldr	r3, [r3, #16]
 80015d8:	4a0b      	ldr	r2, [pc, #44]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80015e0:	4b09      	ldr	r3, [pc, #36]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015e2:	4a09      	ldr	r2, [pc, #36]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015e8:	4b07      	ldr	r3, [pc, #28]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015ea:	691b      	ldr	r3, [r3, #16]
 80015ec:	4a06      	ldr	r2, [pc, #24]	; (8001608 <FLASH_Program_Byte+0x40>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	701a      	strb	r2, [r3, #0]
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00

0800160c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001610:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 8001612:	68db      	ldr	r3, [r3, #12]
 8001614:	f003 0310 	and.w	r3, r3, #16
 8001618:	2b00      	cmp	r3, #0
 800161a:	d008      	beq.n	800162e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800161c:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 800161e:	69db      	ldr	r3, [r3, #28]
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	4a2b      	ldr	r2, [pc, #172]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001626:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001628:	4b29      	ldr	r3, [pc, #164]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 800162a:	2210      	movs	r2, #16
 800162c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800162e:	4b28      	ldr	r3, [pc, #160]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	f003 0320 	and.w	r3, r3, #32
 8001636:	2b00      	cmp	r3, #0
 8001638:	d008      	beq.n	800164c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800163a:	4b26      	ldr	r3, [pc, #152]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	4a24      	ldr	r2, [pc, #144]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001644:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001646:	4b22      	ldr	r3, [pc, #136]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 8001648:	2220      	movs	r2, #32
 800164a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800164c:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001654:	2b00      	cmp	r3, #0
 8001656:	d008      	beq.n	800166a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 800165a:	69db      	ldr	r3, [r3, #28]
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	4a1c      	ldr	r2, [pc, #112]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001662:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001664:	4b1a      	ldr	r3, [pc, #104]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 8001666:	2240      	movs	r2, #64	; 0x40
 8001668:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800166a:	4b19      	ldr	r3, [pc, #100]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001672:	2b00      	cmp	r3, #0
 8001674:	d008      	beq.n	8001688 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001676:	4b17      	ldr	r3, [pc, #92]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001680:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 8001684:	2280      	movs	r2, #128	; 0x80
 8001686:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001688:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 800168a:	68db      	ldr	r3, [r3, #12]
 800168c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001690:	2b00      	cmp	r3, #0
 8001692:	d009      	beq.n	80016a8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001694:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	4a0d      	ldr	r2, [pc, #52]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 800169e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80016a0:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 80016a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016a6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 80016aa:	68db      	ldr	r3, [r3, #12]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80016b4:	4b07      	ldr	r3, [pc, #28]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 80016b6:	69db      	ldr	r3, [r3, #28]
 80016b8:	f043 0320 	orr.w	r3, r3, #32
 80016bc:	4a05      	ldr	r2, [pc, #20]	; (80016d4 <FLASH_SetErrorCode+0xc8>)
 80016be:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <FLASH_SetErrorCode+0xc4>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	60da      	str	r2, [r3, #12]
  }
}
 80016c6:	bf00      	nop
 80016c8:	46bd      	mov	sp, r7
 80016ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ce:	4770      	bx	lr
 80016d0:	40023c00 	.word	0x40023c00
 80016d4:	200001a8 	.word	0x200001a8

080016d8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80016ea:	4b31      	ldr	r3, [pc, #196]	; (80017b0 <HAL_FLASHEx_Erase+0xd8>)
 80016ec:	7e1b      	ldrb	r3, [r3, #24]
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d101      	bne.n	80016f6 <HAL_FLASHEx_Erase+0x1e>
 80016f2:	2302      	movs	r3, #2
 80016f4:	e058      	b.n	80017a8 <HAL_FLASHEx_Erase+0xd0>
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <HAL_FLASHEx_Erase+0xd8>)
 80016f8:	2201      	movs	r2, #1
 80016fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016fc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001700:	f7ff feaa 	bl	8001458 <FLASH_WaitForLastOperation>
 8001704:	4603      	mov	r3, r0
 8001706:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001708:	7bfb      	ldrb	r3, [r7, #15]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d148      	bne.n	80017a0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	f04f 32ff 	mov.w	r2, #4294967295
 8001714:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b01      	cmp	r3, #1
 800171c:	d115      	bne.n	800174a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	b2da      	uxtb	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	4619      	mov	r1, r3
 800172a:	4610      	mov	r0, r2
 800172c:	f000 f844 	bl	80017b8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001730:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001734:	f7ff fe90 	bl	8001458 <FLASH_WaitForLastOperation>
 8001738:	4603      	mov	r3, r0
 800173a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <HAL_FLASHEx_Erase+0xdc>)
 800173e:	691b      	ldr	r3, [r3, #16]
 8001740:	4a1c      	ldr	r2, [pc, #112]	; (80017b4 <HAL_FLASHEx_Erase+0xdc>)
 8001742:	f023 0304 	bic.w	r3, r3, #4
 8001746:	6113      	str	r3, [r2, #16]
 8001748:	e028      	b.n	800179c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	e01c      	b.n	800178c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	b2db      	uxtb	r3, r3
 8001758:	4619      	mov	r1, r3
 800175a:	68b8      	ldr	r0, [r7, #8]
 800175c:	f000 f850 	bl	8001800 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001760:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001764:	f7ff fe78 	bl	8001458 <FLASH_WaitForLastOperation>
 8001768:	4603      	mov	r3, r0
 800176a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800176c:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_FLASHEx_Erase+0xdc>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_FLASHEx_Erase+0xdc>)
 8001772:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001776:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001778:	7bfb      	ldrb	r3, [r7, #15]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d003      	beq.n	8001786 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	68ba      	ldr	r2, [r7, #8]
 8001782:	601a      	str	r2, [r3, #0]
          break;
 8001784:	e00a      	b.n	800179c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	3301      	adds	r3, #1
 800178a:	60bb      	str	r3, [r7, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68da      	ldr	r2, [r3, #12]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	4413      	add	r3, r2
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	429a      	cmp	r2, r3
 800179a:	d3da      	bcc.n	8001752 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800179c:	f000 f878 	bl	8001890 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80017a0:	4b03      	ldr	r3, [pc, #12]	; (80017b0 <HAL_FLASHEx_Erase+0xd8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	761a      	strb	r2, [r3, #24]

  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3710      	adds	r7, #16
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200001a8 	.word	0x200001a8
 80017b4:	40023c00 	.word	0x40023c00

080017b8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017c4:	4b0d      	ldr	r3, [pc, #52]	; (80017fc <FLASH_MassErase+0x44>)
 80017c6:	691b      	ldr	r3, [r3, #16]
 80017c8:	4a0c      	ldr	r2, [pc, #48]	; (80017fc <FLASH_MassErase+0x44>)
 80017ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80017d0:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <FLASH_MassErase+0x44>)
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	4a09      	ldr	r2, [pc, #36]	; (80017fc <FLASH_MassErase+0x44>)
 80017d6:	f043 0304 	orr.w	r3, r3, #4
 80017da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80017dc:	4b07      	ldr	r3, [pc, #28]	; (80017fc <FLASH_MassErase+0x44>)
 80017de:	691a      	ldr	r2, [r3, #16]
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	021b      	lsls	r3, r3, #8
 80017e4:	4313      	orrs	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	; (80017fc <FLASH_MassErase+0x44>)
 80017e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ec:	6113      	str	r3, [r2, #16]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
 80017fa:	bf00      	nop
 80017fc:	40023c00 	.word	0x40023c00

08001800 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	460b      	mov	r3, r1
 800180a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800180c:	2300      	movs	r3, #0
 800180e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d102      	bne.n	800181c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e010      	b.n	800183e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800181c:	78fb      	ldrb	r3, [r7, #3]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d103      	bne.n	800182a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001822:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	e009      	b.n	800183e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	2b02      	cmp	r3, #2
 800182e:	d103      	bne.n	8001838 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001830:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	e002      	b.n	800183e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001838:	f44f 7340 	mov.w	r3, #768	; 0x300
 800183c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800183e:	4b13      	ldr	r3, [pc, #76]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	4a12      	ldr	r2, [pc, #72]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001844:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001848:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800184a:	4b10      	ldr	r3, [pc, #64]	; (800188c <FLASH_Erase_Sector+0x8c>)
 800184c:	691a      	ldr	r2, [r3, #16]
 800184e:	490f      	ldr	r1, [pc, #60]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4313      	orrs	r3, r2
 8001854:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001856:	4b0d      	ldr	r3, [pc, #52]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001858:	691b      	ldr	r3, [r3, #16]
 800185a:	4a0c      	ldr	r2, [pc, #48]	; (800188c <FLASH_Erase_Sector+0x8c>)
 800185c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001860:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001862:	4b0a      	ldr	r3, [pc, #40]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001864:	691a      	ldr	r2, [r3, #16]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	00db      	lsls	r3, r3, #3
 800186a:	4313      	orrs	r3, r2
 800186c:	4a07      	ldr	r2, [pc, #28]	; (800188c <FLASH_Erase_Sector+0x8c>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <FLASH_Erase_Sector+0x8c>)
 8001876:	691b      	ldr	r3, [r3, #16]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <FLASH_Erase_Sector+0x8c>)
 800187a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800187e:	6113      	str	r3, [r2, #16]
}
 8001880:	bf00      	nop
 8001882:	3714      	adds	r7, #20
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40023c00 	.word	0x40023c00

08001890 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <FLASH_FlushCaches+0x88>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800189c:	2b00      	cmp	r3, #0
 800189e:	d017      	beq.n	80018d0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80018a0:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1c      	ldr	r2, [pc, #112]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80018aa:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018b6:	6013      	str	r3, [r2, #0]
 80018b8:	4b17      	ldr	r3, [pc, #92]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a16      	ldr	r2, [pc, #88]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80018c2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b14      	ldr	r3, [pc, #80]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a13      	ldr	r2, [pc, #76]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80018d0:	4b11      	ldr	r3, [pc, #68]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d017      	beq.n	800190c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80018dc:	4b0e      	ldr	r3, [pc, #56]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a0d      	ldr	r2, [pc, #52]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018e6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80018e8:	4b0b      	ldr	r3, [pc, #44]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018ee:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a07      	ldr	r2, [pc, #28]	; (8001918 <FLASH_FlushCaches+0x88>)
 80018fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018fe:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <FLASH_FlushCaches+0x88>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a04      	ldr	r2, [pc, #16]	; (8001918 <FLASH_FlushCaches+0x88>)
 8001906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800190a:	6013      	str	r3, [r2, #0]
  }
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40023c00 	.word	0x40023c00

0800191c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800191c:	b480      	push	{r7}
 800191e:	b089      	sub	sp, #36	; 0x24
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800192a:	2300      	movs	r3, #0
 800192c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800192e:	2300      	movs	r3, #0
 8001930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001932:	2300      	movs	r3, #0
 8001934:	61fb      	str	r3, [r7, #28]
 8001936:	e159      	b.n	8001bec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001938:	2201      	movs	r2, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	429a      	cmp	r2, r3
 8001952:	f040 8148 	bne.w	8001be6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	2b01      	cmp	r3, #1
 8001960:	d005      	beq.n	800196e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800196a:	2b02      	cmp	r3, #2
 800196c:	d130      	bne.n	80019d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	fa02 f303 	lsl.w	r3, r2, r3
 800197e:	43db      	mvns	r3, r3
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	4013      	ands	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	68da      	ldr	r2, [r3, #12]
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019a4:	2201      	movs	r2, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	091b      	lsrs	r3, r3, #4
 80019ba:	f003 0201 	and.w	r2, r3, #1
 80019be:	69fb      	ldr	r3, [r7, #28]
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b03      	cmp	r3, #3
 80019da:	d017      	beq.n	8001a0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	2203      	movs	r2, #3
 80019e8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	689a      	ldr	r2, [r3, #8]
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f003 0303 	and.w	r3, r3, #3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d123      	bne.n	8001a60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a18:	69fb      	ldr	r3, [r7, #28]
 8001a1a:	08da      	lsrs	r2, r3, #3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3208      	adds	r2, #8
 8001a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f003 0307 	and.w	r3, r3, #7
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	691a      	ldr	r2, [r3, #16]
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	69ba      	ldr	r2, [r7, #24]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	08da      	lsrs	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	3208      	adds	r2, #8
 8001a5a:	69b9      	ldr	r1, [r7, #24]
 8001a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	005b      	lsls	r3, r3, #1
 8001a6a:	2203      	movs	r2, #3
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	43db      	mvns	r3, r3
 8001a72:	69ba      	ldr	r2, [r7, #24]
 8001a74:	4013      	ands	r3, r2
 8001a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0203 	and.w	r2, r3, #3
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	fa02 f303 	lsl.w	r3, r2, r3
 8001a88:	69ba      	ldr	r2, [r7, #24]
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	69ba      	ldr	r2, [r7, #24]
 8001a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 80a2 	beq.w	8001be6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	4b57      	ldr	r3, [pc, #348]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	4a56      	ldr	r2, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001aac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab2:	4b54      	ldr	r3, [pc, #336]	; (8001c04 <HAL_GPIO_Init+0x2e8>)
 8001ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001abe:	4a52      	ldr	r2, [pc, #328]	; (8001c08 <HAL_GPIO_Init+0x2ec>)
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	089b      	lsrs	r3, r3, #2
 8001ac4:	3302      	adds	r3, #2
 8001ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a49      	ldr	r2, [pc, #292]	; (8001c0c <HAL_GPIO_Init+0x2f0>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d019      	beq.n	8001b1e <HAL_GPIO_Init+0x202>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a48      	ldr	r2, [pc, #288]	; (8001c10 <HAL_GPIO_Init+0x2f4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <HAL_GPIO_Init+0x1fe>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a47      	ldr	r2, [pc, #284]	; (8001c14 <HAL_GPIO_Init+0x2f8>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00d      	beq.n	8001b16 <HAL_GPIO_Init+0x1fa>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a46      	ldr	r2, [pc, #280]	; (8001c18 <HAL_GPIO_Init+0x2fc>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d007      	beq.n	8001b12 <HAL_GPIO_Init+0x1f6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a45      	ldr	r2, [pc, #276]	; (8001c1c <HAL_GPIO_Init+0x300>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d101      	bne.n	8001b0e <HAL_GPIO_Init+0x1f2>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e008      	b.n	8001b20 <HAL_GPIO_Init+0x204>
 8001b0e:	2307      	movs	r3, #7
 8001b10:	e006      	b.n	8001b20 <HAL_GPIO_Init+0x204>
 8001b12:	2303      	movs	r3, #3
 8001b14:	e004      	b.n	8001b20 <HAL_GPIO_Init+0x204>
 8001b16:	2302      	movs	r3, #2
 8001b18:	e002      	b.n	8001b20 <HAL_GPIO_Init+0x204>
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_GPIO_Init+0x204>
 8001b1e:	2300      	movs	r3, #0
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f002 0203 	and.w	r2, r2, #3
 8001b26:	0092      	lsls	r2, r2, #2
 8001b28:	4093      	lsls	r3, r2
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b30:	4935      	ldr	r1, [pc, #212]	; (8001c08 <HAL_GPIO_Init+0x2ec>)
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	089b      	lsrs	r3, r3, #2
 8001b36:	3302      	adds	r3, #2
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3e:	4b38      	ldr	r3, [pc, #224]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	43db      	mvns	r3, r3
 8001b48:	69ba      	ldr	r2, [r7, #24]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b62:	4a2f      	ldr	r2, [pc, #188]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b68:	4b2d      	ldr	r3, [pc, #180]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d003      	beq.n	8001b8c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001b84:	69ba      	ldr	r2, [r7, #24]
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b8c:	4a24      	ldr	r2, [pc, #144]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b92:	4b23      	ldr	r3, [pc, #140]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	43db      	mvns	r3, r3
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba2:	683b      	ldr	r3, [r7, #0]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb6:	4a1a      	ldr	r2, [pc, #104]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	43db      	mvns	r3, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001bd8:	69ba      	ldr	r2, [r7, #24]
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001be0:	4a0f      	ldr	r2, [pc, #60]	; (8001c20 <HAL_GPIO_Init+0x304>)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3301      	adds	r3, #1
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	f67f aea2 	bls.w	8001938 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	3724      	adds	r7, #36	; 0x24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40023800 	.word	0x40023800
 8001c08:	40013800 	.word	0x40013800
 8001c0c:	40020000 	.word	0x40020000
 8001c10:	40020400 	.word	0x40020400
 8001c14:	40020800 	.word	0x40020800
 8001c18:	40020c00 	.word	0x40020c00
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	40013c00 	.word	0x40013c00

08001c24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	691a      	ldr	r2, [r3, #16]
 8001c34:	887b      	ldrh	r3, [r7, #2]
 8001c36:	4013      	ands	r3, r2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	73fb      	strb	r3, [r7, #15]
 8001c40:	e001      	b.n	8001c46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c42:	2300      	movs	r3, #0
 8001c44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3714      	adds	r7, #20
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	807b      	strh	r3, [r7, #2]
 8001c60:	4613      	mov	r3, r2
 8001c62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c64:	787b      	ldrb	r3, [r7, #1]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d003      	beq.n	8001c72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c6a:	887a      	ldrh	r2, [r7, #2]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c70:	e003      	b.n	8001c7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c72:	887b      	ldrh	r3, [r7, #2]
 8001c74:	041a      	lsls	r2, r3, #16
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	619a      	str	r2, [r3, #24]
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b085      	sub	sp, #20
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	460b      	mov	r3, r1
 8001c90:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c98:	887a      	ldrh	r2, [r7, #2]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	041a      	lsls	r2, r3, #16
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	887b      	ldrh	r3, [r7, #2]
 8001ca6:	400b      	ands	r3, r1
 8001ca8:	431a      	orrs	r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	619a      	str	r2, [r3, #24]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cbc:	b08f      	sub	sp, #60	; 0x3c
 8001cbe:	af0a      	add	r7, sp, #40	; 0x28
 8001cc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e10f      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f005 fe6e 	bl	80079c8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2203      	movs	r2, #3
 8001cf0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f002 f865 	bl	8003dda <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	603b      	str	r3, [r7, #0]
 8001d16:	687e      	ldr	r6, [r7, #4]
 8001d18:	466d      	mov	r5, sp
 8001d1a:	f106 0410 	add.w	r4, r6, #16
 8001d1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d26:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d2a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d2e:	1d33      	adds	r3, r6, #4
 8001d30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d32:	6838      	ldr	r0, [r7, #0]
 8001d34:	f001 ff3c 	bl	8003bb0 <USB_CoreInit>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d005      	beq.n	8001d4a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e0d0      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2100      	movs	r1, #0
 8001d50:	4618      	mov	r0, r3
 8001d52:	f002 f853 	bl	8003dfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001d56:	2300      	movs	r3, #0
 8001d58:	73fb      	strb	r3, [r7, #15]
 8001d5a:	e04a      	b.n	8001df2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001d5c:	7bfa      	ldrb	r2, [r7, #15]
 8001d5e:	6879      	ldr	r1, [r7, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	440b      	add	r3, r1
 8001d6a:	333d      	adds	r3, #61	; 0x3d
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001d70:	7bfa      	ldrb	r2, [r7, #15]
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4613      	mov	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4413      	add	r3, r2
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	333c      	adds	r3, #60	; 0x3c
 8001d80:	7bfa      	ldrb	r2, [r7, #15]
 8001d82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001d84:	7bfa      	ldrb	r2, [r7, #15]
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
 8001d88:	b298      	uxth	r0, r3
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	4413      	add	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3344      	adds	r3, #68	; 0x44
 8001d98:	4602      	mov	r2, r0
 8001d9a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001d9c:	7bfa      	ldrb	r2, [r7, #15]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3340      	adds	r3, #64	; 0x40
 8001dac:	2200      	movs	r2, #0
 8001dae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001db0:	7bfa      	ldrb	r2, [r7, #15]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	00db      	lsls	r3, r3, #3
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	3348      	adds	r3, #72	; 0x48
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	6879      	ldr	r1, [r7, #4]
 8001dc8:	4613      	mov	r3, r2
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	334c      	adds	r3, #76	; 0x4c
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001dd8:	7bfa      	ldrb	r2, [r7, #15]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dec:	7bfb      	ldrb	r3, [r7, #15]
 8001dee:	3301      	adds	r3, #1
 8001df0:	73fb      	strb	r3, [r7, #15]
 8001df2:	7bfa      	ldrb	r2, [r7, #15]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d3af      	bcc.n	8001d5c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	73fb      	strb	r3, [r7, #15]
 8001e00:	e044      	b.n	8001e8c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001e02:	7bfa      	ldrb	r2, [r7, #15]
 8001e04:	6879      	ldr	r1, [r7, #4]
 8001e06:	4613      	mov	r3, r2
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	009b      	lsls	r3, r3, #2
 8001e0e:	440b      	add	r3, r1
 8001e10:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001e14:	2200      	movs	r2, #0
 8001e16:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	6879      	ldr	r1, [r7, #4]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001e2a:	7bfa      	ldrb	r2, [r7, #15]
 8001e2c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001e2e:	7bfa      	ldrb	r2, [r7, #15]
 8001e30:	6879      	ldr	r1, [r7, #4]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	4413      	add	r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	440b      	add	r3, r1
 8001e3c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001e40:	2200      	movs	r2, #0
 8001e42:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001e44:	7bfa      	ldrb	r2, [r7, #15]
 8001e46:	6879      	ldr	r1, [r7, #4]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4413      	add	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	440b      	add	r3, r1
 8001e52:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001e56:	2200      	movs	r2, #0
 8001e58:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001e5a:	7bfa      	ldrb	r2, [r7, #15]
 8001e5c:	6879      	ldr	r1, [r7, #4]
 8001e5e:	4613      	mov	r3, r2
 8001e60:	00db      	lsls	r3, r3, #3
 8001e62:	4413      	add	r3, r2
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	440b      	add	r3, r1
 8001e68:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001e70:	7bfa      	ldrb	r2, [r7, #15]
 8001e72:	6879      	ldr	r1, [r7, #4]
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e86:	7bfb      	ldrb	r3, [r7, #15]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	73fb      	strb	r3, [r7, #15]
 8001e8c:	7bfa      	ldrb	r2, [r7, #15]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d3b5      	bcc.n	8001e02 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	603b      	str	r3, [r7, #0]
 8001e9c:	687e      	ldr	r6, [r7, #4]
 8001e9e:	466d      	mov	r5, sp
 8001ea0:	f106 0410 	add.w	r4, r6, #16
 8001ea4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ea8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eaa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eac:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb0:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb4:	1d33      	adds	r3, r6, #4
 8001eb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eb8:	6838      	ldr	r0, [r7, #0]
 8001eba:	f001 ffeb 	bl	8003e94 <USB_DevInit>
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2202      	movs	r2, #2
 8001ec8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e00d      	b.n	8001eec <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f003 f93a 	bl	800515e <USB_DevDisconnect>

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ef4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b084      	sub	sp, #16
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d101      	bne.n	8001f10 <HAL_PCD_Start+0x1c>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e020      	b.n	8001f52 <HAL_PCD_Start+0x5e>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2201      	movs	r2, #1
 8001f14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d109      	bne.n	8001f34 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d005      	beq.n	8001f34 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f001 ff3d 	bl	8003db8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4618      	mov	r0, r3
 8001f44:	f003 f8ea 	bl	800511c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001f5a:	b590      	push	{r4, r7, lr}
 8001f5c:	b08d      	sub	sp, #52	; 0x34
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f68:	6a3b      	ldr	r3, [r7, #32]
 8001f6a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f003 f9a8 	bl	80052c6 <USB_GetMode>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	f040 848a 	bne.w	8002892 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f003 f90c 	bl	80051a0 <USB_ReadInterrupts>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	f000 8480 	beq.w	8002890 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	0a1b      	lsrs	r3, r3, #8
 8001f9a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f003 f8f9 	bl	80051a0 <USB_ReadInterrupts>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b02      	cmp	r3, #2
 8001fb6:	d107      	bne.n	8001fc8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f002 0202 	and.w	r2, r2, #2
 8001fc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f8e7 	bl	80051a0 <USB_ReadInterrupts>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b10      	cmp	r3, #16
 8001fda:	d161      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	699a      	ldr	r2, [r3, #24]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 0210 	bic.w	r2, r2, #16
 8001fea:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001fec:	6a3b      	ldr	r3, [r7, #32]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4413      	add	r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	0c5b      	lsrs	r3, r3, #17
 8002010:	f003 030f 	and.w	r3, r3, #15
 8002014:	2b02      	cmp	r3, #2
 8002016:	d124      	bne.n	8002062 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	d035      	beq.n	8002090 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002028:	69bb      	ldr	r3, [r7, #24]
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800202e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002032:	b29b      	uxth	r3, r3
 8002034:	461a      	mov	r2, r3
 8002036:	6a38      	ldr	r0, [r7, #32]
 8002038:	f002 ff1e 	bl	8004e78 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	091b      	lsrs	r3, r3, #4
 8002044:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002048:	441a      	add	r2, r3
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	6a1a      	ldr	r2, [r3, #32]
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	091b      	lsrs	r3, r3, #4
 8002056:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205a:	441a      	add	r2, r3
 800205c:	697b      	ldr	r3, [r7, #20]
 800205e:	621a      	str	r2, [r3, #32]
 8002060:	e016      	b.n	8002090 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	0c5b      	lsrs	r3, r3, #17
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	2b06      	cmp	r3, #6
 800206c:	d110      	bne.n	8002090 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002074:	2208      	movs	r2, #8
 8002076:	4619      	mov	r1, r3
 8002078:	6a38      	ldr	r0, [r7, #32]
 800207a:	f002 fefd 	bl	8004e78 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a1a      	ldr	r2, [r3, #32]
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800208a:	441a      	add	r2, r3
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f042 0210 	orr.w	r2, r2, #16
 800209e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 f87b 	bl	80051a0 <USB_ReadInterrupts>
 80020aa:	4603      	mov	r3, r0
 80020ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80020b4:	f040 80a7 	bne.w	8002206 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80020b8:	2300      	movs	r3, #0
 80020ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f003 f880 	bl	80051c6 <USB_ReadDevAllOutEpInterrupt>
 80020c6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80020c8:	e099      	b.n	80021fe <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80020ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 808e 	beq.w	80021f2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	4611      	mov	r1, r2
 80020e0:	4618      	mov	r0, r3
 80020e2:	f003 f8a4 	bl	800522e <USB_ReadDevOutEPInterrupt>
 80020e6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d00c      	beq.n	800210c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	015a      	lsls	r2, r3, #5
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	4413      	add	r3, r2
 80020fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020fe:	461a      	mov	r2, r3
 8002100:	2301      	movs	r3, #1
 8002102:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fec2 	bl	8002e90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00c      	beq.n	8002130 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	015a      	lsls	r2, r3, #5
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	4413      	add	r3, r2
 800211e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002122:	461a      	mov	r2, r3
 8002124:	2308      	movs	r3, #8
 8002126:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002128:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f000 ff98 	bl	8003060 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	f003 0310 	and.w	r3, r3, #16
 8002136:	2b00      	cmp	r3, #0
 8002138:	d008      	beq.n	800214c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	015a      	lsls	r2, r3, #5
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	4413      	add	r3, r2
 8002142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002146:	461a      	mov	r2, r3
 8002148:	2310      	movs	r3, #16
 800214a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800214c:	693b      	ldr	r3, [r7, #16]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d030      	beq.n	80021b8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002156:	6a3b      	ldr	r3, [r7, #32]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215e:	2b80      	cmp	r3, #128	; 0x80
 8002160:	d109      	bne.n	8002176 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002170:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002174:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	4413      	add	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	4413      	add	r3, r2
 8002188:	3304      	adds	r3, #4
 800218a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d108      	bne.n	80021a6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002194:	697b      	ldr	r3, [r7, #20]
 8002196:	2200      	movs	r2, #0
 8002198:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	b2db      	uxtb	r3, r3
 800219e:	4619      	mov	r1, r3
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f005 fd0d 	bl	8007bc0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80021a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a8:	015a      	lsls	r2, r3, #5
 80021aa:	69fb      	ldr	r3, [r7, #28]
 80021ac:	4413      	add	r3, r2
 80021ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021b2:	461a      	mov	r2, r3
 80021b4:	2302      	movs	r3, #2
 80021b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	f003 0320 	and.w	r3, r3, #32
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d008      	beq.n	80021d4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ce:	461a      	mov	r2, r3
 80021d0:	2320      	movs	r3, #32
 80021d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d009      	beq.n	80021f2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	015a      	lsls	r2, r3, #5
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	4413      	add	r3, r2
 80021e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ea:	461a      	mov	r2, r3
 80021ec:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021f0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80021f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f4:	3301      	adds	r3, #1
 80021f6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80021f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021fa:	085b      	lsrs	r3, r3, #1
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80021fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002200:	2b00      	cmp	r3, #0
 8002202:	f47f af62 	bne.w	80020ca <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4618      	mov	r0, r3
 800220c:	f002 ffc8 	bl	80051a0 <USB_ReadInterrupts>
 8002210:	4603      	mov	r3, r0
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800221a:	f040 80db 	bne.w	80023d4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 ffe9 	bl	80051fa <USB_ReadDevAllInEpInterrupt>
 8002228:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800222a:	2300      	movs	r3, #0
 800222c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800222e:	e0cd      	b.n	80023cc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 80c2 	beq.w	80023c0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	4611      	mov	r1, r2
 8002246:	4618      	mov	r0, r3
 8002248:	f003 f80f 	bl	800526a <USB_ReadDevInEPInterrupt>
 800224c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	2b00      	cmp	r3, #0
 8002256:	d057      	beq.n	8002308 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	2201      	movs	r2, #1
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800226c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	43db      	mvns	r3, r3
 8002272:	69f9      	ldr	r1, [r7, #28]
 8002274:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002278:	4013      	ands	r3, r2
 800227a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002288:	461a      	mov	r2, r3
 800228a:	2301      	movs	r3, #1
 800228c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d132      	bne.n	80022fc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800229a:	4613      	mov	r3, r2
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	440b      	add	r3, r1
 80022a4:	334c      	adds	r3, #76	; 0x4c
 80022a6:	6819      	ldr	r1, [r3, #0]
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ac:	4613      	mov	r3, r2
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4413      	add	r3, r2
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	4403      	add	r3, r0
 80022b6:	3348      	adds	r3, #72	; 0x48
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4419      	add	r1, r3
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022c0:	4613      	mov	r3, r2
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4413      	add	r3, r2
 80022c6:	009b      	lsls	r3, r3, #2
 80022c8:	4403      	add	r3, r0
 80022ca:	334c      	adds	r3, #76	; 0x4c
 80022cc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d113      	bne.n	80022fc <HAL_PCD_IRQHandler+0x3a2>
 80022d4:	6879      	ldr	r1, [r7, #4]
 80022d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022d8:	4613      	mov	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	4413      	add	r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	3354      	adds	r3, #84	; 0x54
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d108      	bne.n	80022fc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6818      	ldr	r0, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022f4:	461a      	mov	r2, r3
 80022f6:	2101      	movs	r1, #1
 80022f8:	f003 f816 	bl	8005328 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	4619      	mov	r1, r3
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f005 fbe1 	bl	8007aca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	f003 0308 	and.w	r3, r3, #8
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002314:	015a      	lsls	r2, r3, #5
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	4413      	add	r3, r2
 800231a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800231e:	461a      	mov	r2, r3
 8002320:	2308      	movs	r3, #8
 8002322:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	f003 0310 	and.w	r3, r3, #16
 800232a:	2b00      	cmp	r3, #0
 800232c:	d008      	beq.n	8002340 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	015a      	lsls	r2, r3, #5
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	4413      	add	r3, r2
 8002336:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800233a:	461a      	mov	r2, r3
 800233c:	2310      	movs	r3, #16
 800233e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002346:	2b00      	cmp	r3, #0
 8002348:	d008      	beq.n	800235c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002356:	461a      	mov	r2, r3
 8002358:	2340      	movs	r3, #64	; 0x40
 800235a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d023      	beq.n	80023ae <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002366:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002368:	6a38      	ldr	r0, [r7, #32]
 800236a:	f001 fef7 	bl	800415c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800236e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002370:	4613      	mov	r3, r2
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	4413      	add	r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	3338      	adds	r3, #56	; 0x38
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	4413      	add	r3, r2
 800237e:	3304      	adds	r3, #4
 8002380:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	78db      	ldrb	r3, [r3, #3]
 8002386:	2b01      	cmp	r3, #1
 8002388:	d108      	bne.n	800239c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2200      	movs	r2, #0
 800238e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002392:	b2db      	uxtb	r3, r3
 8002394:	4619      	mov	r1, r3
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f005 fc24 	bl	8007be4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800239c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80023a8:	461a      	mov	r2, r3
 80023aa:	2302      	movs	r3, #2
 80023ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80023b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 fcdb 	bl	8002d76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	3301      	adds	r3, #1
 80023c4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80023c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c8:	085b      	lsrs	r3, r3, #1
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f47f af2e 	bne.w	8002230 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4618      	mov	r0, r3
 80023da:	f002 fee1 	bl	80051a0 <USB_ReadInterrupts>
 80023de:	4603      	mov	r3, r0
 80023e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80023e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80023e8:	d122      	bne.n	8002430 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	69fa      	ldr	r2, [r7, #28]
 80023f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80023f8:	f023 0301 	bic.w	r3, r3, #1
 80023fc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002404:	2b01      	cmp	r3, #1
 8002406:	d108      	bne.n	800241a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002410:	2100      	movs	r1, #0
 8002412:	6878      	ldr	r0, [r7, #4]
 8002414:	f000 fec2 	bl	800319c <HAL_PCDEx_LPM_Callback>
 8002418:	e002      	b.n	8002420 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f005 fbc2 	bl	8007ba4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	695a      	ldr	r2, [r3, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800242e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4618      	mov	r0, r3
 8002436:	f002 feb3 	bl	80051a0 <USB_ReadInterrupts>
 800243a:	4603      	mov	r3, r0
 800243c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002440:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002444:	d112      	bne.n	800246c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002446:	69fb      	ldr	r3, [r7, #28]
 8002448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d102      	bne.n	800245c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002456:	6878      	ldr	r0, [r7, #4]
 8002458:	f005 fb7e 	bl	8007b58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695a      	ldr	r2, [r3, #20]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800246a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4618      	mov	r0, r3
 8002472:	f002 fe95 	bl	80051a0 <USB_ReadInterrupts>
 8002476:	4603      	mov	r3, r0
 8002478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800247c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002480:	f040 80b7 	bne.w	80025f2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002492:	f023 0301 	bic.w	r3, r3, #1
 8002496:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	2110      	movs	r1, #16
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fe5c 	bl	800415c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024a8:	e046      	b.n	8002538 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80024aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b6:	461a      	mov	r2, r3
 80024b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ce:	0151      	lsls	r1, r2, #5
 80024d0:	69fa      	ldr	r2, [r7, #28]
 80024d2:	440a      	add	r2, r1
 80024d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80024d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80024de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e0:	015a      	lsls	r2, r3, #5
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	4413      	add	r3, r2
 80024e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024ea:	461a      	mov	r2, r3
 80024ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80024f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	015a      	lsls	r2, r3, #5
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	4413      	add	r3, r2
 80024fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002502:	0151      	lsls	r1, r2, #5
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	440a      	add	r2, r1
 8002508:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800250c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002510:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	015a      	lsls	r2, r3, #5
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	4413      	add	r3, r2
 800251a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002522:	0151      	lsls	r1, r2, #5
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	440a      	add	r2, r1
 8002528:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800252c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002530:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002534:	3301      	adds	r3, #1
 8002536:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800253e:	429a      	cmp	r2, r3
 8002540:	d3b3      	bcc.n	80024aa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	69fa      	ldr	r2, [r7, #28]
 800254c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002550:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002554:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	2b00      	cmp	r3, #0
 800255c:	d016      	beq.n	800258c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	69fa      	ldr	r2, [r7, #28]
 800256a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800256e:	f043 030b 	orr.w	r3, r3, #11
 8002572:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002576:	69fb      	ldr	r3, [r7, #28]
 8002578:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	69fa      	ldr	r2, [r7, #28]
 8002580:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002584:	f043 030b 	orr.w	r3, r3, #11
 8002588:	6453      	str	r3, [r2, #68]	; 0x44
 800258a:	e015      	b.n	80025b8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002592:	695b      	ldr	r3, [r3, #20]
 8002594:	69fa      	ldr	r2, [r7, #28]
 8002596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800259a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800259e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80025a2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80025a4:	69fb      	ldr	r3, [r7, #28]
 80025a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b2:	f043 030b 	orr.w	r3, r3, #11
 80025b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80025ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80025dc:	461a      	mov	r2, r3
 80025de:	f002 fea3 	bl	8005328 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	695a      	ldr	r2, [r3, #20]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80025f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f002 fdd2 	bl	80051a0 <USB_ReadInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002602:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002606:	d124      	bne.n	8002652 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f002 fe68 	bl	80052e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f001 fe1d 	bl	8004256 <USB_GetDevSpeed>
 800261c:	4603      	mov	r3, r0
 800261e:	461a      	mov	r2, r3
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681c      	ldr	r4, [r3, #0]
 8002628:	f001 f9e8 	bl	80039fc <HAL_RCC_GetHCLKFreq>
 800262c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002632:	b2db      	uxtb	r3, r3
 8002634:	461a      	mov	r2, r3
 8002636:	4620      	mov	r0, r4
 8002638:	f001 fb1c 	bl	8003c74 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f005 fa6c 	bl	8007b1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	695a      	ldr	r2, [r3, #20]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002650:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f002 fda2 	bl	80051a0 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b08      	cmp	r3, #8
 8002664:	d10a      	bne.n	800267c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f005 fa49 	bl	8007afe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695a      	ldr	r2, [r3, #20]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f002 0208 	and.w	r2, r2, #8
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f002 fd8d 	bl	80051a0 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b80      	cmp	r3, #128	; 0x80
 800268e:	d122      	bne.n	80026d6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800269c:	2301      	movs	r3, #1
 800269e:	627b      	str	r3, [r7, #36]	; 0x24
 80026a0:	e014      	b.n	80026cc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80026a2:	6879      	ldr	r1, [r7, #4]
 80026a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026a6:	4613      	mov	r3, r2
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	440b      	add	r3, r1
 80026b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b01      	cmp	r3, #1
 80026b8:	d105      	bne.n	80026c6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 fb27 	bl	8002d14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c8:	3301      	adds	r3, #1
 80026ca:	627b      	str	r3, [r7, #36]	; 0x24
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d3e5      	bcc.n	80026a2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f002 fd60 	bl	80051a0 <USB_ReadInterrupts>
 80026e0:	4603      	mov	r3, r0
 80026e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026ea:	d13b      	bne.n	8002764 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80026ec:	2301      	movs	r3, #1
 80026ee:	627b      	str	r3, [r7, #36]	; 0x24
 80026f0:	e02b      	b.n	800274a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	015a      	lsls	r2, r3, #5
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	4413      	add	r3, r2
 80026fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002706:	4613      	mov	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	3340      	adds	r3, #64	; 0x40
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d115      	bne.n	8002744 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002718:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800271a:	2b00      	cmp	r3, #0
 800271c:	da12      	bge.n	8002744 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800271e:	6879      	ldr	r1, [r7, #4]
 8002720:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	333f      	adds	r3, #63	; 0x3f
 800272e:	2201      	movs	r2, #1
 8002730:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	b2db      	uxtb	r3, r3
 8002736:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800273a:	b2db      	uxtb	r3, r3
 800273c:	4619      	mov	r1, r3
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 fae8 	bl	8002d14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	3301      	adds	r3, #1
 8002748:	627b      	str	r3, [r7, #36]	; 0x24
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002750:	429a      	cmp	r2, r3
 8002752:	d3ce      	bcc.n	80026f2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695a      	ldr	r2, [r3, #20]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002762:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f002 fd19 	bl	80051a0 <USB_ReadInterrupts>
 800276e:	4603      	mov	r3, r0
 8002770:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002774:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002778:	d155      	bne.n	8002826 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800277a:	2301      	movs	r3, #1
 800277c:	627b      	str	r3, [r7, #36]	; 0x24
 800277e:	e045      	b.n	800280c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002794:	4613      	mov	r3, r2
 8002796:	00db      	lsls	r3, r3, #3
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	440b      	add	r3, r1
 800279e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d12e      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	da2b      	bge.n	8002806 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80027ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80027be:	429a      	cmp	r2, r3
 80027c0:	d121      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027c6:	4613      	mov	r3, r2
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	4413      	add	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80027d4:	2201      	movs	r2, #1
 80027d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80027d8:	6a3b      	ldr	r3, [r7, #32]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80027e0:	6a3b      	ldr	r3, [r7, #32]
 80027e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	695b      	ldr	r3, [r3, #20]
 80027e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	69fa      	ldr	r2, [r7, #28]
 80027fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002802:	6053      	str	r3, [r2, #4]
            break;
 8002804:	e007      	b.n	8002816 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002808:	3301      	adds	r3, #1
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002812:	429a      	cmp	r2, r3
 8002814:	d3b4      	bcc.n	8002780 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	695a      	ldr	r2, [r3, #20]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002824:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f002 fcb8 	bl	80051a0 <USB_ReadInterrupts>
 8002830:	4603      	mov	r3, r0
 8002832:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283a:	d10a      	bne.n	8002852 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	f005 f9e3 	bl	8007c08 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	695a      	ldr	r2, [r3, #20]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 fca2 	bl	80051a0 <USB_ReadInterrupts>
 800285c:	4603      	mov	r3, r0
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b04      	cmp	r3, #4
 8002864:	d115      	bne.n	8002892 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	f003 0304 	and.w	r3, r3, #4
 8002874:	2b00      	cmp	r3, #0
 8002876:	d002      	beq.n	800287e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f005 f9d3 	bl	8007c24 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6859      	ldr	r1, [r3, #4]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	430a      	orrs	r2, r1
 800288c:	605a      	str	r2, [r3, #4]
 800288e:	e000      	b.n	8002892 <HAL_PCD_IRQHandler+0x938>
      return;
 8002890:	bf00      	nop
    }
  }
}
 8002892:	3734      	adds	r7, #52	; 0x34
 8002894:	46bd      	mov	sp, r7
 8002896:	bd90      	pop	{r4, r7, pc}

08002898 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d101      	bne.n	80028b2 <HAL_PCD_SetAddress+0x1a>
 80028ae:	2302      	movs	r3, #2
 80028b0:	e013      	b.n	80028da <HAL_PCD_SetAddress+0x42>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2201      	movs	r2, #1
 80028b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f002 fc00 	bl	80050d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}

080028e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80028e2:	b580      	push	{r7, lr}
 80028e4:	b084      	sub	sp, #16
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	4608      	mov	r0, r1
 80028ec:	4611      	mov	r1, r2
 80028ee:	461a      	mov	r2, r3
 80028f0:	4603      	mov	r3, r0
 80028f2:	70fb      	strb	r3, [r7, #3]
 80028f4:	460b      	mov	r3, r1
 80028f6:	803b      	strh	r3, [r7, #0]
 80028f8:	4613      	mov	r3, r2
 80028fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80028fc:	2300      	movs	r3, #0
 80028fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002900:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002904:	2b00      	cmp	r3, #0
 8002906:	da0f      	bge.n	8002928 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	f003 020f 	and.w	r2, r3, #15
 800290e:	4613      	mov	r3, r2
 8002910:	00db      	lsls	r3, r3, #3
 8002912:	4413      	add	r3, r2
 8002914:	009b      	lsls	r3, r3, #2
 8002916:	3338      	adds	r3, #56	; 0x38
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	4413      	add	r3, r2
 800291c:	3304      	adds	r3, #4
 800291e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	705a      	strb	r2, [r3, #1]
 8002926:	e00f      	b.n	8002948 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002928:	78fb      	ldrb	r3, [r7, #3]
 800292a:	f003 020f 	and.w	r2, r3, #15
 800292e:	4613      	mov	r3, r2
 8002930:	00db      	lsls	r3, r3, #3
 8002932:	4413      	add	r3, r2
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	4413      	add	r3, r2
 800293e:	3304      	adds	r3, #4
 8002940:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002948:	78fb      	ldrb	r3, [r7, #3]
 800294a:	f003 030f 	and.w	r3, r3, #15
 800294e:	b2da      	uxtb	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002954:	883a      	ldrh	r2, [r7, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	78ba      	ldrb	r2, [r7, #2]
 800295e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	785b      	ldrb	r3, [r3, #1]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d004      	beq.n	8002972 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	b29a      	uxth	r2, r3
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002972:	78bb      	ldrb	r3, [r7, #2]
 8002974:	2b02      	cmp	r3, #2
 8002976:	d102      	bne.n	800297e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_PCD_EP_Open+0xaa>
 8002988:	2302      	movs	r3, #2
 800298a:	e00e      	b.n	80029aa <HAL_PCD_EP_Open+0xc8>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	68f9      	ldr	r1, [r7, #12]
 800299a:	4618      	mov	r0, r3
 800299c:	f001 fc80 	bl	80042a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80029a8:	7afb      	ldrb	r3, [r7, #11]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3710      	adds	r7, #16
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b084      	sub	sp, #16
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	460b      	mov	r3, r1
 80029bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80029be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	da0f      	bge.n	80029e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	f003 020f 	and.w	r2, r3, #15
 80029cc:	4613      	mov	r3, r2
 80029ce:	00db      	lsls	r3, r3, #3
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	3338      	adds	r3, #56	; 0x38
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	4413      	add	r3, r2
 80029da:	3304      	adds	r3, #4
 80029dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2201      	movs	r2, #1
 80029e2:	705a      	strb	r2, [r3, #1]
 80029e4:	e00f      	b.n	8002a06 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80029e6:	78fb      	ldrb	r3, [r7, #3]
 80029e8:	f003 020f 	and.w	r2, r3, #15
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	4413      	add	r3, r2
 80029fc:	3304      	adds	r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002a06:	78fb      	ldrb	r3, [r7, #3]
 8002a08:	f003 030f 	and.w	r3, r3, #15
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a18:	2b01      	cmp	r3, #1
 8002a1a:	d101      	bne.n	8002a20 <HAL_PCD_EP_Close+0x6e>
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	e00e      	b.n	8002a3e <HAL_PCD_EP_Close+0x8c>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68f9      	ldr	r1, [r7, #12]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f001 fcbe 	bl	80043b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3710      	adds	r7, #16
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}

08002a46 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002a46:	b580      	push	{r7, lr}
 8002a48:	b086      	sub	sp, #24
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	607a      	str	r2, [r7, #4]
 8002a50:	603b      	str	r3, [r7, #0]
 8002a52:	460b      	mov	r3, r1
 8002a54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	f003 020f 	and.w	r2, r3, #15
 8002a5c:	4613      	mov	r3, r2
 8002a5e:	00db      	lsls	r3, r3, #3
 8002a60:	4413      	add	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3304      	adds	r3, #4
 8002a6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	2200      	movs	r2, #0
 8002a86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a88:	7afb      	ldrb	r3, [r7, #11]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d102      	bne.n	8002aa2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002aa2:	7afb      	ldrb	r3, [r7, #11]
 8002aa4:	f003 030f 	and.w	r3, r3, #15
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d109      	bne.n	8002ac0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6818      	ldr	r0, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	691b      	ldr	r3, [r3, #16]
 8002ab4:	b2db      	uxtb	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6979      	ldr	r1, [r7, #20]
 8002aba:	f001 ff9d 	bl	80049f8 <USB_EP0StartXfer>
 8002abe:	e008      	b.n	8002ad2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	461a      	mov	r2, r3
 8002acc:	6979      	ldr	r1, [r7, #20]
 8002ace:	f001 fd4b 	bl	8004568 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ad2:	2300      	movs	r3, #0
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3718      	adds	r7, #24
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}

08002adc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002ae8:	78fb      	ldrb	r3, [r7, #3]
 8002aea:	f003 020f 	and.w	r2, r3, #15
 8002aee:	6879      	ldr	r1, [r7, #4]
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002afe:	681b      	ldr	r3, [r3, #0]
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b086      	sub	sp, #24
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	603b      	str	r3, [r7, #0]
 8002b18:	460b      	mov	r3, r1
 8002b1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b1c:	7afb      	ldrb	r3, [r7, #11]
 8002b1e:	f003 020f 	and.w	r2, r3, #15
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	3338      	adds	r3, #56	; 0x38
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	3304      	adds	r3, #4
 8002b32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	2200      	movs	r2, #0
 8002b44:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b4c:	7afb      	ldrb	r3, [r7, #11]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	b2da      	uxtb	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d102      	bne.n	8002b66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002b66:	7afb      	ldrb	r3, [r7, #11]
 8002b68:	f003 030f 	and.w	r3, r3, #15
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d109      	bne.n	8002b84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6818      	ldr	r0, [r3, #0]
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	461a      	mov	r2, r3
 8002b7c:	6979      	ldr	r1, [r7, #20]
 8002b7e:	f001 ff3b 	bl	80049f8 <USB_EP0StartXfer>
 8002b82:	e008      	b.n	8002b96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6818      	ldr	r0, [r3, #0]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691b      	ldr	r3, [r3, #16]
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	461a      	mov	r2, r3
 8002b90:	6979      	ldr	r1, [r7, #20]
 8002b92:	f001 fce9 	bl	8004568 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
 8002ba8:	460b      	mov	r3, r1
 8002baa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002bac:	78fb      	ldrb	r3, [r7, #3]
 8002bae:	f003 020f 	and.w	r2, r3, #15
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d901      	bls.n	8002bbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e050      	b.n	8002c60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002bbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	da0f      	bge.n	8002be6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bc6:	78fb      	ldrb	r3, [r7, #3]
 8002bc8:	f003 020f 	and.w	r2, r3, #15
 8002bcc:	4613      	mov	r3, r2
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	4413      	add	r3, r2
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	3338      	adds	r3, #56	; 0x38
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	4413      	add	r3, r2
 8002bda:	3304      	adds	r3, #4
 8002bdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	2201      	movs	r2, #1
 8002be2:	705a      	strb	r2, [r3, #1]
 8002be4:	e00d      	b.n	8002c02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002be6:	78fa      	ldrb	r2, [r7, #3]
 8002be8:	4613      	mov	r3, r2
 8002bea:	00db      	lsls	r3, r3, #3
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	3304      	adds	r3, #4
 8002bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	2201      	movs	r2, #1
 8002c06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002c08:	78fb      	ldrb	r3, [r7, #3]
 8002c0a:	f003 030f 	and.w	r3, r3, #15
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d101      	bne.n	8002c22 <HAL_PCD_EP_SetStall+0x82>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e01e      	b.n	8002c60 <HAL_PCD_EP_SetStall+0xc0>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68f9      	ldr	r1, [r7, #12]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f002 f979 	bl	8004f28 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002c36:	78fb      	ldrb	r3, [r7, #3]
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	691b      	ldr	r3, [r3, #16]
 8002c48:	b2d9      	uxtb	r1, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c50:	461a      	mov	r2, r3
 8002c52:	f002 fb69 	bl	8005328 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	460b      	mov	r3, r1
 8002c72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002c74:	78fb      	ldrb	r3, [r7, #3]
 8002c76:	f003 020f 	and.w	r2, r3, #15
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d901      	bls.n	8002c86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e042      	b.n	8002d0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002c86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da0f      	bge.n	8002cae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c8e:	78fb      	ldrb	r3, [r7, #3]
 8002c90:	f003 020f 	and.w	r2, r3, #15
 8002c94:	4613      	mov	r3, r2
 8002c96:	00db      	lsls	r3, r3, #3
 8002c98:	4413      	add	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	3338      	adds	r3, #56	; 0x38
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	705a      	strb	r2, [r3, #1]
 8002cac:	e00f      	b.n	8002cce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	f003 020f 	and.w	r2, r3, #15
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3304      	adds	r3, #4
 8002cc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002cd4:	78fb      	ldrb	r3, [r7, #3]
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	b2da      	uxtb	r2, r3
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d101      	bne.n	8002cee <HAL_PCD_EP_ClrStall+0x86>
 8002cea:	2302      	movs	r3, #2
 8002cec:	e00e      	b.n	8002d0c <HAL_PCD_EP_ClrStall+0xa4>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	68f9      	ldr	r1, [r7, #12]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f002 f981 	bl	8005004 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3710      	adds	r7, #16
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}

08002d14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002d20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	da0c      	bge.n	8002d42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	f003 020f 	and.w	r2, r3, #15
 8002d2e:	4613      	mov	r3, r2
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	4413      	add	r3, r2
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	3338      	adds	r3, #56	; 0x38
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	3304      	adds	r3, #4
 8002d3e:	60fb      	str	r3, [r7, #12]
 8002d40:	e00c      	b.n	8002d5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d42:	78fb      	ldrb	r3, [r7, #3]
 8002d44:	f003 020f 	and.w	r2, r3, #15
 8002d48:	4613      	mov	r3, r2
 8002d4a:	00db      	lsls	r3, r3, #3
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	4413      	add	r3, r2
 8002d58:	3304      	adds	r3, #4
 8002d5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68f9      	ldr	r1, [r7, #12]
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 ffa0 	bl	8004ca8 <USB_EPStopXfer>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3710      	adds	r7, #16
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}

08002d76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002d76:	b580      	push	{r7, lr}
 8002d78:	b08a      	sub	sp, #40	; 0x28
 8002d7a:	af02      	add	r7, sp, #8
 8002d7c:	6078      	str	r0, [r7, #4]
 8002d7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	3338      	adds	r3, #56	; 0x38
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	4413      	add	r3, r2
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	6a1a      	ldr	r2, [r3, #32]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d901      	bls.n	8002dae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e06c      	b.n	8002e88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	699a      	ldr	r2, [r3, #24]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	1ad3      	subs	r3, r2, r3
 8002db8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	69fa      	ldr	r2, [r7, #28]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d902      	bls.n	8002dca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3303      	adds	r3, #3
 8002dce:	089b      	lsrs	r3, r3, #2
 8002dd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002dd2:	e02b      	b.n	8002e2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	699a      	ldr	r2, [r3, #24]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	1ad3      	subs	r3, r2, r3
 8002dde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	69fa      	ldr	r2, [r7, #28]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d902      	bls.n	8002df0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	3303      	adds	r3, #3
 8002df4:	089b      	lsrs	r3, r3, #2
 8002df6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	6919      	ldr	r1, [r3, #16]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002e08:	b2db      	uxtb	r3, r3
 8002e0a:	9300      	str	r3, [sp, #0]
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f001 fff4 	bl	8004dfc <USB_WritePacket>

    ep->xfer_buff  += len;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	691a      	ldr	r2, [r3, #16]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	441a      	add	r2, r3
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6a1a      	ldr	r2, [r3, #32]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	441a      	add	r2, r3
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e38:	699b      	ldr	r3, [r3, #24]
 8002e3a:	b29b      	uxth	r3, r3
 8002e3c:	69ba      	ldr	r2, [r7, #24]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d809      	bhi.n	8002e56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a1a      	ldr	r2, [r3, #32]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d203      	bcs.n	8002e56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1be      	bne.n	8002dd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	699a      	ldr	r2, [r3, #24]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a1b      	ldr	r3, [r3, #32]
 8002e5e:	429a      	cmp	r2, r3
 8002e60:	d811      	bhi.n	8002e86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	f003 030f 	and.w	r3, r3, #15
 8002e68:	2201      	movs	r2, #1
 8002e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	43db      	mvns	r3, r3
 8002e7c:	6939      	ldr	r1, [r7, #16]
 8002e7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e82:	4013      	ands	r3, r2
 8002e84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3720      	adds	r7, #32
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}

08002e90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b088      	sub	sp, #32
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	333c      	adds	r3, #60	; 0x3c
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	015a      	lsls	r2, r3, #5
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	691b      	ldr	r3, [r3, #16]
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d17b      	bne.n	8002fbe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f003 0308 	and.w	r3, r3, #8
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d015      	beq.n	8002efc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	4a61      	ldr	r2, [pc, #388]	; (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	f240 80b9 	bls.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 80b3 	beq.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	015a      	lsls	r2, r3, #5
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	4413      	add	r3, r2
 8002eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ef8:	6093      	str	r3, [r2, #8]
 8002efa:	e0a7      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	f003 0320 	and.w	r3, r3, #32
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d009      	beq.n	8002f1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f12:	461a      	mov	r2, r3
 8002f14:	2320      	movs	r3, #32
 8002f16:	6093      	str	r3, [r2, #8]
 8002f18:	e098      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f040 8093 	bne.w	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	4a4b      	ldr	r2, [pc, #300]	; (8003058 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d90f      	bls.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f44:	461a      	mov	r2, r3
 8002f46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f4a:	6093      	str	r3, [r2, #8]
 8002f4c:	e07e      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	4613      	mov	r3, r2
 8002f52:	00db      	lsls	r3, r3, #3
 8002f54:	4413      	add	r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	4413      	add	r3, r2
 8002f60:	3304      	adds	r3, #4
 8002f62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	69da      	ldr	r2, [r3, #28]
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	0159      	lsls	r1, r3, #5
 8002f6c:	69bb      	ldr	r3, [r7, #24]
 8002f6e:	440b      	add	r3, r1
 8002f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	1ad2      	subs	r2, r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d114      	bne.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	699b      	ldr	r3, [r3, #24]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d109      	bne.n	8002fa2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f98:	461a      	mov	r2, r3
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	f002 f9c4 	bl	8005328 <USB_EP0_OutStart>
 8002fa0:	e006      	b.n	8002fb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	b2db      	uxtb	r3, r3
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f004 fd6c 	bl	8007a94 <HAL_PCD_DataOutStageCallback>
 8002fbc:	e046      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002fbe:	697b      	ldr	r3, [r7, #20]
 8002fc0:	4a26      	ldr	r2, [pc, #152]	; (800305c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d124      	bne.n	8003010 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00a      	beq.n	8002fe6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	015a      	lsls	r2, r3, #5
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	4413      	add	r3, r2
 8002fd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fdc:	461a      	mov	r2, r3
 8002fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fe2:	6093      	str	r3, [r2, #8]
 8002fe4:	e032      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	f003 0320 	and.w	r3, r3, #32
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d008      	beq.n	8003002 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	2320      	movs	r3, #32
 8003000:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	b2db      	uxtb	r3, r3
 8003006:	4619      	mov	r1, r3
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f004 fd43 	bl	8007a94 <HAL_PCD_DataOutStageCallback>
 800300e:	e01d      	b.n	800304c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d114      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003016:	6879      	ldr	r1, [r7, #4]
 8003018:	683a      	ldr	r2, [r7, #0]
 800301a:	4613      	mov	r3, r2
 800301c:	00db      	lsls	r3, r3, #3
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d108      	bne.n	8003040 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6818      	ldr	r0, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003038:	461a      	mov	r2, r3
 800303a:	2100      	movs	r1, #0
 800303c:	f002 f974 	bl	8005328 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2db      	uxtb	r3, r3
 8003044:	4619      	mov	r1, r3
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f004 fd24 	bl	8007a94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3720      	adds	r7, #32
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	4f54300a 	.word	0x4f54300a
 800305c:	4f54310a 	.word	0x4f54310a

08003060 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	333c      	adds	r3, #60	; 0x3c
 8003078:	3304      	adds	r3, #4
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800307e:	683b      	ldr	r3, [r7, #0]
 8003080:	015a      	lsls	r2, r3, #5
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4413      	add	r3, r2
 8003086:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	4a15      	ldr	r2, [pc, #84]	; (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d90e      	bls.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	d009      	beq.n	80030b4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	015a      	lsls	r2, r3, #5
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	4413      	add	r3, r2
 80030a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030ac:	461a      	mov	r2, r3
 80030ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030b2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f004 fcdb 	bl	8007a70 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a0a      	ldr	r2, [pc, #40]	; (80030e8 <PCD_EP_OutSetupPacket_int+0x88>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d90c      	bls.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d108      	bne.n	80030dc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80030d4:	461a      	mov	r2, r3
 80030d6:	2101      	movs	r1, #1
 80030d8:	f002 f926 	bl	8005328 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3718      	adds	r7, #24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	4f54300a 	.word	0x4f54300a

080030ec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	460b      	mov	r3, r1
 80030f6:	70fb      	strb	r3, [r7, #3]
 80030f8:	4613      	mov	r3, r2
 80030fa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003102:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003104:	78fb      	ldrb	r3, [r7, #3]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d107      	bne.n	800311a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800310a:	883b      	ldrh	r3, [r7, #0]
 800310c:	0419      	lsls	r1, r3, #16
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68ba      	ldr	r2, [r7, #8]
 8003114:	430a      	orrs	r2, r1
 8003116:	629a      	str	r2, [r3, #40]	; 0x28
 8003118:	e028      	b.n	800316c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003120:	0c1b      	lsrs	r3, r3, #16
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	4413      	add	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
 800312c:	e00d      	b.n	800314a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	7bfb      	ldrb	r3, [r7, #15]
 8003134:	3340      	adds	r3, #64	; 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	0c1b      	lsrs	r3, r3, #16
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	4413      	add	r3, r2
 8003142:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003144:	7bfb      	ldrb	r3, [r7, #15]
 8003146:	3301      	adds	r3, #1
 8003148:	73fb      	strb	r3, [r7, #15]
 800314a:	7bfa      	ldrb	r2, [r7, #15]
 800314c:	78fb      	ldrb	r3, [r7, #3]
 800314e:	3b01      	subs	r3, #1
 8003150:	429a      	cmp	r2, r3
 8003152:	d3ec      	bcc.n	800312e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003154:	883b      	ldrh	r3, [r7, #0]
 8003156:	0418      	lsls	r0, r3, #16
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6819      	ldr	r1, [r3, #0]
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	3b01      	subs	r3, #1
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	4302      	orrs	r2, r0
 8003164:	3340      	adds	r3, #64	; 0x40
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3714      	adds	r7, #20
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	370c      	adds	r7, #12
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	460b      	mov	r3, r1
 80031a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e267      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e242      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fd fede 	bl	800102c <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7fd feda 	bl	800102c <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e207      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7fd feca 	bl	800102c <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7fd fec6 	bl	800102c <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f3      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c7      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7fd fe7f 	bl	800102c <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7fd fe7b 	bl	800102c <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a8      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7fd fe5e 	bl	800102c <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7fd fe5a 	bl	800102c <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e187      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd fe3e 	bl	800102c <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fd fe3a 	bl	800102c <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e167      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7fd fe27 	bl	800102c <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00e      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7fd fe23 	bl	800102c <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d907      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e150      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ea      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b77      	ldr	r3, [pc, #476]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7fd fde3 	bl	800102c <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7fd fddf 	bl	800102c <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e10c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x2ea>
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x30c>
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 80034c0:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7fd fda4 	bl	800102c <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7fd fda0 	bl	800102c <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0cb      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x334>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7fd fd8e 	bl	800102c <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7fd fd8a 	bl	800102c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b5      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a1 	beq.w	8003694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d05c      	beq.n	8003618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d141      	bne.n	80035ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7fd fd5e 	bl	800102c <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7fd fd5a 	bl	800102c <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e087      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7fd fd33 	bl	800102c <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7fd fd2f 	bl	800102c <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e05c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x416>
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7fd fd1c 	bl	800102c <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7fd fd18 	bl	800102c <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e045      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x444>
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e038      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d028      	beq.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fd fc4a 	bl	800102c <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fd fc46 	bl	800102c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fd fbaa 	bl	8000fa4 <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08008098 	.word	0x08008098
 8003868:	20000000 	.word	0x20000000
 800386c:	20000004 	.word	0x20000004

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b090      	sub	sp, #64	; 0x40
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	2300      	movs	r3, #0
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003880:	2300      	movs	r3, #0
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80a1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038a8:	e09b      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ae:	e098      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	627a      	str	r2, [r7, #36]	; 0x24
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d8:	2100      	movs	r1, #0
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038dc:	fb03 f201 	mul.w	r2, r3, r1
 80038e0:	2300      	movs	r3, #0
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	4a43      	ldr	r2, [pc, #268]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ea:	fba0 1202 	umull	r1, r2, r0, r2
 80038ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f0:	460a      	mov	r2, r1
 80038f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80038f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f6:	4413      	add	r3, r2
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	2200      	movs	r2, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800390a:	f7fc fc65 	bl	80001d8 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4613      	mov	r3, r2
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	e053      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	617a      	str	r2, [r7, #20]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800392a:	f04f 0b00 	mov.w	fp, #0
 800392e:	4652      	mov	r2, sl
 8003930:	465b      	mov	r3, fp
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003940:	0150      	lsls	r0, r2, #5
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	ebb2 080a 	subs.w	r8, r2, sl
 800394a:	eb63 090b 	sbc.w	r9, r3, fp
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800395a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800395e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003962:	ebb2 0408 	subs.w	r4, r2, r8
 8003966:	eb63 0509 	sbc.w	r5, r3, r9
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	00eb      	lsls	r3, r5, #3
 8003974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003978:	00e2      	lsls	r2, r4, #3
 800397a:	4614      	mov	r4, r2
 800397c:	461d      	mov	r5, r3
 800397e:	eb14 030a 	adds.w	r3, r4, sl
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	eb45 030b 	adc.w	r3, r5, fp
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	2200      	movs	r2, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b4:	f7fc fc10 	bl	80001d8 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3740      	adds	r7, #64	; 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	017d7840 	.word	0x017d7840

080039fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80039fc:	b480      	push	{r7}
 80039fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a00:	4b03      	ldr	r3, [pc, #12]	; (8003a10 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a02:	681b      	ldr	r3, [r3, #0]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	20000000 	.word	0x20000000

08003a14 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b082      	sub	sp, #8
 8003a18:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a1a:	f7fd fb07 	bl	800102c <HAL_GetTick>
 8003a1e:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8003a20:	4b5d      	ldr	r3, [pc, #372]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a5c      	ldr	r2, [pc, #368]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a2e:	f7fd fafd 	bl	800102c <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e0a7      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8003a40:	4b55      	ldr	r3, [pc, #340]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0f0      	beq.n	8003a2e <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8003a4c:	4b52      	ldr	r3, [pc, #328]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a51      	ldr	r2, [pc, #324]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a56:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a58:	f7fd fae8 	bl	800102c <HAL_GetTick>
 8003a5c:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8003a5e:	4b4e      	ldr	r3, [pc, #312]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003a64:	e00a      	b.n	8003a7c <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a66:	f7fd fae1 	bl	800102c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e089      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8003a7c:	4b46      	ldr	r3, [pc, #280]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f003 030c 	and.w	r3, r3, #12
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ee      	bne.n	8003a66 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003a88:	f7fd fad0 	bl	800102c <HAL_GetTick>
 8003a8c:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8003a8e:	4b42      	ldr	r3, [pc, #264]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a41      	ldr	r2, [pc, #260]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003a94:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8003a98:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003a9a:	e008      	b.n	8003aae <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a9c:	f7fd fac6 	bl	800102c <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b64      	cmp	r3, #100	; 0x64
 8003aa8:	d901      	bls.n	8003aae <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e070      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8003aae:	4b3a      	ldr	r3, [pc, #232]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1f0      	bne.n	8003a9c <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003aba:	f7fd fab7 	bl	800102c <HAL_GetTick>
 8003abe:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8003ac0:	4b35      	ldr	r3, [pc, #212]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a34      	ldr	r2, [pc, #208]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003ac6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003aca:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003acc:	e008      	b.n	8003ae0 <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ace:	f7fd faad 	bl	800102c <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d901      	bls.n	8003ae0 <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8003adc:	2303      	movs	r3, #3
 8003ade:	e057      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8003ae0:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f0      	bne.n	8003ace <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8003aec:	f7fd fa9e 	bl	800102c <HAL_GetTick>
 8003af0:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8003af2:	4b29      	ldr	r3, [pc, #164]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a28      	ldr	r2, [pc, #160]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003af8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003afc:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003afe:	e008      	b.n	8003b12 <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003b00:	f7fd fa94 	bl	800102c <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	1ad3      	subs	r3, r2, r3
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e03e      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8003b12:	4b21      	ldr	r3, [pc, #132]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1f0      	bne.n	8003b00 <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8003b1e:	4b1e      	ldr	r3, [pc, #120]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b20:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <HAL_RCC_DeInit+0x188>)
 8003b22:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8003b24:	4b1c      	ldr	r3, [pc, #112]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b26:	4a1e      	ldr	r2, [pc, #120]	; (8003ba0 <HAL_RCC_DeInit+0x18c>)
 8003b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8003b2c:	4b1a      	ldr	r3, [pc, #104]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	4a19      	ldr	r2, [pc, #100]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b32:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8003b36:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8003b38:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4a16      	ldr	r2, [pc, #88]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b42:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b46:	68db      	ldr	r3, [r3, #12]
 8003b48:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b4a:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8003b4e:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8003b50:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a10      	ldr	r2, [pc, #64]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b5a:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8003b5c:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b60:	4a0d      	ldr	r2, [pc, #52]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b62:	f023 0301 	bic.w	r3, r3, #1
 8003b66:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b6c:	4a0a      	ldr	r2, [pc, #40]	; (8003b98 <HAL_RCC_DeInit+0x184>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b72:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8003b74:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <HAL_RCC_DeInit+0x190>)
 8003b76:	4a0c      	ldr	r2, [pc, #48]	; (8003ba8 <HAL_RCC_DeInit+0x194>)
 8003b78:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b7a:	4b0c      	ldr	r3, [pc, #48]	; (8003bac <HAL_RCC_DeInit+0x198>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fd fa10 	bl	8000fa4 <HAL_InitTick>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d001      	beq.n	8003b8e <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e000      	b.n	8003b90 <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	04003010 	.word	0x04003010
 8003ba0:	20003010 	.word	0x20003010
 8003ba4:	20000000 	.word	0x20000000
 8003ba8:	00f42400 	.word	0x00f42400
 8003bac:	20000004 	.word	0x20000004

08003bb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003bb0:	b084      	sub	sp, #16
 8003bb2:	b580      	push	{r7, lr}
 8003bb4:	b084      	sub	sp, #16
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6078      	str	r0, [r7, #4]
 8003bba:	f107 001c 	add.w	r0, r7, #28
 8003bbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003bc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d122      	bne.n	8003c0e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003bdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d105      	bne.n	8003c02 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f001 fbee 	bl	80053e4 <USB_CoreReset>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e01a      	b.n	8003c44 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f001 fbe2 	bl	80053e4 <USB_CoreReset>
 8003c20:	4603      	mov	r3, r0
 8003c22:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003c24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d106      	bne.n	8003c38 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	639a      	str	r2, [r3, #56]	; 0x38
 8003c36:	e005      	b.n	8003c44 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10b      	bne.n	8003c62 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f043 0206 	orr.w	r2, r3, #6
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3710      	adds	r7, #16
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003c6e:	b004      	add	sp, #16
 8003c70:	4770      	bx	lr
	...

08003c74 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d165      	bne.n	8003d54 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003c88:	68bb      	ldr	r3, [r7, #8]
 8003c8a:	4a41      	ldr	r2, [pc, #260]	; (8003d90 <USB_SetTurnaroundTime+0x11c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d906      	bls.n	8003c9e <USB_SetTurnaroundTime+0x2a>
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	4a40      	ldr	r2, [pc, #256]	; (8003d94 <USB_SetTurnaroundTime+0x120>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d202      	bcs.n	8003c9e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003c98:	230f      	movs	r3, #15
 8003c9a:	617b      	str	r3, [r7, #20]
 8003c9c:	e062      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	4a3c      	ldr	r2, [pc, #240]	; (8003d94 <USB_SetTurnaroundTime+0x120>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d306      	bcc.n	8003cb4 <USB_SetTurnaroundTime+0x40>
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	4a3b      	ldr	r2, [pc, #236]	; (8003d98 <USB_SetTurnaroundTime+0x124>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d202      	bcs.n	8003cb4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003cae:	230e      	movs	r3, #14
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	e057      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	4a38      	ldr	r2, [pc, #224]	; (8003d98 <USB_SetTurnaroundTime+0x124>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d306      	bcc.n	8003cca <USB_SetTurnaroundTime+0x56>
 8003cbc:	68bb      	ldr	r3, [r7, #8]
 8003cbe:	4a37      	ldr	r2, [pc, #220]	; (8003d9c <USB_SetTurnaroundTime+0x128>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d202      	bcs.n	8003cca <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003cc4:	230d      	movs	r3, #13
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	e04c      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	4a33      	ldr	r2, [pc, #204]	; (8003d9c <USB_SetTurnaroundTime+0x128>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d306      	bcc.n	8003ce0 <USB_SetTurnaroundTime+0x6c>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	4a32      	ldr	r2, [pc, #200]	; (8003da0 <USB_SetTurnaroundTime+0x12c>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d802      	bhi.n	8003ce0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003cda:	230c      	movs	r3, #12
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	e041      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4a2f      	ldr	r2, [pc, #188]	; (8003da0 <USB_SetTurnaroundTime+0x12c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d906      	bls.n	8003cf6 <USB_SetTurnaroundTime+0x82>
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4a2e      	ldr	r2, [pc, #184]	; (8003da4 <USB_SetTurnaroundTime+0x130>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d802      	bhi.n	8003cf6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003cf0:	230b      	movs	r3, #11
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	e036      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	4a2a      	ldr	r2, [pc, #168]	; (8003da4 <USB_SetTurnaroundTime+0x130>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d906      	bls.n	8003d0c <USB_SetTurnaroundTime+0x98>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4a29      	ldr	r2, [pc, #164]	; (8003da8 <USB_SetTurnaroundTime+0x134>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d802      	bhi.n	8003d0c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d06:	230a      	movs	r3, #10
 8003d08:	617b      	str	r3, [r7, #20]
 8003d0a:	e02b      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a26      	ldr	r2, [pc, #152]	; (8003da8 <USB_SetTurnaroundTime+0x134>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0xae>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a25      	ldr	r2, [pc, #148]	; (8003dac <USB_SetTurnaroundTime+0x138>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d202      	bcs.n	8003d22 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d1c:	2309      	movs	r3, #9
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e020      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a21      	ldr	r2, [pc, #132]	; (8003dac <USB_SetTurnaroundTime+0x138>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d306      	bcc.n	8003d38 <USB_SetTurnaroundTime+0xc4>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a20      	ldr	r2, [pc, #128]	; (8003db0 <USB_SetTurnaroundTime+0x13c>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d802      	bhi.n	8003d38 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003d32:	2308      	movs	r3, #8
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e015      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a1d      	ldr	r2, [pc, #116]	; (8003db0 <USB_SetTurnaroundTime+0x13c>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d906      	bls.n	8003d4e <USB_SetTurnaroundTime+0xda>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a1c      	ldr	r2, [pc, #112]	; (8003db4 <USB_SetTurnaroundTime+0x140>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d202      	bcs.n	8003d4e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003d48:	2307      	movs	r3, #7
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e00a      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003d4e:	2306      	movs	r3, #6
 8003d50:	617b      	str	r3, [r7, #20]
 8003d52:	e007      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003d54:	79fb      	ldrb	r3, [r7, #7]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d102      	bne.n	8003d60 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003d5a:	2309      	movs	r3, #9
 8003d5c:	617b      	str	r3, [r7, #20]
 8003d5e:	e001      	b.n	8003d64 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003d60:	2309      	movs	r3, #9
 8003d62:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	68da      	ldr	r2, [r3, #12]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	029b      	lsls	r3, r3, #10
 8003d78:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003d7c:	431a      	orrs	r2, r3
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	00d8acbf 	.word	0x00d8acbf
 8003d94:	00e4e1c0 	.word	0x00e4e1c0
 8003d98:	00f42400 	.word	0x00f42400
 8003d9c:	01067380 	.word	0x01067380
 8003da0:	011a499f 	.word	0x011a499f
 8003da4:	01312cff 	.word	0x01312cff
 8003da8:	014ca43f 	.word	0x014ca43f
 8003dac:	016e3600 	.word	0x016e3600
 8003db0:	01a6ab1f 	.word	0x01a6ab1f
 8003db4:	01e84800 	.word	0x01e84800

08003db8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	689b      	ldr	r3, [r3, #8]
 8003dc4:	f043 0201 	orr.w	r2, r3, #1
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	f023 0201 	bic.w	r2, r3, #1
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003dee:	2300      	movs	r3, #0
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr

08003dfc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b084      	sub	sp, #16
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e18:	78fb      	ldrb	r3, [r7, #3]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d115      	bne.n	8003e4a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fd f90a 	bl	8001044 <HAL_Delay>
      ms++;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3301      	adds	r3, #1
 8003e34:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f001 fa45 	bl	80052c6 <USB_GetMode>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d01e      	beq.n	8003e80 <USB_SetCurrentMode+0x84>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b31      	cmp	r3, #49	; 0x31
 8003e46:	d9f0      	bls.n	8003e2a <USB_SetCurrentMode+0x2e>
 8003e48:	e01a      	b.n	8003e80 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003e4a:	78fb      	ldrb	r3, [r7, #3]
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d115      	bne.n	8003e7c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	f7fd f8f1 	bl	8001044 <HAL_Delay>
      ms++;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	3301      	adds	r3, #1
 8003e66:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f001 fa2c 	bl	80052c6 <USB_GetMode>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <USB_SetCurrentMode+0x84>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2b31      	cmp	r3, #49	; 0x31
 8003e78:	d9f0      	bls.n	8003e5c <USB_SetCurrentMode+0x60>
 8003e7a:	e001      	b.n	8003e80 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e005      	b.n	8003e8c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2b32      	cmp	r3, #50	; 0x32
 8003e84:	d101      	bne.n	8003e8a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e000      	b.n	8003e8c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3710      	adds	r7, #16
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e94:	b084      	sub	sp, #16
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b086      	sub	sp, #24
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003eae:	2300      	movs	r3, #0
 8003eb0:	613b      	str	r3, [r7, #16]
 8003eb2:	e009      	b.n	8003ec8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	3340      	adds	r3, #64	; 0x40
 8003eba:	009b      	lsls	r3, r3, #2
 8003ebc:	4413      	add	r3, r2
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	613b      	str	r3, [r7, #16]
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	2b0e      	cmp	r3, #14
 8003ecc:	d9f2      	bls.n	8003eb4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ece:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d11c      	bne.n	8003f0e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ee2:	f043 0302 	orr.w	r3, r3, #2
 8003ee6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f04:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	639a      	str	r2, [r3, #56]	; 0x38
 8003f0c:	e00b      	b.n	8003f26 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f1e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	2300      	movs	r3, #0
 8003f30:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	4619      	mov	r1, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f40:	461a      	mov	r2, r3
 8003f42:	680b      	ldr	r3, [r1, #0]
 8003f44:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d10c      	bne.n	8003f66 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003f4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d104      	bne.n	8003f5c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003f52:	2100      	movs	r1, #0
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 f965 	bl	8004224 <USB_SetDevSpeed>
 8003f5a:	e008      	b.n	8003f6e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003f5c:	2101      	movs	r1, #1
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f960 	bl	8004224 <USB_SetDevSpeed>
 8003f64:	e003      	b.n	8003f6e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003f66:	2103      	movs	r1, #3
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f95b 	bl	8004224 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003f6e:	2110      	movs	r1, #16
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f8f3 	bl	800415c <USB_FlushTxFifo>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d001      	beq.n	8003f80 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f91f 	bl	80041c4 <USB_FlushRxFifo>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f96:	461a      	mov	r2, r3
 8003f98:	2300      	movs	r3, #0
 8003f9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fae:	461a      	mov	r2, r3
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	613b      	str	r3, [r7, #16]
 8003fb8:	e043      	b.n	8004042 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	015a      	lsls	r2, r3, #5
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fcc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd0:	d118      	bne.n	8004004 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10a      	bne.n	8003fee <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	015a      	lsls	r2, r3, #5
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4413      	add	r3, r2
 8003fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	e013      	b.n	8004016 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	015a      	lsls	r2, r3, #5
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	4413      	add	r3, r2
 8003ff6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004000:	6013      	str	r3, [r2, #0]
 8004002:	e008      	b.n	8004016 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004010:	461a      	mov	r2, r3
 8004012:	2300      	movs	r3, #0
 8004014:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	4413      	add	r3, r2
 800401e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004022:	461a      	mov	r2, r3
 8004024:	2300      	movs	r3, #0
 8004026:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	461a      	mov	r2, r3
 8004036:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800403a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	3301      	adds	r3, #1
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	429a      	cmp	r2, r3
 8004048:	d3b7      	bcc.n	8003fba <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
 800404e:	e043      	b.n	80040d8 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004062:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004066:	d118      	bne.n	800409a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d10a      	bne.n	8004084 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	e013      	b.n	80040ac <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004090:	461a      	mov	r2, r3
 8004092:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004096:	6013      	str	r3, [r2, #0]
 8004098:	e008      	b.n	80040ac <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	015a      	lsls	r2, r3, #5
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	4413      	add	r3, r2
 80040a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a6:	461a      	mov	r2, r3
 80040a8:	2300      	movs	r3, #0
 80040aa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b8:	461a      	mov	r2, r3
 80040ba:	2300      	movs	r3, #0
 80040bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ca:	461a      	mov	r2, r3
 80040cc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80040d0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	3301      	adds	r3, #1
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d3b7      	bcc.n	8004050 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	68fa      	ldr	r2, [r7, #12]
 80040ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004104:	2b00      	cmp	r3, #0
 8004106:	d105      	bne.n	8004114 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	f043 0210 	orr.w	r2, r3, #16
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	699a      	ldr	r2, [r3, #24]
 8004118:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <USB_DevInit+0x2c4>)
 800411a:	4313      	orrs	r3, r2
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d005      	beq.n	8004132 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	f043 0208 	orr.w	r2, r3, #8
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	2b01      	cmp	r3, #1
 8004136:	d107      	bne.n	8004148 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004140:	f043 0304 	orr.w	r3, r3, #4
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004148:	7dfb      	ldrb	r3, [r7, #23]
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004154:	b004      	add	sp, #16
 8004156:	4770      	bx	lr
 8004158:	803c3800 	.word	0x803c3800

0800415c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800415c:	b480      	push	{r7}
 800415e:	b085      	sub	sp, #20
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004166:	2300      	movs	r3, #0
 8004168:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <USB_FlushTxFifo+0x64>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d901      	bls.n	800417c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e01b      	b.n	80041b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	daf2      	bge.n	800416a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004184:	2300      	movs	r3, #0
 8004186:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	019b      	lsls	r3, r3, #6
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	3301      	adds	r3, #1
 8004198:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4a08      	ldr	r2, [pc, #32]	; (80041c0 <USB_FlushTxFifo+0x64>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e006      	b.n	80041b4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	f003 0320 	and.w	r3, r3, #32
 80041ae:	2b20      	cmp	r3, #32
 80041b0:	d0f0      	beq.n	8004194 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr
 80041c0:	00030d40 	.word	0x00030d40

080041c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	3301      	adds	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	4a11      	ldr	r2, [pc, #68]	; (8004220 <USB_FlushRxFifo+0x5c>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d901      	bls.n	80041e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e018      	b.n	8004214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	691b      	ldr	r3, [r3, #16]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	daf2      	bge.n	80041d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2210      	movs	r2, #16
 80041f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	3301      	adds	r3, #1
 80041f8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	4a08      	ldr	r2, [pc, #32]	; (8004220 <USB_FlushRxFifo+0x5c>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e006      	b.n	8004214 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b10      	cmp	r3, #16
 8004210:	d0f0      	beq.n	80041f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004212:	2300      	movs	r3, #0
}
 8004214:	4618      	mov	r0, r3
 8004216:	3714      	adds	r7, #20
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	00030d40 	.word	0x00030d40

08004224 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	460b      	mov	r3, r1
 800422e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004244:	4313      	orrs	r3, r2
 8004246:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004248:	2300      	movs	r3, #0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004256:	b480      	push	{r7}
 8004258:	b087      	sub	sp, #28
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 0306 	and.w	r3, r3, #6
 800426e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004276:	2300      	movs	r3, #0
 8004278:	75fb      	strb	r3, [r7, #23]
 800427a:	e00a      	b.n	8004292 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b02      	cmp	r3, #2
 8004280:	d002      	beq.n	8004288 <USB_GetDevSpeed+0x32>
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	2b06      	cmp	r3, #6
 8004286:	d102      	bne.n	800428e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004288:	2302      	movs	r3, #2
 800428a:	75fb      	strb	r3, [r7, #23]
 800428c:	e001      	b.n	8004292 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800428e:	230f      	movs	r3, #15
 8004290:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004292:	7dfb      	ldrb	r3, [r7, #23]
}
 8004294:	4618      	mov	r0, r3
 8004296:	371c      	adds	r7, #28
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	785b      	ldrb	r3, [r3, #1]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d13a      	bne.n	8004332 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f003 030f 	and.w	r3, r3, #15
 80042cc:	2101      	movs	r1, #1
 80042ce:	fa01 f303 	lsl.w	r3, r1, r3
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	68f9      	ldr	r1, [r7, #12]
 80042d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042da:	4313      	orrs	r3, r2
 80042dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	015a      	lsls	r2, r3, #5
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	4413      	add	r3, r2
 80042e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d155      	bne.n	80043a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	791b      	ldrb	r3, [r3, #4]
 800430e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004310:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	059b      	lsls	r3, r3, #22
 8004316:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004318:	4313      	orrs	r3, r2
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	0151      	lsls	r1, r2, #5
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	440a      	add	r2, r1
 8004322:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004326:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800432a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	e036      	b.n	80043a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	2101      	movs	r1, #1
 8004344:	fa01 f303 	lsl.w	r3, r1, r3
 8004348:	041b      	lsls	r3, r3, #16
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004350:	4313      	orrs	r3, r2
 8004352:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	015a      	lsls	r2, r3, #5
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	4413      	add	r3, r2
 800435c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d11a      	bne.n	80043a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004386:	430b      	orrs	r3, r1
 8004388:	4313      	orrs	r3, r2
 800438a:	68ba      	ldr	r2, [r7, #8]
 800438c:	0151      	lsls	r1, r2, #5
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	440a      	add	r2, r1
 8004392:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800439a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3714      	adds	r7, #20
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
	...

080043b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b085      	sub	sp, #20
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	785b      	ldrb	r3, [r3, #1]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d161      	bne.n	8004490 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	015a      	lsls	r2, r3, #5
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	4413      	add	r3, r2
 80043d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80043de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80043e2:	d11f      	bne.n	8004424 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043e4:	68bb      	ldr	r3, [r7, #8]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	68ba      	ldr	r2, [r7, #8]
 80043f4:	0151      	lsls	r1, r2, #5
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	440a      	add	r2, r1
 80043fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004402:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	015a      	lsls	r2, r3, #5
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	68ba      	ldr	r2, [r7, #8]
 8004414:	0151      	lsls	r1, r2, #5
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	440a      	add	r2, r1
 800441a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004422:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	f003 030f 	and.w	r3, r3, #15
 8004434:	2101      	movs	r1, #1
 8004436:	fa01 f303 	lsl.w	r3, r1, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	43db      	mvns	r3, r3
 800443e:	68f9      	ldr	r1, [r7, #12]
 8004440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004444:	4013      	ands	r3, r2
 8004446:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	f003 030f 	and.w	r3, r3, #15
 8004458:	2101      	movs	r1, #1
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	b29b      	uxth	r3, r3
 8004460:	43db      	mvns	r3, r3
 8004462:	68f9      	ldr	r1, [r7, #12]
 8004464:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004468:	4013      	ands	r3, r2
 800446a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	0159      	lsls	r1, r3, #5
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	440b      	add	r3, r1
 8004482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004486:	4619      	mov	r1, r3
 8004488:	4b35      	ldr	r3, [pc, #212]	; (8004560 <USB_DeactivateEndpoint+0x1b0>)
 800448a:	4013      	ands	r3, r2
 800448c:	600b      	str	r3, [r1, #0]
 800448e:	e060      	b.n	8004552 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	015a      	lsls	r2, r3, #5
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	4413      	add	r3, r2
 8004498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80044a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80044a6:	d11f      	bne.n	80044e8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	015a      	lsls	r2, r3, #5
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	4413      	add	r3, r2
 80044b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	0151      	lsls	r1, r2, #5
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	440a      	add	r2, r1
 80044be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80044c6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80044e6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	f003 030f 	and.w	r3, r3, #15
 80044f8:	2101      	movs	r1, #1
 80044fa:	fa01 f303 	lsl.w	r3, r1, r3
 80044fe:	041b      	lsls	r3, r3, #16
 8004500:	43db      	mvns	r3, r3
 8004502:	68f9      	ldr	r1, [r7, #12]
 8004504:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004508:	4013      	ands	r3, r2
 800450a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	041b      	lsls	r3, r3, #16
 8004524:	43db      	mvns	r3, r3
 8004526:	68f9      	ldr	r1, [r7, #12]
 8004528:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452c:	4013      	ands	r3, r2
 800452e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	015a      	lsls	r2, r3, #5
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	4413      	add	r3, r2
 8004538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	0159      	lsls	r1, r3, #5
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	440b      	add	r3, r1
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	4619      	mov	r1, r3
 800454c:	4b05      	ldr	r3, [pc, #20]	; (8004564 <USB_DeactivateEndpoint+0x1b4>)
 800454e:	4013      	ands	r3, r2
 8004550:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004552:	2300      	movs	r3, #0
}
 8004554:	4618      	mov	r0, r3
 8004556:	3714      	adds	r7, #20
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	ec337800 	.word	0xec337800
 8004564:	eff37800 	.word	0xeff37800

08004568 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b08a      	sub	sp, #40	; 0x28
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	4613      	mov	r3, r2
 8004574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	785b      	ldrb	r3, [r3, #1]
 8004584:	2b01      	cmp	r3, #1
 8004586:	f040 815c 	bne.w	8004842 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d132      	bne.n	80045f8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004592:	69bb      	ldr	r3, [r7, #24]
 8004594:	015a      	lsls	r2, r3, #5
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800459e:	691b      	ldr	r3, [r3, #16]
 80045a0:	69ba      	ldr	r2, [r7, #24]
 80045a2:	0151      	lsls	r1, r2, #5
 80045a4:	69fa      	ldr	r2, [r7, #28]
 80045a6:	440a      	add	r2, r1
 80045a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ac:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80045b0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80045b4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	015a      	lsls	r2, r3, #5
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	4413      	add	r3, r2
 80045be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	0151      	lsls	r1, r2, #5
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	440a      	add	r2, r1
 80045cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	015a      	lsls	r2, r3, #5
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	4413      	add	r3, r2
 80045de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e2:	691b      	ldr	r3, [r3, #16]
 80045e4:	69ba      	ldr	r2, [r7, #24]
 80045e6:	0151      	lsls	r1, r2, #5
 80045e8:	69fa      	ldr	r2, [r7, #28]
 80045ea:	440a      	add	r2, r1
 80045ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f0:	0cdb      	lsrs	r3, r3, #19
 80045f2:	04db      	lsls	r3, r3, #19
 80045f4:	6113      	str	r3, [r2, #16]
 80045f6:	e074      	b.n	80046e2 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80045f8:	69bb      	ldr	r3, [r7, #24]
 80045fa:	015a      	lsls	r2, r3, #5
 80045fc:	69fb      	ldr	r3, [r7, #28]
 80045fe:	4413      	add	r3, r2
 8004600:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	0151      	lsls	r1, r2, #5
 800460a:	69fa      	ldr	r2, [r7, #28]
 800460c:	440a      	add	r2, r1
 800460e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004612:	0cdb      	lsrs	r3, r3, #19
 8004614:	04db      	lsls	r3, r3, #19
 8004616:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	015a      	lsls	r2, r3, #5
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	4413      	add	r3, r2
 8004620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	0151      	lsls	r1, r2, #5
 800462a:	69fa      	ldr	r2, [r7, #28]
 800462c:	440a      	add	r2, r1
 800462e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004632:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004636:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800463a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	69fb      	ldr	r3, [r7, #28]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004648:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	6999      	ldr	r1, [r3, #24]
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	440b      	add	r3, r1
 8004654:	1e59      	subs	r1, r3, #1
 8004656:	68bb      	ldr	r3, [r7, #8]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	fbb1 f3f3 	udiv	r3, r1, r3
 800465e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004660:	4b9d      	ldr	r3, [pc, #628]	; (80048d8 <USB_EPStartXfer+0x370>)
 8004662:	400b      	ands	r3, r1
 8004664:	69b9      	ldr	r1, [r7, #24]
 8004666:	0148      	lsls	r0, r1, #5
 8004668:	69f9      	ldr	r1, [r7, #28]
 800466a:	4401      	add	r1, r0
 800466c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004670:	4313      	orrs	r3, r2
 8004672:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468a:	69b9      	ldr	r1, [r7, #24]
 800468c:	0148      	lsls	r0, r1, #5
 800468e:	69f9      	ldr	r1, [r7, #28]
 8004690:	4401      	add	r1, r0
 8004692:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004696:	4313      	orrs	r3, r2
 8004698:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	791b      	ldrb	r3, [r3, #4]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d11f      	bne.n	80046e2 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80046a2:	69bb      	ldr	r3, [r7, #24]
 80046a4:	015a      	lsls	r2, r3, #5
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	4413      	add	r3, r2
 80046aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	69ba      	ldr	r2, [r7, #24]
 80046b2:	0151      	lsls	r1, r2, #5
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	440a      	add	r2, r1
 80046b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046bc:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80046c0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	69ba      	ldr	r2, [r7, #24]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	69fa      	ldr	r2, [r7, #28]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046e0:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80046e2:	79fb      	ldrb	r3, [r7, #7]
 80046e4:	2b01      	cmp	r3, #1
 80046e6:	d14b      	bne.n	8004780 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046fc:	461a      	mov	r2, r3
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	695b      	ldr	r3, [r3, #20]
 8004702:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	791b      	ldrb	r3, [r3, #4]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d128      	bne.n	800475e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004718:	2b00      	cmp	r3, #0
 800471a:	d110      	bne.n	800473e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	015a      	lsls	r2, r3, #5
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	0151      	lsls	r1, r2, #5
 800472e:	69fa      	ldr	r2, [r7, #28]
 8004730:	440a      	add	r2, r1
 8004732:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004736:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	e00f      	b.n	800475e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	015a      	lsls	r2, r3, #5
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	4413      	add	r3, r2
 8004746:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	0151      	lsls	r1, r2, #5
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	440a      	add	r2, r1
 8004754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800475c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	015a      	lsls	r2, r3, #5
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	4413      	add	r3, r2
 8004766:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	0151      	lsls	r1, r2, #5
 8004770:	69fa      	ldr	r2, [r7, #28]
 8004772:	440a      	add	r2, r1
 8004774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004778:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800477c:	6013      	str	r3, [r2, #0]
 800477e:	e133      	b.n	80049e8 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	69ba      	ldr	r2, [r7, #24]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800479e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	791b      	ldrb	r3, [r3, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d015      	beq.n	80047d4 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	699b      	ldr	r3, [r3, #24]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 811b 	beq.w	80049e8 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	2101      	movs	r1, #1
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	69f9      	ldr	r1, [r7, #28]
 80047ca:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047ce:	4313      	orrs	r3, r2
 80047d0:	634b      	str	r3, [r1, #52]	; 0x34
 80047d2:	e109      	b.n	80049e8 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047d4:	69fb      	ldr	r3, [r7, #28]
 80047d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d110      	bne.n	8004806 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047e4:	69bb      	ldr	r3, [r7, #24]
 80047e6:	015a      	lsls	r2, r3, #5
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	4413      	add	r3, r2
 80047ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	0151      	lsls	r1, r2, #5
 80047f6:	69fa      	ldr	r2, [r7, #28]
 80047f8:	440a      	add	r2, r1
 80047fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e00f      	b.n	8004826 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004824:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	6919      	ldr	r1, [r3, #16]
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	781a      	ldrb	r2, [r3, #0]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	699b      	ldr	r3, [r3, #24]
 8004832:	b298      	uxth	r0, r3
 8004834:	79fb      	ldrb	r3, [r7, #7]
 8004836:	9300      	str	r3, [sp, #0]
 8004838:	4603      	mov	r3, r0
 800483a:	68f8      	ldr	r0, [r7, #12]
 800483c:	f000 fade 	bl	8004dfc <USB_WritePacket>
 8004840:	e0d2      	b.n	80049e8 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485c:	0cdb      	lsrs	r3, r3, #19
 800485e:	04db      	lsls	r3, r3, #19
 8004860:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800487c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004880:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004884:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	699b      	ldr	r3, [r3, #24]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d126      	bne.n	80048dc <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800488e:	69bb      	ldr	r3, [r7, #24]
 8004890:	015a      	lsls	r2, r3, #5
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	4413      	add	r3, r2
 8004896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489a:	691a      	ldr	r2, [r3, #16]
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a4:	69b9      	ldr	r1, [r7, #24]
 80048a6:	0148      	lsls	r0, r1, #5
 80048a8:	69f9      	ldr	r1, [r7, #28]
 80048aa:	4401      	add	r1, r0
 80048ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048b0:	4313      	orrs	r3, r2
 80048b2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	69ba      	ldr	r2, [r7, #24]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	69fa      	ldr	r2, [r7, #28]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80048d2:	6113      	str	r3, [r2, #16]
 80048d4:	e03a      	b.n	800494c <USB_EPStartXfer+0x3e4>
 80048d6:	bf00      	nop
 80048d8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	699a      	ldr	r2, [r3, #24]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4413      	add	r3, r2
 80048e6:	1e5a      	subs	r2, r3, #1
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	68db      	ldr	r3, [r3, #12]
 80048f6:	8afa      	ldrh	r2, [r7, #22]
 80048f8:	fb03 f202 	mul.w	r2, r3, r2
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004900:	69bb      	ldr	r3, [r7, #24]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800490c:	691a      	ldr	r2, [r3, #16]
 800490e:	8afb      	ldrh	r3, [r7, #22]
 8004910:	04d9      	lsls	r1, r3, #19
 8004912:	4b38      	ldr	r3, [pc, #224]	; (80049f4 <USB_EPStartXfer+0x48c>)
 8004914:	400b      	ands	r3, r1
 8004916:	69b9      	ldr	r1, [r7, #24]
 8004918:	0148      	lsls	r0, r1, #5
 800491a:	69f9      	ldr	r1, [r7, #28]
 800491c:	4401      	add	r1, r0
 800491e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004922:	4313      	orrs	r3, r2
 8004924:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	69fb      	ldr	r3, [r7, #28]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004932:	691a      	ldr	r2, [r3, #16]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	69db      	ldr	r3, [r3, #28]
 8004938:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800493c:	69b9      	ldr	r1, [r7, #24]
 800493e:	0148      	lsls	r0, r1, #5
 8004940:	69f9      	ldr	r1, [r7, #28]
 8004942:	4401      	add	r1, r0
 8004944:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004948:	4313      	orrs	r3, r2
 800494a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800494c:	79fb      	ldrb	r3, [r7, #7]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d10d      	bne.n	800496e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d009      	beq.n	800496e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	6919      	ldr	r1, [r3, #16]
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	015a      	lsls	r2, r3, #5
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	4413      	add	r3, r2
 8004966:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496a:	460a      	mov	r2, r1
 800496c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	791b      	ldrb	r3, [r3, #4]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d128      	bne.n	80049c8 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004982:	2b00      	cmp	r3, #0
 8004984:	d110      	bne.n	80049a8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	69ba      	ldr	r2, [r7, #24]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	69fa      	ldr	r2, [r7, #28]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a4:	6013      	str	r3, [r2, #0]
 80049a6:	e00f      	b.n	80049c8 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	69ba      	ldr	r2, [r7, #24]
 80049b8:	0151      	lsls	r1, r2, #5
 80049ba:	69fa      	ldr	r2, [r7, #28]
 80049bc:	440a      	add	r2, r1
 80049be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	015a      	lsls	r2, r3, #5
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	4413      	add	r3, r2
 80049d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	69ba      	ldr	r2, [r7, #24]
 80049d8:	0151      	lsls	r1, r2, #5
 80049da:	69fa      	ldr	r2, [r7, #28]
 80049dc:	440a      	add	r2, r1
 80049de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049e8:	2300      	movs	r3, #0
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3720      	adds	r7, #32
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	1ff80000 	.word	0x1ff80000

080049f8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b087      	sub	sp, #28
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	785b      	ldrb	r3, [r3, #1]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	f040 80ce 	bne.w	8004bb6 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d132      	bne.n	8004a88 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	015a      	lsls	r2, r3, #5
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	4413      	add	r3, r2
 8004a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	0151      	lsls	r1, r2, #5
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	440a      	add	r2, r1
 8004a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	0151      	lsls	r1, r2, #5
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	440a      	add	r2, r1
 8004a5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	697b      	ldr	r3, [r7, #20]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	693a      	ldr	r2, [r7, #16]
 8004a76:	0151      	lsls	r1, r2, #5
 8004a78:	697a      	ldr	r2, [r7, #20]
 8004a7a:	440a      	add	r2, r1
 8004a7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a80:	0cdb      	lsrs	r3, r3, #19
 8004a82:	04db      	lsls	r3, r3, #19
 8004a84:	6113      	str	r3, [r2, #16]
 8004a86:	e04e      	b.n	8004b26 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	697a      	ldr	r2, [r7, #20]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	0cdb      	lsrs	r3, r3, #19
 8004aa4:	04db      	lsls	r3, r3, #19
 8004aa6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	015a      	lsls	r2, r3, #5
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	4413      	add	r3, r2
 8004ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	0151      	lsls	r1, r2, #5
 8004aba:	697a      	ldr	r2, [r7, #20]
 8004abc:	440a      	add	r2, r1
 8004abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ac2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ac6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004aca:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	699a      	ldr	r2, [r3, #24]
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d903      	bls.n	8004ae0 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	68da      	ldr	r2, [r3, #12]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ae0:	693b      	ldr	r3, [r7, #16]
 8004ae2:	015a      	lsls	r2, r3, #5
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	4413      	add	r3, r2
 8004ae8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	0151      	lsls	r1, r2, #5
 8004af2:	697a      	ldr	r2, [r7, #20]
 8004af4:	440a      	add	r2, r1
 8004af6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004afa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004afe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	691a      	ldr	r2, [r3, #16]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b16:	6939      	ldr	r1, [r7, #16]
 8004b18:	0148      	lsls	r0, r1, #5
 8004b1a:	6979      	ldr	r1, [r7, #20]
 8004b1c:	4401      	add	r1, r0
 8004b1e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004b22:	4313      	orrs	r3, r2
 8004b24:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b26:	79fb      	ldrb	r3, [r7, #7]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d11e      	bne.n	8004b6a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d009      	beq.n	8004b48 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	461a      	mov	r2, r3
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	695b      	ldr	r3, [r3, #20]
 8004b46:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	693a      	ldr	r2, [r7, #16]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e097      	b.n	8004c9a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	693a      	ldr	r2, [r7, #16]
 8004b7a:	0151      	lsls	r1, r2, #5
 8004b7c:	697a      	ldr	r2, [r7, #20]
 8004b7e:	440a      	add	r2, r1
 8004b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b88:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 8083 	beq.w	8004c9a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	781b      	ldrb	r3, [r3, #0]
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	2101      	movs	r1, #1
 8004ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8004baa:	6979      	ldr	r1, [r7, #20]
 8004bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb0:	4313      	orrs	r3, r2
 8004bb2:	634b      	str	r3, [r1, #52]	; 0x34
 8004bb4:	e071      	b.n	8004c9a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	0151      	lsls	r1, r2, #5
 8004bc8:	697a      	ldr	r2, [r7, #20]
 8004bca:	440a      	add	r2, r1
 8004bcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bd0:	0cdb      	lsrs	r3, r3, #19
 8004bd2:	04db      	lsls	r3, r3, #19
 8004bd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	693a      	ldr	r2, [r7, #16]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	697a      	ldr	r2, [r7, #20]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004bf4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004bf8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	68da      	ldr	r2, [r3, #12]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	015a      	lsls	r2, r3, #5
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4413      	add	r3, r2
 8004c1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	0151      	lsls	r1, r2, #5
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	440a      	add	r2, r1
 8004c28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	015a      	lsls	r2, r3, #5
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	4413      	add	r3, r2
 8004c3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c3e:	691a      	ldr	r2, [r3, #16]
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	6939      	ldr	r1, [r7, #16]
 8004c4a:	0148      	lsls	r0, r1, #5
 8004c4c:	6979      	ldr	r1, [r7, #20]
 8004c4e:	4401      	add	r1, r0
 8004c50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004c54:	4313      	orrs	r3, r2
 8004c56:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004c58:	79fb      	ldrb	r3, [r7, #7]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d10d      	bne.n	8004c7a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	6919      	ldr	r1, [r3, #16]
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	015a      	lsls	r2, r3, #5
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	4413      	add	r3, r2
 8004c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c76:	460a      	mov	r2, r1
 8004c78:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	693a      	ldr	r2, [r7, #16]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c98:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	371c      	adds	r7, #28
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	785b      	ldrb	r3, [r3, #1]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d14a      	bne.n	8004d5c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cde:	f040 8086 	bne.w	8004dee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	015a      	lsls	r2, r3, #5
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	4413      	add	r3, r2
 8004cec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	7812      	ldrb	r2, [r2, #0]
 8004cf6:	0151      	lsls	r1, r2, #5
 8004cf8:	693a      	ldr	r2, [r7, #16]
 8004cfa:	440a      	add	r2, r1
 8004cfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d04:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	015a      	lsls	r2, r3, #5
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	4413      	add	r3, r2
 8004d10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	7812      	ldrb	r2, [r2, #0]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	693a      	ldr	r2, [r7, #16]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d28:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f242 7210 	movw	r2, #10000	; 0x2710
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d902      	bls.n	8004d40 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	75fb      	strb	r3, [r7, #23]
          break;
 8004d3e:	e056      	b.n	8004dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	781b      	ldrb	r3, [r3, #0]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d54:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d58:	d0e7      	beq.n	8004d2a <USB_EPStopXfer+0x82>
 8004d5a:	e048      	b.n	8004dee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d74:	d13b      	bne.n	8004dee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	781b      	ldrb	r3, [r3, #0]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	683a      	ldr	r2, [r7, #0]
 8004d88:	7812      	ldrb	r2, [r2, #0]
 8004d8a:	0151      	lsls	r1, r2, #5
 8004d8c:	693a      	ldr	r2, [r7, #16]
 8004d8e:	440a      	add	r2, r1
 8004d90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d98:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	015a      	lsls	r2, r3, #5
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	4413      	add	r3, r2
 8004da4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	7812      	ldrb	r2, [r2, #0]
 8004dae:	0151      	lsls	r1, r2, #5
 8004db0:	693a      	ldr	r2, [r7, #16]
 8004db2:	440a      	add	r2, r1
 8004db4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004db8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dbc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	3301      	adds	r3, #1
 8004dc2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f242 7210 	movw	r2, #10000	; 0x2710
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d902      	bls.n	8004dd4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	75fb      	strb	r3, [r7, #23]
          break;
 8004dd2:	e00c      	b.n	8004dee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	015a      	lsls	r2, r3, #5
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	4413      	add	r3, r2
 8004dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004de8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dec:	d0e7      	beq.n	8004dbe <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	371c      	adds	r7, #28
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr

08004dfc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b089      	sub	sp, #36	; 0x24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	60f8      	str	r0, [r7, #12]
 8004e04:	60b9      	str	r1, [r7, #8]
 8004e06:	4611      	mov	r1, r2
 8004e08:	461a      	mov	r2, r3
 8004e0a:	460b      	mov	r3, r1
 8004e0c:	71fb      	strb	r3, [r7, #7]
 8004e0e:	4613      	mov	r3, r2
 8004e10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004e1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d123      	bne.n	8004e6a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004e22:	88bb      	ldrh	r3, [r7, #4]
 8004e24:	3303      	adds	r3, #3
 8004e26:	089b      	lsrs	r3, r3, #2
 8004e28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
 8004e2e:	e018      	b.n	8004e62 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	031a      	lsls	r2, r3, #12
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	3301      	adds	r3, #1
 8004e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	3301      	adds	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3301      	adds	r3, #1
 8004e5a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004e5c:	69bb      	ldr	r3, [r7, #24]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d3e2      	bcc.n	8004e30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3724      	adds	r7, #36	; 0x24
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr

08004e78 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b08b      	sub	sp, #44	; 0x2c
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	4613      	mov	r3, r2
 8004e84:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	089b      	lsrs	r3, r3, #2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004e96:	88fb      	ldrh	r3, [r7, #6]
 8004e98:	f003 0303 	and.w	r3, r3, #3
 8004e9c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	e014      	b.n	8004ece <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eae:	601a      	str	r2, [r3, #0]
    pDest++;
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb2:	3301      	adds	r3, #1
 8004eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	3301      	adds	r3, #1
 8004eba:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebe:	3301      	adds	r3, #1
 8004ec0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec4:	3301      	adds	r3, #1
 8004ec6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ec8:	6a3b      	ldr	r3, [r7, #32]
 8004eca:	3301      	adds	r3, #1
 8004ecc:	623b      	str	r3, [r7, #32]
 8004ece:	6a3a      	ldr	r2, [r7, #32]
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d3e6      	bcc.n	8004ea4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004ed6:	8bfb      	ldrh	r3, [r7, #30]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d01e      	beq.n	8004f1a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ee0:	69bb      	ldr	r3, [r7, #24]
 8004ee2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f107 0310 	add.w	r3, r7, #16
 8004eec:	6812      	ldr	r2, [r2, #0]
 8004eee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	6a3b      	ldr	r3, [r7, #32]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	b2da      	uxtb	r2, r3
 8004efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f00:	701a      	strb	r2, [r3, #0]
      i++;
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	3301      	adds	r3, #1
 8004f06:	623b      	str	r3, [r7, #32]
      pDest++;
 8004f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004f0e:	8bfb      	ldrh	r3, [r7, #30]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004f14:	8bfb      	ldrh	r3, [r7, #30]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1ea      	bne.n	8004ef0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	372c      	adds	r7, #44	; 0x2c
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	781b      	ldrb	r3, [r3, #0]
 8004f3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	785b      	ldrb	r3, [r3, #1]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d12c      	bne.n	8004f9e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	db12      	blt.n	8004f7c <USB_EPSetStall+0x54>
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00f      	beq.n	8004f7c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004f5c:	68bb      	ldr	r3, [r7, #8]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68ba      	ldr	r2, [r7, #8]
 8004f6c:	0151      	lsls	r1, r2, #5
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	440a      	add	r2, r1
 8004f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f7a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	015a      	lsls	r2, r3, #5
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	4413      	add	r3, r2
 8004f84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	68ba      	ldr	r2, [r7, #8]
 8004f8c:	0151      	lsls	r1, r2, #5
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	440a      	add	r2, r1
 8004f92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	e02b      	b.n	8004ff6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	015a      	lsls	r2, r3, #5
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	4413      	add	r3, r2
 8004fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	db12      	blt.n	8004fd6 <USB_EPSetStall+0xae>
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	0151      	lsls	r1, r2, #5
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	440a      	add	r2, r1
 8004fcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fd0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004fd4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	015a      	lsls	r2, r3, #5
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	4413      	add	r3, r2
 8004fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	0151      	lsls	r1, r2, #5
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	440a      	add	r2, r1
 8004fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ff0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ff4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
 800500c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	785b      	ldrb	r3, [r3, #1]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d128      	bne.n	8005072 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	015a      	lsls	r2, r3, #5
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4413      	add	r3, r2
 8005028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68ba      	ldr	r2, [r7, #8]
 8005030:	0151      	lsls	r1, r2, #5
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	440a      	add	r2, r1
 8005036:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800503a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800503e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	791b      	ldrb	r3, [r3, #4]
 8005044:	2b03      	cmp	r3, #3
 8005046:	d003      	beq.n	8005050 <USB_EPClearStall+0x4c>
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	791b      	ldrb	r3, [r3, #4]
 800504c:	2b02      	cmp	r3, #2
 800504e:	d138      	bne.n	80050c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	015a      	lsls	r2, r3, #5
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	4413      	add	r3, r2
 8005058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68ba      	ldr	r2, [r7, #8]
 8005060:	0151      	lsls	r1, r2, #5
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	440a      	add	r2, r1
 8005066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506e:	6013      	str	r3, [r2, #0]
 8005070:	e027      	b.n	80050c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	0151      	lsls	r1, r2, #5
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	440a      	add	r2, r1
 8005088:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800508c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005090:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	791b      	ldrb	r3, [r3, #4]
 8005096:	2b03      	cmp	r3, #3
 8005098:	d003      	beq.n	80050a2 <USB_EPClearStall+0x9e>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	791b      	ldrb	r3, [r3, #4]
 800509e:	2b02      	cmp	r3, #2
 80050a0:	d10f      	bne.n	80050c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	015a      	lsls	r2, r3, #5
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	4413      	add	r3, r2
 80050aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68ba      	ldr	r2, [r7, #8]
 80050b2:	0151      	lsls	r1, r2, #5
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	440a      	add	r2, r1
 80050b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	460b      	mov	r3, r1
 80050da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ee:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	78fb      	ldrb	r3, [r7, #3]
 80050fe:	011b      	lsls	r3, r3, #4
 8005100:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005104:	68f9      	ldr	r1, [r7, #12]
 8005106:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510a:	4313      	orrs	r3, r2
 800510c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800510e:	2300      	movs	r3, #0
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005136:	f023 0303 	bic.w	r3, r3, #3
 800513a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514a:	f023 0302 	bic.w	r3, r3, #2
 800514e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3714      	adds	r7, #20
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr

0800515e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800515e:	b480      	push	{r7}
 8005160:	b085      	sub	sp, #20
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005178:	f023 0303 	bic.w	r3, r3, #3
 800517c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518c:	f043 0302 	orr.w	r3, r3, #2
 8005190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b085      	sub	sp, #20
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	699b      	ldr	r3, [r3, #24]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	4013      	ands	r3, r2
 80051b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80051b8:	68fb      	ldr	r3, [r7, #12]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr

080051c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051c6:	b480      	push	{r7}
 80051c8:	b085      	sub	sp, #20
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	68ba      	ldr	r2, [r7, #8]
 80051e6:	4013      	ands	r3, r2
 80051e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	0c1b      	lsrs	r3, r3, #16
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3714      	adds	r7, #20
 80051f2:	46bd      	mov	sp, r7
 80051f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f8:	4770      	bx	lr

080051fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80051fa:	b480      	push	{r7}
 80051fc:	b085      	sub	sp, #20
 80051fe:	af00      	add	r7, sp, #0
 8005200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800520c:	699b      	ldr	r3, [r3, #24]
 800520e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005216:	69db      	ldr	r3, [r3, #28]
 8005218:	68ba      	ldr	r2, [r7, #8]
 800521a:	4013      	ands	r3, r2
 800521c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	b29b      	uxth	r3, r3
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800522e:	b480      	push	{r7}
 8005230:	b085      	sub	sp, #20
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800523e:	78fb      	ldrb	r3, [r7, #3]
 8005240:	015a      	lsls	r2, r3, #5
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4413      	add	r3, r2
 8005246:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	68ba      	ldr	r2, [r7, #8]
 8005258:	4013      	ands	r3, r2
 800525a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800525c:	68bb      	ldr	r3, [r7, #8]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr

0800526a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800526a:	b480      	push	{r7}
 800526c:	b087      	sub	sp, #28
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
 8005272:	460b      	mov	r3, r1
 8005274:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005280:	691b      	ldr	r3, [r3, #16]
 8005282:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800528c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800528e:	78fb      	ldrb	r3, [r7, #3]
 8005290:	f003 030f 	and.w	r3, r3, #15
 8005294:	68fa      	ldr	r2, [r7, #12]
 8005296:	fa22 f303 	lsr.w	r3, r2, r3
 800529a:	01db      	lsls	r3, r3, #7
 800529c:	b2db      	uxtb	r3, r3
 800529e:	693a      	ldr	r2, [r7, #16]
 80052a0:	4313      	orrs	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80052a4:	78fb      	ldrb	r3, [r7, #3]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	693a      	ldr	r2, [r7, #16]
 80052b4:	4013      	ands	r3, r2
 80052b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80052b8:	68bb      	ldr	r3, [r7, #8]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr

080052c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80052c6:	b480      	push	{r7}
 80052c8:	b083      	sub	sp, #12
 80052ca:	af00      	add	r7, sp, #0
 80052cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	f003 0301 	and.w	r3, r3, #1
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	370c      	adds	r7, #12
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr

080052e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b085      	sub	sp, #20
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052fc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005300:	f023 0307 	bic.w	r3, r3, #7
 8005304:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3714      	adds	r7, #20
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005328:	b480      	push	{r7}
 800532a:	b087      	sub	sp, #28
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	460b      	mov	r3, r1
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	333c      	adds	r3, #60	; 0x3c
 800533e:	3304      	adds	r3, #4
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <USB_EP0_OutStart+0xb8>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d90a      	bls.n	8005362 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005358:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800535c:	d101      	bne.n	8005362 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	e037      	b.n	80053d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005368:	461a      	mov	r2, r3
 800536a:	2300      	movs	r3, #0
 800536c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800537c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005380:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	697a      	ldr	r2, [r7, #20]
 800538c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005390:	f043 0318 	orr.w	r3, r3, #24
 8005394:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	697a      	ldr	r2, [r7, #20]
 80053a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053a4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80053a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80053aa:	7afb      	ldrb	r3, [r7, #11]
 80053ac:	2b01      	cmp	r3, #1
 80053ae:	d10f      	bne.n	80053d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053b6:	461a      	mov	r2, r3
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ca:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80053ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053d0:	2300      	movs	r3, #0
}
 80053d2:	4618      	mov	r0, r3
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	4f54300a 	.word	0x4f54300a

080053e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	3301      	adds	r3, #1
 80053f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	4a13      	ldr	r2, [pc, #76]	; (8005448 <USB_CoreReset+0x64>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d901      	bls.n	8005402 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e01b      	b.n	800543a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	daf2      	bge.n	80053f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f043 0201 	orr.w	r2, r3, #1
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	3301      	adds	r3, #1
 800541e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	4a09      	ldr	r2, [pc, #36]	; (8005448 <USB_CoreReset+0x64>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d901      	bls.n	800542c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005428:	2303      	movs	r3, #3
 800542a:	e006      	b.n	800543a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	691b      	ldr	r3, [r3, #16]
 8005430:	f003 0301 	and.w	r3, r3, #1
 8005434:	2b01      	cmp	r3, #1
 8005436:	d0f0      	beq.n	800541a <USB_CoreReset+0x36>

  return HAL_OK;
 8005438:	2300      	movs	r3, #0
}
 800543a:	4618      	mov	r0, r3
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	00030d40 	.word	0x00030d40

0800544c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	460b      	mov	r3, r1
 8005456:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005458:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800545c:	f002 fd7a 	bl	8007f54 <USBD_static_malloc>
 8005460:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d109      	bne.n	800547c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	32b0      	adds	r2, #176	; 0xb0
 8005472:	2100      	movs	r1, #0
 8005474:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005478:	2302      	movs	r3, #2
 800547a:	e0d4      	b.n	8005626 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800547c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005480:	2100      	movs	r1, #0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f002 fdce 	bl	8008024 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	32b0      	adds	r2, #176	; 0xb0
 8005492:	68f9      	ldr	r1, [r7, #12]
 8005494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	32b0      	adds	r2, #176	; 0xb0
 80054a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	7c1b      	ldrb	r3, [r3, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d138      	bne.n	8005526 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80054b4:	4b5e      	ldr	r3, [pc, #376]	; (8005630 <USBD_CDC_Init+0x1e4>)
 80054b6:	7819      	ldrb	r1, [r3, #0]
 80054b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054bc:	2202      	movs	r2, #2
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f002 fc25 	bl	8007d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80054c4:	4b5a      	ldr	r3, [pc, #360]	; (8005630 <USBD_CDC_Init+0x1e4>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	f003 020f 	and.w	r2, r3, #15
 80054cc:	6879      	ldr	r1, [r7, #4]
 80054ce:	4613      	mov	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	4413      	add	r3, r2
 80054d4:	009b      	lsls	r3, r3, #2
 80054d6:	440b      	add	r3, r1
 80054d8:	3324      	adds	r3, #36	; 0x24
 80054da:	2201      	movs	r2, #1
 80054dc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80054de:	4b55      	ldr	r3, [pc, #340]	; (8005634 <USBD_CDC_Init+0x1e8>)
 80054e0:	7819      	ldrb	r1, [r3, #0]
 80054e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054e6:	2202      	movs	r2, #2
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f002 fc10 	bl	8007d0e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80054ee:	4b51      	ldr	r3, [pc, #324]	; (8005634 <USBD_CDC_Init+0x1e8>)
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	f003 020f 	and.w	r2, r3, #15
 80054f6:	6879      	ldr	r1, [r7, #4]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	009b      	lsls	r3, r3, #2
 8005500:	440b      	add	r3, r1
 8005502:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005506:	2201      	movs	r2, #1
 8005508:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800550a:	4b4b      	ldr	r3, [pc, #300]	; (8005638 <USBD_CDC_Init+0x1ec>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	f003 020f 	and.w	r2, r3, #15
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	009b      	lsls	r3, r3, #2
 8005518:	4413      	add	r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	3326      	adds	r3, #38	; 0x26
 8005520:	2210      	movs	r2, #16
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	e035      	b.n	8005592 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005526:	4b42      	ldr	r3, [pc, #264]	; (8005630 <USBD_CDC_Init+0x1e4>)
 8005528:	7819      	ldrb	r1, [r3, #0]
 800552a:	2340      	movs	r3, #64	; 0x40
 800552c:	2202      	movs	r2, #2
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f002 fbed 	bl	8007d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005534:	4b3e      	ldr	r3, [pc, #248]	; (8005630 <USBD_CDC_Init+0x1e4>)
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f003 020f 	and.w	r2, r3, #15
 800553c:	6879      	ldr	r1, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	009b      	lsls	r3, r3, #2
 8005542:	4413      	add	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	440b      	add	r3, r1
 8005548:	3324      	adds	r3, #36	; 0x24
 800554a:	2201      	movs	r2, #1
 800554c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800554e:	4b39      	ldr	r3, [pc, #228]	; (8005634 <USBD_CDC_Init+0x1e8>)
 8005550:	7819      	ldrb	r1, [r3, #0]
 8005552:	2340      	movs	r3, #64	; 0x40
 8005554:	2202      	movs	r2, #2
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f002 fbd9 	bl	8007d0e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800555c:	4b35      	ldr	r3, [pc, #212]	; (8005634 <USBD_CDC_Init+0x1e8>)
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	f003 020f 	and.w	r2, r3, #15
 8005564:	6879      	ldr	r1, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005574:	2201      	movs	r2, #1
 8005576:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005578:	4b2f      	ldr	r3, [pc, #188]	; (8005638 <USBD_CDC_Init+0x1ec>)
 800557a:	781b      	ldrb	r3, [r3, #0]
 800557c:	f003 020f 	and.w	r2, r3, #15
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	3326      	adds	r3, #38	; 0x26
 800558e:	2210      	movs	r2, #16
 8005590:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005592:	4b29      	ldr	r3, [pc, #164]	; (8005638 <USBD_CDC_Init+0x1ec>)
 8005594:	7819      	ldrb	r1, [r3, #0]
 8005596:	2308      	movs	r3, #8
 8005598:	2203      	movs	r2, #3
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f002 fbb7 	bl	8007d0e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80055a0:	4b25      	ldr	r3, [pc, #148]	; (8005638 <USBD_CDC_Init+0x1ec>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	f003 020f 	and.w	r2, r3, #15
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	009b      	lsls	r3, r3, #2
 80055b2:	440b      	add	r3, r1
 80055b4:	3324      	adds	r3, #36	; 0x24
 80055b6:	2201      	movs	r2, #1
 80055b8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	33b0      	adds	r3, #176	; 0xb0
 80055cc:	009b      	lsls	r3, r3, #2
 80055ce:	4413      	add	r3, r2
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d101      	bne.n	80055f4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80055f0:	2302      	movs	r3, #2
 80055f2:	e018      	b.n	8005626 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	7c1b      	ldrb	r3, [r3, #16]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d10a      	bne.n	8005612 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80055fc:	4b0d      	ldr	r3, [pc, #52]	; (8005634 <USBD_CDC_Init+0x1e8>)
 80055fe:	7819      	ldrb	r1, [r3, #0]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005606:	f44f 7300 	mov.w	r3, #512	; 0x200
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f002 fc6e 	bl	8007eec <USBD_LL_PrepareReceive>
 8005610:	e008      	b.n	8005624 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005612:	4b08      	ldr	r3, [pc, #32]	; (8005634 <USBD_CDC_Init+0x1e8>)
 8005614:	7819      	ldrb	r1, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f002 fc64 	bl	8007eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3710      	adds	r7, #16
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000093 	.word	0x20000093
 8005634:	20000094 	.word	0x20000094
 8005638:	20000095 	.word	0x20000095

0800563c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b082      	sub	sp, #8
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	460b      	mov	r3, r1
 8005646:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005648:	4b3a      	ldr	r3, [pc, #232]	; (8005734 <USBD_CDC_DeInit+0xf8>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	4619      	mov	r1, r3
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	f002 fb83 	bl	8007d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005654:	4b37      	ldr	r3, [pc, #220]	; (8005734 <USBD_CDC_DeInit+0xf8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	f003 020f 	and.w	r2, r3, #15
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	4613      	mov	r3, r2
 8005660:	009b      	lsls	r3, r3, #2
 8005662:	4413      	add	r3, r2
 8005664:	009b      	lsls	r3, r3, #2
 8005666:	440b      	add	r3, r1
 8005668:	3324      	adds	r3, #36	; 0x24
 800566a:	2200      	movs	r2, #0
 800566c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800566e:	4b32      	ldr	r3, [pc, #200]	; (8005738 <USBD_CDC_DeInit+0xfc>)
 8005670:	781b      	ldrb	r3, [r3, #0]
 8005672:	4619      	mov	r1, r3
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f002 fb70 	bl	8007d5a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800567a:	4b2f      	ldr	r3, [pc, #188]	; (8005738 <USBD_CDC_DeInit+0xfc>)
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	f003 020f 	and.w	r2, r3, #15
 8005682:	6879      	ldr	r1, [r7, #4]
 8005684:	4613      	mov	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	009b      	lsls	r3, r3, #2
 800568c:	440b      	add	r3, r1
 800568e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005692:	2200      	movs	r2, #0
 8005694:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <USBD_CDC_DeInit+0x100>)
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	4619      	mov	r1, r3
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f002 fb5c 	bl	8007d5a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80056a2:	4b26      	ldr	r3, [pc, #152]	; (800573c <USBD_CDC_DeInit+0x100>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f003 020f 	and.w	r2, r3, #15
 80056aa:	6879      	ldr	r1, [r7, #4]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	440b      	add	r3, r1
 80056b6:	3324      	adds	r3, #36	; 0x24
 80056b8:	2200      	movs	r2, #0
 80056ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80056bc:	4b1f      	ldr	r3, [pc, #124]	; (800573c <USBD_CDC_DeInit+0x100>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f003 020f 	and.w	r2, r3, #15
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	4613      	mov	r3, r2
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	3326      	adds	r3, #38	; 0x26
 80056d2:	2200      	movs	r2, #0
 80056d4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	32b0      	adds	r2, #176	; 0xb0
 80056e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d01f      	beq.n	8005728 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	33b0      	adds	r3, #176	; 0xb0
 80056f2:	009b      	lsls	r3, r3, #2
 80056f4:	4413      	add	r3, r2
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	32b0      	adds	r2, #176	; 0xb0
 8005706:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800570a:	4618      	mov	r0, r3
 800570c:	f002 fc30 	bl	8007f70 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	32b0      	adds	r2, #176	; 0xb0
 800571a:	2100      	movs	r1, #0
 800571c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005728:	2300      	movs	r3, #0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3708      	adds	r7, #8
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	20000093 	.word	0x20000093
 8005738:	20000094 	.word	0x20000094
 800573c:	20000095 	.word	0x20000095

08005740 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b086      	sub	sp, #24
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	32b0      	adds	r2, #176	; 0xb0
 8005754:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005758:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d101      	bne.n	8005770 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800576c:	2303      	movs	r3, #3
 800576e:	e0bf      	b.n	80058f0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005778:	2b00      	cmp	r3, #0
 800577a:	d050      	beq.n	800581e <USBD_CDC_Setup+0xde>
 800577c:	2b20      	cmp	r3, #32
 800577e:	f040 80af 	bne.w	80058e0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	88db      	ldrh	r3, [r3, #6]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d03a      	beq.n	8005800 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800578a:	683b      	ldr	r3, [r7, #0]
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	b25b      	sxtb	r3, r3
 8005790:	2b00      	cmp	r3, #0
 8005792:	da1b      	bge.n	80057cc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	33b0      	adds	r3, #176	; 0xb0
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	683a      	ldr	r2, [r7, #0]
 80057a8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80057aa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	88d2      	ldrh	r2, [r2, #6]
 80057b0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	88db      	ldrh	r3, [r3, #6]
 80057b6:	2b07      	cmp	r3, #7
 80057b8:	bf28      	it	cs
 80057ba:	2307      	movcs	r3, #7
 80057bc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80057be:	693b      	ldr	r3, [r7, #16]
 80057c0:	89fa      	ldrh	r2, [r7, #14]
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f001 fd89 	bl	80072dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80057ca:	e090      	b.n	80058ee <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	785a      	ldrb	r2, [r3, #1]
 80057d0:	693b      	ldr	r3, [r7, #16]
 80057d2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	88db      	ldrh	r3, [r3, #6]
 80057da:	2b3f      	cmp	r3, #63	; 0x3f
 80057dc:	d803      	bhi.n	80057e6 <USBD_CDC_Setup+0xa6>
 80057de:	683b      	ldr	r3, [r7, #0]
 80057e0:	88db      	ldrh	r3, [r3, #6]
 80057e2:	b2da      	uxtb	r2, r3
 80057e4:	e000      	b.n	80057e8 <USBD_CDC_Setup+0xa8>
 80057e6:	2240      	movs	r2, #64	; 0x40
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80057ee:	6939      	ldr	r1, [r7, #16]
 80057f0:	693b      	ldr	r3, [r7, #16]
 80057f2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80057f6:	461a      	mov	r2, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f001 fd9b 	bl	8007334 <USBD_CtlPrepareRx>
      break;
 80057fe:	e076      	b.n	80058ee <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	33b0      	adds	r3, #176	; 0xb0
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	4413      	add	r3, r2
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	689b      	ldr	r3, [r3, #8]
 8005812:	683a      	ldr	r2, [r7, #0]
 8005814:	7850      	ldrb	r0, [r2, #1]
 8005816:	2200      	movs	r2, #0
 8005818:	6839      	ldr	r1, [r7, #0]
 800581a:	4798      	blx	r3
      break;
 800581c:	e067      	b.n	80058ee <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	785b      	ldrb	r3, [r3, #1]
 8005822:	2b0b      	cmp	r3, #11
 8005824:	d851      	bhi.n	80058ca <USBD_CDC_Setup+0x18a>
 8005826:	a201      	add	r2, pc, #4	; (adr r2, 800582c <USBD_CDC_Setup+0xec>)
 8005828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582c:	0800585d 	.word	0x0800585d
 8005830:	080058d9 	.word	0x080058d9
 8005834:	080058cb 	.word	0x080058cb
 8005838:	080058cb 	.word	0x080058cb
 800583c:	080058cb 	.word	0x080058cb
 8005840:	080058cb 	.word	0x080058cb
 8005844:	080058cb 	.word	0x080058cb
 8005848:	080058cb 	.word	0x080058cb
 800584c:	080058cb 	.word	0x080058cb
 8005850:	080058cb 	.word	0x080058cb
 8005854:	08005887 	.word	0x08005887
 8005858:	080058b1 	.word	0x080058b1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005862:	b2db      	uxtb	r3, r3
 8005864:	2b03      	cmp	r3, #3
 8005866:	d107      	bne.n	8005878 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005868:	f107 030a 	add.w	r3, r7, #10
 800586c:	2202      	movs	r2, #2
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f001 fd33 	bl	80072dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005876:	e032      	b.n	80058de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005878:	6839      	ldr	r1, [r7, #0]
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 fcbd 	bl	80071fa <USBD_CtlError>
            ret = USBD_FAIL;
 8005880:	2303      	movs	r3, #3
 8005882:	75fb      	strb	r3, [r7, #23]
          break;
 8005884:	e02b      	b.n	80058de <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b03      	cmp	r3, #3
 8005890:	d107      	bne.n	80058a2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005892:	f107 030d 	add.w	r3, r7, #13
 8005896:	2201      	movs	r2, #1
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f001 fd1e 	bl	80072dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058a0:	e01d      	b.n	80058de <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80058a2:	6839      	ldr	r1, [r7, #0]
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f001 fca8 	bl	80071fa <USBD_CtlError>
            ret = USBD_FAIL;
 80058aa:	2303      	movs	r3, #3
 80058ac:	75fb      	strb	r3, [r7, #23]
          break;
 80058ae:	e016      	b.n	80058de <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	2b03      	cmp	r3, #3
 80058ba:	d00f      	beq.n	80058dc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f001 fc9b 	bl	80071fa <USBD_CtlError>
            ret = USBD_FAIL;
 80058c4:	2303      	movs	r3, #3
 80058c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80058c8:	e008      	b.n	80058dc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80058ca:	6839      	ldr	r1, [r7, #0]
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f001 fc94 	bl	80071fa <USBD_CtlError>
          ret = USBD_FAIL;
 80058d2:	2303      	movs	r3, #3
 80058d4:	75fb      	strb	r3, [r7, #23]
          break;
 80058d6:	e002      	b.n	80058de <USBD_CDC_Setup+0x19e>
          break;
 80058d8:	bf00      	nop
 80058da:	e008      	b.n	80058ee <USBD_CDC_Setup+0x1ae>
          break;
 80058dc:	bf00      	nop
      }
      break;
 80058de:	e006      	b.n	80058ee <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80058e0:	6839      	ldr	r1, [r7, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fc89 	bl	80071fa <USBD_CtlError>
      ret = USBD_FAIL;
 80058e8:	2303      	movs	r3, #3
 80058ea:	75fb      	strb	r3, [r7, #23]
      break;
 80058ec:	bf00      	nop
  }

  return (uint8_t)ret;
 80058ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	3718      	adds	r7, #24
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800590a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	32b0      	adds	r2, #176	; 0xb0
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	e065      	b.n	80059ee <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	32b0      	adds	r2, #176	; 0xb0
 800592c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005930:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005932:	78fb      	ldrb	r3, [r7, #3]
 8005934:	f003 020f 	and.w	r2, r3, #15
 8005938:	6879      	ldr	r1, [r7, #4]
 800593a:	4613      	mov	r3, r2
 800593c:	009b      	lsls	r3, r3, #2
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	440b      	add	r3, r1
 8005944:	3318      	adds	r3, #24
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d02f      	beq.n	80059ac <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800594c:	78fb      	ldrb	r3, [r7, #3]
 800594e:	f003 020f 	and.w	r2, r3, #15
 8005952:	6879      	ldr	r1, [r7, #4]
 8005954:	4613      	mov	r3, r2
 8005956:	009b      	lsls	r3, r3, #2
 8005958:	4413      	add	r3, r2
 800595a:	009b      	lsls	r3, r3, #2
 800595c:	440b      	add	r3, r1
 800595e:	3318      	adds	r3, #24
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	f003 010f 	and.w	r1, r3, #15
 8005968:	68f8      	ldr	r0, [r7, #12]
 800596a:	460b      	mov	r3, r1
 800596c:	00db      	lsls	r3, r3, #3
 800596e:	440b      	add	r3, r1
 8005970:	009b      	lsls	r3, r3, #2
 8005972:	4403      	add	r3, r0
 8005974:	3348      	adds	r3, #72	; 0x48
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	fbb2 f1f3 	udiv	r1, r2, r3
 800597c:	fb01 f303 	mul.w	r3, r1, r3
 8005980:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8005982:	2b00      	cmp	r3, #0
 8005984:	d112      	bne.n	80059ac <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8005986:	78fb      	ldrb	r3, [r7, #3]
 8005988:	f003 020f 	and.w	r2, r3, #15
 800598c:	6879      	ldr	r1, [r7, #4]
 800598e:	4613      	mov	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	4413      	add	r3, r2
 8005994:	009b      	lsls	r3, r3, #2
 8005996:	440b      	add	r3, r1
 8005998:	3318      	adds	r3, #24
 800599a:	2200      	movs	r2, #0
 800599c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800599e:	78f9      	ldrb	r1, [r7, #3]
 80059a0:	2300      	movs	r3, #0
 80059a2:	2200      	movs	r2, #0
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f002 fa80 	bl	8007eaa <USBD_LL_Transmit>
 80059aa:	e01f      	b.n	80059ec <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	33b0      	adds	r3, #176	; 0xb0
 80059be:	009b      	lsls	r3, r3, #2
 80059c0:	4413      	add	r3, r2
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d010      	beq.n	80059ec <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	33b0      	adds	r3, #176	; 0xb0
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	4413      	add	r3, r2
 80059d8:	685b      	ldr	r3, [r3, #4]
 80059da:	691b      	ldr	r3, [r3, #16]
 80059dc:	68ba      	ldr	r2, [r7, #8]
 80059de:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80059e8:	78fa      	ldrb	r2, [r7, #3]
 80059ea:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80059ec:	2300      	movs	r3, #0
}
 80059ee:	4618      	mov	r0, r3
 80059f0:	3710      	adds	r7, #16
 80059f2:	46bd      	mov	sp, r7
 80059f4:	bd80      	pop	{r7, pc}

080059f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80059f6:	b580      	push	{r7, lr}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]
 80059fe:	460b      	mov	r3, r1
 8005a00:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	32b0      	adds	r2, #176	; 0xb0
 8005a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a10:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	32b0      	adds	r2, #176	; 0xb0
 8005a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e01a      	b.n	8005a5e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005a28:	78fb      	ldrb	r3, [r7, #3]
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f002 fa7e 	bl	8007f2e <USBD_LL_GetRxDataSize>
 8005a32:	4602      	mov	r2, r0
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	33b0      	adds	r3, #176	; 0xb0
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	685b      	ldr	r3, [r3, #4]
 8005a4a:	68db      	ldr	r3, [r3, #12]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005a58:	4611      	mov	r1, r2
 8005a5a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005a5c:	2300      	movs	r3, #0
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}

08005a66 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005a66:	b580      	push	{r7, lr}
 8005a68:	b084      	sub	sp, #16
 8005a6a:	af00      	add	r7, sp, #0
 8005a6c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	32b0      	adds	r2, #176	; 0xb0
 8005a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e025      	b.n	8005ad4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	33b0      	adds	r3, #176	; 0xb0
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d01a      	beq.n	8005ad2 <USBD_CDC_EP0_RxReady+0x6c>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8005aa2:	2bff      	cmp	r3, #255	; 0xff
 8005aa4:	d015      	beq.n	8005ad2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	33b0      	adds	r3, #176	; 0xb0
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	689b      	ldr	r3, [r3, #8]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8005abe:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8005ac6:	b292      	uxth	r2, r2
 8005ac8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	22ff      	movs	r2, #255	; 0xff
 8005ace:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b086      	sub	sp, #24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005ae4:	2182      	movs	r1, #130	; 0x82
 8005ae6:	4818      	ldr	r0, [pc, #96]	; (8005b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005ae8:	f000 fd4f 	bl	800658a <USBD_GetEpDesc>
 8005aec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005aee:	2101      	movs	r1, #1
 8005af0:	4815      	ldr	r0, [pc, #84]	; (8005b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005af2:	f000 fd4a 	bl	800658a <USBD_GetEpDesc>
 8005af6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005af8:	2181      	movs	r1, #129	; 0x81
 8005afa:	4813      	ldr	r0, [pc, #76]	; (8005b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005afc:	f000 fd45 	bl	800658a <USBD_GetEpDesc>
 8005b00:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d002      	beq.n	8005b0e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	2210      	movs	r2, #16
 8005b0c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b0e:	693b      	ldr	r3, [r7, #16]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d006      	beq.n	8005b22 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b1c:	711a      	strb	r2, [r3, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d006      	beq.n	8005b36 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b30:	711a      	strb	r2, [r3, #4]
 8005b32:	2200      	movs	r2, #0
 8005b34:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2243      	movs	r2, #67	; 0x43
 8005b3a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005b3c:	4b02      	ldr	r3, [pc, #8]	; (8005b48 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	20000050 	.word	0x20000050

08005b4c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b086      	sub	sp, #24
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005b54:	2182      	movs	r1, #130	; 0x82
 8005b56:	4818      	ldr	r0, [pc, #96]	; (8005bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b58:	f000 fd17 	bl	800658a <USBD_GetEpDesc>
 8005b5c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005b5e:	2101      	movs	r1, #1
 8005b60:	4815      	ldr	r0, [pc, #84]	; (8005bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b62:	f000 fd12 	bl	800658a <USBD_GetEpDesc>
 8005b66:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005b68:	2181      	movs	r1, #129	; 0x81
 8005b6a:	4813      	ldr	r0, [pc, #76]	; (8005bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005b6c:	f000 fd0d 	bl	800658a <USBD_GetEpDesc>
 8005b70:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d002      	beq.n	8005b7e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	2210      	movs	r2, #16
 8005b7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d006      	beq.n	8005b92 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	2200      	movs	r2, #0
 8005b88:	711a      	strb	r2, [r3, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f042 0202 	orr.w	r2, r2, #2
 8005b90:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d006      	beq.n	8005ba6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	711a      	strb	r2, [r3, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f042 0202 	orr.w	r2, r2, #2
 8005ba4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2243      	movs	r2, #67	; 0x43
 8005baa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005bac:	4b02      	ldr	r3, [pc, #8]	; (8005bb8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	20000050 	.word	0x20000050

08005bbc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005bc4:	2182      	movs	r1, #130	; 0x82
 8005bc6:	4818      	ldr	r0, [pc, #96]	; (8005c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bc8:	f000 fcdf 	bl	800658a <USBD_GetEpDesc>
 8005bcc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005bce:	2101      	movs	r1, #1
 8005bd0:	4815      	ldr	r0, [pc, #84]	; (8005c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bd2:	f000 fcda 	bl	800658a <USBD_GetEpDesc>
 8005bd6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005bd8:	2181      	movs	r1, #129	; 0x81
 8005bda:	4813      	ldr	r0, [pc, #76]	; (8005c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005bdc:	f000 fcd5 	bl	800658a <USBD_GetEpDesc>
 8005be0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d002      	beq.n	8005bee <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2210      	movs	r2, #16
 8005bec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d006      	beq.n	8005c02 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bfc:	711a      	strb	r2, [r3, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d006      	beq.n	8005c16 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c10:	711a      	strb	r2, [r3, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2243      	movs	r2, #67	; 0x43
 8005c1a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005c1c:	4b02      	ldr	r3, [pc, #8]	; (8005c28 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	20000050 	.word	0x20000050

08005c2c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	220a      	movs	r2, #10
 8005c38:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005c3a:	4b03      	ldr	r3, [pc, #12]	; (8005c48 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	370c      	adds	r7, #12
 8005c40:	46bd      	mov	sp, r7
 8005c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c46:	4770      	bx	lr
 8005c48:	2000000c 	.word	0x2000000c

08005c4c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e009      	b.n	8005c74 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005c66:	687a      	ldr	r2, [r7, #4]
 8005c68:	33b0      	adds	r3, #176	; 0xb0
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	4413      	add	r3, r2
 8005c6e:	683a      	ldr	r2, [r7, #0]
 8005c70:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	32b0      	adds	r2, #176	; 0xb0
 8005c96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c9a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8005ca2:	2303      	movs	r3, #3
 8005ca4:	e008      	b.n	8005cb8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	68ba      	ldr	r2, [r7, #8]
 8005caa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	371c      	adds	r7, #28
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc2:	4770      	bx	lr

08005cc4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]
 8005ccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	32b0      	adds	r2, #176	; 0xb0
 8005cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cdc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d101      	bne.n	8005ce8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	e004      	b.n	8005cf2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	683a      	ldr	r2, [r7, #0]
 8005cec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3714      	adds	r7, #20
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
	...

08005d00 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	32b0      	adds	r2, #176	; 0xb0
 8005d12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d16:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	32b0      	adds	r2, #176	; 0xb0
 8005d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d101      	bne.n	8005d32 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005d2e:	2303      	movs	r3, #3
 8005d30:	e025      	b.n	8005d7e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d11f      	bne.n	8005d7c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005d3c:	68bb      	ldr	r3, [r7, #8]
 8005d3e:	2201      	movs	r2, #1
 8005d40:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8005d44:	4b10      	ldr	r3, [pc, #64]	; (8005d88 <USBD_CDC_TransmitPacket+0x88>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f003 020f 	and.w	r2, r3, #15
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4403      	add	r3, r0
 8005d5e:	3318      	adds	r3, #24
 8005d60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8005d62:	4b09      	ldr	r3, [pc, #36]	; (8005d88 <USBD_CDC_TransmitPacket+0x88>)
 8005d64:	7819      	ldrb	r1, [r3, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f002 f899 	bl	8007eaa <USBD_LL_Transmit>

    ret = USBD_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005d7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3710      	adds	r7, #16
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop
 8005d88:	20000093 	.word	0x20000093

08005d8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	32b0      	adds	r2, #176	; 0xb0
 8005d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005da2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	32b0      	adds	r2, #176	; 0xb0
 8005dae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d101      	bne.n	8005dba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e018      	b.n	8005dec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	7c1b      	ldrb	r3, [r3, #16]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10a      	bne.n	8005dd8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dc2:	4b0c      	ldr	r3, [pc, #48]	; (8005df4 <USBD_CDC_ReceivePacket+0x68>)
 8005dc4:	7819      	ldrb	r1, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f002 f88b 	bl	8007eec <USBD_LL_PrepareReceive>
 8005dd6:	e008      	b.n	8005dea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005dd8:	4b06      	ldr	r3, [pc, #24]	; (8005df4 <USBD_CDC_ReceivePacket+0x68>)
 8005dda:	7819      	ldrb	r1, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f002 f881 	bl	8007eec <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	20000094 	.word	0x20000094

08005df8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	4613      	mov	r3, r2
 8005e04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e0c:	2303      	movs	r3, #3
 8005e0e:	e01f      	b.n	8005e50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	68ba      	ldr	r2, [r7, #8]
 8005e32:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	2201      	movs	r2, #1
 8005e3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	79fa      	ldrb	r2, [r7, #7]
 8005e42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f001 fefb 	bl	8007c40 <USBD_LL_Init>
 8005e4a:	4603      	mov	r3, r0
 8005e4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005e4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e50:	4618      	mov	r0, r3
 8005e52:	3718      	adds	r7, #24
 8005e54:	46bd      	mov	sp, r7
 8005e56:	bd80      	pop	{r7, pc}

08005e58 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b084      	sub	sp, #16
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e62:	2300      	movs	r3, #0
 8005e64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e025      	b.n	8005ebc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	683a      	ldr	r2, [r7, #0]
 8005e74:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	32ae      	adds	r2, #174	; 0xae
 8005e82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d00f      	beq.n	8005eac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	32ae      	adds	r2, #174	; 0xae
 8005e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e9c:	f107 020e 	add.w	r2, r7, #14
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	4798      	blx	r3
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005eb2:	1c5a      	adds	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ecc:	6878      	ldr	r0, [r7, #4]
 8005ece:	f001 ff03 	bl	8007cd8 <USBD_LL_Start>
 8005ed2:	4603      	mov	r3, r0
}
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	3708      	adds	r7, #8
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}

08005edc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b083      	sub	sp, #12
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	370c      	adds	r7, #12
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr

08005ef2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ef2:	b580      	push	{r7, lr}
 8005ef4:	b084      	sub	sp, #16
 8005ef6:	af00      	add	r7, sp, #0
 8005ef8:	6078      	str	r0, [r7, #4]
 8005efa:	460b      	mov	r3, r1
 8005efc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d009      	beq.n	8005f20 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	4611      	mov	r1, r2
 8005f18:	6878      	ldr	r0, [r7, #4]
 8005f1a:	4798      	blx	r3
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	78fa      	ldrb	r2, [r7, #3]
 8005f44:	4611      	mov	r1, r2
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	4798      	blx	r3
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005f50:	2303      	movs	r3, #3
 8005f52:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b084      	sub	sp, #16
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	6078      	str	r0, [r7, #4]
 8005f66:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005f6e:	6839      	ldr	r1, [r7, #0]
 8005f70:	4618      	mov	r0, r3
 8005f72:	f001 f908 	bl	8007186 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005f84:	461a      	mov	r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005f92:	f003 031f 	and.w	r3, r3, #31
 8005f96:	2b02      	cmp	r3, #2
 8005f98:	d01a      	beq.n	8005fd0 <USBD_LL_SetupStage+0x72>
 8005f9a:	2b02      	cmp	r3, #2
 8005f9c:	d822      	bhi.n	8005fe4 <USBD_LL_SetupStage+0x86>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d002      	beq.n	8005fa8 <USBD_LL_SetupStage+0x4a>
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d00a      	beq.n	8005fbc <USBD_LL_SetupStage+0x5e>
 8005fa6:	e01d      	b.n	8005fe4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fae:	4619      	mov	r1, r3
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 fb5f 	bl	8006674 <USBD_StdDevReq>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	73fb      	strb	r3, [r7, #15]
      break;
 8005fba:	e020      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 fbc7 	bl	8006758 <USBD_StdItfReq>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005fce:	e016      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f000 fc29 	bl	8006830 <USBD_StdEPReq>
 8005fde:	4603      	mov	r3, r0
 8005fe0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fe2:	e00c      	b.n	8005ffe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005fea:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fed0 	bl	8007d98 <USBD_LL_StallEP>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	73fb      	strb	r3, [r7, #15]
      break;
 8005ffc:	bf00      	nop
  }

  return ret;
 8005ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006000:	4618      	mov	r0, r3
 8006002:	3710      	adds	r7, #16
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	460b      	mov	r3, r1
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006016:	2300      	movs	r3, #0
 8006018:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800601a:	7afb      	ldrb	r3, [r7, #11]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d16e      	bne.n	80060fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006026:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800602e:	2b03      	cmp	r3, #3
 8006030:	f040 8098 	bne.w	8006164 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	429a      	cmp	r2, r3
 800603e:	d913      	bls.n	8006068 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	689a      	ldr	r2, [r3, #8]
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	1ad2      	subs	r2, r2, r3
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	4293      	cmp	r3, r2
 8006058:	bf28      	it	cs
 800605a:	4613      	movcs	r3, r2
 800605c:	461a      	mov	r2, r3
 800605e:	6879      	ldr	r1, [r7, #4]
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f001 f984 	bl	800736e <USBD_CtlContinueRx>
 8006066:	e07d      	b.n	8006164 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800606e:	f003 031f 	and.w	r3, r3, #31
 8006072:	2b02      	cmp	r3, #2
 8006074:	d014      	beq.n	80060a0 <USBD_LL_DataOutStage+0x98>
 8006076:	2b02      	cmp	r3, #2
 8006078:	d81d      	bhi.n	80060b6 <USBD_LL_DataOutStage+0xae>
 800607a:	2b00      	cmp	r3, #0
 800607c:	d002      	beq.n	8006084 <USBD_LL_DataOutStage+0x7c>
 800607e:	2b01      	cmp	r3, #1
 8006080:	d003      	beq.n	800608a <USBD_LL_DataOutStage+0x82>
 8006082:	e018      	b.n	80060b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006084:	2300      	movs	r3, #0
 8006086:	75bb      	strb	r3, [r7, #22]
            break;
 8006088:	e018      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006090:	b2db      	uxtb	r3, r3
 8006092:	4619      	mov	r1, r3
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	f000 fa5e 	bl	8006556 <USBD_CoreFindIF>
 800609a:	4603      	mov	r3, r0
 800609c:	75bb      	strb	r3, [r7, #22]
            break;
 800609e:	e00d      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	4619      	mov	r1, r3
 80060aa:	68f8      	ldr	r0, [r7, #12]
 80060ac:	f000 fa60 	bl	8006570 <USBD_CoreFindEP>
 80060b0:	4603      	mov	r3, r0
 80060b2:	75bb      	strb	r3, [r7, #22]
            break;
 80060b4:	e002      	b.n	80060bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80060b6:	2300      	movs	r3, #0
 80060b8:	75bb      	strb	r3, [r7, #22]
            break;
 80060ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80060bc:	7dbb      	ldrb	r3, [r7, #22]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d119      	bne.n	80060f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b03      	cmp	r3, #3
 80060cc:	d113      	bne.n	80060f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80060ce:	7dba      	ldrb	r2, [r7, #22]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	32ae      	adds	r2, #174	; 0xae
 80060d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80060de:	7dba      	ldrb	r2, [r7, #22]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80060e6:	7dba      	ldrb	r2, [r7, #22]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	32ae      	adds	r2, #174	; 0xae
 80060ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	68f8      	ldr	r0, [r7, #12]
 80060f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80060f6:	68f8      	ldr	r0, [r7, #12]
 80060f8:	f001 f94a 	bl	8007390 <USBD_CtlSendStatus>
 80060fc:	e032      	b.n	8006164 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80060fe:	7afb      	ldrb	r3, [r7, #11]
 8006100:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006104:	b2db      	uxtb	r3, r3
 8006106:	4619      	mov	r1, r3
 8006108:	68f8      	ldr	r0, [r7, #12]
 800610a:	f000 fa31 	bl	8006570 <USBD_CoreFindEP>
 800610e:	4603      	mov	r3, r0
 8006110:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006112:	7dbb      	ldrb	r3, [r7, #22]
 8006114:	2bff      	cmp	r3, #255	; 0xff
 8006116:	d025      	beq.n	8006164 <USBD_LL_DataOutStage+0x15c>
 8006118:	7dbb      	ldrb	r3, [r7, #22]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d122      	bne.n	8006164 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006124:	b2db      	uxtb	r3, r3
 8006126:	2b03      	cmp	r3, #3
 8006128:	d117      	bne.n	800615a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800612a:	7dba      	ldrb	r2, [r7, #22]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	32ae      	adds	r2, #174	; 0xae
 8006130:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d00f      	beq.n	800615a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800613a:	7dba      	ldrb	r2, [r7, #22]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006142:	7dba      	ldrb	r2, [r7, #22]
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	32ae      	adds	r2, #174	; 0xae
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	7afa      	ldrb	r2, [r7, #11]
 8006150:	4611      	mov	r1, r2
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	4798      	blx	r3
 8006156:	4603      	mov	r3, r0
 8006158:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800615a:	7dfb      	ldrb	r3, [r7, #23]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006160:	7dfb      	ldrb	r3, [r7, #23]
 8006162:	e000      	b.n	8006166 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3718      	adds	r7, #24
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b086      	sub	sp, #24
 8006172:	af00      	add	r7, sp, #0
 8006174:	60f8      	str	r0, [r7, #12]
 8006176:	460b      	mov	r3, r1
 8006178:	607a      	str	r2, [r7, #4]
 800617a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800617c:	7afb      	ldrb	r3, [r7, #11]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d16f      	bne.n	8006262 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	3314      	adds	r3, #20
 8006186:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800618e:	2b02      	cmp	r3, #2
 8006190:	d15a      	bne.n	8006248 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	689a      	ldr	r2, [r3, #8]
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	68db      	ldr	r3, [r3, #12]
 800619a:	429a      	cmp	r2, r3
 800619c:	d914      	bls.n	80061c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	689a      	ldr	r2, [r3, #8]
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	68db      	ldr	r3, [r3, #12]
 80061a6:	1ad2      	subs	r2, r2, r3
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	461a      	mov	r2, r3
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f001 f8ac 	bl	8007312 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80061ba:	2300      	movs	r3, #0
 80061bc:	2200      	movs	r2, #0
 80061be:	2100      	movs	r1, #0
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f001 fe93 	bl	8007eec <USBD_LL_PrepareReceive>
 80061c6:	e03f      	b.n	8006248 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d11c      	bne.n	800620e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80061dc:	429a      	cmp	r2, r3
 80061de:	d316      	bcc.n	800620e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80061e0:	693b      	ldr	r3, [r7, #16]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d20f      	bcs.n	800620e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80061ee:	2200      	movs	r2, #0
 80061f0:	2100      	movs	r1, #0
 80061f2:	68f8      	ldr	r0, [r7, #12]
 80061f4:	f001 f88d 	bl	8007312 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006200:	2300      	movs	r3, #0
 8006202:	2200      	movs	r2, #0
 8006204:	2100      	movs	r1, #0
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f001 fe70 	bl	8007eec <USBD_LL_PrepareReceive>
 800620c:	e01c      	b.n	8006248 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	2b03      	cmp	r3, #3
 8006218:	d10f      	bne.n	800623a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d009      	beq.n	800623a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006234:	68db      	ldr	r3, [r3, #12]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800623a:	2180      	movs	r1, #128	; 0x80
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f001 fdab 	bl	8007d98 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f001 f8b7 	bl	80073b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d03a      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f7ff fe42 	bl	8005edc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	2200      	movs	r2, #0
 800625c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006260:	e032      	b.n	80062c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006262:	7afb      	ldrb	r3, [r7, #11]
 8006264:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006268:	b2db      	uxtb	r3, r3
 800626a:	4619      	mov	r1, r3
 800626c:	68f8      	ldr	r0, [r7, #12]
 800626e:	f000 f97f 	bl	8006570 <USBD_CoreFindEP>
 8006272:	4603      	mov	r3, r0
 8006274:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006276:	7dfb      	ldrb	r3, [r7, #23]
 8006278:	2bff      	cmp	r3, #255	; 0xff
 800627a:	d025      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
 800627c:	7dfb      	ldrb	r3, [r7, #23]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d122      	bne.n	80062c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b03      	cmp	r3, #3
 800628c:	d11c      	bne.n	80062c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800628e:	7dfa      	ldrb	r2, [r7, #23]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	32ae      	adds	r2, #174	; 0xae
 8006294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d014      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800629e:	7dfa      	ldrb	r2, [r7, #23]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80062a6:	7dfa      	ldrb	r2, [r7, #23]
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	32ae      	adds	r2, #174	; 0xae
 80062ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	7afa      	ldrb	r2, [r7, #11]
 80062b4:	4611      	mov	r1, r2
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	4798      	blx	r3
 80062ba:	4603      	mov	r3, r0
 80062bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80062be:	7dbb      	ldrb	r3, [r7, #22]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d001      	beq.n	80062c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80062c4:	7dbb      	ldrb	r3, [r7, #22]
 80062c6:	e000      	b.n	80062ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3718      	adds	r7, #24
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b084      	sub	sp, #16
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80062da:	2300      	movs	r3, #0
 80062dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2201      	movs	r2, #1
 80062e2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800630a:	2b00      	cmp	r3, #0
 800630c:	d014      	beq.n	8006338 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00e      	beq.n	8006338 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	687a      	ldr	r2, [r7, #4]
 8006324:	6852      	ldr	r2, [r2, #4]
 8006326:	b2d2      	uxtb	r2, r2
 8006328:	4611      	mov	r1, r2
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	4798      	blx	r3
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d001      	beq.n	8006338 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006334:	2303      	movs	r3, #3
 8006336:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006338:	2340      	movs	r3, #64	; 0x40
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f001 fce5 	bl	8007d0e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2240      	movs	r2, #64	; 0x40
 8006350:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006354:	2340      	movs	r3, #64	; 0x40
 8006356:	2200      	movs	r2, #0
 8006358:	2180      	movs	r1, #128	; 0x80
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f001 fcd7 	bl	8007d0e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2240      	movs	r2, #64	; 0x40
 800636a:	621a      	str	r2, [r3, #32]

  return ret;
 800636c:	7bfb      	ldrb	r3, [r7, #15]
}
 800636e:	4618      	mov	r0, r3
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006376:	b480      	push	{r7}
 8006378:	b083      	sub	sp, #12
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
 800637e:	460b      	mov	r3, r1
 8006380:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	78fa      	ldrb	r2, [r7, #3]
 8006386:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	4618      	mov	r0, r3
 800638c:	370c      	adds	r7, #12
 800638e:	46bd      	mov	sp, r7
 8006390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006394:	4770      	bx	lr

08006396 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006396:	b480      	push	{r7}
 8006398:	b083      	sub	sp, #12
 800639a:	af00      	add	r7, sp, #0
 800639c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063a4:	b2da      	uxtb	r2, r3
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2204      	movs	r2, #4
 80063b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063d0:	b2db      	uxtb	r3, r3
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d106      	bne.n	80063e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80063dc:	b2da      	uxtb	r2, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80063e4:	2300      	movs	r3, #0
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	370c      	adds	r7, #12
 80063ea:	46bd      	mov	sp, r7
 80063ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f0:	4770      	bx	lr

080063f2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80063f2:	b580      	push	{r7, lr}
 80063f4:	b082      	sub	sp, #8
 80063f6:	af00      	add	r7, sp, #0
 80063f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b03      	cmp	r3, #3
 8006404:	d110      	bne.n	8006428 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800640c:	2b00      	cmp	r3, #0
 800640e:	d00b      	beq.n	8006428 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006422:	69db      	ldr	r3, [r3, #28]
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b082      	sub	sp, #8
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	460b      	mov	r3, r1
 800643c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	32ae      	adds	r2, #174	; 0xae
 8006448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006450:	2303      	movs	r3, #3
 8006452:	e01c      	b.n	800648e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b03      	cmp	r3, #3
 800645e:	d115      	bne.n	800648c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	32ae      	adds	r2, #174	; 0xae
 800646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00b      	beq.n	800648c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	32ae      	adds	r2, #174	; 0xae
 800647e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006482:	6a1b      	ldr	r3, [r3, #32]
 8006484:	78fa      	ldrb	r2, [r7, #3]
 8006486:	4611      	mov	r1, r2
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
 800649e:	460b      	mov	r3, r1
 80064a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	32ae      	adds	r2, #174	; 0xae
 80064ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d101      	bne.n	80064b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80064b4:	2303      	movs	r3, #3
 80064b6:	e01c      	b.n	80064f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b03      	cmp	r3, #3
 80064c2:	d115      	bne.n	80064f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	32ae      	adds	r2, #174	; 0xae
 80064ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d00b      	beq.n	80064f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	32ae      	adds	r2, #174	; 0xae
 80064e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064e8:	78fa      	ldrb	r2, [r7, #3]
 80064ea:	4611      	mov	r1, r2
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3708      	adds	r7, #8
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00e      	beq.n	800654c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	6852      	ldr	r2, [r2, #4]
 800653a:	b2d2      	uxtb	r2, r2
 800653c:	4611      	mov	r1, r2
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	4798      	blx	r3
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d001      	beq.n	800654c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006548:	2303      	movs	r3, #3
 800654a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}

08006556 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006556:	b480      	push	{r7}
 8006558:	b083      	sub	sp, #12
 800655a:	af00      	add	r7, sp, #0
 800655c:	6078      	str	r0, [r7, #4]
 800655e:	460b      	mov	r3, r1
 8006560:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006562:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006564:	4618      	mov	r0, r3
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	460b      	mov	r3, r1
 800657a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800657c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800657e:	4618      	mov	r0, r3
 8006580:	370c      	adds	r7, #12
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr

0800658a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af00      	add	r7, sp, #0
 8006590:	6078      	str	r0, [r7, #4]
 8006592:	460b      	mov	r3, r1
 8006594:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800659e:	2300      	movs	r3, #0
 80065a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	885b      	ldrh	r3, [r3, #2]
 80065a6:	b29a      	uxth	r2, r3
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	b29b      	uxth	r3, r3
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d920      	bls.n	80065f4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80065ba:	e013      	b.n	80065e4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80065bc:	f107 030a 	add.w	r3, r7, #10
 80065c0:	4619      	mov	r1, r3
 80065c2:	6978      	ldr	r0, [r7, #20]
 80065c4:	f000 f81b 	bl	80065fe <USBD_GetNextDesc>
 80065c8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	785b      	ldrb	r3, [r3, #1]
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	d108      	bne.n	80065e4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	789b      	ldrb	r3, [r3, #2]
 80065da:	78fa      	ldrb	r2, [r7, #3]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d008      	beq.n	80065f2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	885b      	ldrh	r3, [r3, #2]
 80065e8:	b29a      	uxth	r2, r3
 80065ea:	897b      	ldrh	r3, [r7, #10]
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d8e5      	bhi.n	80065bc <USBD_GetEpDesc+0x32>
 80065f0:	e000      	b.n	80065f4 <USBD_GetEpDesc+0x6a>
          break;
 80065f2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80065f4:	693b      	ldr	r3, [r7, #16]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3718      	adds	r7, #24
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	881a      	ldrh	r2, [r3, #0]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	b29b      	uxth	r3, r3
 8006616:	4413      	add	r3, r2
 8006618:	b29a      	uxth	r2, r3
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	461a      	mov	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	4413      	add	r3, r2
 8006628:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800662a:	68fb      	ldr	r3, [r7, #12]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006638:	b480      	push	{r7}
 800663a:	b087      	sub	sp, #28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	3301      	adds	r3, #1
 800664e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006656:	8a3b      	ldrh	r3, [r7, #16]
 8006658:	021b      	lsls	r3, r3, #8
 800665a:	b21a      	sxth	r2, r3
 800665c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006660:	4313      	orrs	r3, r2
 8006662:	b21b      	sxth	r3, r3
 8006664:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006666:	89fb      	ldrh	r3, [r7, #14]
}
 8006668:	4618      	mov	r0, r3
 800666a:	371c      	adds	r7, #28
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b084      	sub	sp, #16
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
 800667c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800667e:	2300      	movs	r3, #0
 8006680:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800668a:	2b40      	cmp	r3, #64	; 0x40
 800668c:	d005      	beq.n	800669a <USBD_StdDevReq+0x26>
 800668e:	2b40      	cmp	r3, #64	; 0x40
 8006690:	d857      	bhi.n	8006742 <USBD_StdDevReq+0xce>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00f      	beq.n	80066b6 <USBD_StdDevReq+0x42>
 8006696:	2b20      	cmp	r3, #32
 8006698:	d153      	bne.n	8006742 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	32ae      	adds	r2, #174	; 0xae
 80066a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	4798      	blx	r3
 80066b0:	4603      	mov	r3, r0
 80066b2:	73fb      	strb	r3, [r7, #15]
      break;
 80066b4:	e04a      	b.n	800674c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	785b      	ldrb	r3, [r3, #1]
 80066ba:	2b09      	cmp	r3, #9
 80066bc:	d83b      	bhi.n	8006736 <USBD_StdDevReq+0xc2>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <USBD_StdDevReq+0x50>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	08006719 	.word	0x08006719
 80066c8:	0800672d 	.word	0x0800672d
 80066cc:	08006737 	.word	0x08006737
 80066d0:	08006723 	.word	0x08006723
 80066d4:	08006737 	.word	0x08006737
 80066d8:	080066f7 	.word	0x080066f7
 80066dc:	080066ed 	.word	0x080066ed
 80066e0:	08006737 	.word	0x08006737
 80066e4:	0800670f 	.word	0x0800670f
 80066e8:	08006701 	.word	0x08006701
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa3c 	bl	8006b6c <USBD_GetDescriptor>
          break;
 80066f4:	e024      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80066f6:	6839      	ldr	r1, [r7, #0]
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	f000 fba1 	bl	8006e40 <USBD_SetAddress>
          break;
 80066fe:	e01f      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006700:	6839      	ldr	r1, [r7, #0]
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fbe0 	bl	8006ec8 <USBD_SetConfig>
 8006708:	4603      	mov	r3, r0
 800670a:	73fb      	strb	r3, [r7, #15]
          break;
 800670c:	e018      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fc83 	bl	800701c <USBD_GetConfig>
          break;
 8006716:	e013      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fcb4 	bl	8007088 <USBD_GetStatus>
          break;
 8006720:	e00e      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	6878      	ldr	r0, [r7, #4]
 8006726:	f000 fce3 	bl	80070f0 <USBD_SetFeature>
          break;
 800672a:	e009      	b.n	8006740 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fd07 	bl	8007142 <USBD_ClrFeature>
          break;
 8006734:	e004      	b.n	8006740 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006736:	6839      	ldr	r1, [r7, #0]
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fd5e 	bl	80071fa <USBD_CtlError>
          break;
 800673e:	bf00      	nop
      }
      break;
 8006740:	e004      	b.n	800674c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006742:	6839      	ldr	r1, [r7, #0]
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f000 fd58 	bl	80071fa <USBD_CtlError>
      break;
 800674a:	bf00      	nop
  }

  return ret;
 800674c:	7bfb      	ldrb	r3, [r7, #15]
}
 800674e:	4618      	mov	r0, r3
 8006750:	3710      	adds	r7, #16
 8006752:	46bd      	mov	sp, r7
 8006754:	bd80      	pop	{r7, pc}
 8006756:	bf00      	nop

08006758 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b084      	sub	sp, #16
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
 8006760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	781b      	ldrb	r3, [r3, #0]
 800676a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800676e:	2b40      	cmp	r3, #64	; 0x40
 8006770:	d005      	beq.n	800677e <USBD_StdItfReq+0x26>
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d852      	bhi.n	800681c <USBD_StdItfReq+0xc4>
 8006776:	2b00      	cmp	r3, #0
 8006778:	d001      	beq.n	800677e <USBD_StdItfReq+0x26>
 800677a:	2b20      	cmp	r3, #32
 800677c:	d14e      	bne.n	800681c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006784:	b2db      	uxtb	r3, r3
 8006786:	3b01      	subs	r3, #1
 8006788:	2b02      	cmp	r3, #2
 800678a:	d840      	bhi.n	800680e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	889b      	ldrh	r3, [r3, #4]
 8006790:	b2db      	uxtb	r3, r3
 8006792:	2b01      	cmp	r3, #1
 8006794:	d836      	bhi.n	8006804 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	889b      	ldrh	r3, [r3, #4]
 800679a:	b2db      	uxtb	r3, r3
 800679c:	4619      	mov	r1, r3
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7ff fed9 	bl	8006556 <USBD_CoreFindIF>
 80067a4:	4603      	mov	r3, r0
 80067a6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067a8:	7bbb      	ldrb	r3, [r7, #14]
 80067aa:	2bff      	cmp	r3, #255	; 0xff
 80067ac:	d01d      	beq.n	80067ea <USBD_StdItfReq+0x92>
 80067ae:	7bbb      	ldrb	r3, [r7, #14]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d11a      	bne.n	80067ea <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80067b4:	7bba      	ldrb	r2, [r7, #14]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	32ae      	adds	r2, #174	; 0xae
 80067ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00f      	beq.n	80067e4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80067c4:	7bba      	ldrb	r2, [r7, #14]
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80067cc:	7bba      	ldrb	r2, [r7, #14]
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	32ae      	adds	r2, #174	; 0xae
 80067d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
 80067de:	4603      	mov	r3, r0
 80067e0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067e2:	e004      	b.n	80067ee <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80067e4:	2303      	movs	r3, #3
 80067e6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80067e8:	e001      	b.n	80067ee <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80067ea:	2303      	movs	r3, #3
 80067ec:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	88db      	ldrh	r3, [r3, #6]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d110      	bne.n	8006818 <USBD_StdItfReq+0xc0>
 80067f6:	7bfb      	ldrb	r3, [r7, #15]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10d      	bne.n	8006818 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80067fc:	6878      	ldr	r0, [r7, #4]
 80067fe:	f000 fdc7 	bl	8007390 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006802:	e009      	b.n	8006818 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006804:	6839      	ldr	r1, [r7, #0]
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fcf7 	bl	80071fa <USBD_CtlError>
          break;
 800680c:	e004      	b.n	8006818 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800680e:	6839      	ldr	r1, [r7, #0]
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f000 fcf2 	bl	80071fa <USBD_CtlError>
          break;
 8006816:	e000      	b.n	800681a <USBD_StdItfReq+0xc2>
          break;
 8006818:	bf00      	nop
      }
      break;
 800681a:	e004      	b.n	8006826 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800681c:	6839      	ldr	r1, [r7, #0]
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 fceb 	bl	80071fa <USBD_CtlError>
      break;
 8006824:	bf00      	nop
  }

  return ret;
 8006826:	7bfb      	ldrb	r3, [r7, #15]
}
 8006828:	4618      	mov	r0, r3
 800682a:	3710      	adds	r7, #16
 800682c:	46bd      	mov	sp, r7
 800682e:	bd80      	pop	{r7, pc}

08006830 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006830:	b580      	push	{r7, lr}
 8006832:	b084      	sub	sp, #16
 8006834:	af00      	add	r7, sp, #0
 8006836:	6078      	str	r0, [r7, #4]
 8006838:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800683a:	2300      	movs	r3, #0
 800683c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	889b      	ldrh	r3, [r3, #4]
 8006842:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800684c:	2b40      	cmp	r3, #64	; 0x40
 800684e:	d007      	beq.n	8006860 <USBD_StdEPReq+0x30>
 8006850:	2b40      	cmp	r3, #64	; 0x40
 8006852:	f200 817f 	bhi.w	8006b54 <USBD_StdEPReq+0x324>
 8006856:	2b00      	cmp	r3, #0
 8006858:	d02a      	beq.n	80068b0 <USBD_StdEPReq+0x80>
 800685a:	2b20      	cmp	r3, #32
 800685c:	f040 817a 	bne.w	8006b54 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006860:	7bbb      	ldrb	r3, [r7, #14]
 8006862:	4619      	mov	r1, r3
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f7ff fe83 	bl	8006570 <USBD_CoreFindEP>
 800686a:	4603      	mov	r3, r0
 800686c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800686e:	7b7b      	ldrb	r3, [r7, #13]
 8006870:	2bff      	cmp	r3, #255	; 0xff
 8006872:	f000 8174 	beq.w	8006b5e <USBD_StdEPReq+0x32e>
 8006876:	7b7b      	ldrb	r3, [r7, #13]
 8006878:	2b00      	cmp	r3, #0
 800687a:	f040 8170 	bne.w	8006b5e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800687e:	7b7a      	ldrb	r2, [r7, #13]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006886:	7b7a      	ldrb	r2, [r7, #13]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	32ae      	adds	r2, #174	; 0xae
 800688c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	f000 8163 	beq.w	8006b5e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006898:	7b7a      	ldrb	r2, [r7, #13]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	32ae      	adds	r2, #174	; 0xae
 800689e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068a2:	689b      	ldr	r3, [r3, #8]
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	4798      	blx	r3
 80068aa:	4603      	mov	r3, r0
 80068ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80068ae:	e156      	b.n	8006b5e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	785b      	ldrb	r3, [r3, #1]
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d008      	beq.n	80068ca <USBD_StdEPReq+0x9a>
 80068b8:	2b03      	cmp	r3, #3
 80068ba:	f300 8145 	bgt.w	8006b48 <USBD_StdEPReq+0x318>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 809b 	beq.w	80069fa <USBD_StdEPReq+0x1ca>
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d03c      	beq.n	8006942 <USBD_StdEPReq+0x112>
 80068c8:	e13e      	b.n	8006b48 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d002      	beq.n	80068dc <USBD_StdEPReq+0xac>
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d016      	beq.n	8006908 <USBD_StdEPReq+0xd8>
 80068da:	e02c      	b.n	8006936 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80068dc:	7bbb      	ldrb	r3, [r7, #14]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00d      	beq.n	80068fe <USBD_StdEPReq+0xce>
 80068e2:	7bbb      	ldrb	r3, [r7, #14]
 80068e4:	2b80      	cmp	r3, #128	; 0x80
 80068e6:	d00a      	beq.n	80068fe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80068e8:	7bbb      	ldrb	r3, [r7, #14]
 80068ea:	4619      	mov	r1, r3
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f001 fa53 	bl	8007d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80068f2:	2180      	movs	r1, #128	; 0x80
 80068f4:	6878      	ldr	r0, [r7, #4]
 80068f6:	f001 fa4f 	bl	8007d98 <USBD_LL_StallEP>
 80068fa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80068fc:	e020      	b.n	8006940 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80068fe:	6839      	ldr	r1, [r7, #0]
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fc7a 	bl	80071fa <USBD_CtlError>
              break;
 8006906:	e01b      	b.n	8006940 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	885b      	ldrh	r3, [r3, #2]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d10e      	bne.n	800692e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006910:	7bbb      	ldrb	r3, [r7, #14]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d00b      	beq.n	800692e <USBD_StdEPReq+0xfe>
 8006916:	7bbb      	ldrb	r3, [r7, #14]
 8006918:	2b80      	cmp	r3, #128	; 0x80
 800691a:	d008      	beq.n	800692e <USBD_StdEPReq+0xfe>
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	88db      	ldrh	r3, [r3, #6]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d104      	bne.n	800692e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	4619      	mov	r1, r3
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fa35 	bl	8007d98 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fd2e 	bl	8007390 <USBD_CtlSendStatus>

              break;
 8006934:	e004      	b.n	8006940 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006936:	6839      	ldr	r1, [r7, #0]
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f000 fc5e 	bl	80071fa <USBD_CtlError>
              break;
 800693e:	bf00      	nop
          }
          break;
 8006940:	e107      	b.n	8006b52 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006948:	b2db      	uxtb	r3, r3
 800694a:	2b02      	cmp	r3, #2
 800694c:	d002      	beq.n	8006954 <USBD_StdEPReq+0x124>
 800694e:	2b03      	cmp	r3, #3
 8006950:	d016      	beq.n	8006980 <USBD_StdEPReq+0x150>
 8006952:	e04b      	b.n	80069ec <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006954:	7bbb      	ldrb	r3, [r7, #14]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00d      	beq.n	8006976 <USBD_StdEPReq+0x146>
 800695a:	7bbb      	ldrb	r3, [r7, #14]
 800695c:	2b80      	cmp	r3, #128	; 0x80
 800695e:	d00a      	beq.n	8006976 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006960:	7bbb      	ldrb	r3, [r7, #14]
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f001 fa17 	bl	8007d98 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800696a:	2180      	movs	r1, #128	; 0x80
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f001 fa13 	bl	8007d98 <USBD_LL_StallEP>
 8006972:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006974:	e040      	b.n	80069f8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006976:	6839      	ldr	r1, [r7, #0]
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 fc3e 	bl	80071fa <USBD_CtlError>
              break;
 800697e:	e03b      	b.n	80069f8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	885b      	ldrh	r3, [r3, #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d136      	bne.n	80069f6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006988:	7bbb      	ldrb	r3, [r7, #14]
 800698a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800698e:	2b00      	cmp	r3, #0
 8006990:	d004      	beq.n	800699c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006992:	7bbb      	ldrb	r3, [r7, #14]
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f001 fa1d 	bl	8007dd6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 fcf7 	bl	8007390 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80069a2:	7bbb      	ldrb	r3, [r7, #14]
 80069a4:	4619      	mov	r1, r3
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f7ff fde2 	bl	8006570 <USBD_CoreFindEP>
 80069ac:	4603      	mov	r3, r0
 80069ae:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069b0:	7b7b      	ldrb	r3, [r7, #13]
 80069b2:	2bff      	cmp	r3, #255	; 0xff
 80069b4:	d01f      	beq.n	80069f6 <USBD_StdEPReq+0x1c6>
 80069b6:	7b7b      	ldrb	r3, [r7, #13]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d11c      	bne.n	80069f6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80069bc:	7b7a      	ldrb	r2, [r7, #13]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80069c4:	7b7a      	ldrb	r2, [r7, #13]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32ae      	adds	r2, #174	; 0xae
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d010      	beq.n	80069f6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80069d4:	7b7a      	ldrb	r2, [r7, #13]
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	32ae      	adds	r2, #174	; 0xae
 80069da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069de:	689b      	ldr	r3, [r3, #8]
 80069e0:	6839      	ldr	r1, [r7, #0]
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	4798      	blx	r3
 80069e6:	4603      	mov	r3, r0
 80069e8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80069ea:	e004      	b.n	80069f6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80069ec:	6839      	ldr	r1, [r7, #0]
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 fc03 	bl	80071fa <USBD_CtlError>
              break;
 80069f4:	e000      	b.n	80069f8 <USBD_StdEPReq+0x1c8>
              break;
 80069f6:	bf00      	nop
          }
          break;
 80069f8:	e0ab      	b.n	8006b52 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	2b02      	cmp	r3, #2
 8006a04:	d002      	beq.n	8006a0c <USBD_StdEPReq+0x1dc>
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d032      	beq.n	8006a70 <USBD_StdEPReq+0x240>
 8006a0a:	e097      	b.n	8006b3c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d007      	beq.n	8006a22 <USBD_StdEPReq+0x1f2>
 8006a12:	7bbb      	ldrb	r3, [r7, #14]
 8006a14:	2b80      	cmp	r3, #128	; 0x80
 8006a16:	d004      	beq.n	8006a22 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fbed 	bl	80071fa <USBD_CtlError>
                break;
 8006a20:	e091      	b.n	8006b46 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	da0b      	bge.n	8006a42 <USBD_StdEPReq+0x212>
 8006a2a:	7bbb      	ldrb	r3, [r7, #14]
 8006a2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006a30:	4613      	mov	r3, r2
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	4413      	add	r3, r2
 8006a36:	009b      	lsls	r3, r3, #2
 8006a38:	3310      	adds	r3, #16
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4413      	add	r3, r2
 8006a3e:	3304      	adds	r3, #4
 8006a40:	e00b      	b.n	8006a5a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006a48:	4613      	mov	r3, r2
 8006a4a:	009b      	lsls	r3, r3, #2
 8006a4c:	4413      	add	r3, r2
 8006a4e:	009b      	lsls	r3, r3, #2
 8006a50:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	4413      	add	r3, r2
 8006a58:	3304      	adds	r3, #4
 8006a5a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	2202      	movs	r2, #2
 8006a66:	4619      	mov	r1, r3
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f000 fc37 	bl	80072dc <USBD_CtlSendData>
              break;
 8006a6e:	e06a      	b.n	8006b46 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006a70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	da11      	bge.n	8006a9c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	f003 020f 	and.w	r2, r3, #15
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	4613      	mov	r3, r2
 8006a82:	009b      	lsls	r3, r3, #2
 8006a84:	4413      	add	r3, r2
 8006a86:	009b      	lsls	r3, r3, #2
 8006a88:	440b      	add	r3, r1
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d117      	bne.n	8006ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 fbb0 	bl	80071fa <USBD_CtlError>
                  break;
 8006a9a:	e054      	b.n	8006b46 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006a9c:	7bbb      	ldrb	r3, [r7, #14]
 8006a9e:	f003 020f 	and.w	r2, r3, #15
 8006aa2:	6879      	ldr	r1, [r7, #4]
 8006aa4:	4613      	mov	r3, r2
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	440b      	add	r3, r1
 8006aae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006ab2:	881b      	ldrh	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d104      	bne.n	8006ac2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fb9d 	bl	80071fa <USBD_CtlError>
                  break;
 8006ac0:	e041      	b.n	8006b46 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ac2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	da0b      	bge.n	8006ae2 <USBD_StdEPReq+0x2b2>
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	009b      	lsls	r3, r3, #2
 8006ad4:	4413      	add	r3, r2
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	3310      	adds	r3, #16
 8006ada:	687a      	ldr	r2, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	3304      	adds	r3, #4
 8006ae0:	e00b      	b.n	8006afa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ae2:	7bbb      	ldrb	r3, [r7, #14]
 8006ae4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ae8:	4613      	mov	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4413      	add	r3, r2
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	4413      	add	r3, r2
 8006af8:	3304      	adds	r3, #4
 8006afa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006afc:	7bbb      	ldrb	r3, [r7, #14]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <USBD_StdEPReq+0x2d8>
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	2b80      	cmp	r3, #128	; 0x80
 8006b06:	d103      	bne.n	8006b10 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e00e      	b.n	8006b2e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006b10:	7bbb      	ldrb	r3, [r7, #14]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f001 f97d 	bl	8007e14 <USBD_LL_IsStallEP>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d003      	beq.n	8006b28 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2201      	movs	r2, #1
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	e002      	b.n	8006b2e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	2202      	movs	r2, #2
 8006b32:	4619      	mov	r1, r3
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fbd1 	bl	80072dc <USBD_CtlSendData>
              break;
 8006b3a:	e004      	b.n	8006b46 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006b3c:	6839      	ldr	r1, [r7, #0]
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fb5b 	bl	80071fa <USBD_CtlError>
              break;
 8006b44:	bf00      	nop
          }
          break;
 8006b46:	e004      	b.n	8006b52 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fb55 	bl	80071fa <USBD_CtlError>
          break;
 8006b50:	bf00      	nop
      }
      break;
 8006b52:	e005      	b.n	8006b60 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006b54:	6839      	ldr	r1, [r7, #0]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f000 fb4f 	bl	80071fa <USBD_CtlError>
      break;
 8006b5c:	e000      	b.n	8006b60 <USBD_StdEPReq+0x330>
      break;
 8006b5e:	bf00      	nop
  }

  return ret;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3710      	adds	r7, #16
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
	...

08006b6c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b6c:	b580      	push	{r7, lr}
 8006b6e:	b084      	sub	sp, #16
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
 8006b74:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006b76:	2300      	movs	r3, #0
 8006b78:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	885b      	ldrh	r3, [r3, #2]
 8006b86:	0a1b      	lsrs	r3, r3, #8
 8006b88:	b29b      	uxth	r3, r3
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	2b06      	cmp	r3, #6
 8006b8e:	f200 8128 	bhi.w	8006de2 <USBD_GetDescriptor+0x276>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USBD_GetDescriptor+0x2c>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bb5 	.word	0x08006bb5
 8006b9c:	08006bcd 	.word	0x08006bcd
 8006ba0:	08006c0d 	.word	0x08006c0d
 8006ba4:	08006de3 	.word	0x08006de3
 8006ba8:	08006de3 	.word	0x08006de3
 8006bac:	08006d83 	.word	0x08006d83
 8006bb0:	08006daf 	.word	0x08006daf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	687a      	ldr	r2, [r7, #4]
 8006bbe:	7c12      	ldrb	r2, [r2, #16]
 8006bc0:	f107 0108 	add.w	r1, r7, #8
 8006bc4:	4610      	mov	r0, r2
 8006bc6:	4798      	blx	r3
 8006bc8:	60f8      	str	r0, [r7, #12]
      break;
 8006bca:	e112      	b.n	8006df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	7c1b      	ldrb	r3, [r3, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d10d      	bne.n	8006bf0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bdc:	f107 0208 	add.w	r2, r7, #8
 8006be0:	4610      	mov	r0, r2
 8006be2:	4798      	blx	r3
 8006be4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	3301      	adds	r3, #1
 8006bea:	2202      	movs	r2, #2
 8006bec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006bee:	e100      	b.n	8006df2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bf8:	f107 0208 	add.w	r2, r7, #8
 8006bfc:	4610      	mov	r0, r2
 8006bfe:	4798      	blx	r3
 8006c00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	3301      	adds	r3, #1
 8006c06:	2202      	movs	r2, #2
 8006c08:	701a      	strb	r2, [r3, #0]
      break;
 8006c0a:	e0f2      	b.n	8006df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	2b05      	cmp	r3, #5
 8006c14:	f200 80ac 	bhi.w	8006d70 <USBD_GetDescriptor+0x204>
 8006c18:	a201      	add	r2, pc, #4	; (adr r2, 8006c20 <USBD_GetDescriptor+0xb4>)
 8006c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c1e:	bf00      	nop
 8006c20:	08006c39 	.word	0x08006c39
 8006c24:	08006c6d 	.word	0x08006c6d
 8006c28:	08006ca1 	.word	0x08006ca1
 8006c2c:	08006cd5 	.word	0x08006cd5
 8006c30:	08006d09 	.word	0x08006d09
 8006c34:	08006d3d 	.word	0x08006d3d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00b      	beq.n	8006c5c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	7c12      	ldrb	r2, [r2, #16]
 8006c50:	f107 0108 	add.w	r1, r7, #8
 8006c54:	4610      	mov	r0, r2
 8006c56:	4798      	blx	r3
 8006c58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c5a:	e091      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c5c:	6839      	ldr	r1, [r7, #0]
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 facb 	bl	80071fa <USBD_CtlError>
            err++;
 8006c64:	7afb      	ldrb	r3, [r7, #11]
 8006c66:	3301      	adds	r3, #1
 8006c68:	72fb      	strb	r3, [r7, #11]
          break;
 8006c6a:	e089      	b.n	8006d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d00b      	beq.n	8006c90 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7e:	689b      	ldr	r3, [r3, #8]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	7c12      	ldrb	r2, [r2, #16]
 8006c84:	f107 0108 	add.w	r1, r7, #8
 8006c88:	4610      	mov	r0, r2
 8006c8a:	4798      	blx	r3
 8006c8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006c8e:	e077      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006c90:	6839      	ldr	r1, [r7, #0]
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 fab1 	bl	80071fa <USBD_CtlError>
            err++;
 8006c98:	7afb      	ldrb	r3, [r7, #11]
 8006c9a:	3301      	adds	r3, #1
 8006c9c:	72fb      	strb	r3, [r7, #11]
          break;
 8006c9e:	e06f      	b.n	8006d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d00b      	beq.n	8006cc4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cb2:	68db      	ldr	r3, [r3, #12]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	7c12      	ldrb	r2, [r2, #16]
 8006cb8:	f107 0108 	add.w	r1, r7, #8
 8006cbc:	4610      	mov	r0, r2
 8006cbe:	4798      	blx	r3
 8006cc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cc2:	e05d      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cc4:	6839      	ldr	r1, [r7, #0]
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 fa97 	bl	80071fa <USBD_CtlError>
            err++;
 8006ccc:	7afb      	ldrb	r3, [r7, #11]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	72fb      	strb	r3, [r7, #11]
          break;
 8006cd2:	e055      	b.n	8006d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cda:	691b      	ldr	r3, [r3, #16]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00b      	beq.n	8006cf8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006cf6:	e043      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006cf8:	6839      	ldr	r1, [r7, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 fa7d 	bl	80071fa <USBD_CtlError>
            err++;
 8006d00:	7afb      	ldrb	r3, [r7, #11]
 8006d02:	3301      	adds	r3, #1
 8006d04:	72fb      	strb	r3, [r7, #11]
          break;
 8006d06:	e03b      	b.n	8006d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00b      	beq.n	8006d2c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	695b      	ldr	r3, [r3, #20]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	7c12      	ldrb	r2, [r2, #16]
 8006d20:	f107 0108 	add.w	r1, r7, #8
 8006d24:	4610      	mov	r0, r2
 8006d26:	4798      	blx	r3
 8006d28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d2a:	e029      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa63 	bl	80071fa <USBD_CtlError>
            err++;
 8006d34:	7afb      	ldrb	r3, [r7, #11]
 8006d36:	3301      	adds	r3, #1
 8006d38:	72fb      	strb	r3, [r7, #11]
          break;
 8006d3a:	e021      	b.n	8006d80 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d42:	699b      	ldr	r3, [r3, #24]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d00b      	beq.n	8006d60 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	7c12      	ldrb	r2, [r2, #16]
 8006d54:	f107 0108 	add.w	r1, r7, #8
 8006d58:	4610      	mov	r0, r2
 8006d5a:	4798      	blx	r3
 8006d5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d5e:	e00f      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f000 fa49 	bl	80071fa <USBD_CtlError>
            err++;
 8006d68:	7afb      	ldrb	r3, [r7, #11]
 8006d6a:	3301      	adds	r3, #1
 8006d6c:	72fb      	strb	r3, [r7, #11]
          break;
 8006d6e:	e007      	b.n	8006d80 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006d70:	6839      	ldr	r1, [r7, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 fa41 	bl	80071fa <USBD_CtlError>
          err++;
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	3301      	adds	r3, #1
 8006d7c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006d7e:	bf00      	nop
      }
      break;
 8006d80:	e037      	b.n	8006df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	7c1b      	ldrb	r3, [r3, #16]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d109      	bne.n	8006d9e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d92:	f107 0208 	add.w	r2, r7, #8
 8006d96:	4610      	mov	r0, r2
 8006d98:	4798      	blx	r3
 8006d9a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006d9c:	e029      	b.n	8006df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006d9e:	6839      	ldr	r1, [r7, #0]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f000 fa2a 	bl	80071fa <USBD_CtlError>
        err++;
 8006da6:	7afb      	ldrb	r3, [r7, #11]
 8006da8:	3301      	adds	r3, #1
 8006daa:	72fb      	strb	r3, [r7, #11]
      break;
 8006dac:	e021      	b.n	8006df2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	7c1b      	ldrb	r3, [r3, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10d      	bne.n	8006dd2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dbe:	f107 0208 	add.w	r2, r7, #8
 8006dc2:	4610      	mov	r0, r2
 8006dc4:	4798      	blx	r3
 8006dc6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	3301      	adds	r3, #1
 8006dcc:	2207      	movs	r2, #7
 8006dce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006dd0:	e00f      	b.n	8006df2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fa10 	bl	80071fa <USBD_CtlError>
        err++;
 8006dda:	7afb      	ldrb	r3, [r7, #11]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	72fb      	strb	r3, [r7, #11]
      break;
 8006de0:	e007      	b.n	8006df2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006de2:	6839      	ldr	r1, [r7, #0]
 8006de4:	6878      	ldr	r0, [r7, #4]
 8006de6:	f000 fa08 	bl	80071fa <USBD_CtlError>
      err++;
 8006dea:	7afb      	ldrb	r3, [r7, #11]
 8006dec:	3301      	adds	r3, #1
 8006dee:	72fb      	strb	r3, [r7, #11]
      break;
 8006df0:	bf00      	nop
  }

  if (err != 0U)
 8006df2:	7afb      	ldrb	r3, [r7, #11]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d11e      	bne.n	8006e36 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d016      	beq.n	8006e2e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006e00:	893b      	ldrh	r3, [r7, #8]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d00e      	beq.n	8006e24 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	88da      	ldrh	r2, [r3, #6]
 8006e0a:	893b      	ldrh	r3, [r7, #8]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	bf28      	it	cs
 8006e10:	4613      	movcs	r3, r2
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006e16:	893b      	ldrh	r3, [r7, #8]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68f9      	ldr	r1, [r7, #12]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa5d 	bl	80072dc <USBD_CtlSendData>
 8006e22:	e009      	b.n	8006e38 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 f9e7 	bl	80071fa <USBD_CtlError>
 8006e2c:	e004      	b.n	8006e38 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 faae 	bl	8007390 <USBD_CtlSendStatus>
 8006e34:	e000      	b.n	8006e38 <USBD_GetDescriptor+0x2cc>
    return;
 8006e36:	bf00      	nop
  }
}
 8006e38:	3710      	adds	r7, #16
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop

08006e40 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	889b      	ldrh	r3, [r3, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d131      	bne.n	8006eb6 <USBD_SetAddress+0x76>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	88db      	ldrh	r3, [r3, #6]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d12d      	bne.n	8006eb6 <USBD_SetAddress+0x76>
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	885b      	ldrh	r3, [r3, #2]
 8006e5e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e60:	d829      	bhi.n	8006eb6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	885b      	ldrh	r3, [r3, #2]
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e6c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e74:	b2db      	uxtb	r3, r3
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d104      	bne.n	8006e84 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006e7a:	6839      	ldr	r1, [r7, #0]
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f9bc 	bl	80071fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e82:	e01d      	b.n	8006ec0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7bfa      	ldrb	r2, [r7, #15]
 8006e88:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
 8006e8e:	4619      	mov	r1, r3
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f000 ffeb 	bl	8007e6c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fa7a 	bl	8007390 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006e9c:	7bfb      	ldrb	r3, [r7, #15]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d004      	beq.n	8006eac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	2202      	movs	r2, #2
 8006ea6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eaa:	e009      	b.n	8006ec0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	2201      	movs	r2, #1
 8006eb0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006eb4:	e004      	b.n	8006ec0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006eb6:	6839      	ldr	r1, [r7, #0]
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f000 f99e 	bl	80071fa <USBD_CtlError>
  }
}
 8006ebe:	bf00      	nop
 8006ec0:	bf00      	nop
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	885b      	ldrh	r3, [r3, #2]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	4b4e      	ldr	r3, [pc, #312]	; (8007018 <USBD_SetConfig+0x150>)
 8006ede:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006ee0:	4b4d      	ldr	r3, [pc, #308]	; (8007018 <USBD_SetConfig+0x150>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d905      	bls.n	8006ef4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006ee8:	6839      	ldr	r1, [r7, #0]
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f985 	bl	80071fa <USBD_CtlError>
    return USBD_FAIL;
 8006ef0:	2303      	movs	r3, #3
 8006ef2:	e08c      	b.n	800700e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006efa:	b2db      	uxtb	r3, r3
 8006efc:	2b02      	cmp	r3, #2
 8006efe:	d002      	beq.n	8006f06 <USBD_SetConfig+0x3e>
 8006f00:	2b03      	cmp	r3, #3
 8006f02:	d029      	beq.n	8006f58 <USBD_SetConfig+0x90>
 8006f04:	e075      	b.n	8006ff2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006f06:	4b44      	ldr	r3, [pc, #272]	; (8007018 <USBD_SetConfig+0x150>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d020      	beq.n	8006f50 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006f0e:	4b42      	ldr	r3, [pc, #264]	; (8007018 <USBD_SetConfig+0x150>)
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	461a      	mov	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006f18:	4b3f      	ldr	r3, [pc, #252]	; (8007018 <USBD_SetConfig+0x150>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	4619      	mov	r1, r3
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fe ffe7 	bl	8005ef2 <USBD_SetClassConfig>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006f28:	7bfb      	ldrb	r3, [r7, #15]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006f2e:	6839      	ldr	r1, [r7, #0]
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f962 	bl	80071fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f3e:	e065      	b.n	800700c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fa25 	bl	8007390 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2203      	movs	r2, #3
 8006f4a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006f4e:	e05d      	b.n	800700c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fa1d 	bl	8007390 <USBD_CtlSendStatus>
      break;
 8006f56:	e059      	b.n	800700c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006f58:	4b2f      	ldr	r3, [pc, #188]	; (8007018 <USBD_SetConfig+0x150>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d112      	bne.n	8006f86 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2202      	movs	r2, #2
 8006f64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006f68:	4b2b      	ldr	r3, [pc, #172]	; (8007018 <USBD_SetConfig+0x150>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006f72:	4b29      	ldr	r3, [pc, #164]	; (8007018 <USBD_SetConfig+0x150>)
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	4619      	mov	r1, r3
 8006f78:	6878      	ldr	r0, [r7, #4]
 8006f7a:	f7fe ffd6 	bl	8005f2a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa06 	bl	8007390 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006f84:	e042      	b.n	800700c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006f86:	4b24      	ldr	r3, [pc, #144]	; (8007018 <USBD_SetConfig+0x150>)
 8006f88:	781b      	ldrb	r3, [r3, #0]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d02a      	beq.n	8006fea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685b      	ldr	r3, [r3, #4]
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f7fe ffc4 	bl	8005f2a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006fa2:	4b1d      	ldr	r3, [pc, #116]	; (8007018 <USBD_SetConfig+0x150>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006fac:	4b1a      	ldr	r3, [pc, #104]	; (8007018 <USBD_SetConfig+0x150>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f7fe ff9d 	bl	8005ef2 <USBD_SetClassConfig>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00f      	beq.n	8006fe2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006fc2:	6839      	ldr	r1, [r7, #0]
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f918 	bl	80071fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	685b      	ldr	r3, [r3, #4]
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fe ffa9 	bl	8005f2a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006fe0:	e014      	b.n	800700c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006fe2:	6878      	ldr	r0, [r7, #4]
 8006fe4:	f000 f9d4 	bl	8007390 <USBD_CtlSendStatus>
      break;
 8006fe8:	e010      	b.n	800700c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006fea:	6878      	ldr	r0, [r7, #4]
 8006fec:	f000 f9d0 	bl	8007390 <USBD_CtlSendStatus>
      break;
 8006ff0:	e00c      	b.n	800700c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006ff2:	6839      	ldr	r1, [r7, #0]
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f900 	bl	80071fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ffa:	4b07      	ldr	r3, [pc, #28]	; (8007018 <USBD_SetConfig+0x150>)
 8006ffc:	781b      	ldrb	r3, [r3, #0]
 8006ffe:	4619      	mov	r1, r3
 8007000:	6878      	ldr	r0, [r7, #4]
 8007002:	f7fe ff92 	bl	8005f2a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007006:	2303      	movs	r3, #3
 8007008:	73fb      	strb	r3, [r7, #15]
      break;
 800700a:	bf00      	nop
  }

  return ret;
 800700c:	7bfb      	ldrb	r3, [r7, #15]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	200001c8 	.word	0x200001c8

0800701c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	88db      	ldrh	r3, [r3, #6]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d004      	beq.n	8007038 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800702e:	6839      	ldr	r1, [r7, #0]
 8007030:	6878      	ldr	r0, [r7, #4]
 8007032:	f000 f8e2 	bl	80071fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007036:	e023      	b.n	8007080 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800703e:	b2db      	uxtb	r3, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	dc02      	bgt.n	800704a <USBD_GetConfig+0x2e>
 8007044:	2b00      	cmp	r3, #0
 8007046:	dc03      	bgt.n	8007050 <USBD_GetConfig+0x34>
 8007048:	e015      	b.n	8007076 <USBD_GetConfig+0x5a>
 800704a:	2b03      	cmp	r3, #3
 800704c:	d00b      	beq.n	8007066 <USBD_GetConfig+0x4a>
 800704e:	e012      	b.n	8007076 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	3308      	adds	r3, #8
 800705a:	2201      	movs	r2, #1
 800705c:	4619      	mov	r1, r3
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f93c 	bl	80072dc <USBD_CtlSendData>
        break;
 8007064:	e00c      	b.n	8007080 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	3304      	adds	r3, #4
 800706a:	2201      	movs	r2, #1
 800706c:	4619      	mov	r1, r3
 800706e:	6878      	ldr	r0, [r7, #4]
 8007070:	f000 f934 	bl	80072dc <USBD_CtlSendData>
        break;
 8007074:	e004      	b.n	8007080 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 f8be 	bl	80071fa <USBD_CtlError>
        break;
 800707e:	bf00      	nop
}
 8007080:	bf00      	nop
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b082      	sub	sp, #8
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007098:	b2db      	uxtb	r3, r3
 800709a:	3b01      	subs	r3, #1
 800709c:	2b02      	cmp	r3, #2
 800709e:	d81e      	bhi.n	80070de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80070a0:	683b      	ldr	r3, [r7, #0]
 80070a2:	88db      	ldrh	r3, [r3, #6]
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d004      	beq.n	80070b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80070a8:	6839      	ldr	r1, [r7, #0]
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f8a5 	bl	80071fa <USBD_CtlError>
        break;
 80070b0:	e01a      	b.n	80070e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2201      	movs	r2, #1
 80070b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d005      	beq.n	80070ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	68db      	ldr	r3, [r3, #12]
 80070c6:	f043 0202 	orr.w	r2, r3, #2
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	330c      	adds	r3, #12
 80070d2:	2202      	movs	r2, #2
 80070d4:	4619      	mov	r1, r3
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f000 f900 	bl	80072dc <USBD_CtlSendData>
      break;
 80070dc:	e004      	b.n	80070e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80070de:	6839      	ldr	r1, [r7, #0]
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f88a 	bl	80071fa <USBD_CtlError>
      break;
 80070e6:	bf00      	nop
  }
}
 80070e8:	bf00      	nop
 80070ea:	3708      	adds	r7, #8
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}

080070f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b082      	sub	sp, #8
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
 80070f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	885b      	ldrh	r3, [r3, #2]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d107      	bne.n	8007112 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f940 	bl	8007390 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007110:	e013      	b.n	800713a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	885b      	ldrh	r3, [r3, #2]
 8007116:	2b02      	cmp	r3, #2
 8007118:	d10b      	bne.n	8007132 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800711a:	683b      	ldr	r3, [r7, #0]
 800711c:	889b      	ldrh	r3, [r3, #4]
 800711e:	0a1b      	lsrs	r3, r3, #8
 8007120:	b29b      	uxth	r3, r3
 8007122:	b2da      	uxtb	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f000 f930 	bl	8007390 <USBD_CtlSendStatus>
}
 8007130:	e003      	b.n	800713a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007132:	6839      	ldr	r1, [r7, #0]
 8007134:	6878      	ldr	r0, [r7, #4]
 8007136:	f000 f860 	bl	80071fa <USBD_CtlError>
}
 800713a:	bf00      	nop
 800713c:	3708      	adds	r7, #8
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}

08007142 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007152:	b2db      	uxtb	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	2b02      	cmp	r3, #2
 8007158:	d80b      	bhi.n	8007172 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	885b      	ldrh	r3, [r3, #2]
 800715e:	2b01      	cmp	r3, #1
 8007160:	d10c      	bne.n	800717c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f910 	bl	8007390 <USBD_CtlSendStatus>
      }
      break;
 8007170:	e004      	b.n	800717c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6878      	ldr	r0, [r7, #4]
 8007176:	f000 f840 	bl	80071fa <USBD_CtlError>
      break;
 800717a:	e000      	b.n	800717e <USBD_ClrFeature+0x3c>
      break;
 800717c:	bf00      	nop
  }
}
 800717e:	bf00      	nop
 8007180:	3708      	adds	r7, #8
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}

08007186 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007186:	b580      	push	{r7, lr}
 8007188:	b084      	sub	sp, #16
 800718a:	af00      	add	r7, sp, #0
 800718c:	6078      	str	r0, [r7, #4]
 800718e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	781a      	ldrb	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	3301      	adds	r3, #1
 80071a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	781a      	ldrb	r2, [r3, #0]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	3301      	adds	r3, #1
 80071ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f7ff fa41 	bl	8006638 <SWAPBYTE>
 80071b6:	4603      	mov	r3, r0
 80071b8:	461a      	mov	r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	3301      	adds	r3, #1
 80071c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3301      	adds	r3, #1
 80071c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fa34 	bl	8006638 <SWAPBYTE>
 80071d0:	4603      	mov	r3, r0
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	3301      	adds	r3, #1
 80071dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	3301      	adds	r3, #1
 80071e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f7ff fa27 	bl	8006638 <SWAPBYTE>
 80071ea:	4603      	mov	r3, r0
 80071ec:	461a      	mov	r2, r3
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	80da      	strh	r2, [r3, #6]
}
 80071f2:	bf00      	nop
 80071f4:	3710      	adds	r7, #16
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}

080071fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b082      	sub	sp, #8
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007204:	2180      	movs	r1, #128	; 0x80
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fdc6 	bl	8007d98 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800720c:	2100      	movs	r1, #0
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 fdc2 	bl	8007d98 <USBD_LL_StallEP>
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b086      	sub	sp, #24
 8007220:	af00      	add	r7, sp, #0
 8007222:	60f8      	str	r0, [r7, #12]
 8007224:	60b9      	str	r1, [r7, #8]
 8007226:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007228:	2300      	movs	r3, #0
 800722a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d036      	beq.n	80072a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007236:	6938      	ldr	r0, [r7, #16]
 8007238:	f000 f836 	bl	80072a8 <USBD_GetLen>
 800723c:	4603      	mov	r3, r0
 800723e:	3301      	adds	r3, #1
 8007240:	b29b      	uxth	r3, r3
 8007242:	005b      	lsls	r3, r3, #1
 8007244:	b29a      	uxth	r2, r3
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800724a:	7dfb      	ldrb	r3, [r7, #23]
 800724c:	68ba      	ldr	r2, [r7, #8]
 800724e:	4413      	add	r3, r2
 8007250:	687a      	ldr	r2, [r7, #4]
 8007252:	7812      	ldrb	r2, [r2, #0]
 8007254:	701a      	strb	r2, [r3, #0]
  idx++;
 8007256:	7dfb      	ldrb	r3, [r7, #23]
 8007258:	3301      	adds	r3, #1
 800725a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800725c:	7dfb      	ldrb	r3, [r7, #23]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	2203      	movs	r2, #3
 8007264:	701a      	strb	r2, [r3, #0]
  idx++;
 8007266:	7dfb      	ldrb	r3, [r7, #23]
 8007268:	3301      	adds	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800726c:	e013      	b.n	8007296 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800726e:	7dfb      	ldrb	r3, [r7, #23]
 8007270:	68ba      	ldr	r2, [r7, #8]
 8007272:	4413      	add	r3, r2
 8007274:	693a      	ldr	r2, [r7, #16]
 8007276:	7812      	ldrb	r2, [r2, #0]
 8007278:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	3301      	adds	r3, #1
 800727e:	613b      	str	r3, [r7, #16]
    idx++;
 8007280:	7dfb      	ldrb	r3, [r7, #23]
 8007282:	3301      	adds	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007286:	7dfb      	ldrb	r3, [r7, #23]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	4413      	add	r3, r2
 800728c:	2200      	movs	r2, #0
 800728e:	701a      	strb	r2, [r3, #0]
    idx++;
 8007290:	7dfb      	ldrb	r3, [r7, #23]
 8007292:	3301      	adds	r3, #1
 8007294:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b00      	cmp	r3, #0
 800729c:	d1e7      	bne.n	800726e <USBD_GetString+0x52>
 800729e:	e000      	b.n	80072a2 <USBD_GetString+0x86>
    return;
 80072a0:	bf00      	nop
  }
}
 80072a2:	3718      	adds	r7, #24
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80072b0:	2300      	movs	r3, #0
 80072b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80072b8:	e005      	b.n	80072c6 <USBD_GetLen+0x1e>
  {
    len++;
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	3301      	adds	r3, #1
 80072be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	3301      	adds	r3, #1
 80072c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	781b      	ldrb	r3, [r3, #0]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1f5      	bne.n	80072ba <USBD_GetLen+0x12>
  }

  return len;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3714      	adds	r7, #20
 80072d4:	46bd      	mov	sp, r7
 80072d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072da:	4770      	bx	lr

080072dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	687a      	ldr	r2, [r7, #4]
 80072f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	2100      	movs	r1, #0
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f000 fdd1 	bl	8007eaa <USBD_LL_Transmit>

  return USBD_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}

08007312 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007312:	b580      	push	{r7, lr}
 8007314:	b084      	sub	sp, #16
 8007316:	af00      	add	r7, sp, #0
 8007318:	60f8      	str	r0, [r7, #12]
 800731a:	60b9      	str	r1, [r7, #8]
 800731c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	68ba      	ldr	r2, [r7, #8]
 8007322:	2100      	movs	r1, #0
 8007324:	68f8      	ldr	r0, [r7, #12]
 8007326:	f000 fdc0 	bl	8007eaa <USBD_LL_Transmit>

  return USBD_OK;
 800732a:	2300      	movs	r3, #0
}
 800732c:	4618      	mov	r0, r3
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	2203      	movs	r2, #3
 8007344:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	687a      	ldr	r2, [r7, #4]
 800734c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68ba      	ldr	r2, [r7, #8]
 800735c:	2100      	movs	r1, #0
 800735e:	68f8      	ldr	r0, [r7, #12]
 8007360:	f000 fdc4 	bl	8007eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b084      	sub	sp, #16
 8007372:	af00      	add	r7, sp, #0
 8007374:	60f8      	str	r0, [r7, #12]
 8007376:	60b9      	str	r1, [r7, #8]
 8007378:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f000 fdb3 	bl	8007eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007386:	2300      	movs	r3, #0
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2204      	movs	r2, #4
 800739c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80073a0:	2300      	movs	r3, #0
 80073a2:	2200      	movs	r2, #0
 80073a4:	2100      	movs	r1, #0
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f000 fd7f 	bl	8007eaa <USBD_LL_Transmit>

  return USBD_OK;
 80073ac:	2300      	movs	r3, #0
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	3708      	adds	r7, #8
 80073b2:	46bd      	mov	sp, r7
 80073b4:	bd80      	pop	{r7, pc}

080073b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80073b6:	b580      	push	{r7, lr}
 80073b8:	b082      	sub	sp, #8
 80073ba:	af00      	add	r7, sp, #0
 80073bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2205      	movs	r2, #5
 80073c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073c6:	2300      	movs	r3, #0
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fd8d 	bl	8007eec <USBD_LL_PrepareReceive>

  return USBD_OK;
 80073d2:	2300      	movs	r3, #0
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80073e0:	2200      	movs	r2, #0
 80073e2:	4912      	ldr	r1, [pc, #72]	; (800742c <MX_USB_DEVICE_Init+0x50>)
 80073e4:	4812      	ldr	r0, [pc, #72]	; (8007430 <MX_USB_DEVICE_Init+0x54>)
 80073e6:	f7fe fd07 	bl	8005df8 <USBD_Init>
 80073ea:	4603      	mov	r3, r0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d001      	beq.n	80073f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80073f0:	f7f9 fcc2 	bl	8000d78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80073f4:	490f      	ldr	r1, [pc, #60]	; (8007434 <MX_USB_DEVICE_Init+0x58>)
 80073f6:	480e      	ldr	r0, [pc, #56]	; (8007430 <MX_USB_DEVICE_Init+0x54>)
 80073f8:	f7fe fd2e 	bl	8005e58 <USBD_RegisterClass>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007402:	f7f9 fcb9 	bl	8000d78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007406:	490c      	ldr	r1, [pc, #48]	; (8007438 <MX_USB_DEVICE_Init+0x5c>)
 8007408:	4809      	ldr	r0, [pc, #36]	; (8007430 <MX_USB_DEVICE_Init+0x54>)
 800740a:	f7fe fc1f 	bl	8005c4c <USBD_CDC_RegisterInterface>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d001      	beq.n	8007418 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007414:	f7f9 fcb0 	bl	8000d78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007418:	4805      	ldr	r0, [pc, #20]	; (8007430 <MX_USB_DEVICE_Init+0x54>)
 800741a:	f7fe fd53 	bl	8005ec4 <USBD_Start>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007424:	f7f9 fca8 	bl	8000d78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007428:	bf00      	nop
 800742a:	bd80      	pop	{r7, pc}
 800742c:	200000ac 	.word	0x200000ac
 8007430:	200001cc 	.word	0x200001cc
 8007434:	20000018 	.word	0x20000018
 8007438:	20000098 	.word	0x20000098

0800743c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b082      	sub	sp, #8
 8007440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007442:	2200      	movs	r2, #0
 8007444:	4915      	ldr	r1, [pc, #84]	; (800749c <CDC_Init_FS+0x60>)
 8007446:	4816      	ldr	r0, [pc, #88]	; (80074a0 <CDC_Init_FS+0x64>)
 8007448:	f7fe fc1a 	bl	8005c80 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800744c:	4915      	ldr	r1, [pc, #84]	; (80074a4 <CDC_Init_FS+0x68>)
 800744e:	4814      	ldr	r0, [pc, #80]	; (80074a0 <CDC_Init_FS+0x64>)
 8007450:	f7fe fc38 	bl	8005cc4 <USBD_CDC_SetRxBuffer>

  // set default config
  uint32_t baudrate = 115200;
 8007454:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8007458:	607b      	str	r3, [r7, #4]
  linecoding_cfg[0] = (uint8_t)(baudrate);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	b2da      	uxtb	r2, r3
 800745e:	4b12      	ldr	r3, [pc, #72]	; (80074a8 <CDC_Init_FS+0x6c>)
 8007460:	701a      	strb	r2, [r3, #0]
  linecoding_cfg[1] = (uint8_t)(baudrate >> 8);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	0a1b      	lsrs	r3, r3, #8
 8007466:	b2da      	uxtb	r2, r3
 8007468:	4b0f      	ldr	r3, [pc, #60]	; (80074a8 <CDC_Init_FS+0x6c>)
 800746a:	705a      	strb	r2, [r3, #1]
  linecoding_cfg[2] = (uint8_t)(baudrate >> 16);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	0c1b      	lsrs	r3, r3, #16
 8007470:	b2da      	uxtb	r2, r3
 8007472:	4b0d      	ldr	r3, [pc, #52]	; (80074a8 <CDC_Init_FS+0x6c>)
 8007474:	709a      	strb	r2, [r3, #2]
  linecoding_cfg[3] = (uint8_t)(baudrate >> 24);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0e1b      	lsrs	r3, r3, #24
 800747a:	b2da      	uxtb	r2, r3
 800747c:	4b0a      	ldr	r3, [pc, #40]	; (80074a8 <CDC_Init_FS+0x6c>)
 800747e:	70da      	strb	r2, [r3, #3]
  linecoding_cfg[4] = 0; // 1 Stop bit
 8007480:	4b09      	ldr	r3, [pc, #36]	; (80074a8 <CDC_Init_FS+0x6c>)
 8007482:	2200      	movs	r2, #0
 8007484:	711a      	strb	r2, [r3, #4]
  linecoding_cfg[5] = 0; // No parity
 8007486:	4b08      	ldr	r3, [pc, #32]	; (80074a8 <CDC_Init_FS+0x6c>)
 8007488:	2200      	movs	r2, #0
 800748a:	715a      	strb	r2, [r3, #5]
  linecoding_cfg[6] = 8; // 8 data bits
 800748c:	4b06      	ldr	r3, [pc, #24]	; (80074a8 <CDC_Init_FS+0x6c>)
 800748e:	2208      	movs	r2, #8
 8007490:	719a      	strb	r2, [r3, #6]


  return (USBD_OK);
 8007492:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007494:	4618      	mov	r0, r3
 8007496:	3708      	adds	r7, #8
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}
 800749c:	20000ca8 	.word	0x20000ca8
 80074a0:	200001cc 	.word	0x200001cc
 80074a4:	200004a8 	.word	0x200004a8
 80074a8:	200014a8 	.word	0x200014a8

080074ac <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80074ac:	b480      	push	{r7}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80074b0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80074b2:	4618      	mov	r0, r3
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	4603      	mov	r3, r0
 80074c4:	6039      	str	r1, [r7, #0]
 80074c6:	71fb      	strb	r3, [r7, #7]
 80074c8:	4613      	mov	r3, r2
 80074ca:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80074cc:	79fb      	ldrb	r3, [r7, #7]
 80074ce:	2b23      	cmp	r3, #35	; 0x23
 80074d0:	d85c      	bhi.n	800758c <CDC_Control_FS+0xd0>
 80074d2:	a201      	add	r2, pc, #4	; (adr r2, 80074d8 <CDC_Control_FS+0x1c>)
 80074d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074d8:	0800758d 	.word	0x0800758d
 80074dc:	0800758d 	.word	0x0800758d
 80074e0:	0800758d 	.word	0x0800758d
 80074e4:	0800758d 	.word	0x0800758d
 80074e8:	0800758d 	.word	0x0800758d
 80074ec:	0800758d 	.word	0x0800758d
 80074f0:	0800758d 	.word	0x0800758d
 80074f4:	0800758d 	.word	0x0800758d
 80074f8:	0800758d 	.word	0x0800758d
 80074fc:	0800758d 	.word	0x0800758d
 8007500:	0800758d 	.word	0x0800758d
 8007504:	0800758d 	.word	0x0800758d
 8007508:	0800758d 	.word	0x0800758d
 800750c:	0800758d 	.word	0x0800758d
 8007510:	0800758d 	.word	0x0800758d
 8007514:	0800758d 	.word	0x0800758d
 8007518:	0800758d 	.word	0x0800758d
 800751c:	0800758d 	.word	0x0800758d
 8007520:	0800758d 	.word	0x0800758d
 8007524:	0800758d 	.word	0x0800758d
 8007528:	0800758d 	.word	0x0800758d
 800752c:	0800758d 	.word	0x0800758d
 8007530:	0800758d 	.word	0x0800758d
 8007534:	0800758d 	.word	0x0800758d
 8007538:	0800758d 	.word	0x0800758d
 800753c:	0800758d 	.word	0x0800758d
 8007540:	0800758d 	.word	0x0800758d
 8007544:	0800758d 	.word	0x0800758d
 8007548:	0800758d 	.word	0x0800758d
 800754c:	0800758d 	.word	0x0800758d
 8007550:	0800758d 	.word	0x0800758d
 8007554:	0800758d 	.word	0x0800758d
 8007558:	08007569 	.word	0x08007569
 800755c:	0800757b 	.word	0x0800757b
 8007560:	0800758d 	.word	0x0800758d
 8007564:	0800758d 	.word	0x0800758d
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(linecoding_cfg, pbuf, 7);
 8007568:	4b0c      	ldr	r3, [pc, #48]	; (800759c <CDC_Control_FS+0xe0>)
 800756a:	683a      	ldr	r2, [r7, #0]
 800756c:	6810      	ldr	r0, [r2, #0]
 800756e:	6018      	str	r0, [r3, #0]
 8007570:	8891      	ldrh	r1, [r2, #4]
 8007572:	7992      	ldrb	r2, [r2, #6]
 8007574:	8099      	strh	r1, [r3, #4]
 8007576:	719a      	strb	r2, [r3, #6]
    break;
 8007578:	e009      	b.n	800758e <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, linecoding_cfg, 7);
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	4a07      	ldr	r2, [pc, #28]	; (800759c <CDC_Control_FS+0xe0>)
 800757e:	6810      	ldr	r0, [r2, #0]
 8007580:	6018      	str	r0, [r3, #0]
 8007582:	8891      	ldrh	r1, [r2, #4]
 8007584:	7992      	ldrb	r2, [r2, #6]
 8007586:	8099      	strh	r1, [r3, #4]
 8007588:	719a      	strb	r2, [r3, #6]
    break;
 800758a:	e000      	b.n	800758e <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800758c:	bf00      	nop
  }

  return (USBD_OK);
 800758e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007590:	4618      	mov	r0, r3
 8007592:	370c      	adds	r7, #12
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	200014a8 	.word	0x200014a8

080075a0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b086      	sub	sp, #24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, Buf);
 80075aa:	6879      	ldr	r1, [r7, #4]
 80075ac:	4819      	ldr	r0, [pc, #100]	; (8007614 <CDC_Receive_FS+0x74>)
 80075ae:	f7fe fb89 	bl	8005cc4 <USBD_CDC_SetRxBuffer>

  uint8_t len = (uint8_t) *Len;				// Get length
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	73fb      	strb	r3, [r7, #15]
  uint16_t tempHeadPos = rxBufferHeadPos;	// Increment temp head pos while writing, then update main variable when complete
 80075b8:	4b17      	ldr	r3, [pc, #92]	; (8007618 <CDC_Receive_FS+0x78>)
 80075ba:	881b      	ldrh	r3, [r3, #0]
 80075bc:	82fb      	strh	r3, [r7, #22]

  for (uint32_t i = 0; i < len; i++)
 80075be:	2300      	movs	r3, #0
 80075c0:	613b      	str	r3, [r7, #16]
 80075c2:	e017      	b.n	80075f4 <CDC_Receive_FS+0x54>
  {
	  rxBuffer[tempHeadPos] = Buf[i];
 80075c4:	687a      	ldr	r2, [r7, #4]
 80075c6:	693b      	ldr	r3, [r7, #16]
 80075c8:	441a      	add	r2, r3
 80075ca:	8afb      	ldrh	r3, [r7, #22]
 80075cc:	7811      	ldrb	r1, [r2, #0]
 80075ce:	4a13      	ldr	r2, [pc, #76]	; (800761c <CDC_Receive_FS+0x7c>)
 80075d0:	54d1      	strb	r1, [r2, r3]
	  tempHeadPos = (uint16_t)((uint16_t)(tempHeadPos + 1) % RX_BUFFER_SIZE);
 80075d2:	8afb      	ldrh	r3, [r7, #22]
 80075d4:	3301      	adds	r3, #1
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80075dc:	82fb      	strh	r3, [r7, #22]

	  if (tempHeadPos == rxBufferTailPos)
 80075de:	4b10      	ldr	r3, [pc, #64]	; (8007620 <CDC_Receive_FS+0x80>)
 80075e0:	881b      	ldrh	r3, [r3, #0]
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	8afa      	ldrh	r2, [r7, #22]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	d101      	bne.n	80075ee <CDC_Receive_FS+0x4e>
	  {
		  return USBD_FAIL; 				// Full buffer
 80075ea:	2303      	movs	r3, #3
 80075ec:	e00d      	b.n	800760a <CDC_Receive_FS+0x6a>
  for (uint32_t i = 0; i < len; i++)
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	3301      	adds	r3, #1
 80075f2:	613b      	str	r3, [r7, #16]
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d3e3      	bcc.n	80075c4 <CDC_Receive_FS+0x24>
	  }
  }

  rxBufferHeadPos = tempHeadPos;
 80075fc:	4a06      	ldr	r2, [pc, #24]	; (8007618 <CDC_Receive_FS+0x78>)
 80075fe:	8afb      	ldrh	r3, [r7, #22]
 8007600:	8013      	strh	r3, [r2, #0]
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007602:	4804      	ldr	r0, [pc, #16]	; (8007614 <CDC_Receive_FS+0x74>)
 8007604:	f7fe fbc2 	bl	8005d8c <USBD_CDC_ReceivePacket>

  return (USBD_OK);
 8007608:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800760a:	4618      	mov	r0, r3
 800760c:	3718      	adds	r7, #24
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200001cc 	.word	0x200001cc
 8007618:	200018b0 	.word	0x200018b0
 800761c:	200014b0 	.word	0x200014b0
 8007620:	200018b2 	.word	0x200018b2

08007624 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b084      	sub	sp, #16
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
 800762c:	460b      	mov	r3, r1
 800762e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */

  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007634:	4b0d      	ldr	r3, [pc, #52]	; (800766c <CDC_Transmit_FS+0x48>)
 8007636:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800763a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007642:	2b00      	cmp	r3, #0
 8007644:	d001      	beq.n	800764a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007646:	2301      	movs	r3, #1
 8007648:	e00b      	b.n	8007662 <CDC_Transmit_FS+0x3e>
  }

  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800764a:	887b      	ldrh	r3, [r7, #2]
 800764c:	461a      	mov	r2, r3
 800764e:	6879      	ldr	r1, [r7, #4]
 8007650:	4806      	ldr	r0, [pc, #24]	; (800766c <CDC_Transmit_FS+0x48>)
 8007652:	f7fe fb15 	bl	8005c80 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8007656:	4805      	ldr	r0, [pc, #20]	; (800766c <CDC_Transmit_FS+0x48>)
 8007658:	f7fe fb52 	bl	8005d00 <USBD_CDC_TransmitPacket>
 800765c:	4603      	mov	r3, r0
 800765e:	73fb      	strb	r3, [r7, #15]

  /* USER CODE END 7 */
  return result;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	200001cc 	.word	0x200001cc

08007670 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007670:	b480      	push	{r7}
 8007672:	b087      	sub	sp, #28
 8007674:	af00      	add	r7, sp, #0
 8007676:	60f8      	str	r0, [r7, #12]
 8007678:	60b9      	str	r1, [r7, #8]
 800767a:	4613      	mov	r3, r2
 800767c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800767e:	2300      	movs	r3, #0
 8007680:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007682:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007686:	4618      	mov	r0, r3
 8007688:	371c      	adds	r7, #28
 800768a:	46bd      	mov	sp, r7
 800768c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007690:	4770      	bx	lr
	...

08007694 <CDC_ReadRxBuffer_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */


uint8_t CDC_ReadRxBuffer_FS(uint8_t* Buf, uint16_t Len, uint32_t timeout)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b086      	sub	sp, #24
 8007698:	af00      	add	r7, sp, #0
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	460b      	mov	r3, r1
 800769e:	607a      	str	r2, [r7, #4]
 80076a0:	817b      	strh	r3, [r7, #10]
	uint16_t bytesAvailable = 0;
 80076a2:	2300      	movs	r3, #0
 80076a4:	82bb      	strh	r3, [r7, #20]
	uint32_t prev_time = HAL_GetTick();
 80076a6:	f7f9 fcc1 	bl	800102c <HAL_GetTick>
 80076aa:	6138      	str	r0, [r7, #16]

	do
	{
		bytesAvailable = CDC_GetRxBufferBytesAvailable_FS();
 80076ac:	f000 f83e 	bl	800772c <CDC_GetRxBufferBytesAvailable_FS>
 80076b0:	4603      	mov	r3, r0
 80076b2:	82bb      	strh	r3, [r7, #20]

	} while((bytesAvailable < Len) && ((HAL_GetTick() - prev_time) < timeout));
 80076b4:	8aba      	ldrh	r2, [r7, #20]
 80076b6:	897b      	ldrh	r3, [r7, #10]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d207      	bcs.n	80076cc <CDC_ReadRxBuffer_FS+0x38>
 80076bc:	f7f9 fcb6 	bl	800102c <HAL_GetTick>
 80076c0:	4602      	mov	r2, r0
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	1ad3      	subs	r3, r2, r3
 80076c6:	687a      	ldr	r2, [r7, #4]
 80076c8:	429a      	cmp	r2, r3
 80076ca:	d8ef      	bhi.n	80076ac <CDC_ReadRxBuffer_FS+0x18>

	if (bytesAvailable < Len)
 80076cc:	8aba      	ldrh	r2, [r7, #20]
 80076ce:	897b      	ldrh	r3, [r7, #10]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d203      	bcs.n	80076dc <CDC_ReadRxBuffer_FS+0x48>
	{
		CDC_FlushRxBuffer_FS();
 80076d4:	f000 f852 	bl	800777c <CDC_FlushRxBuffer_FS>
		return USBD_FAIL;
 80076d8:	2303      	movs	r3, #3
 80076da:	e01f      	b.n	800771c <CDC_ReadRxBuffer_FS+0x88>
	}

	for (uint16_t i = 0; i < Len; i++)
 80076dc:	2300      	movs	r3, #0
 80076de:	82fb      	strh	r3, [r7, #22]
 80076e0:	e017      	b.n	8007712 <CDC_ReadRxBuffer_FS+0x7e>
	{
		Buf[i] = rxBuffer[rxBufferTailPos];
 80076e2:	4b10      	ldr	r3, [pc, #64]	; (8007724 <CDC_ReadRxBuffer_FS+0x90>)
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	b29b      	uxth	r3, r3
 80076e8:	4619      	mov	r1, r3
 80076ea:	8afb      	ldrh	r3, [r7, #22]
 80076ec:	68fa      	ldr	r2, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	4a0d      	ldr	r2, [pc, #52]	; (8007728 <CDC_ReadRxBuffer_FS+0x94>)
 80076f2:	5c52      	ldrb	r2, [r2, r1]
 80076f4:	b2d2      	uxtb	r2, r2
 80076f6:	701a      	strb	r2, [r3, #0]
		rxBufferTailPos = (uint16_t)((uint16_t)(rxBufferTailPos + 1) % RX_BUFFER_SIZE);
 80076f8:	4b0a      	ldr	r3, [pc, #40]	; (8007724 <CDC_ReadRxBuffer_FS+0x90>)
 80076fa:	881b      	ldrh	r3, [r3, #0]
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	3301      	adds	r3, #1
 8007700:	b29b      	uxth	r3, r3
 8007702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007706:	b29a      	uxth	r2, r3
 8007708:	4b06      	ldr	r3, [pc, #24]	; (8007724 <CDC_ReadRxBuffer_FS+0x90>)
 800770a:	801a      	strh	r2, [r3, #0]
	for (uint16_t i = 0; i < Len; i++)
 800770c:	8afb      	ldrh	r3, [r7, #22]
 800770e:	3301      	adds	r3, #1
 8007710:	82fb      	strh	r3, [r7, #22]
 8007712:	8afa      	ldrh	r2, [r7, #22]
 8007714:	897b      	ldrh	r3, [r7, #10]
 8007716:	429a      	cmp	r2, r3
 8007718:	d3e3      	bcc.n	80076e2 <CDC_ReadRxBuffer_FS+0x4e>
	}

	return USBD_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	200018b2 	.word	0x200018b2
 8007728:	200014b0 	.word	0x200014b0

0800772c <CDC_GetRxBufferBytesAvailable_FS>:


uint16_t CDC_GetRxBufferBytesAvailable_FS(void)
{
 800772c:	b480      	push	{r7}
 800772e:	af00      	add	r7, sp, #0
	if (rxBufferHeadPos >= rxBufferTailPos)
 8007730:	4b10      	ldr	r3, [pc, #64]	; (8007774 <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	b29a      	uxth	r2, r3
 8007736:	4b10      	ldr	r3, [pc, #64]	; (8007778 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	429a      	cmp	r2, r3
 800773e:	d308      	bcc.n	8007752 <CDC_GetRxBufferBytesAvailable_FS+0x26>
	{
		return (uint16_t)(rxBufferHeadPos - rxBufferTailPos);
 8007740:	4b0c      	ldr	r3, [pc, #48]	; (8007774 <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 8007742:	881b      	ldrh	r3, [r3, #0]
 8007744:	b29a      	uxth	r2, r3
 8007746:	4b0c      	ldr	r3, [pc, #48]	; (8007778 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 8007748:	881b      	ldrh	r3, [r3, #0]
 800774a:	b29b      	uxth	r3, r3
 800774c:	1ad3      	subs	r3, r2, r3
 800774e:	b29b      	uxth	r3, r3
 8007750:	e00a      	b.n	8007768 <CDC_GetRxBufferBytesAvailable_FS+0x3c>
	}

	return (uint16_t)(RX_BUFFER_SIZE + rxBufferHeadPos - rxBufferTailPos);
 8007752:	4b08      	ldr	r3, [pc, #32]	; (8007774 <CDC_GetRxBufferBytesAvailable_FS+0x48>)
 8007754:	881b      	ldrh	r3, [r3, #0]
 8007756:	b29a      	uxth	r2, r3
 8007758:	4b07      	ldr	r3, [pc, #28]	; (8007778 <CDC_GetRxBufferBytesAvailable_FS+0x4c>)
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	1ad3      	subs	r3, r2, r3
 8007760:	b29b      	uxth	r3, r3
 8007762:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007766:	b29b      	uxth	r3, r3
}
 8007768:	4618      	mov	r0, r3
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop
 8007774:	200018b0 	.word	0x200018b0
 8007778:	200018b2 	.word	0x200018b2

0800777c <CDC_FlushRxBuffer_FS>:


void CDC_FlushRxBuffer_FS(void)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	af00      	add	r7, sp, #0
	memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8007780:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007784:	2100      	movs	r1, #0
 8007786:	4805      	ldr	r0, [pc, #20]	; (800779c <CDC_FlushRxBuffer_FS+0x20>)
 8007788:	f000 fc4c 	bl	8008024 <memset>

	rxBufferHeadPos = 0;
 800778c:	4b04      	ldr	r3, [pc, #16]	; (80077a0 <CDC_FlushRxBuffer_FS+0x24>)
 800778e:	2200      	movs	r2, #0
 8007790:	801a      	strh	r2, [r3, #0]
	rxBufferTailPos = 0;
 8007792:	4b04      	ldr	r3, [pc, #16]	; (80077a4 <CDC_FlushRxBuffer_FS+0x28>)
 8007794:	2200      	movs	r2, #0
 8007796:	801a      	strh	r2, [r3, #0]
}
 8007798:	bf00      	nop
 800779a:	bd80      	pop	{r7, pc}
 800779c:	200014b0 	.word	0x200014b0
 80077a0:	200018b0 	.word	0x200018b0
 80077a4:	200018b2 	.word	0x200018b2

080077a8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a8:	b480      	push	{r7}
 80077aa:	b083      	sub	sp, #12
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	4603      	mov	r3, r0
 80077b0:	6039      	str	r1, [r7, #0]
 80077b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	2212      	movs	r2, #18
 80077b8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077ba:	4b03      	ldr	r3, [pc, #12]	; (80077c8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077bc:	4618      	mov	r0, r3
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr
 80077c8:	200000c8 	.word	0x200000c8

080077cc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077cc:	b480      	push	{r7}
 80077ce:	b083      	sub	sp, #12
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	4603      	mov	r3, r0
 80077d4:	6039      	str	r1, [r7, #0]
 80077d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2204      	movs	r2, #4
 80077dc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077de:	4b03      	ldr	r3, [pc, #12]	; (80077ec <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	370c      	adds	r7, #12
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr
 80077ec:	200000dc 	.word	0x200000dc

080077f0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	4603      	mov	r3, r0
 80077f8:	6039      	str	r1, [r7, #0]
 80077fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077fc:	79fb      	ldrb	r3, [r7, #7]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d105      	bne.n	800780e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	4907      	ldr	r1, [pc, #28]	; (8007824 <USBD_FS_ProductStrDescriptor+0x34>)
 8007806:	4808      	ldr	r0, [pc, #32]	; (8007828 <USBD_FS_ProductStrDescriptor+0x38>)
 8007808:	f7ff fd08 	bl	800721c <USBD_GetString>
 800780c:	e004      	b.n	8007818 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800780e:	683a      	ldr	r2, [r7, #0]
 8007810:	4904      	ldr	r1, [pc, #16]	; (8007824 <USBD_FS_ProductStrDescriptor+0x34>)
 8007812:	4805      	ldr	r0, [pc, #20]	; (8007828 <USBD_FS_ProductStrDescriptor+0x38>)
 8007814:	f7ff fd02 	bl	800721c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007818:	4b02      	ldr	r3, [pc, #8]	; (8007824 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}
 8007822:	bf00      	nop
 8007824:	200018b4 	.word	0x200018b4
 8007828:	08008050 	.word	0x08008050

0800782c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	4904      	ldr	r1, [pc, #16]	; (800784c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800783c:	4804      	ldr	r0, [pc, #16]	; (8007850 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800783e:	f7ff fced 	bl	800721c <USBD_GetString>
  return USBD_StrDesc;
 8007842:	4b02      	ldr	r3, [pc, #8]	; (800784c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007844:	4618      	mov	r0, r3
 8007846:	3708      	adds	r7, #8
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}
 800784c:	200018b4 	.word	0x200018b4
 8007850:	08008068 	.word	0x08008068

08007854 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007854:	b580      	push	{r7, lr}
 8007856:	b082      	sub	sp, #8
 8007858:	af00      	add	r7, sp, #0
 800785a:	4603      	mov	r3, r0
 800785c:	6039      	str	r1, [r7, #0]
 800785e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	221a      	movs	r2, #26
 8007864:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007866:	f000 f843 	bl	80078f0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800786a:	4b02      	ldr	r3, [pc, #8]	; (8007874 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800786c:	4618      	mov	r0, r3
 800786e:	3708      	adds	r7, #8
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}
 8007874:	200000e0 	.word	0x200000e0

08007878 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b082      	sub	sp, #8
 800787c:	af00      	add	r7, sp, #0
 800787e:	4603      	mov	r3, r0
 8007880:	6039      	str	r1, [r7, #0]
 8007882:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007884:	79fb      	ldrb	r3, [r7, #7]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d105      	bne.n	8007896 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	4907      	ldr	r1, [pc, #28]	; (80078ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800788e:	4808      	ldr	r0, [pc, #32]	; (80078b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007890:	f7ff fcc4 	bl	800721c <USBD_GetString>
 8007894:	e004      	b.n	80078a0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	4904      	ldr	r1, [pc, #16]	; (80078ac <USBD_FS_ConfigStrDescriptor+0x34>)
 800789a:	4805      	ldr	r0, [pc, #20]	; (80078b0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800789c:	f7ff fcbe 	bl	800721c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078a0:	4b02      	ldr	r3, [pc, #8]	; (80078ac <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80078a2:	4618      	mov	r0, r3
 80078a4:	3708      	adds	r7, #8
 80078a6:	46bd      	mov	sp, r7
 80078a8:	bd80      	pop	{r7, pc}
 80078aa:	bf00      	nop
 80078ac:	200018b4 	.word	0x200018b4
 80078b0:	0800807c 	.word	0x0800807c

080078b4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078ca:	4808      	ldr	r0, [pc, #32]	; (80078ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078cc:	f7ff fca6 	bl	800721c <USBD_GetString>
 80078d0:	e004      	b.n	80078dc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d8:	f7ff fca0 	bl	800721c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	200018b4 	.word	0x200018b4
 80078ec:	08008088 	.word	0x08008088

080078f0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b084      	sub	sp, #16
 80078f4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078f6:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <Get_SerialNum+0x44>)
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078fc:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <Get_SerialNum+0x48>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007902:	4b0e      	ldr	r3, [pc, #56]	; (800793c <Get_SerialNum+0x4c>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007908:	68fa      	ldr	r2, [r7, #12]
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d009      	beq.n	800792a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007916:	2208      	movs	r2, #8
 8007918:	4909      	ldr	r1, [pc, #36]	; (8007940 <Get_SerialNum+0x50>)
 800791a:	68f8      	ldr	r0, [r7, #12]
 800791c:	f000 f814 	bl	8007948 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007920:	2204      	movs	r2, #4
 8007922:	4908      	ldr	r1, [pc, #32]	; (8007944 <Get_SerialNum+0x54>)
 8007924:	68b8      	ldr	r0, [r7, #8]
 8007926:	f000 f80f 	bl	8007948 <IntToUnicode>
  }
}
 800792a:	bf00      	nop
 800792c:	3710      	adds	r7, #16
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	1fff7a10 	.word	0x1fff7a10
 8007938:	1fff7a14 	.word	0x1fff7a14
 800793c:	1fff7a18 	.word	0x1fff7a18
 8007940:	200000e2 	.word	0x200000e2
 8007944:	200000f2 	.word	0x200000f2

08007948 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007948:	b480      	push	{r7}
 800794a:	b087      	sub	sp, #28
 800794c:	af00      	add	r7, sp, #0
 800794e:	60f8      	str	r0, [r7, #12]
 8007950:	60b9      	str	r1, [r7, #8]
 8007952:	4613      	mov	r3, r2
 8007954:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800795a:	2300      	movs	r3, #0
 800795c:	75fb      	strb	r3, [r7, #23]
 800795e:	e027      	b.n	80079b0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	0f1b      	lsrs	r3, r3, #28
 8007964:	2b09      	cmp	r3, #9
 8007966:	d80b      	bhi.n	8007980 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	0f1b      	lsrs	r3, r3, #28
 800796c:	b2da      	uxtb	r2, r3
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	005b      	lsls	r3, r3, #1
 8007972:	4619      	mov	r1, r3
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	440b      	add	r3, r1
 8007978:	3230      	adds	r2, #48	; 0x30
 800797a:	b2d2      	uxtb	r2, r2
 800797c:	701a      	strb	r2, [r3, #0]
 800797e:	e00a      	b.n	8007996 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	0f1b      	lsrs	r3, r3, #28
 8007984:	b2da      	uxtb	r2, r3
 8007986:	7dfb      	ldrb	r3, [r7, #23]
 8007988:	005b      	lsls	r3, r3, #1
 800798a:	4619      	mov	r1, r3
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	440b      	add	r3, r1
 8007990:	3237      	adds	r2, #55	; 0x37
 8007992:	b2d2      	uxtb	r2, r2
 8007994:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	011b      	lsls	r3, r3, #4
 800799a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800799c:	7dfb      	ldrb	r3, [r7, #23]
 800799e:	005b      	lsls	r3, r3, #1
 80079a0:	3301      	adds	r3, #1
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4413      	add	r3, r2
 80079a6:	2200      	movs	r2, #0
 80079a8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079aa:	7dfb      	ldrb	r3, [r7, #23]
 80079ac:	3301      	adds	r3, #1
 80079ae:	75fb      	strb	r3, [r7, #23]
 80079b0:	7dfa      	ldrb	r2, [r7, #23]
 80079b2:	79fb      	ldrb	r3, [r7, #7]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3d3      	bcc.n	8007960 <IntToUnicode+0x18>
  }
}
 80079b8:	bf00      	nop
 80079ba:	bf00      	nop
 80079bc:	371c      	adds	r7, #28
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr
	...

080079c8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079d0:	f107 0314 	add.w	r3, r7, #20
 80079d4:	2200      	movs	r2, #0
 80079d6:	601a      	str	r2, [r3, #0]
 80079d8:	605a      	str	r2, [r3, #4]
 80079da:	609a      	str	r2, [r3, #8]
 80079dc:	60da      	str	r2, [r3, #12]
 80079de:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80079e8:	d13a      	bne.n	8007a60 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079ea:	2300      	movs	r3, #0
 80079ec:	613b      	str	r3, [r7, #16]
 80079ee:	4b1e      	ldr	r3, [pc, #120]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	4a1d      	ldr	r2, [pc, #116]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	6313      	str	r3, [r2, #48]	; 0x30
 80079fa:	4b1b      	ldr	r3, [pc, #108]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 80079fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079fe:	f003 0301 	and.w	r3, r3, #1
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007a06:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a0c:	2302      	movs	r3, #2
 8007a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a10:	2300      	movs	r3, #0
 8007a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007a14:	2303      	movs	r3, #3
 8007a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007a18:	230a      	movs	r3, #10
 8007a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a1c:	f107 0314 	add.w	r3, r7, #20
 8007a20:	4619      	mov	r1, r3
 8007a22:	4812      	ldr	r0, [pc, #72]	; (8007a6c <HAL_PCD_MspInit+0xa4>)
 8007a24:	f7f9 ff7a 	bl	800191c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007a28:	4b0f      	ldr	r3, [pc, #60]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 8007a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a2c:	4a0e      	ldr	r2, [pc, #56]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 8007a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a32:	6353      	str	r3, [r2, #52]	; 0x34
 8007a34:	2300      	movs	r3, #0
 8007a36:	60fb      	str	r3, [r7, #12]
 8007a38:	4b0b      	ldr	r3, [pc, #44]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 8007a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3c:	4a0a      	ldr	r2, [pc, #40]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 8007a3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a42:	6453      	str	r3, [r2, #68]	; 0x44
 8007a44:	4b08      	ldr	r3, [pc, #32]	; (8007a68 <HAL_PCD_MspInit+0xa0>)
 8007a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a4c:	60fb      	str	r3, [r7, #12]
 8007a4e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007a50:	2200      	movs	r2, #0
 8007a52:	2100      	movs	r1, #0
 8007a54:	2043      	movs	r0, #67	; 0x43
 8007a56:	f7f9 fbf4 	bl	8001242 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007a5a:	2043      	movs	r0, #67	; 0x43
 8007a5c:	f7f9 fc0d 	bl	800127a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007a60:	bf00      	nop
 8007a62:	3728      	adds	r7, #40	; 0x28
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	40023800 	.word	0x40023800
 8007a6c:	40020000 	.word	0x40020000

08007a70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b082      	sub	sp, #8
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007a84:	4619      	mov	r1, r3
 8007a86:	4610      	mov	r0, r2
 8007a88:	f7fe fa69 	bl	8005f5e <USBD_LL_SetupStage>
}
 8007a8c:	bf00      	nop
 8007a8e:	3708      	adds	r7, #8
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b082      	sub	sp, #8
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	460b      	mov	r3, r1
 8007a9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	00db      	lsls	r3, r3, #3
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	78fb      	ldrb	r3, [r7, #3]
 8007abc:	4619      	mov	r1, r3
 8007abe:	f7fe faa3 	bl	8006008 <USBD_LL_DataOutStage>
}
 8007ac2:	bf00      	nop
 8007ac4:	3708      	adds	r7, #8
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}

08007aca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007aca:	b580      	push	{r7, lr}
 8007acc:	b082      	sub	sp, #8
 8007ace:	af00      	add	r7, sp, #0
 8007ad0:	6078      	str	r0, [r7, #4]
 8007ad2:	460b      	mov	r3, r1
 8007ad4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007adc:	78fa      	ldrb	r2, [r7, #3]
 8007ade:	6879      	ldr	r1, [r7, #4]
 8007ae0:	4613      	mov	r3, r2
 8007ae2:	00db      	lsls	r3, r3, #3
 8007ae4:	4413      	add	r3, r2
 8007ae6:	009b      	lsls	r3, r3, #2
 8007ae8:	440b      	add	r3, r1
 8007aea:	334c      	adds	r3, #76	; 0x4c
 8007aec:	681a      	ldr	r2, [r3, #0]
 8007aee:	78fb      	ldrb	r3, [r7, #3]
 8007af0:	4619      	mov	r1, r3
 8007af2:	f7fe fb3c 	bl	800616e <USBD_LL_DataInStage>
}
 8007af6:	bf00      	nop
 8007af8:	3708      	adds	r7, #8
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}

08007afe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b082      	sub	sp, #8
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f7fe fc70 	bl	80063f2 <USBD_LL_SOF>
}
 8007b12:	bf00      	nop
 8007b14:	3708      	adds	r7, #8
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b1a:	b580      	push	{r7, lr}
 8007b1c:	b084      	sub	sp, #16
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007b22:	2301      	movs	r3, #1
 8007b24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	68db      	ldr	r3, [r3, #12]
 8007b2a:	2b02      	cmp	r3, #2
 8007b2c:	d001      	beq.n	8007b32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007b2e:	f7f9 f923 	bl	8000d78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b38:	7bfa      	ldrb	r2, [r7, #15]
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fc1a 	bl	8006376 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b48:	4618      	mov	r0, r3
 8007b4a:	f7fe fbc2 	bl	80062d2 <USBD_LL_Reset>
}
 8007b4e:	bf00      	nop
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}
	...

08007b58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007b66:	4618      	mov	r0, r3
 8007b68:	f7fe fc15 	bl	8006396 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	6812      	ldr	r2, [r2, #0]
 8007b7a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b7e:	f043 0301 	orr.w	r3, r3, #1
 8007b82:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	6a1b      	ldr	r3, [r3, #32]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b8c:	4b04      	ldr	r3, [pc, #16]	; (8007ba0 <HAL_PCD_SuspendCallback+0x48>)
 8007b8e:	691b      	ldr	r3, [r3, #16]
 8007b90:	4a03      	ldr	r2, [pc, #12]	; (8007ba0 <HAL_PCD_SuspendCallback+0x48>)
 8007b92:	f043 0306 	orr.w	r3, r3, #6
 8007b96:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b98:	bf00      	nop
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	e000ed00 	.word	0xe000ed00

08007ba4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ba4:	b580      	push	{r7, lr}
 8007ba6:	b082      	sub	sp, #8
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	f7fe fc05 	bl	80063c2 <USBD_LL_Resume>
}
 8007bb8:	bf00      	nop
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bd2:	78fa      	ldrb	r2, [r7, #3]
 8007bd4:	4611      	mov	r1, r2
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	f7fe fc5d 	bl	8006496 <USBD_LL_IsoOUTIncomplete>
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b082      	sub	sp, #8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
 8007bec:	460b      	mov	r3, r1
 8007bee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bf6:	78fa      	ldrb	r2, [r7, #3]
 8007bf8:	4611      	mov	r1, r2
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	f7fe fc19 	bl	8006432 <USBD_LL_IsoINIncomplete>
}
 8007c00:	bf00      	nop
 8007c02:	3708      	adds	r7, #8
 8007c04:	46bd      	mov	sp, r7
 8007c06:	bd80      	pop	{r7, pc}

08007c08 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b082      	sub	sp, #8
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7fe fc6f 	bl	80064fa <USBD_LL_DevConnected>
}
 8007c1c:	bf00      	nop
 8007c1e:	3708      	adds	r7, #8
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b082      	sub	sp, #8
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c32:	4618      	mov	r0, r3
 8007c34:	f7fe fc6c 	bl	8006510 <USBD_LL_DevDisconnected>
}
 8007c38:	bf00      	nop
 8007c3a:	3708      	adds	r7, #8
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	bd80      	pop	{r7, pc}

08007c40 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	781b      	ldrb	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d13c      	bne.n	8007cca <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007c50:	4a20      	ldr	r2, [pc, #128]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a1e      	ldr	r2, [pc, #120]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c5c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007c60:	4b1c      	ldr	r3, [pc, #112]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c62:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007c66:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007c68:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c6a:	2204      	movs	r2, #4
 8007c6c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007c6e:	4b19      	ldr	r3, [pc, #100]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c70:	2202      	movs	r2, #2
 8007c72:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007c74:	4b17      	ldr	r3, [pc, #92]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007c7a:	4b16      	ldr	r3, [pc, #88]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c7c:	2202      	movs	r2, #2
 8007c7e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007c80:	4b14      	ldr	r3, [pc, #80]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007c86:	4b13      	ldr	r3, [pc, #76]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007c8c:	4b11      	ldr	r3, [pc, #68]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c8e:	2200      	movs	r2, #0
 8007c90:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007c92:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007c98:	4b0e      	ldr	r3, [pc, #56]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007c9e:	480d      	ldr	r0, [pc, #52]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007ca0:	f7fa f80b 	bl	8001cba <HAL_PCD_Init>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007caa:	f7f9 f865 	bl	8000d78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007cae:	2180      	movs	r1, #128	; 0x80
 8007cb0:	4808      	ldr	r0, [pc, #32]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007cb2:	f7fb fa62 	bl	800317a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007cb6:	2240      	movs	r2, #64	; 0x40
 8007cb8:	2100      	movs	r1, #0
 8007cba:	4806      	ldr	r0, [pc, #24]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007cbc:	f7fb fa16 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007cc0:	2280      	movs	r2, #128	; 0x80
 8007cc2:	2101      	movs	r1, #1
 8007cc4:	4803      	ldr	r0, [pc, #12]	; (8007cd4 <USBD_LL_Init+0x94>)
 8007cc6:	f7fb fa11 	bl	80030ec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}
 8007cd4:	20001ab4 	.word	0x20001ab4

08007cd8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007cee:	4618      	mov	r0, r3
 8007cf0:	f7fa f900 	bl	8001ef4 <HAL_PCD_Start>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f000 f942 	bl	8007f84 <USBD_Get_USB_Status>
 8007d00:	4603      	mov	r3, r0
 8007d02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d04:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d06:	4618      	mov	r0, r3
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	4608      	mov	r0, r1
 8007d18:	4611      	mov	r1, r2
 8007d1a:	461a      	mov	r2, r3
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	70fb      	strb	r3, [r7, #3]
 8007d20:	460b      	mov	r3, r1
 8007d22:	70bb      	strb	r3, [r7, #2]
 8007d24:	4613      	mov	r3, r2
 8007d26:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d28:	2300      	movs	r3, #0
 8007d2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007d36:	78bb      	ldrb	r3, [r7, #2]
 8007d38:	883a      	ldrh	r2, [r7, #0]
 8007d3a:	78f9      	ldrb	r1, [r7, #3]
 8007d3c:	f7fa fdd1 	bl	80028e2 <HAL_PCD_EP_Open>
 8007d40:	4603      	mov	r3, r0
 8007d42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d44:	7bfb      	ldrb	r3, [r7, #15]
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 f91c 	bl	8007f84 <USBD_Get_USB_Status>
 8007d4c:	4603      	mov	r3, r0
 8007d4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d50:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3710      	adds	r7, #16
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}

08007d5a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b084      	sub	sp, #16
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
 8007d62:	460b      	mov	r3, r1
 8007d64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d66:	2300      	movs	r3, #0
 8007d68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007d74:	78fa      	ldrb	r2, [r7, #3]
 8007d76:	4611      	mov	r1, r2
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f7fa fe1a 	bl	80029b2 <HAL_PCD_EP_Close>
 8007d7e:	4603      	mov	r3, r0
 8007d80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
 8007d84:	4618      	mov	r0, r3
 8007d86:	f000 f8fd 	bl	8007f84 <USBD_Get_USB_Status>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3710      	adds	r7, #16
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}

08007d98 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b084      	sub	sp, #16
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
 8007da0:	460b      	mov	r3, r1
 8007da2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007db2:	78fa      	ldrb	r2, [r7, #3]
 8007db4:	4611      	mov	r1, r2
 8007db6:	4618      	mov	r0, r3
 8007db8:	f7fa fef2 	bl	8002ba0 <HAL_PCD_EP_SetStall>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dc0:	7bfb      	ldrb	r3, [r7, #15]
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f000 f8de 	bl	8007f84 <USBD_Get_USB_Status>
 8007dc8:	4603      	mov	r3, r0
 8007dca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}

08007dd6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007dd6:	b580      	push	{r7, lr}
 8007dd8:	b084      	sub	sp, #16
 8007dda:	af00      	add	r7, sp, #0
 8007ddc:	6078      	str	r0, [r7, #4]
 8007dde:	460b      	mov	r3, r1
 8007de0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de6:	2300      	movs	r3, #0
 8007de8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007df0:	78fa      	ldrb	r2, [r7, #3]
 8007df2:	4611      	mov	r1, r2
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fa ff37 	bl	8002c68 <HAL_PCD_EP_ClrStall>
 8007dfa:	4603      	mov	r3, r0
 8007dfc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfe:	7bfb      	ldrb	r3, [r7, #15]
 8007e00:	4618      	mov	r0, r3
 8007e02:	f000 f8bf 	bl	8007f84 <USBD_Get_USB_Status>
 8007e06:	4603      	mov	r3, r0
 8007e08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e0c:	4618      	mov	r0, r3
 8007e0e:	3710      	adds	r7, #16
 8007e10:	46bd      	mov	sp, r7
 8007e12:	bd80      	pop	{r7, pc}

08007e14 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b085      	sub	sp, #20
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e26:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007e28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	da0b      	bge.n	8007e48 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007e30:	78fb      	ldrb	r3, [r7, #3]
 8007e32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e36:	68f9      	ldr	r1, [r7, #12]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	00db      	lsls	r3, r3, #3
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	440b      	add	r3, r1
 8007e42:	333e      	adds	r3, #62	; 0x3e
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	e00b      	b.n	8007e60 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007e48:	78fb      	ldrb	r3, [r7, #3]
 8007e4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e4e:	68f9      	ldr	r1, [r7, #12]
 8007e50:	4613      	mov	r3, r2
 8007e52:	00db      	lsls	r3, r3, #3
 8007e54:	4413      	add	r3, r2
 8007e56:	009b      	lsls	r3, r3, #2
 8007e58:	440b      	add	r3, r1
 8007e5a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007e5e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3714      	adds	r7, #20
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e86:	78fa      	ldrb	r2, [r7, #3]
 8007e88:	4611      	mov	r1, r2
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f7fa fd04 	bl	8002898 <HAL_PCD_SetAddress>
 8007e90:	4603      	mov	r3, r0
 8007e92:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e94:	7bfb      	ldrb	r3, [r7, #15]
 8007e96:	4618      	mov	r0, r3
 8007e98:	f000 f874 	bl	8007f84 <USBD_Get_USB_Status>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ea0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	3710      	adds	r7, #16
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	bd80      	pop	{r7, pc}

08007eaa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eaa:	b580      	push	{r7, lr}
 8007eac:	b086      	sub	sp, #24
 8007eae:	af00      	add	r7, sp, #0
 8007eb0:	60f8      	str	r0, [r7, #12]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
 8007eb6:	460b      	mov	r3, r1
 8007eb8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ec8:	7af9      	ldrb	r1, [r7, #11]
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	f7fa fe1d 	bl	8002b0c <HAL_PCD_EP_Transmit>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ed6:	7dfb      	ldrb	r3, [r7, #23]
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f000 f853 	bl	8007f84 <USBD_Get_USB_Status>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ee2:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3718      	adds	r7, #24
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bd80      	pop	{r7, pc}

08007eec <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b086      	sub	sp, #24
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	607a      	str	r2, [r7, #4]
 8007ef6:	603b      	str	r3, [r7, #0]
 8007ef8:	460b      	mov	r3, r1
 8007efa:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efc:	2300      	movs	r3, #0
 8007efe:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f00:	2300      	movs	r3, #0
 8007f02:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f0a:	7af9      	ldrb	r1, [r7, #11]
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	f7fa fd99 	bl	8002a46 <HAL_PCD_EP_Receive>
 8007f14:	4603      	mov	r3, r0
 8007f16:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f18:	7dfb      	ldrb	r3, [r7, #23]
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f000 f832 	bl	8007f84 <USBD_Get_USB_Status>
 8007f20:	4603      	mov	r3, r0
 8007f22:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f24:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3718      	adds	r7, #24
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}

08007f2e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f2e:	b580      	push	{r7, lr}
 8007f30:	b082      	sub	sp, #8
 8007f32:	af00      	add	r7, sp, #0
 8007f34:	6078      	str	r0, [r7, #4]
 8007f36:	460b      	mov	r3, r1
 8007f38:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f40:	78fa      	ldrb	r2, [r7, #3]
 8007f42:	4611      	mov	r1, r2
 8007f44:	4618      	mov	r0, r3
 8007f46:	f7fa fdc9 	bl	8002adc <HAL_PCD_EP_GetRxCount>
 8007f4a:	4603      	mov	r3, r0
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007f5c:	4b03      	ldr	r3, [pc, #12]	; (8007f6c <USBD_static_malloc+0x18>)
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr
 8007f6a:	bf00      	nop
 8007f6c:	20001fc0 	.word	0x20001fc0

08007f70 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b083      	sub	sp, #12
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]

}
 8007f78:	bf00      	nop
 8007f7a:	370c      	adds	r7, #12
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f82:	4770      	bx	lr

08007f84 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007f84:	b480      	push	{r7}
 8007f86:	b085      	sub	sp, #20
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007f92:	79fb      	ldrb	r3, [r7, #7]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d817      	bhi.n	8007fc8 <USBD_Get_USB_Status+0x44>
 8007f98:	a201      	add	r2, pc, #4	; (adr r2, 8007fa0 <USBD_Get_USB_Status+0x1c>)
 8007f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f9e:	bf00      	nop
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fb7 	.word	0x08007fb7
 8007fa8:	08007fbd 	.word	0x08007fbd
 8007fac:	08007fc3 	.word	0x08007fc3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	73fb      	strb	r3, [r7, #15]
    break;
 8007fb4:	e00b      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007fb6:	2303      	movs	r3, #3
 8007fb8:	73fb      	strb	r3, [r7, #15]
    break;
 8007fba:	e008      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc0:	e005      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007fc2:	2303      	movs	r3, #3
 8007fc4:	73fb      	strb	r3, [r7, #15]
    break;
 8007fc6:	e002      	b.n	8007fce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007fc8:	2303      	movs	r3, #3
 8007fca:	73fb      	strb	r3, [r7, #15]
    break;
 8007fcc:	bf00      	nop
  }
  return usb_status;
 8007fce:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <__libc_init_array>:
 8007fdc:	b570      	push	{r4, r5, r6, lr}
 8007fde:	4d0d      	ldr	r5, [pc, #52]	; (8008014 <__libc_init_array+0x38>)
 8007fe0:	4c0d      	ldr	r4, [pc, #52]	; (8008018 <__libc_init_array+0x3c>)
 8007fe2:	1b64      	subs	r4, r4, r5
 8007fe4:	10a4      	asrs	r4, r4, #2
 8007fe6:	2600      	movs	r6, #0
 8007fe8:	42a6      	cmp	r6, r4
 8007fea:	d109      	bne.n	8008000 <__libc_init_array+0x24>
 8007fec:	4d0b      	ldr	r5, [pc, #44]	; (800801c <__libc_init_array+0x40>)
 8007fee:	4c0c      	ldr	r4, [pc, #48]	; (8008020 <__libc_init_array+0x44>)
 8007ff0:	f000 f820 	bl	8008034 <_init>
 8007ff4:	1b64      	subs	r4, r4, r5
 8007ff6:	10a4      	asrs	r4, r4, #2
 8007ff8:	2600      	movs	r6, #0
 8007ffa:	42a6      	cmp	r6, r4
 8007ffc:	d105      	bne.n	800800a <__libc_init_array+0x2e>
 8007ffe:	bd70      	pop	{r4, r5, r6, pc}
 8008000:	f855 3b04 	ldr.w	r3, [r5], #4
 8008004:	4798      	blx	r3
 8008006:	3601      	adds	r6, #1
 8008008:	e7ee      	b.n	8007fe8 <__libc_init_array+0xc>
 800800a:	f855 3b04 	ldr.w	r3, [r5], #4
 800800e:	4798      	blx	r3
 8008010:	3601      	adds	r6, #1
 8008012:	e7f2      	b.n	8007ffa <__libc_init_array+0x1e>
 8008014:	080080b0 	.word	0x080080b0
 8008018:	080080b0 	.word	0x080080b0
 800801c:	080080b0 	.word	0x080080b0
 8008020:	080080b4 	.word	0x080080b4

08008024 <memset>:
 8008024:	4402      	add	r2, r0
 8008026:	4603      	mov	r3, r0
 8008028:	4293      	cmp	r3, r2
 800802a:	d100      	bne.n	800802e <memset+0xa>
 800802c:	4770      	bx	lr
 800802e:	f803 1b01 	strb.w	r1, [r3], #1
 8008032:	e7f9      	b.n	8008028 <memset+0x4>

08008034 <_init>:
 8008034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008036:	bf00      	nop
 8008038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800803a:	bc08      	pop	{r3}
 800803c:	469e      	mov	lr, r3
 800803e:	4770      	bx	lr

08008040 <_fini>:
 8008040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008042:	bf00      	nop
 8008044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008046:	bc08      	pop	{r3}
 8008048:	469e      	mov	lr, r3
 800804a:	4770      	bx	lr
