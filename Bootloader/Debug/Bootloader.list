
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007008  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071a0  080071a0  000171a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071f8  080071f8  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  080071f8  080071f8  000171f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007200  08007200  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007200  08007200  00017200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007204  08007204  00017204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007208  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c40  200000fc  08007304  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d3c  08007304  00021d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f1c5  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efa  00000000  00000000  0002f2f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c48  00000000  00000000  000321f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00032e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e45  00000000  00000000  00033918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010da2  00000000  00000000  0004c75d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a2f  00000000  00000000  0005d4ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e4f2e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003050  00000000  00000000  000e4f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007188 	.word	0x08007188

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	08007188 	.word	0x08007188

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <SendPacketAck>:
	CDC_Transmit_FS(cmd_ack_msg, 5);
}


static void SendPacketAck(uint8_t packet_number, uint16_t packet_size)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	460a      	mov	r2, r1
 80004e6:	71fb      	strb	r3, [r7, #7]
 80004e8:	4613      	mov	r3, r2
 80004ea:	80bb      	strh	r3, [r7, #4]
	uint8_t packet_ack_msg[5] = {0};
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	2300      	movs	r3, #0
 80004f2:	733b      	strb	r3, [r7, #12]

	packet_ack_msg[0] = CMD_PACKET_ACK;
 80004f4:	2330      	movs	r3, #48	; 0x30
 80004f6:	723b      	strb	r3, [r7, #8]
	packet_ack_msg[1] = (uint8_t)(packet_number);
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	727b      	strb	r3, [r7, #9]
	packet_ack_msg[2] = (uint8_t)(packet_number >> 8);
 80004fc:	79fb      	ldrb	r3, [r7, #7]
 80004fe:	121b      	asrs	r3, r3, #8
 8000500:	b2db      	uxtb	r3, r3
 8000502:	72bb      	strb	r3, [r7, #10]
	packet_ack_msg[3] = (uint8_t)(packet_size);
 8000504:	88bb      	ldrh	r3, [r7, #4]
 8000506:	b2db      	uxtb	r3, r3
 8000508:	72fb      	strb	r3, [r7, #11]
	packet_ack_msg[4] = (uint8_t)(packet_size >> 8);
 800050a:	88bb      	ldrh	r3, [r7, #4]
 800050c:	0a1b      	lsrs	r3, r3, #8
 800050e:	b29b      	uxth	r3, r3
 8000510:	b2db      	uxtb	r3, r3
 8000512:	733b      	strb	r3, [r7, #12]

	CDC_Transmit_FS(packet_ack_msg, 5);
 8000514:	f107 0308 	add.w	r3, r7, #8
 8000518:	2105      	movs	r1, #5
 800051a:	4618      	mov	r0, r3
 800051c:	f006 f976 	bl	800680c <CDC_Transmit_FS>
}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}

08000528 <test>:


void test(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b09c      	sub	sp, #112	; 0x70
 800052c:	af00      	add	r7, sp, #0
	// error_id = BL_CMD_INVALID_ERROR;
	// SendError();

	// SendCmdAck(STATE_EXECUTE);

	uint8_t packet_buffer[100] = {0};
 800052e:	2300      	movs	r3, #0
 8000530:	607b      	str	r3, [r7, #4]
 8000532:	f107 0308 	add.w	r3, r7, #8
 8000536:	2260      	movs	r2, #96	; 0x60
 8000538:	2100      	movs	r1, #0
 800053a:	4618      	mov	r0, r3
 800053c:	f006 fe1c 	bl	8007178 <memset>
	uint16_t recv_size;
	uint16_t packet_size;
	uint8_t cmd_id;
	uint16_t packet_number;

	recv_size = CDC_Get_Received_Data_FS(packet_buffer, MAX_TIMEOUT);
 8000540:	1d3b      	adds	r3, r7, #4
 8000542:	f04f 31ff 	mov.w	r1, #4294967295
 8000546:	4618      	mov	r0, r3
 8000548:	f006 f998 	bl	800687c <CDC_Get_Received_Data_FS>
 800054c:	4603      	mov	r3, r0
 800054e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e

	cmd_id = packet_buffer[0];
 8000552:	793b      	ldrb	r3, [r7, #4]
 8000554:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	packet_number = (uint16_t)packet_buffer[1] + (((uint16_t)packet_buffer[2]) << 8);
 8000558:	797b      	ldrb	r3, [r7, #5]
 800055a:	b29a      	uxth	r2, r3
 800055c:	79bb      	ldrb	r3, [r7, #6]
 800055e:	b29b      	uxth	r3, r3
 8000560:	021b      	lsls	r3, r3, #8
 8000562:	b29b      	uxth	r3, r3
 8000564:	4413      	add	r3, r2
 8000566:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
	packet_size = (uint16_t)packet_buffer[3] + (((uint16_t)packet_buffer[4]) << 8);
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	b29a      	uxth	r2, r3
 800056e:	7a3b      	ldrb	r3, [r7, #8]
 8000570:	b29b      	uxth	r3, r3
 8000572:	021b      	lsls	r3, r3, #8
 8000574:	b29b      	uxth	r3, r3
 8000576:	4413      	add	r3, r2
 8000578:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	CDC_Transmit_FS(packet_buffer, recv_size);
 800057c:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8000580:	1d3b      	adds	r3, r7, #4
 8000582:	4611      	mov	r1, r2
 8000584:	4618      	mov	r0, r3
 8000586:	f006 f941 	bl	800680c <CDC_Transmit_FS>

	if((cmd_id == CMD_PACKET) && (packet_size == (recv_size - 1)))
 800058a:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 800058e:	2b20      	cmp	r3, #32
 8000590:	d10f      	bne.n	80005b2 <test+0x8a>
 8000592:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 8000596:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800059a:	3b01      	subs	r3, #1
 800059c:	429a      	cmp	r2, r3
 800059e:	d108      	bne.n	80005b2 <test+0x8a>
	{
		SendPacketAck(packet_number, packet_size);
 80005a0:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	f8b7 2068 	ldrh.w	r2, [r7, #104]	; 0x68
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f7ff ff95 	bl	80004dc <SendPacketAck>
	}

}
 80005b2:	bf00      	nop
 80005b4:	3770      	adds	r7, #112	; 0x70
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
	...

080005bc <Bootloader_CheckApplicationExist>:
    application_entry_point();
}


bool Bootloader_CheckApplicationExist(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
    uint32_t stack_address = 0;
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]

    Flash_Read_Word(APP_START_ADDRESS, &stack_address, (uint32_t)1);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2201      	movs	r2, #1
 80005ca:	4619      	mov	r1, r3
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <Bootloader_CheckApplicationExist+0x38>)
 80005ce:	f000 f813 	bl	80005f8 <Flash_Read_Word>

    if ((stack_address < RAM_BASE_ADDRESS) || ((stack_address - RAM_BASE_ADDRESS) > RAM_SIZE))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80005d8:	d305      	bcc.n	80005e6 <Bootloader_CheckApplicationExist+0x2a>
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 80005e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005e4:	d901      	bls.n	80005ea <Bootloader_CheckApplicationExist+0x2e>
    {
        return false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e000      	b.n	80005ec <Bootloader_CheckApplicationExist+0x30>
    }

    return true;
 80005ea:	2301      	movs	r3, #1
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	3708      	adds	r7, #8
 80005f0:	46bd      	mov	sp, r7
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	08008000 	.word	0x08008000

080005f8 <Flash_Read_Word>:
 * @return	Flasg error code ::eFlashErrorCodes
 * 			- FLASH_OK: The flash read operation was successful.
 * 			- FLASH_READ_OVER_ERROR: The read operation exceeded the flash memory boundaries.
 */
uint8_t Flash_Read_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b087      	sub	sp, #28
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	60b9      	str	r1, [r7, #8]
 8000602:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 8000604:	2300      	movs	r3, #0
 8000606:	75fb      	strb	r3, [r7, #23]

    if ((address < FLASH_BASE_ADDRESS) ||
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800060e:	d30b      	bcc.n	8000628 <Flash_Read_Word+0x30>
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	009a      	lsls	r2, r3, #2
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	4413      	add	r3, r2
    if ((address < FLASH_BASE_ADDRESS) ||
 8000618:	4a13      	ldr	r2, [pc, #76]	; (8000668 <Flash_Read_Word+0x70>)
 800061a:	4293      	cmp	r3, r2
 800061c:	d804      	bhi.n	8000628 <Flash_Read_Word+0x30>
		((address % 4) != 0))
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f003 0303 	and.w	r3, r3, #3
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000624:	2b00      	cmp	r3, #0
 8000626:	d002      	beq.n	800062e <Flash_Read_Word+0x36>
    {
    	flash_status = FLASH_READ_OVER_ERROR;
 8000628:	2305      	movs	r3, #5
 800062a:	75fb      	strb	r3, [r7, #23]
 800062c:	e014      	b.n	8000658 <Flash_Read_Word+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < size; i += 1)
 800062e:	2300      	movs	r3, #0
 8000630:	613b      	str	r3, [r7, #16]
 8000632:	e00d      	b.n	8000650 <Flash_Read_Word+0x58>
        {
            data[i] = *(uint32_t *)(address + (i * 4));
 8000634:	693b      	ldr	r3, [r7, #16]
 8000636:	009a      	lsls	r2, r3, #2
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	4413      	add	r3, r2
 800063c:	4619      	mov	r1, r3
 800063e:	693b      	ldr	r3, [r7, #16]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	4413      	add	r3, r2
 8000646:	680a      	ldr	r2, [r1, #0]
 8000648:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < size; i += 1)
 800064a:	693b      	ldr	r3, [r7, #16]
 800064c:	3301      	adds	r3, #1
 800064e:	613b      	str	r3, [r7, #16]
 8000650:	693a      	ldr	r2, [r7, #16]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	429a      	cmp	r2, r3
 8000656:	d3ed      	bcc.n	8000634 <Flash_Read_Word+0x3c>
        }
    }


    return flash_status;
 8000658:	7dfb      	ldrb	r3, [r7, #23]
}
 800065a:	4618      	mov	r0, r3
 800065c:	371c      	adds	r7, #28
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	08080000 	.word	0x08080000

0800066c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b09a      	sub	sp, #104	; 0x68
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000672:	f000 f9cd 	bl	8000a10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000676:	f000 f81d 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800067a:	f000 f89b 	bl	80007b4 <MX_GPIO_Init>
  MX_CRC_Init();
 800067e:	f000 f885 	bl	800078c <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000682:	f005 ffe9 	bl	8006658 <MX_USB_DEVICE_Init>
  }

  while(1){}

   */
  uint8_t rcv_data[100] = {0};
 8000686:	2300      	movs	r3, #0
 8000688:	603b      	str	r3, [r7, #0]
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2260      	movs	r2, #96	; 0x60
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fd71 	bl	8007178 <memset>
  uint16_t data_size = 0;
 8000696:	2300      	movs	r3, #0
 8000698:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66

  while (1)
  {

	  if(Bootloader_CheckApplicationExist() == true)
 800069c:	f7ff ff8e 	bl	80005bc <Bootloader_CheckApplicationExist>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d0fa      	beq.n	800069c <main+0x30>
		  CDC_Transmit_FS(rcv_data, data_size);

		  CDC_Transmit_FS("Application Exist.\n", strlen("Application Exist.\n"));

		  */
		  test();
 80006a6:	f7ff ff3f 	bl	8000528 <test>
		  HAL_Delay(1000);
 80006aa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006ae:	f000 fa21 	bl	8000af4 <HAL_Delay>
	  if(Bootloader_CheckApplicationExist() == true)
 80006b2:	e7f3      	b.n	800069c <main+0x30>

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 fd58 	bl	8007178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b29      	ldr	r3, [pc, #164]	; (8000784 <SystemClock_Config+0xd0>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a28      	ldr	r2, [pc, #160]	; (8000784 <SystemClock_Config+0xd0>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b26      	ldr	r3, [pc, #152]	; (8000784 <SystemClock_Config+0xd0>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <SystemClock_Config+0xd4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a22      	ldr	r2, [pc, #136]	; (8000788 <SystemClock_Config+0xd4>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b20      	ldr	r3, [pc, #128]	; (8000788 <SystemClock_Config+0xd4>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000710:	2303      	movs	r3, #3
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800071a:	2301      	movs	r3, #1
 800071c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000726:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800072a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 800072c:	230f      	movs	r3, #15
 800072e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000730:	2390      	movs	r3, #144	; 0x90
 8000732:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000734:	2302      	movs	r3, #2
 8000736:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000738:	2305      	movs	r3, #5
 800073a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073c:	f107 0320 	add.w	r3, r7, #32
 8000740:	4618      	mov	r0, r3
 8000742:	f001 ff43 	bl	80025cc <HAL_RCC_OscConfig>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800074c:	f000 f8a0 	bl	8000890 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000750:	230f      	movs	r3, #15
 8000752:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000764:	f107 030c 	add.w	r3, r7, #12
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f002 f9a6 	bl	8002abc <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000776:	f000 f88b 	bl	8000890 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3750      	adds	r7, #80	; 0x50
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40007000 	.word	0x40007000

0800078c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <MX_CRC_Init+0x20>)
 8000792:	4a07      	ldr	r2, [pc, #28]	; (80007b0 <MX_CRC_Init+0x24>)
 8000794:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000796:	4805      	ldr	r0, [pc, #20]	; (80007ac <MX_CRC_Init+0x20>)
 8000798:	f000 fae1 	bl	8000d5e <HAL_CRC_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80007a2:	f000 f875 	bl	8000890 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80007a6:	bf00      	nop
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000118 	.word	0x20000118
 80007b0:	40023000 	.word	0x40023000

080007b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b08a      	sub	sp, #40	; 0x28
 80007b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
 80007c8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	613b      	str	r3, [r7, #16]
 80007ce:	4b2d      	ldr	r3, [pc, #180]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a2c      	ldr	r2, [pc, #176]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007d4:	f043 0304 	orr.w	r3, r3, #4
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b2a      	ldr	r3, [pc, #168]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0304 	and.w	r3, r3, #4
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	4b26      	ldr	r3, [pc, #152]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a25      	ldr	r2, [pc, #148]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b23      	ldr	r3, [pc, #140]	; (8000884 <MX_GPIO_Init+0xd0>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a1e      	ldr	r2, [pc, #120]	; (8000884 <MX_GPIO_Init+0xd0>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000828:	f043 0302 	orr.w	r3, r3, #2
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <MX_GPIO_Init+0xd0>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0302 	and.w	r3, r3, #2
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000840:	4811      	ldr	r0, [pc, #68]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000842:	f000 fc2d 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 8000846:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	480a      	ldr	r0, [pc, #40]	; (8000888 <MX_GPIO_Init+0xd4>)
 8000860:	f000 fa9a 	bl	8000d98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000864:	2301      	movs	r3, #1
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800086c:	2301      	movs	r3, #1
 800086e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000870:	f107 0314 	add.w	r3, r7, #20
 8000874:	4619      	mov	r1, r3
 8000876:	4805      	ldr	r0, [pc, #20]	; (800088c <MX_GPIO_Init+0xd8>)
 8000878:	f000 fa8e 	bl	8000d98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087c:	bf00      	nop
 800087e:	3728      	adds	r7, #40	; 0x28
 8000880:	46bd      	mov	sp, r7
 8000882:	bd80      	pop	{r7, pc}
 8000884:	40023800 	.word	0x40023800
 8000888:	40020800 	.word	0x40020800
 800088c:	40020000 	.word	0x40020000

08000890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000894:	b672      	cpsid	i
}
 8000896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000898:	e7fe      	b.n	8000898 <Error_Handler+0x8>
	...

0800089c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_MspInit+0x4c>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008aa:	4a0f      	ldr	r2, [pc, #60]	; (80008e8 <HAL_MspInit+0x4c>)
 80008ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008b0:	6453      	str	r3, [r2, #68]	; 0x44
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <HAL_MspInit+0x4c>)
 80008b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008be:	2300      	movs	r3, #0
 80008c0:	603b      	str	r3, [r7, #0]
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x4c>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6413      	str	r3, [r2, #64]	; 0x40
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x4c>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40023800 	.word	0x40023800

080008ec <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <HAL_CRC_MspInit+0x3c>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d10d      	bne.n	800091a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80008fe:	2300      	movs	r3, #0
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	4b0a      	ldr	r3, [pc, #40]	; (800092c <HAL_CRC_MspInit+0x40>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <HAL_CRC_MspInit+0x40>)
 8000908:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b07      	ldr	r3, [pc, #28]	; (800092c <HAL_CRC_MspInit+0x40>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800091a:	bf00      	nop
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40023000 	.word	0x40023000
 800092c:	40023800 	.word	0x40023800

08000930 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <NMI_Handler+0x4>

08000936 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800093a:	e7fe      	b.n	800093a <HardFault_Handler+0x4>

0800093c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <MemManage_Handler+0x4>

08000942 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <BusFault_Handler+0x4>

08000948 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <UsageFault_Handler+0x4>

0800094e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000952:	bf00      	nop
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000960:	bf00      	nop
 8000962:	46bd      	mov	sp, r7
 8000964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000968:	4770      	bx	lr

0800096a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800096a:	b480      	push	{r7}
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096e:	bf00      	nop
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800097c:	f000 f89a 	bl	8000ab4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	bd80      	pop	{r7, pc}

08000984 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000988:	4802      	ldr	r0, [pc, #8]	; (8000994 <OTG_FS_IRQHandler+0x10>)
 800098a:	f000 fcf2 	bl	8001372 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	20001610 	.word	0x20001610

08000998 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800099c:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <SystemInit+0x20>)
 800099e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009a2:	4a05      	ldr	r2, [pc, #20]	; (80009b8 <SystemInit+0x20>)
 80009a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ac:	bf00      	nop
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80009bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c0:	480d      	ldr	r0, [pc, #52]	; (80009f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009c2:	490e      	ldr	r1, [pc, #56]	; (80009fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c4:	4a0e      	ldr	r2, [pc, #56]	; (8000a00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c8:	e002      	b.n	80009d0 <LoopCopyDataInit>

080009ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ce:	3304      	adds	r3, #4

080009d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d4:	d3f9      	bcc.n	80009ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d6:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d8:	4c0b      	ldr	r4, [pc, #44]	; (8000a08 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009dc:	e001      	b.n	80009e2 <LoopFillZerobss>

080009de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e0:	3204      	adds	r2, #4

080009e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e4:	d3fb      	bcc.n	80009de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e6:	f7ff ffd7 	bl	8000998 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009ea:	f006 fb93 	bl	8007114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ee:	f7ff fe3d 	bl	800066c <main>
  bx  lr    
 80009f2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80009f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009fc:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a00:	08007208 	.word	0x08007208
  ldr r2, =_sbss
 8000a04:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a08:	20001d3c 	.word	0x20001d3c

08000a0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a0c:	e7fe      	b.n	8000a0c <ADC_IRQHandler>
	...

08000a10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_Init+0x40>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_Init+0x40>)
 8000a1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a20:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_Init+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <HAL_Init+0x40>)
 8000a26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_Init+0x40>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_Init+0x40>)
 8000a32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a38:	2003      	movs	r0, #3
 8000a3a:	f000 f94f 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 f808 	bl	8000a54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a44:	f7ff ff2a 	bl	800089c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a48:	2300      	movs	r3, #0
}
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023c00 	.word	0x40023c00

08000a54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b082      	sub	sp, #8
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a5c:	4b12      	ldr	r3, [pc, #72]	; (8000aa8 <HAL_InitTick+0x54>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b12      	ldr	r3, [pc, #72]	; (8000aac <HAL_InitTick+0x58>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	4619      	mov	r1, r3
 8000a66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 f967 	bl	8000d46 <HAL_SYSTICK_Config>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e00e      	b.n	8000aa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2b0f      	cmp	r3, #15
 8000a86:	d80a      	bhi.n	8000a9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a88:	2200      	movs	r2, #0
 8000a8a:	6879      	ldr	r1, [r7, #4]
 8000a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a90:	f000 f92f 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a94:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <HAL_InitTick+0x5c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	e000      	b.n	8000aa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3708      	adds	r7, #8
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000008 	.word	0x20000008
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_IncTick+0x20>)
 8000aba:	781b      	ldrb	r3, [r3, #0]
 8000abc:	461a      	mov	r2, r3
 8000abe:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4413      	add	r3, r2
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <HAL_IncTick+0x24>)
 8000ac6:	6013      	str	r3, [r2, #0]
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000120 	.word	0x20000120

08000adc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae0:	4b03      	ldr	r3, [pc, #12]	; (8000af0 <HAL_GetTick+0x14>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	20000120 	.word	0x20000120

08000af4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000afc:	f7ff ffee 	bl	8000adc <HAL_GetTick>
 8000b00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b0c:	d005      	beq.n	8000b1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b0e:	4b0a      	ldr	r3, [pc, #40]	; (8000b38 <HAL_Delay+0x44>)
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b1a:	bf00      	nop
 8000b1c:	f7ff ffde 	bl	8000adc <HAL_GetTick>
 8000b20:	4602      	mov	r2, r0
 8000b22:	68bb      	ldr	r3, [r7, #8]
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	68fa      	ldr	r2, [r7, #12]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d8f7      	bhi.n	8000b1c <HAL_Delay+0x28>
  {
  }
}
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0c      	ldr	r3, [pc, #48]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b64:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	60d3      	str	r3, [r2, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	e000ed00 	.word	0xe000ed00

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff3e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff31 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa2 	bl	8000c98 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d101      	bne.n	8000d70 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e00e      	b.n	8000d8e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	795b      	ldrb	r3, [r3, #5]
 8000d74:	b2db      	uxtb	r3, r3
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fdb3 	bl	80008ec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2201      	movs	r2, #1
 8000d8a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d8c:	2300      	movs	r3, #0
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3708      	adds	r7, #8
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b089      	sub	sp, #36	; 0x24
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000da2:	2300      	movs	r3, #0
 8000da4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dae:	2300      	movs	r3, #0
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	e159      	b.n	8001068 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000db4:	2201      	movs	r2, #1
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	697a      	ldr	r2, [r7, #20]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dc8:	693a      	ldr	r2, [r7, #16]
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	f040 8148 	bne.w	8001062 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d005      	beq.n	8000dea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000de6:	2b02      	cmp	r3, #2
 8000de8:	d130      	bne.n	8000e4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	689b      	ldr	r3, [r3, #8]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	005b      	lsls	r3, r3, #1
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	69ba      	ldr	r2, [r7, #24]
 8000dfe:	4013      	ands	r3, r2
 8000e00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	68da      	ldr	r2, [r3, #12]
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4313      	orrs	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	69ba      	ldr	r2, [r7, #24]
 8000e18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e20:	2201      	movs	r2, #1
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	fa02 f303 	lsl.w	r3, r2, r3
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	091b      	lsrs	r3, r3, #4
 8000e36:	f003 0201 	and.w	r2, r3, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	69ba      	ldr	r2, [r7, #24]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	f003 0303 	and.w	r3, r3, #3
 8000e54:	2b03      	cmp	r3, #3
 8000e56:	d017      	beq.n	8000e88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	68db      	ldr	r3, [r3, #12]
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e5e:	69fb      	ldr	r3, [r7, #28]
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	2203      	movs	r2, #3
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	69ba      	ldr	r2, [r7, #24]
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	69ba      	ldr	r2, [r7, #24]
 8000e86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0303 	and.w	r3, r3, #3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d123      	bne.n	8000edc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	08da      	lsrs	r2, r3, #3
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	f003 0307 	and.w	r3, r3, #7
 8000ea8:	009b      	lsls	r3, r3, #2
 8000eaa:	220f      	movs	r2, #15
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f003 0307 	and.w	r3, r3, #7
 8000ec2:	009b      	lsls	r3, r3, #2
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	69ba      	ldr	r2, [r7, #24]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	08da      	lsrs	r2, r3, #3
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	3208      	adds	r2, #8
 8000ed6:	69b9      	ldr	r1, [r7, #24]
 8000ed8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f003 0203 	and.w	r2, r3, #3
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	005b      	lsls	r3, r3, #1
 8000f00:	fa02 f303 	lsl.w	r3, r2, r3
 8000f04:	69ba      	ldr	r2, [r7, #24]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69ba      	ldr	r2, [r7, #24]
 8000f0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	f000 80a2 	beq.w	8001062 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b57      	ldr	r3, [pc, #348]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	4a56      	ldr	r2, [pc, #344]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <HAL_GPIO_Init+0x2e8>)
 8000f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f3a:	4a52      	ldr	r2, [pc, #328]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	089b      	lsrs	r3, r3, #2
 8000f40:	3302      	adds	r3, #2
 8000f42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	220f      	movs	r2, #15
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	43db      	mvns	r3, r3
 8000f58:	69ba      	ldr	r2, [r7, #24]
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a49      	ldr	r2, [pc, #292]	; (8001088 <HAL_GPIO_Init+0x2f0>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d019      	beq.n	8000f9a <HAL_GPIO_Init+0x202>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a48      	ldr	r2, [pc, #288]	; (800108c <HAL_GPIO_Init+0x2f4>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d013      	beq.n	8000f96 <HAL_GPIO_Init+0x1fe>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a47      	ldr	r2, [pc, #284]	; (8001090 <HAL_GPIO_Init+0x2f8>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d00d      	beq.n	8000f92 <HAL_GPIO_Init+0x1fa>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a46      	ldr	r2, [pc, #280]	; (8001094 <HAL_GPIO_Init+0x2fc>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d007      	beq.n	8000f8e <HAL_GPIO_Init+0x1f6>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a45      	ldr	r2, [pc, #276]	; (8001098 <HAL_GPIO_Init+0x300>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d101      	bne.n	8000f8a <HAL_GPIO_Init+0x1f2>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e008      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	e006      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f8e:	2303      	movs	r3, #3
 8000f90:	e004      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f92:	2302      	movs	r3, #2
 8000f94:	e002      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f96:	2301      	movs	r3, #1
 8000f98:	e000      	b.n	8000f9c <HAL_GPIO_Init+0x204>
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	69fa      	ldr	r2, [r7, #28]
 8000f9e:	f002 0203 	and.w	r2, r2, #3
 8000fa2:	0092      	lsls	r2, r2, #2
 8000fa4:	4093      	lsls	r3, r2
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fac:	4935      	ldr	r1, [pc, #212]	; (8001084 <HAL_GPIO_Init+0x2ec>)
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	3302      	adds	r3, #2
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fba:	4b38      	ldr	r3, [pc, #224]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d003      	beq.n	8000fde <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fde:	4a2f      	ldr	r2, [pc, #188]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe0:	69bb      	ldr	r3, [r7, #24]
 8000fe2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe4:	4b2d      	ldr	r3, [pc, #180]	; (800109c <HAL_GPIO_Init+0x304>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d003      	beq.n	8001008 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001008:	4a24      	ldr	r2, [pc, #144]	; (800109c <HAL_GPIO_Init+0x304>)
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100e:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x304>)
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	43db      	mvns	r3, r3
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4013      	ands	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d003      	beq.n	8001032 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800102a:	69ba      	ldr	r2, [r7, #24]
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001032:	4a1a      	ldr	r2, [pc, #104]	; (800109c <HAL_GPIO_Init+0x304>)
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_GPIO_Init+0x304>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103e:	693b      	ldr	r3, [r7, #16]
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105c:	4a0f      	ldr	r2, [pc, #60]	; (800109c <HAL_GPIO_Init+0x304>)
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001062:	69fb      	ldr	r3, [r7, #28]
 8001064:	3301      	adds	r3, #1
 8001066:	61fb      	str	r3, [r7, #28]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	2b0f      	cmp	r3, #15
 800106c:	f67f aea2 	bls.w	8000db4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001070:	bf00      	nop
 8001072:	bf00      	nop
 8001074:	3724      	adds	r7, #36	; 0x24
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800
 8001084:	40013800 	.word	0x40013800
 8001088:	40020000 	.word	0x40020000
 800108c:	40020400 	.word	0x40020400
 8001090:	40020800 	.word	0x40020800
 8001094:	40020c00 	.word	0x40020c00
 8001098:	40021000 	.word	0x40021000
 800109c:	40013c00 	.word	0x40013c00

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010bc:	e003      	b.n	80010c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010be:	887b      	ldrh	r3, [r7, #2]
 80010c0:	041a      	lsls	r2, r3, #16
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	619a      	str	r2, [r3, #24]
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr

080010d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010d4:	b08f      	sub	sp, #60	; 0x3c
 80010d6:	af0a      	add	r7, sp, #40	; 0x28
 80010d8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d101      	bne.n	80010e4 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e10f      	b.n	8001304 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d106      	bne.n	8001104 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2200      	movs	r2, #0
 80010fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f005 fcfe 	bl	8006b00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2203      	movs	r2, #3
 8001108:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001114:	2b00      	cmp	r3, #0
 8001116:	d102      	bne.n	800111e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f001 ff97 	bl	8003056 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	687e      	ldr	r6, [r7, #4]
 8001130:	466d      	mov	r5, sp
 8001132:	f106 0410 	add.w	r4, r6, #16
 8001136:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001138:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800113c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800113e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001142:	e885 0003 	stmia.w	r5, {r0, r1}
 8001146:	1d33      	adds	r3, r6, #4
 8001148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114a:	6838      	ldr	r0, [r7, #0]
 800114c:	f001 fe6e 	bl	8002e2c <USB_CoreInit>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d005      	beq.n	8001162 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2202      	movs	r2, #2
 800115a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800115e:	2301      	movs	r3, #1
 8001160:	e0d0      	b.n	8001304 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2100      	movs	r1, #0
 8001168:	4618      	mov	r0, r3
 800116a:	f001 ff85 	bl	8003078 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800116e:	2300      	movs	r3, #0
 8001170:	73fb      	strb	r3, [r7, #15]
 8001172:	e04a      	b.n	800120a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	333d      	adds	r3, #61	; 0x3d
 8001184:	2201      	movs	r2, #1
 8001186:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001188:	7bfa      	ldrb	r2, [r7, #15]
 800118a:	6879      	ldr	r1, [r7, #4]
 800118c:	4613      	mov	r3, r2
 800118e:	00db      	lsls	r3, r3, #3
 8001190:	4413      	add	r3, r2
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	440b      	add	r3, r1
 8001196:	333c      	adds	r3, #60	; 0x3c
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	b298      	uxth	r0, r3
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	4413      	add	r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	3344      	adds	r3, #68	; 0x44
 80011b0:	4602      	mov	r2, r0
 80011b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011b4:	7bfa      	ldrb	r2, [r7, #15]
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	4613      	mov	r3, r2
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4413      	add	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	440b      	add	r3, r1
 80011c2:	3340      	adds	r3, #64	; 0x40
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	4613      	mov	r3, r2
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4413      	add	r3, r2
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	440b      	add	r3, r1
 80011d6:	3348      	adds	r3, #72	; 0x48
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011dc:	7bfa      	ldrb	r2, [r7, #15]
 80011de:	6879      	ldr	r1, [r7, #4]
 80011e0:	4613      	mov	r3, r2
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	4413      	add	r3, r2
 80011e6:	009b      	lsls	r3, r3, #2
 80011e8:	440b      	add	r3, r1
 80011ea:	334c      	adds	r3, #76	; 0x4c
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011f0:	7bfa      	ldrb	r2, [r7, #15]
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	4613      	mov	r3, r2
 80011f6:	00db      	lsls	r3, r3, #3
 80011f8:	4413      	add	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	440b      	add	r3, r1
 80011fe:	3354      	adds	r3, #84	; 0x54
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001204:	7bfb      	ldrb	r3, [r7, #15]
 8001206:	3301      	adds	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	7bfa      	ldrb	r2, [r7, #15]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	d3af      	bcc.n	8001174 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001214:	2300      	movs	r3, #0
 8001216:	73fb      	strb	r3, [r7, #15]
 8001218:	e044      	b.n	80012a4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800121a:	7bfa      	ldrb	r2, [r7, #15]
 800121c:	6879      	ldr	r1, [r7, #4]
 800121e:	4613      	mov	r3, r2
 8001220:	00db      	lsls	r3, r3, #3
 8001222:	4413      	add	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	440b      	add	r3, r1
 8001228:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001230:	7bfa      	ldrb	r2, [r7, #15]
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	4613      	mov	r3, r2
 8001236:	00db      	lsls	r3, r3, #3
 8001238:	4413      	add	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	440b      	add	r3, r1
 800123e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001242:	7bfa      	ldrb	r2, [r7, #15]
 8001244:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001246:	7bfa      	ldrb	r2, [r7, #15]
 8001248:	6879      	ldr	r1, [r7, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	00db      	lsls	r3, r3, #3
 800124e:	4413      	add	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	440b      	add	r3, r1
 8001254:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800125c:	7bfa      	ldrb	r2, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	4613      	mov	r3, r2
 8001262:	00db      	lsls	r3, r3, #3
 8001264:	4413      	add	r3, r2
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	440b      	add	r3, r1
 800126a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001272:	7bfa      	ldrb	r2, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	4613      	mov	r3, r2
 8001278:	00db      	lsls	r3, r3, #3
 800127a:	4413      	add	r3, r2
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	440b      	add	r3, r1
 8001280:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001288:	7bfa      	ldrb	r2, [r7, #15]
 800128a:	6879      	ldr	r1, [r7, #4]
 800128c:	4613      	mov	r3, r2
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	4413      	add	r3, r2
 8001292:	009b      	lsls	r3, r3, #2
 8001294:	440b      	add	r3, r1
 8001296:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800129a:	2200      	movs	r2, #0
 800129c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	3301      	adds	r3, #1
 80012a2:	73fb      	strb	r3, [r7, #15]
 80012a4:	7bfa      	ldrb	r2, [r7, #15]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	429a      	cmp	r2, r3
 80012ac:	d3b5      	bcc.n	800121a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	603b      	str	r3, [r7, #0]
 80012b4:	687e      	ldr	r6, [r7, #4]
 80012b6:	466d      	mov	r5, sp
 80012b8:	f106 0410 	add.w	r4, r6, #16
 80012bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012c8:	e885 0003 	stmia.w	r5, {r0, r1}
 80012cc:	1d33      	adds	r3, r6, #4
 80012ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012d0:	6838      	ldr	r0, [r7, #0]
 80012d2:	f001 ff1d 	bl	8003110 <USB_DevInit>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d005      	beq.n	80012e8 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2202      	movs	r2, #2
 80012e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	e00d      	b.n	8001304 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2201      	movs	r2, #1
 80012f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4618      	mov	r0, r3
 80012fe:	f003 f86c 	bl	80043da <USB_DevDisconnect>

  return HAL_OK;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800130c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b084      	sub	sp, #16
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001320:	2b01      	cmp	r3, #1
 8001322:	d101      	bne.n	8001328 <HAL_PCD_Start+0x1c>
 8001324:	2302      	movs	r3, #2
 8001326:	e020      	b.n	800136a <HAL_PCD_Start+0x5e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2201      	movs	r2, #1
 800132c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001334:	2b01      	cmp	r3, #1
 8001336:	d109      	bne.n	800134c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001344:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4618      	mov	r0, r3
 8001352:	f001 fe6f 	bl	8003034 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f003 f81c 	bl	8004398 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3710      	adds	r7, #16
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001372:	b590      	push	{r4, r7, lr}
 8001374:	b08d      	sub	sp, #52	; 0x34
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001380:	6a3b      	ldr	r3, [r7, #32]
 8001382:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4618      	mov	r0, r3
 800138a:	f003 f8da 	bl	8004542 <USB_GetMode>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	f040 848a 	bne.w	8001caa <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f003 f83e 	bl	800441c <USB_ReadInterrupts>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8480 	beq.w	8001ca8 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4618      	mov	r0, r3
 80013c2:	f003 f82b 	bl	800441c <USB_ReadInterrupts>
 80013c6:	4603      	mov	r3, r0
 80013c8:	f003 0302 	and.w	r3, r3, #2
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d107      	bne.n	80013e0 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	695a      	ldr	r2, [r3, #20]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f002 0202 	and.w	r2, r2, #2
 80013de:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f819 	bl	800441c <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f003 0310 	and.w	r3, r3, #16
 80013f0:	2b10      	cmp	r3, #16
 80013f2:	d161      	bne.n	80014b8 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699a      	ldr	r2, [r3, #24]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f022 0210 	bic.w	r2, r2, #16
 8001402:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001404:	6a3b      	ldr	r3, [r7, #32]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	f003 020f 	and.w	r2, r3, #15
 8001410:	4613      	mov	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	4413      	add	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	3304      	adds	r3, #4
 8001422:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	0c5b      	lsrs	r3, r3, #17
 8001428:	f003 030f 	and.w	r3, r3, #15
 800142c:	2b02      	cmp	r3, #2
 800142e:	d124      	bne.n	800147a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001430:	69ba      	ldr	r2, [r7, #24]
 8001432:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d035      	beq.n	80014a8 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	091b      	lsrs	r3, r3, #4
 8001444:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001446:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	6a38      	ldr	r0, [r7, #32]
 8001450:	f002 fe50 	bl	80040f4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001460:	441a      	add	r2, r3
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	6a1a      	ldr	r2, [r3, #32]
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	091b      	lsrs	r3, r3, #4
 800146e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001472:	441a      	add	r2, r3
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	621a      	str	r2, [r3, #32]
 8001478:	e016      	b.n	80014a8 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	0c5b      	lsrs	r3, r3, #17
 800147e:	f003 030f 	and.w	r3, r3, #15
 8001482:	2b06      	cmp	r3, #6
 8001484:	d110      	bne.n	80014a8 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800148c:	2208      	movs	r2, #8
 800148e:	4619      	mov	r1, r3
 8001490:	6a38      	ldr	r0, [r7, #32]
 8001492:	f002 fe2f 	bl	80040f4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	091b      	lsrs	r3, r3, #4
 800149e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014a2:	441a      	add	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699a      	ldr	r2, [r3, #24]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 0210 	orr.w	r2, r2, #16
 80014b6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f002 ffad 	bl	800441c <USB_ReadInterrupts>
 80014c2:	4603      	mov	r3, r0
 80014c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014c8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014cc:	f040 80a7 	bne.w	800161e <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 ffb2 	bl	8004442 <USB_ReadDevAllOutEpInterrupt>
 80014de:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014e0:	e099      	b.n	8001616 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	f000 808e 	beq.w	800160a <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	4618      	mov	r0, r3
 80014fa:	f002 ffd6 	bl	80044aa <USB_ReadDevOutEPInterrupt>
 80014fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	2b00      	cmp	r3, #0
 8001508:	d00c      	beq.n	8001524 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800150a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150c:	015a      	lsls	r2, r3, #5
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	4413      	add	r3, r2
 8001512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001516:	461a      	mov	r2, r3
 8001518:	2301      	movs	r3, #1
 800151a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800151c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 fec2 	bl	80022a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153a:	461a      	mov	r2, r3
 800153c:	2308      	movs	r3, #8
 800153e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 ff98 	bl	8002478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0310 	and.w	r3, r3, #16
 800154e:	2b00      	cmp	r3, #0
 8001550:	d008      	beq.n	8001564 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155e:	461a      	mov	r2, r3
 8001560:	2310      	movs	r3, #16
 8001562:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	f003 0302 	and.w	r3, r3, #2
 800156a:	2b00      	cmp	r3, #0
 800156c:	d030      	beq.n	80015d0 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	695b      	ldr	r3, [r3, #20]
 8001572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001576:	2b80      	cmp	r3, #128	; 0x80
 8001578:	d109      	bne.n	800158e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	69fa      	ldr	r2, [r7, #28]
 8001584:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001588:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800158c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800158e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001590:	4613      	mov	r3, r2
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4413      	add	r3, r2
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	4413      	add	r3, r2
 80015a0:	3304      	adds	r3, #4
 80015a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	78db      	ldrb	r3, [r3, #3]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d108      	bne.n	80015be <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	2200      	movs	r2, #0
 80015b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	4619      	mov	r1, r3
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f005 fb9d 	bl	8006cf8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	015a      	lsls	r2, r3, #5
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	4413      	add	r3, r2
 80015c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ca:	461a      	mov	r2, r3
 80015cc:	2302      	movs	r3, #2
 80015ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	f003 0320 	and.w	r3, r3, #32
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d008      	beq.n	80015ec <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015dc:	015a      	lsls	r2, r3, #5
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	4413      	add	r3, r2
 80015e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015e6:	461a      	mov	r2, r3
 80015e8:	2320      	movs	r3, #32
 80015ea:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d009      	beq.n	800160a <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	015a      	lsls	r2, r3, #5
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	4413      	add	r3, r2
 80015fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001602:	461a      	mov	r2, r3
 8001604:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001608:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800160a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160c:	3301      	adds	r3, #1
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001618:	2b00      	cmp	r3, #0
 800161a:	f47f af62 	bne.w	80014e2 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f002 fefa 	bl	800441c <USB_ReadInterrupts>
 8001628:	4603      	mov	r3, r0
 800162a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001632:	f040 80db 	bne.w	80017ec <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4618      	mov	r0, r3
 800163c:	f002 ff1b 	bl	8004476 <USB_ReadDevAllInEpInterrupt>
 8001640:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001646:	e0cd      	b.n	80017e4 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 80c2 	beq.w	80017d8 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	4611      	mov	r1, r2
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ff41 	bl	80044e6 <USB_ReadDevInEPInterrupt>
 8001664:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d057      	beq.n	8001720 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	2201      	movs	r2, #1
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001684:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	43db      	mvns	r3, r3
 800168a:	69f9      	ldr	r1, [r7, #28]
 800168c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001690:	4013      	ands	r3, r2
 8001692:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	015a      	lsls	r2, r3, #5
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	4413      	add	r3, r2
 800169c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016a0:	461a      	mov	r2, r3
 80016a2:	2301      	movs	r3, #1
 80016a4:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d132      	bne.n	8001714 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	440b      	add	r3, r1
 80016bc:	334c      	adds	r3, #76	; 0x4c
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016c4:	4613      	mov	r3, r2
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4403      	add	r3, r0
 80016ce:	3348      	adds	r3, #72	; 0x48
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4419      	add	r1, r3
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d8:	4613      	mov	r3, r2
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	4413      	add	r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	4403      	add	r3, r0
 80016e2:	334c      	adds	r3, #76	; 0x4c
 80016e4:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d113      	bne.n	8001714 <HAL_PCD_IRQHandler+0x3a2>
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4613      	mov	r3, r2
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3354      	adds	r3, #84	; 0x54
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d108      	bne.n	8001714 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6818      	ldr	r0, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800170c:	461a      	mov	r2, r3
 800170e:	2101      	movs	r1, #1
 8001710:	f002 ff48 	bl	80045a4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001716:	b2db      	uxtb	r3, r3
 8001718:	4619      	mov	r1, r3
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f005 fa71 	bl	8006c02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d008      	beq.n	800173c <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800172a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800172c:	015a      	lsls	r2, r3, #5
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	4413      	add	r3, r2
 8001732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001736:	461a      	mov	r2, r3
 8001738:	2308      	movs	r3, #8
 800173a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0310 	and.w	r3, r3, #16
 8001742:	2b00      	cmp	r3, #0
 8001744:	d008      	beq.n	8001758 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001752:	461a      	mov	r2, r3
 8001754:	2310      	movs	r3, #16
 8001756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800175e:	2b00      	cmp	r3, #0
 8001760:	d008      	beq.n	8001774 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	015a      	lsls	r2, r3, #5
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	4413      	add	r3, r2
 800176a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800176e:	461a      	mov	r2, r3
 8001770:	2340      	movs	r3, #64	; 0x40
 8001772:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d023      	beq.n	80017c6 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800177e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001780:	6a38      	ldr	r0, [r7, #32]
 8001782:	f001 fe29 	bl	80033d8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001788:	4613      	mov	r3, r2
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	4413      	add	r3, r2
 800178e:	009b      	lsls	r3, r3, #2
 8001790:	3338      	adds	r3, #56	; 0x38
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	78db      	ldrb	r3, [r3, #3]
 800179e:	2b01      	cmp	r3, #1
 80017a0:	d108      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017aa:	b2db      	uxtb	r3, r3
 80017ac:	4619      	mov	r1, r3
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f005 fab4 	bl	8006d1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b6:	015a      	lsls	r2, r3, #5
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	4413      	add	r3, r2
 80017bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c0:	461a      	mov	r2, r3
 80017c2:	2302      	movs	r3, #2
 80017c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d003      	beq.n	80017d8 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 fcdb 	bl	800218e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	3301      	adds	r3, #1
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e0:	085b      	lsrs	r3, r3, #1
 80017e2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	f47f af2e 	bne.w	8001648 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f002 fe13 	bl	800441c <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001800:	d122      	bne.n	8001848 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800181c:	2b01      	cmp	r3, #1
 800181e:	d108      	bne.n	8001832 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001828:	2100      	movs	r1, #0
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 fec2 	bl	80025b4 <HAL_PCDEx_LPM_Callback>
 8001830:	e002      	b.n	8001838 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f005 fa52 	bl	8006cdc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	695a      	ldr	r2, [r3, #20]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001846:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f002 fde5 	bl	800441c <USB_ReadInterrupts>
 8001852:	4603      	mov	r3, r0
 8001854:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001858:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800185c:	d112      	bne.n	8001884 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b01      	cmp	r3, #1
 800186c:	d102      	bne.n	8001874 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f005 fa0e 	bl	8006c90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	695a      	ldr	r2, [r3, #20]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001882:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f002 fdc7 	bl	800441c <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001898:	f040 80b7 	bne.w	8001a0a <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018aa:	f023 0301 	bic.w	r3, r3, #1
 80018ae:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2110      	movs	r1, #16
 80018b6:	4618      	mov	r0, r3
 80018b8:	f001 fd8e 	bl	80033d8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018c0:	e046      	b.n	8001950 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ce:	461a      	mov	r2, r3
 80018d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d4:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e6:	0151      	lsls	r1, r2, #5
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	440a      	add	r2, r1
 80018ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001902:	461a      	mov	r2, r3
 8001904:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001908:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800190a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800190c:	015a      	lsls	r2, r3, #5
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	4413      	add	r3, r2
 8001912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800191a:	0151      	lsls	r1, r2, #5
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	440a      	add	r2, r1
 8001920:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001924:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001928:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800192a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800192c:	015a      	lsls	r2, r3, #5
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	4413      	add	r3, r2
 8001932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193a:	0151      	lsls	r1, r2, #5
 800193c:	69fa      	ldr	r2, [r7, #28]
 800193e:	440a      	add	r2, r1
 8001940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001944:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001948:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800194a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800194c:	3301      	adds	r3, #1
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001956:	429a      	cmp	r2, r3
 8001958:	d3b3      	bcc.n	80018c2 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001960:	69db      	ldr	r3, [r3, #28]
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001968:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800196c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	2b00      	cmp	r3, #0
 8001974:	d016      	beq.n	80019a4 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800197c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001986:	f043 030b 	orr.w	r3, r3, #11
 800198a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800199c:	f043 030b 	orr.w	r3, r3, #11
 80019a0:	6453      	str	r3, [r2, #68]	; 0x44
 80019a2:	e015      	b.n	80019d0 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019aa:	695b      	ldr	r3, [r3, #20]
 80019ac:	69fa      	ldr	r2, [r7, #28]
 80019ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019b2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019b6:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019ba:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ca:	f043 030b 	orr.w	r3, r3, #11
 80019ce:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	69fa      	ldr	r2, [r7, #28]
 80019da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019e2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6818      	ldr	r0, [r3, #0]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	691b      	ldr	r3, [r3, #16]
 80019ec:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019f4:	461a      	mov	r2, r3
 80019f6:	f002 fdd5 	bl	80045a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695a      	ldr	r2, [r3, #20]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f002 fd04 	bl	800441c <USB_ReadInterrupts>
 8001a14:	4603      	mov	r3, r0
 8001a16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a1e:	d124      	bne.n	8001a6a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f002 fd9a 	bl	800455e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4618      	mov	r0, r3
 8001a30:	f001 fd4f 	bl	80034d2 <USB_GetDevSpeed>
 8001a34:	4603      	mov	r3, r0
 8001a36:	461a      	mov	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681c      	ldr	r4, [r3, #0]
 8001a40:	f001 f9e8 	bl	8002e14 <HAL_RCC_GetHCLKFreq>
 8001a44:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4620      	mov	r0, r4
 8001a50:	f001 fa4e 	bl	8002ef0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f005 f8fc 	bl	8006c52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	695a      	ldr	r2, [r3, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4618      	mov	r0, r3
 8001a70:	f002 fcd4 	bl	800441c <USB_ReadInterrupts>
 8001a74:	4603      	mov	r3, r0
 8001a76:	f003 0308 	and.w	r3, r3, #8
 8001a7a:	2b08      	cmp	r3, #8
 8001a7c:	d10a      	bne.n	8001a94 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f005 f8d9 	bl	8006c36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695a      	ldr	r2, [r3, #20]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f002 0208 	and.w	r2, r2, #8
 8001a92:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f002 fcbf 	bl	800441c <USB_ReadInterrupts>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001aa4:	2b80      	cmp	r3, #128	; 0x80
 8001aa6:	d122      	bne.n	8001aee <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ab0:	6a3b      	ldr	r3, [r7, #32]
 8001ab2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab8:	e014      	b.n	8001ae4 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001aba:	6879      	ldr	r1, [r7, #4]
 8001abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001abe:	4613      	mov	r3, r2
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4413      	add	r3, r2
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	440b      	add	r3, r1
 8001ac8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d105      	bne.n	8001ade <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f000 fb27 	bl	800212c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d3e5      	bcc.n	8001aba <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f002 fc92 	bl	800441c <USB_ReadInterrupts>
 8001af8:	4603      	mov	r3, r0
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b02:	d13b      	bne.n	8001b7c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b04:	2301      	movs	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	e02b      	b.n	8001b62 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b0c:	015a      	lsls	r2, r3, #5
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b1a:	6879      	ldr	r1, [r7, #4]
 8001b1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b1e:	4613      	mov	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	4413      	add	r3, r2
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	440b      	add	r3, r1
 8001b28:	3340      	adds	r3, #64	; 0x40
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d115      	bne.n	8001b5c <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b30:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	da12      	bge.n	8001b5c <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b36:	6879      	ldr	r1, [r7, #4]
 8001b38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	00db      	lsls	r3, r3, #3
 8001b3e:	4413      	add	r3, r2
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	440b      	add	r3, r1
 8001b44:	333f      	adds	r3, #63	; 0x3f
 8001b46:	2201      	movs	r2, #1
 8001b48:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	4619      	mov	r1, r3
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 fae8 	bl	800212c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	3301      	adds	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d3ce      	bcc.n	8001b0a <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695a      	ldr	r2, [r3, #20]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f002 fc4b 	bl	800441c <USB_ReadInterrupts>
 8001b86:	4603      	mov	r3, r0
 8001b88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b90:	d155      	bne.n	8001c3e <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b92:	2301      	movs	r3, #1
 8001b94:	627b      	str	r3, [r7, #36]	; 0x24
 8001b96:	e045      	b.n	8001c24 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	015a      	lsls	r2, r3, #5
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bac:	4613      	mov	r3, r2
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4413      	add	r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d12e      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bc0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da2b      	bge.n	8001c1e <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bd2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d121      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bde:	4613      	mov	r3, r2
 8001be0:	00db      	lsls	r3, r3, #3
 8001be2:	4413      	add	r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bec:	2201      	movs	r2, #1
 8001bee:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bf0:	6a3b      	ldr	r3, [r7, #32]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bf8:	6a3b      	ldr	r3, [r7, #32]
 8001bfa:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bfc:	6a3b      	ldr	r3, [r7, #32]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10a      	bne.n	8001c1e <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	69fa      	ldr	r2, [r7, #28]
 8001c12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c1a:	6053      	str	r3, [r2, #4]
            break;
 8001c1c:	e007      	b.n	8001c2e <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	3301      	adds	r3, #1
 8001c22:	627b      	str	r3, [r7, #36]	; 0x24
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d3b4      	bcc.n	8001b98 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	695a      	ldr	r2, [r3, #20]
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c3c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4618      	mov	r0, r3
 8001c44:	f002 fbea 	bl	800441c <USB_ReadInterrupts>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c52:	d10a      	bne.n	8001c6a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f005 f873 	bl	8006d40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	695a      	ldr	r2, [r3, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f002 fbd4 	bl	800441c <USB_ReadInterrupts>
 8001c74:	4603      	mov	r3, r0
 8001c76:	f003 0304 	and.w	r3, r3, #4
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d115      	bne.n	8001caa <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d002      	beq.n	8001c96 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c90:	6878      	ldr	r0, [r7, #4]
 8001c92:	f005 f863 	bl	8006d5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6859      	ldr	r1, [r3, #4]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	605a      	str	r2, [r3, #4]
 8001ca6:	e000      	b.n	8001caa <HAL_PCD_IRQHandler+0x938>
      return;
 8001ca8:	bf00      	nop
    }
  }
}
 8001caa:	3734      	adds	r7, #52	; 0x34
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd90      	pop	{r4, r7, pc}

08001cb0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d101      	bne.n	8001cca <HAL_PCD_SetAddress+0x1a>
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	e013      	b.n	8001cf2 <HAL_PCD_SetAddress+0x42>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	78fa      	ldrb	r2, [r7, #3]
 8001cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	4611      	mov	r1, r2
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f002 fb32 	bl	800434c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
 8001d02:	4608      	mov	r0, r1
 8001d04:	4611      	mov	r1, r2
 8001d06:	461a      	mov	r2, r3
 8001d08:	4603      	mov	r3, r0
 8001d0a:	70fb      	strb	r3, [r7, #3]
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	803b      	strh	r3, [r7, #0]
 8001d10:	4613      	mov	r3, r2
 8001d12:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d14:	2300      	movs	r3, #0
 8001d16:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	da0f      	bge.n	8001d40 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	f003 020f 	and.w	r2, r3, #15
 8001d26:	4613      	mov	r3, r2
 8001d28:	00db      	lsls	r3, r3, #3
 8001d2a:	4413      	add	r3, r2
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	3338      	adds	r3, #56	; 0x38
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	4413      	add	r3, r2
 8001d34:	3304      	adds	r3, #4
 8001d36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	705a      	strb	r2, [r3, #1]
 8001d3e:	e00f      	b.n	8001d60 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d40:	78fb      	ldrb	r3, [r7, #3]
 8001d42:	f003 020f 	and.w	r2, r3, #15
 8001d46:	4613      	mov	r3, r2
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	3304      	adds	r3, #4
 8001d58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 030f 	and.w	r3, r3, #15
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d6c:	883a      	ldrh	r2, [r7, #0]
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	78ba      	ldrb	r2, [r7, #2]
 8001d76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	785b      	ldrb	r3, [r3, #1]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d004      	beq.n	8001d8a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d102      	bne.n	8001d96 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2200      	movs	r2, #0
 8001d94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d101      	bne.n	8001da4 <HAL_PCD_EP_Open+0xaa>
 8001da0:	2302      	movs	r3, #2
 8001da2:	e00e      	b.n	8001dc2 <HAL_PCD_EP_Open+0xc8>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	68f9      	ldr	r1, [r7, #12]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f001 fbb2 	bl	800351c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001dc0:	7afb      	ldrb	r3, [r7, #11]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3710      	adds	r7, #16
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b084      	sub	sp, #16
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	6078      	str	r0, [r7, #4]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	da0f      	bge.n	8001dfe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001dde:	78fb      	ldrb	r3, [r7, #3]
 8001de0:	f003 020f 	and.w	r2, r3, #15
 8001de4:	4613      	mov	r3, r2
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4413      	add	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	3338      	adds	r3, #56	; 0x38
 8001dee:	687a      	ldr	r2, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	3304      	adds	r3, #4
 8001df4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	705a      	strb	r2, [r3, #1]
 8001dfc:	e00f      	b.n	8001e1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dfe:	78fb      	ldrb	r3, [r7, #3]
 8001e00:	f003 020f 	and.w	r2, r3, #15
 8001e04:	4613      	mov	r3, r2
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	009b      	lsls	r3, r3, #2
 8001e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	4413      	add	r3, r2
 8001e14:	3304      	adds	r3, #4
 8001e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	f003 030f 	and.w	r3, r3, #15
 8001e24:	b2da      	uxtb	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d101      	bne.n	8001e38 <HAL_PCD_EP_Close+0x6e>
 8001e34:	2302      	movs	r3, #2
 8001e36:	e00e      	b.n	8001e56 <HAL_PCD_EP_Close+0x8c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68f9      	ldr	r1, [r7, #12]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fbf0 	bl	800362c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2200      	movs	r2, #0
 8001e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	607a      	str	r2, [r7, #4]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e6e:	7afb      	ldrb	r3, [r7, #11]
 8001e70:	f003 020f 	and.w	r2, r3, #15
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e80:	68fa      	ldr	r2, [r7, #12]
 8001e82:	4413      	add	r3, r2
 8001e84:	3304      	adds	r3, #4
 8001e86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	687a      	ldr	r2, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	2200      	movs	r2, #0
 8001e98:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea0:	7afb      	ldrb	r3, [r7, #11]
 8001ea2:	f003 030f 	and.w	r3, r3, #15
 8001ea6:	b2da      	uxtb	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d102      	bne.n	8001eba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eba:	7afb      	ldrb	r3, [r7, #11]
 8001ebc:	f003 030f 	and.w	r3, r3, #15
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d109      	bne.n	8001ed8 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	6818      	ldr	r0, [r3, #0]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	461a      	mov	r2, r3
 8001ed0:	6979      	ldr	r1, [r7, #20]
 8001ed2:	f001 fecf 	bl	8003c74 <USB_EP0StartXfer>
 8001ed6:	e008      	b.n	8001eea <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	691b      	ldr	r3, [r3, #16]
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	f001 fc7d 	bl	80037e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eea:	2300      	movs	r3, #0
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	460b      	mov	r3, r1
 8001efe:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f00:	78fb      	ldrb	r3, [r7, #3]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	6879      	ldr	r1, [r7, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	440b      	add	r3, r1
 8001f12:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f16:	681b      	ldr	r3, [r3, #0]
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	370c      	adds	r7, #12
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f22:	4770      	bx	lr

08001f24 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	460b      	mov	r3, r1
 8001f32:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f34:	7afb      	ldrb	r3, [r7, #11]
 8001f36:	f003 020f 	and.w	r2, r3, #15
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	00db      	lsls	r3, r3, #3
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	3338      	adds	r3, #56	; 0x38
 8001f44:	68fa      	ldr	r2, [r7, #12]
 8001f46:	4413      	add	r3, r2
 8001f48:	3304      	adds	r3, #4
 8001f4a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	683a      	ldr	r2, [r7, #0]
 8001f56:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	2201      	movs	r2, #1
 8001f62:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f64:	7afb      	ldrb	r3, [r7, #11]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	b2da      	uxtb	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d102      	bne.n	8001f7e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f7e:	7afb      	ldrb	r3, [r7, #11]
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d109      	bne.n	8001f9c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	691b      	ldr	r3, [r3, #16]
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	461a      	mov	r2, r3
 8001f94:	6979      	ldr	r1, [r7, #20]
 8001f96:	f001 fe6d 	bl	8003c74 <USB_EP0StartXfer>
 8001f9a:	e008      	b.n	8001fae <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6818      	ldr	r0, [r3, #0]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6979      	ldr	r1, [r7, #20]
 8001faa:	f001 fc1b 	bl	80037e4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fc4:	78fb      	ldrb	r3, [r7, #3]
 8001fc6:	f003 020f 	and.w	r2, r3, #15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d901      	bls.n	8001fd6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e050      	b.n	8002078 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	da0f      	bge.n	8001ffe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 020f 	and.w	r2, r3, #15
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	3338      	adds	r3, #56	; 0x38
 8001fee:	687a      	ldr	r2, [r7, #4]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	3304      	adds	r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	705a      	strb	r2, [r3, #1]
 8001ffc:	e00d      	b.n	800201a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ffe:	78fa      	ldrb	r2, [r7, #3]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	4413      	add	r3, r2
 8002010:	3304      	adds	r3, #4
 8002012:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2200      	movs	r2, #0
 8002018:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	b2da      	uxtb	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002032:	2b01      	cmp	r3, #1
 8002034:	d101      	bne.n	800203a <HAL_PCD_EP_SetStall+0x82>
 8002036:	2302      	movs	r3, #2
 8002038:	e01e      	b.n	8002078 <HAL_PCD_EP_SetStall+0xc0>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68f9      	ldr	r1, [r7, #12]
 8002048:	4618      	mov	r0, r3
 800204a:	f002 f8ab 	bl	80041a4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 030f 	and.w	r3, r3, #15
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10a      	bne.n	800206e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6818      	ldr	r0, [r3, #0]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691b      	ldr	r3, [r3, #16]
 8002060:	b2d9      	uxtb	r1, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002068:	461a      	mov	r2, r3
 800206a:	f002 fa9b 	bl	80045a4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2200      	movs	r2, #0
 8002072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002076:	2300      	movs	r3, #0
}
 8002078:	4618      	mov	r0, r3
 800207a:	3710      	adds	r7, #16
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	460b      	mov	r3, r1
 800208a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800208c:	78fb      	ldrb	r3, [r7, #3]
 800208e:	f003 020f 	and.w	r2, r3, #15
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	429a      	cmp	r2, r3
 8002098:	d901      	bls.n	800209e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e042      	b.n	8002124 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800209e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	da0f      	bge.n	80020c6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020a6:	78fb      	ldrb	r3, [r7, #3]
 80020a8:	f003 020f 	and.w	r2, r3, #15
 80020ac:	4613      	mov	r3, r2
 80020ae:	00db      	lsls	r3, r3, #3
 80020b0:	4413      	add	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	3338      	adds	r3, #56	; 0x38
 80020b6:	687a      	ldr	r2, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	3304      	adds	r3, #4
 80020bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2201      	movs	r2, #1
 80020c2:	705a      	strb	r2, [r3, #1]
 80020c4:	e00f      	b.n	80020e6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020c6:	78fb      	ldrb	r3, [r7, #3]
 80020c8:	f003 020f 	and.w	r2, r3, #15
 80020cc:	4613      	mov	r3, r2
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4413      	add	r3, r2
 80020d2:	009b      	lsls	r3, r3, #2
 80020d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4413      	add	r3, r2
 80020dc:	3304      	adds	r3, #4
 80020de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020ec:	78fb      	ldrb	r3, [r7, #3]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d101      	bne.n	8002106 <HAL_PCD_EP_ClrStall+0x86>
 8002102:	2302      	movs	r3, #2
 8002104:	e00e      	b.n	8002124 <HAL_PCD_EP_ClrStall+0xa4>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2201      	movs	r2, #1
 800210a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	4618      	mov	r0, r3
 8002116:	f002 f8b3 	bl	8004280 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2200      	movs	r2, #0
 800211e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002122:	2300      	movs	r3, #0
}
 8002124:	4618      	mov	r0, r3
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	460b      	mov	r3, r1
 8002136:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002138:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	da0c      	bge.n	800215a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002140:	78fb      	ldrb	r3, [r7, #3]
 8002142:	f003 020f 	and.w	r2, r3, #15
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	3338      	adds	r3, #56	; 0x38
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	4413      	add	r3, r2
 8002154:	3304      	adds	r3, #4
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e00c      	b.n	8002174 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800215a:	78fb      	ldrb	r3, [r7, #3]
 800215c:	f003 020f 	and.w	r2, r3, #15
 8002160:	4613      	mov	r3, r2
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	4413      	add	r3, r2
 8002170:	3304      	adds	r3, #4
 8002172:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	68f9      	ldr	r1, [r7, #12]
 800217a:	4618      	mov	r0, r3
 800217c:	f001 fed2 	bl	8003f24 <USB_EPStopXfer>
 8002180:	4603      	mov	r3, r0
 8002182:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002184:	7afb      	ldrb	r3, [r7, #11]
}
 8002186:	4618      	mov	r0, r3
 8002188:	3710      	adds	r7, #16
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}

0800218e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	b08a      	sub	sp, #40	; 0x28
 8002192:	af02      	add	r7, sp, #8
 8002194:	6078      	str	r0, [r7, #4]
 8002196:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	4413      	add	r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	3338      	adds	r3, #56	; 0x38
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a1a      	ldr	r2, [r3, #32]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d901      	bls.n	80021c6 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e06c      	b.n	80022a0 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	699a      	ldr	r2, [r3, #24]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	69fa      	ldr	r2, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d902      	bls.n	80021e2 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3303      	adds	r3, #3
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021ea:	e02b      	b.n	8002244 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d902      	bls.n	8002208 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	3303      	adds	r3, #3
 800220c:	089b      	lsrs	r3, r3, #2
 800220e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6919      	ldr	r1, [r3, #16]
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	b2da      	uxtb	r2, r3
 8002218:	69fb      	ldr	r3, [r7, #28]
 800221a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002220:	b2db      	uxtb	r3, r3
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	4603      	mov	r3, r0
 8002226:	6978      	ldr	r0, [r7, #20]
 8002228:	f001 ff26 	bl	8004078 <USB_WritePacket>

    ep->xfer_buff  += len;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	441a      	add	r2, r3
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a1a      	ldr	r2, [r3, #32]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	441a      	add	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	015a      	lsls	r2, r3, #5
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	4413      	add	r3, r2
 800224c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	b29b      	uxth	r3, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	429a      	cmp	r2, r3
 8002258:	d809      	bhi.n	800226e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	6a1a      	ldr	r2, [r3, #32]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002262:	429a      	cmp	r2, r3
 8002264:	d203      	bcs.n	800226e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d1be      	bne.n	80021ec <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	699a      	ldr	r2, [r3, #24]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	429a      	cmp	r2, r3
 8002278:	d811      	bhi.n	800229e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	f003 030f 	and.w	r3, r3, #15
 8002280:	2201      	movs	r2, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800228e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	43db      	mvns	r3, r3
 8002294:	6939      	ldr	r1, [r7, #16]
 8002296:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800229a:	4013      	ands	r3, r2
 800229c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800229e:	2300      	movs	r3, #0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}

080022a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b088      	sub	sp, #32
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	333c      	adds	r3, #60	; 0x3c
 80022c0:	3304      	adds	r3, #4
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	015a      	lsls	r2, r3, #5
 80022ca:	69bb      	ldr	r3, [r7, #24]
 80022cc:	4413      	add	r3, r2
 80022ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	691b      	ldr	r3, [r3, #16]
 80022da:	2b01      	cmp	r3, #1
 80022dc:	d17b      	bne.n	80023d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d015      	beq.n	8002314 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4a61      	ldr	r2, [pc, #388]	; (8002470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	f240 80b9 	bls.w	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 80b3 	beq.w	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	4413      	add	r3, r2
 8002306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800230a:	461a      	mov	r2, r3
 800230c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002310:	6093      	str	r3, [r2, #8]
 8002312:	e0a7      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	f003 0320 	and.w	r3, r3, #32
 800231a:	2b00      	cmp	r3, #0
 800231c:	d009      	beq.n	8002332 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	4413      	add	r3, r2
 8002326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232a:	461a      	mov	r2, r3
 800232c:	2320      	movs	r3, #32
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	e098      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002338:	2b00      	cmp	r3, #0
 800233a:	f040 8093 	bne.w	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	4a4b      	ldr	r2, [pc, #300]	; (8002470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d90f      	bls.n	8002366 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00a      	beq.n	8002366 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	015a      	lsls	r2, r3, #5
 8002354:	69bb      	ldr	r3, [r7, #24]
 8002356:	4413      	add	r3, r2
 8002358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800235c:	461a      	mov	r2, r3
 800235e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002362:	6093      	str	r3, [r2, #8]
 8002364:	e07e      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002366:	683a      	ldr	r2, [r7, #0]
 8002368:	4613      	mov	r3, r2
 800236a:	00db      	lsls	r3, r3, #3
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	69da      	ldr	r2, [r3, #28]
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	0159      	lsls	r1, r3, #5
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	440b      	add	r3, r1
 8002388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002392:	1ad2      	subs	r2, r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d114      	bne.n	80023c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6818      	ldr	r0, [r3, #0]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023b0:	461a      	mov	r2, r3
 80023b2:	2101      	movs	r1, #1
 80023b4:	f002 f8f6 	bl	80045a4 <USB_EP0_OutStart>
 80023b8:	e006      	b.n	80023c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	691a      	ldr	r2, [r3, #16]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	441a      	add	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4619      	mov	r1, r3
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f004 fbfc 	bl	8006bcc <HAL_PCD_DataOutStageCallback>
 80023d4:	e046      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	4a26      	ldr	r2, [pc, #152]	; (8002474 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d124      	bne.n	8002428 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00a      	beq.n	80023fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	015a      	lsls	r2, r3, #5
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023f4:	461a      	mov	r2, r3
 80023f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fa:	6093      	str	r3, [r2, #8]
 80023fc:	e032      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	f003 0320 	and.w	r3, r3, #32
 8002404:	2b00      	cmp	r3, #0
 8002406:	d008      	beq.n	800241a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	015a      	lsls	r2, r3, #5
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002414:	461a      	mov	r2, r3
 8002416:	2320      	movs	r3, #32
 8002418:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	b2db      	uxtb	r3, r3
 800241e:	4619      	mov	r1, r3
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f004 fbd3 	bl	8006bcc <HAL_PCD_DataOutStageCallback>
 8002426:	e01d      	b.n	8002464 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d114      	bne.n	8002458 <PCD_EP_OutXfrComplete_int+0x1b0>
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002450:	461a      	mov	r2, r3
 8002452:	2100      	movs	r1, #0
 8002454:	f002 f8a6 	bl	80045a4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	4619      	mov	r1, r3
 800245e:	6878      	ldr	r0, [r7, #4]
 8002460:	f004 fbb4 	bl	8006bcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3720      	adds	r7, #32
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	4f54300a 	.word	0x4f54300a
 8002474:	4f54310a 	.word	0x4f54310a

08002478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	333c      	adds	r3, #60	; 0x3c
 8002490:	3304      	adds	r3, #4
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a15      	ldr	r2, [pc, #84]	; (8002500 <PCD_EP_OutSetupPacket_int+0x88>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d90e      	bls.n	80024cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d009      	beq.n	80024cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c4:	461a      	mov	r2, r3
 80024c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f004 fb6b 	bl	8006ba8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	4a0a      	ldr	r2, [pc, #40]	; (8002500 <PCD_EP_OutSetupPacket_int+0x88>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d90c      	bls.n	80024f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024ec:	461a      	mov	r2, r3
 80024ee:	2101      	movs	r1, #1
 80024f0:	f002 f858 	bl	80045a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3718      	adds	r7, #24
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	4f54300a 	.word	0x4f54300a

08002504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002504:	b480      	push	{r7}
 8002506:	b085      	sub	sp, #20
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	460b      	mov	r3, r1
 800250e:	70fb      	strb	r3, [r7, #3]
 8002510:	4613      	mov	r3, r2
 8002512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800251c:	78fb      	ldrb	r3, [r7, #3]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d107      	bne.n	8002532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002522:	883b      	ldrh	r3, [r7, #0]
 8002524:	0419      	lsls	r1, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	430a      	orrs	r2, r1
 800252e:	629a      	str	r2, [r3, #40]	; 0x28
 8002530:	e028      	b.n	8002584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002538:	0c1b      	lsrs	r3, r3, #16
 800253a:	68ba      	ldr	r2, [r7, #8]
 800253c:	4413      	add	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002540:	2300      	movs	r3, #0
 8002542:	73fb      	strb	r3, [r7, #15]
 8002544:	e00d      	b.n	8002562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	7bfb      	ldrb	r3, [r7, #15]
 800254c:	3340      	adds	r3, #64	; 0x40
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4413      	add	r3, r2
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	0c1b      	lsrs	r3, r3, #16
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	4413      	add	r3, r2
 800255a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	3301      	adds	r3, #1
 8002560:	73fb      	strb	r3, [r7, #15]
 8002562:	7bfa      	ldrb	r2, [r7, #15]
 8002564:	78fb      	ldrb	r3, [r7, #3]
 8002566:	3b01      	subs	r3, #1
 8002568:	429a      	cmp	r2, r3
 800256a:	d3ec      	bcc.n	8002546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800256c:	883b      	ldrh	r3, [r7, #0]
 800256e:	0418      	lsls	r0, r3, #16
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6819      	ldr	r1, [r3, #0]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	3b01      	subs	r3, #1
 8002578:	68ba      	ldr	r2, [r7, #8]
 800257a:	4302      	orrs	r2, r0
 800257c:	3340      	adds	r3, #64	; 0x40
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3714      	adds	r7, #20
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr

08002592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002592:	b480      	push	{r7}
 8002594:	b083      	sub	sp, #12
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	887a      	ldrh	r2, [r7, #2]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	460b      	mov	r3, r1
 80025be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025c0:	bf00      	nop
 80025c2:	370c      	adds	r7, #12
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e267      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d075      	beq.n	80026d6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ea:	4b88      	ldr	r3, [pc, #544]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b04      	cmp	r3, #4
 80025f4:	d00c      	beq.n	8002610 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025f6:	4b85      	ldr	r3, [pc, #532]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d112      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002602:	4b82      	ldr	r3, [pc, #520]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800260a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800260e:	d10b      	bne.n	8002628 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002610:	4b7e      	ldr	r3, [pc, #504]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002618:	2b00      	cmp	r3, #0
 800261a:	d05b      	beq.n	80026d4 <HAL_RCC_OscConfig+0x108>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d157      	bne.n	80026d4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e242      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002630:	d106      	bne.n	8002640 <HAL_RCC_OscConfig+0x74>
 8002632:	4b76      	ldr	r3, [pc, #472]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4a75      	ldr	r2, [pc, #468]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263c:	6013      	str	r3, [r2, #0]
 800263e:	e01d      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x98>
 800264a:	4b70      	ldr	r3, [pc, #448]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a6f      	ldr	r2, [pc, #444]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002650:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002654:	6013      	str	r3, [r2, #0]
 8002656:	4b6d      	ldr	r3, [pc, #436]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a6c      	ldr	r2, [pc, #432]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e00b      	b.n	800267c <HAL_RCC_OscConfig+0xb0>
 8002664:	4b69      	ldr	r3, [pc, #420]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a68      	ldr	r2, [pc, #416]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800266a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266e:	6013      	str	r3, [r2, #0]
 8002670:	4b66      	ldr	r3, [pc, #408]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a65      	ldr	r2, [pc, #404]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002676:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800267a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d013      	beq.n	80026ac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002684:	f7fe fa2a 	bl	8000adc <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800268c:	f7fe fa26 	bl	8000adc <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b64      	cmp	r3, #100	; 0x64
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e207      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269e:	4b5b      	ldr	r3, [pc, #364]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d0f0      	beq.n	800268c <HAL_RCC_OscConfig+0xc0>
 80026aa:	e014      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fa16 	bl	8000adc <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fa12 	bl	8000adc <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1f3      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0xe8>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d063      	beq.n	80027aa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026e2:	4b4a      	ldr	r3, [pc, #296]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	f003 030c 	and.w	r3, r3, #12
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d00b      	beq.n	8002706 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026f6:	2b08      	cmp	r3, #8
 80026f8:	d11c      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d116      	bne.n	8002734 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002706:	4b41      	ldr	r3, [pc, #260]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d001      	beq.n	800271e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e1c7      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	4937      	ldr	r1, [pc, #220]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800272e:	4313      	orrs	r3, r2
 8002730:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	e03a      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d020      	beq.n	800277e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800273c:	4b34      	ldr	r3, [pc, #208]	; (8002810 <HAL_RCC_OscConfig+0x244>)
 800273e:	2201      	movs	r2, #1
 8002740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002742:	f7fe f9cb 	bl	8000adc <HAL_GetTick>
 8002746:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002748:	e008      	b.n	800275c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274a:	f7fe f9c7 	bl	8000adc <HAL_GetTick>
 800274e:	4602      	mov	r2, r0
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d901      	bls.n	800275c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002758:	2303      	movs	r3, #3
 800275a:	e1a8      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275c:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d0f0      	beq.n	800274a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b28      	ldr	r3, [pc, #160]	; (800280c <HAL_RCC_OscConfig+0x240>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	00db      	lsls	r3, r3, #3
 8002776:	4925      	ldr	r1, [pc, #148]	; (800280c <HAL_RCC_OscConfig+0x240>)
 8002778:	4313      	orrs	r3, r2
 800277a:	600b      	str	r3, [r1, #0]
 800277c:	e015      	b.n	80027aa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800277e:	4b24      	ldr	r3, [pc, #144]	; (8002810 <HAL_RCC_OscConfig+0x244>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002784:	f7fe f9aa 	bl	8000adc <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800278c:	f7fe f9a6 	bl	8000adc <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e187      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1f0      	bne.n	800278c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d036      	beq.n	8002824 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	695b      	ldr	r3, [r3, #20]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d016      	beq.n	80027ec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027be:	4b15      	ldr	r3, [pc, #84]	; (8002814 <HAL_RCC_OscConfig+0x248>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027c4:	f7fe f98a 	bl	8000adc <HAL_GetTick>
 80027c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ca:	e008      	b.n	80027de <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027cc:	f7fe f986 	bl	8000adc <HAL_GetTick>
 80027d0:	4602      	mov	r2, r0
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b02      	cmp	r3, #2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e167      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027de:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_OscConfig+0x240>)
 80027e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e2:	f003 0302 	and.w	r3, r3, #2
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0f0      	beq.n	80027cc <HAL_RCC_OscConfig+0x200>
 80027ea:	e01b      	b.n	8002824 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027ec:	4b09      	ldr	r3, [pc, #36]	; (8002814 <HAL_RCC_OscConfig+0x248>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027f2:	f7fe f973 	bl	8000adc <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027f8:	e00e      	b.n	8002818 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027fa:	f7fe f96f 	bl	8000adc <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d907      	bls.n	8002818 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e150      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 800280c:	40023800 	.word	0x40023800
 8002810:	42470000 	.word	0x42470000
 8002814:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002818:	4b88      	ldr	r3, [pc, #544]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800281a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d1ea      	bne.n	80027fa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	f000 8097 	beq.w	8002960 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002832:	2300      	movs	r3, #0
 8002834:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002836:	4b81      	ldr	r3, [pc, #516]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10f      	bne.n	8002862 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	60bb      	str	r3, [r7, #8]
 8002846:	4b7d      	ldr	r3, [pc, #500]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a7c      	ldr	r2, [pc, #496]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800284c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b7a      	ldr	r3, [pc, #488]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285a:	60bb      	str	r3, [r7, #8]
 800285c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800285e:	2301      	movs	r3, #1
 8002860:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002862:	4b77      	ldr	r3, [pc, #476]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286a:	2b00      	cmp	r3, #0
 800286c:	d118      	bne.n	80028a0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800286e:	4b74      	ldr	r3, [pc, #464]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002874:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002878:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287a:	f7fe f92f 	bl	8000adc <HAL_GetTick>
 800287e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002880:	e008      	b.n	8002894 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002882:	f7fe f92b 	bl	8000adc <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	693b      	ldr	r3, [r7, #16]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	2b02      	cmp	r3, #2
 800288e:	d901      	bls.n	8002894 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e10c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002894:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <HAL_RCC_OscConfig+0x474>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d0f0      	beq.n	8002882 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d106      	bne.n	80028b6 <HAL_RCC_OscConfig+0x2ea>
 80028a8:	4b64      	ldr	r3, [pc, #400]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ac:	4a63      	ldr	r2, [pc, #396]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ae:	f043 0301 	orr.w	r3, r3, #1
 80028b2:	6713      	str	r3, [r2, #112]	; 0x70
 80028b4:	e01c      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2b05      	cmp	r3, #5
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x30c>
 80028be:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c2:	4a5e      	ldr	r2, [pc, #376]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028c4:	f043 0304 	orr.w	r3, r3, #4
 80028c8:	6713      	str	r3, [r2, #112]	; 0x70
 80028ca:	4b5c      	ldr	r3, [pc, #368]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	4a5b      	ldr	r2, [pc, #364]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028d0:	f043 0301 	orr.w	r3, r3, #1
 80028d4:	6713      	str	r3, [r2, #112]	; 0x70
 80028d6:	e00b      	b.n	80028f0 <HAL_RCC_OscConfig+0x324>
 80028d8:	4b58      	ldr	r3, [pc, #352]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028dc:	4a57      	ldr	r2, [pc, #348]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028de:	f023 0301 	bic.w	r3, r3, #1
 80028e2:	6713      	str	r3, [r2, #112]	; 0x70
 80028e4:	4b55      	ldr	r3, [pc, #340]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a54      	ldr	r2, [pc, #336]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80028ea:	f023 0304 	bic.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d015      	beq.n	8002924 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f8:	f7fe f8f0 	bl	8000adc <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fe:	e00a      	b.n	8002916 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002900:	f7fe f8ec 	bl	8000adc <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	f241 3288 	movw	r2, #5000	; 0x1388
 800290e:	4293      	cmp	r3, r2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e0cb      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002916:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800291a:	f003 0302 	and.w	r3, r3, #2
 800291e:	2b00      	cmp	r3, #0
 8002920:	d0ee      	beq.n	8002900 <HAL_RCC_OscConfig+0x334>
 8002922:	e014      	b.n	800294e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fe f8da 	bl	8000adc <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800292a:	e00a      	b.n	8002942 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800292c:	f7fe f8d6 	bl	8000adc <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	; 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e0b5      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002942:	4b3e      	ldr	r3, [pc, #248]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1ee      	bne.n	800292c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800294e:	7dfb      	ldrb	r3, [r7, #23]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002958:	4a38      	ldr	r2, [pc, #224]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800295a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800295e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	2b00      	cmp	r3, #0
 8002966:	f000 80a1 	beq.w	8002aac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800296a:	4b34      	ldr	r3, [pc, #208]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f003 030c 	and.w	r3, r3, #12
 8002972:	2b08      	cmp	r3, #8
 8002974:	d05c      	beq.n	8002a30 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	2b02      	cmp	r3, #2
 800297c:	d141      	bne.n	8002a02 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	4b31      	ldr	r3, [pc, #196]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002980:	2200      	movs	r2, #0
 8002982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002984:	f7fe f8aa 	bl	8000adc <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800298c:	f7fe f8a6 	bl	8000adc <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e087      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	4b27      	ldr	r3, [pc, #156]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d1f0      	bne.n	800298c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	69da      	ldr	r2, [r3, #28]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	431a      	orrs	r2, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c0:	085b      	lsrs	r3, r3, #1
 80029c2:	3b01      	subs	r3, #1
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	061b      	lsls	r3, r3, #24
 80029ce:	491b      	ldr	r1, [pc, #108]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029d0:	4313      	orrs	r3, r2
 80029d2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029d4:	4b1b      	ldr	r3, [pc, #108]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe f87f 	bl	8000adc <HAL_GetTick>
 80029de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	e008      	b.n	80029f4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029e2:	f7fe f87b 	bl	8000adc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d901      	bls.n	80029f4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	e05c      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	4b11      	ldr	r3, [pc, #68]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0f0      	beq.n	80029e2 <HAL_RCC_OscConfig+0x416>
 8002a00:	e054      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a02:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <HAL_RCC_OscConfig+0x478>)
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a08:	f7fe f868 	bl	8000adc <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe f864 	bl	8000adc <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e045      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a22:	4b06      	ldr	r3, [pc, #24]	; (8002a3c <HAL_RCC_OscConfig+0x470>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x444>
 8002a2e:	e03d      	b.n	8002aac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e038      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
 8002a3c:	40023800 	.word	0x40023800
 8002a40:	40007000 	.word	0x40007000
 8002a44:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <HAL_RCC_OscConfig+0x4ec>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d028      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d121      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d11a      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a78:	4013      	ands	r3, r2
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a7e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8e:	085b      	lsrs	r3, r3, #1
 8002a90:	3b01      	subs	r3, #1
 8002a92:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a94:	429a      	cmp	r2, r3
 8002a96:	d107      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002aa2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e000      	b.n	8002aae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
 8002ab6:	bf00      	nop
 8002ab8:	40023800 	.word	0x40023800

08002abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e0cc      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b68      	ldr	r3, [pc, #416]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d90c      	bls.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b63      	ldr	r3, [pc, #396]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b8      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d020      	beq.n	8002b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 0304 	and.w	r3, r3, #4
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b10:	4b59      	ldr	r3, [pc, #356]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	4a58      	ldr	r2, [pc, #352]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0308 	and.w	r3, r3, #8
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d005      	beq.n	8002b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b28:	4b53      	ldr	r3, [pc, #332]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	4a52      	ldr	r2, [pc, #328]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	494d      	ldr	r1, [pc, #308]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d044      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d107      	bne.n	8002b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b5a:	4b47      	ldr	r3, [pc, #284]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d119      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b66:	2301      	movs	r3, #1
 8002b68:	e07f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d003      	beq.n	8002b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b76:	2b03      	cmp	r3, #3
 8002b78:	d107      	bne.n	8002b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d109      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e06f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b8a:	4b3b      	ldr	r3, [pc, #236]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d101      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e067      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f023 0203 	bic.w	r2, r3, #3
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685b      	ldr	r3, [r3, #4]
 8002ba6:	4934      	ldr	r1, [pc, #208]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bac:	f7fd ff96 	bl	8000adc <HAL_GetTick>
 8002bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bb4:	f7fd ff92 	bl	8000adc <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e04f      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bca:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 020c 	and.w	r2, r3, #12
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d1eb      	bne.n	8002bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bdc:	4b25      	ldr	r3, [pc, #148]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0307 	and.w	r3, r3, #7
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d20c      	bcs.n	8002c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bea:	4b22      	ldr	r3, [pc, #136]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	b2d2      	uxtb	r2, r2
 8002bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bf2:	4b20      	ldr	r3, [pc, #128]	; (8002c74 <HAL_RCC_ClockConfig+0x1b8>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0307 	and.w	r3, r3, #7
 8002bfa:	683a      	ldr	r2, [r7, #0]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d001      	beq.n	8002c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e032      	b.n	8002c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0304 	and.w	r3, r3, #4
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d008      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c10:	4b19      	ldr	r3, [pc, #100]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	4916      	ldr	r1, [pc, #88]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0308 	and.w	r3, r3, #8
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d009      	beq.n	8002c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c2e:	4b12      	ldr	r3, [pc, #72]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	00db      	lsls	r3, r3, #3
 8002c3c:	490e      	ldr	r1, [pc, #56]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c42:	f000 f821 	bl	8002c88 <HAL_RCC_GetSysClockFreq>
 8002c46:	4602      	mov	r2, r0
 8002c48:	4b0b      	ldr	r3, [pc, #44]	; (8002c78 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	091b      	lsrs	r3, r3, #4
 8002c4e:	f003 030f 	and.w	r3, r3, #15
 8002c52:	490a      	ldr	r1, [pc, #40]	; (8002c7c <HAL_RCC_ClockConfig+0x1c0>)
 8002c54:	5ccb      	ldrb	r3, [r1, r3]
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	4a09      	ldr	r2, [pc, #36]	; (8002c80 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c5e:	4b09      	ldr	r3, [pc, #36]	; (8002c84 <HAL_RCC_ClockConfig+0x1c8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f7fd fef6 	bl	8000a54 <HAL_InitTick>

  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3710      	adds	r7, #16
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40023c00 	.word	0x40023c00
 8002c78:	40023800 	.word	0x40023800
 8002c7c:	080071e8 	.word	0x080071e8
 8002c80:	20000000 	.word	0x20000000
 8002c84:	20000004 	.word	0x20000004

08002c88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c8c:	b090      	sub	sp, #64	; 0x40
 8002c8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	; 0x34
 8002c94:	2300      	movs	r3, #0
 8002c96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ca0:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b08      	cmp	r3, #8
 8002caa:	d00d      	beq.n	8002cc8 <HAL_RCC_GetSysClockFreq+0x40>
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	f200 80a1 	bhi.w	8002df4 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d002      	beq.n	8002cbc <HAL_RCC_GetSysClockFreq+0x34>
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d003      	beq.n	8002cc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cba:	e09b      	b.n	8002df4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002cbe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002cc0:	e09b      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002cc2:	4b53      	ldr	r3, [pc, #332]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc6:	e098      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc8:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cd0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cd2:	4b4d      	ldr	r3, [pc, #308]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d028      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	099b      	lsrs	r3, r3, #6
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	627a      	str	r2, [r7, #36]	; 0x24
 8002cea:	6a3b      	ldr	r3, [r7, #32]
 8002cec:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4b47      	ldr	r3, [pc, #284]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002cf4:	fb03 f201 	mul.w	r2, r3, r1
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	fb00 f303 	mul.w	r3, r0, r3
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a43      	ldr	r2, [pc, #268]	; (8002e10 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d02:	fba0 1202 	umull	r1, r2, r0, r2
 8002d06:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d08:	460a      	mov	r2, r1
 8002d0a:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d0e:	4413      	add	r3, r2
 8002d10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d14:	2200      	movs	r2, #0
 8002d16:	61bb      	str	r3, [r7, #24]
 8002d18:	61fa      	str	r2, [r7, #28]
 8002d1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d1e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d22:	f7fd fa59 	bl	80001d8 <__aeabi_uldivmod>
 8002d26:	4602      	mov	r2, r0
 8002d28:	460b      	mov	r3, r1
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d2e:	e053      	b.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d30:	4b35      	ldr	r3, [pc, #212]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	099b      	lsrs	r3, r3, #6
 8002d36:	2200      	movs	r2, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	617a      	str	r2, [r7, #20]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d42:	f04f 0b00 	mov.w	fp, #0
 8002d46:	4652      	mov	r2, sl
 8002d48:	465b      	mov	r3, fp
 8002d4a:	f04f 0000 	mov.w	r0, #0
 8002d4e:	f04f 0100 	mov.w	r1, #0
 8002d52:	0159      	lsls	r1, r3, #5
 8002d54:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d58:	0150      	lsls	r0, r2, #5
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	ebb2 080a 	subs.w	r8, r2, sl
 8002d62:	eb63 090b 	sbc.w	r9, r3, fp
 8002d66:	f04f 0200 	mov.w	r2, #0
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d72:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d76:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d7a:	ebb2 0408 	subs.w	r4, r2, r8
 8002d7e:	eb63 0509 	sbc.w	r5, r3, r9
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	f04f 0300 	mov.w	r3, #0
 8002d8a:	00eb      	lsls	r3, r5, #3
 8002d8c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d90:	00e2      	lsls	r2, r4, #3
 8002d92:	4614      	mov	r4, r2
 8002d94:	461d      	mov	r5, r3
 8002d96:	eb14 030a 	adds.w	r3, r4, sl
 8002d9a:	603b      	str	r3, [r7, #0]
 8002d9c:	eb45 030b 	adc.w	r3, r5, fp
 8002da0:	607b      	str	r3, [r7, #4]
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	f04f 0300 	mov.w	r3, #0
 8002daa:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dae:	4629      	mov	r1, r5
 8002db0:	028b      	lsls	r3, r1, #10
 8002db2:	4621      	mov	r1, r4
 8002db4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002db8:	4621      	mov	r1, r4
 8002dba:	028a      	lsls	r2, r1, #10
 8002dbc:	4610      	mov	r0, r2
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	60bb      	str	r3, [r7, #8]
 8002dc6:	60fa      	str	r2, [r7, #12]
 8002dc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002dcc:	f7fd fa04 	bl	80001d8 <__aeabi_uldivmod>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dd8:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	3301      	adds	r3, #1
 8002de4:	005b      	lsls	r3, r3, #1
 8002de6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002de8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002df0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df2:	e002      	b.n	8002dfa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <HAL_RCC_GetSysClockFreq+0x184>)
 8002df6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3740      	adds	r7, #64	; 0x40
 8002e00:	46bd      	mov	sp, r7
 8002e02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e06:	bf00      	nop
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	00f42400 	.word	0x00f42400
 8002e10:	017d7840 	.word	0x017d7840

08002e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e18:	4b03      	ldr	r3, [pc, #12]	; (8002e28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
}
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	20000000 	.word	0x20000000

08002e2c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
 8002e36:	f107 001c 	add.w	r0, r7, #28
 8002e3a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d122      	bne.n	8002e8a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e6e:	2b01      	cmp	r3, #1
 8002e70:	d105      	bne.n	8002e7e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f001 fbee 	bl	8004660 <USB_CoreReset>
 8002e84:	4603      	mov	r3, r0
 8002e86:	73fb      	strb	r3, [r7, #15]
 8002e88:	e01a      	b.n	8002ec0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f001 fbe2 	bl	8004660 <USB_CoreReset>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002ea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d106      	bne.n	8002eb4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	639a      	str	r2, [r3, #56]	; 0x38
 8002eb2:	e005      	b.n	8002ec0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d10b      	bne.n	8002ede <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	f043 0206 	orr.w	r2, r3, #6
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	f043 0220 	orr.w	r2, r3, #32
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3710      	adds	r7, #16
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002eea:	b004      	add	sp, #16
 8002eec:	4770      	bx	lr
	...

08002ef0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b087      	sub	sp, #28
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	4613      	mov	r3, r2
 8002efc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	2b02      	cmp	r3, #2
 8002f02:	d165      	bne.n	8002fd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	4a41      	ldr	r2, [pc, #260]	; (800300c <USB_SetTurnaroundTime+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d906      	bls.n	8002f1a <USB_SetTurnaroundTime+0x2a>
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4a40      	ldr	r2, [pc, #256]	; (8003010 <USB_SetTurnaroundTime+0x120>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d202      	bcs.n	8002f1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f14:	230f      	movs	r3, #15
 8002f16:	617b      	str	r3, [r7, #20]
 8002f18:	e062      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	4a3c      	ldr	r2, [pc, #240]	; (8003010 <USB_SetTurnaroundTime+0x120>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d306      	bcc.n	8002f30 <USB_SetTurnaroundTime+0x40>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4a3b      	ldr	r2, [pc, #236]	; (8003014 <USB_SetTurnaroundTime+0x124>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d202      	bcs.n	8002f30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f2a:	230e      	movs	r3, #14
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	e057      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	4a38      	ldr	r2, [pc, #224]	; (8003014 <USB_SetTurnaroundTime+0x124>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d306      	bcc.n	8002f46 <USB_SetTurnaroundTime+0x56>
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	4a37      	ldr	r2, [pc, #220]	; (8003018 <USB_SetTurnaroundTime+0x128>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d202      	bcs.n	8002f46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f40:	230d      	movs	r3, #13
 8002f42:	617b      	str	r3, [r7, #20]
 8002f44:	e04c      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	4a33      	ldr	r2, [pc, #204]	; (8003018 <USB_SetTurnaroundTime+0x128>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d306      	bcc.n	8002f5c <USB_SetTurnaroundTime+0x6c>
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	4a32      	ldr	r2, [pc, #200]	; (800301c <USB_SetTurnaroundTime+0x12c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d802      	bhi.n	8002f5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002f56:	230c      	movs	r3, #12
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e041      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	4a2f      	ldr	r2, [pc, #188]	; (800301c <USB_SetTurnaroundTime+0x12c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d906      	bls.n	8002f72 <USB_SetTurnaroundTime+0x82>
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	4a2e      	ldr	r2, [pc, #184]	; (8003020 <USB_SetTurnaroundTime+0x130>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d802      	bhi.n	8002f72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002f6c:	230b      	movs	r3, #11
 8002f6e:	617b      	str	r3, [r7, #20]
 8002f70:	e036      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	4a2a      	ldr	r2, [pc, #168]	; (8003020 <USB_SetTurnaroundTime+0x130>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d906      	bls.n	8002f88 <USB_SetTurnaroundTime+0x98>
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	4a29      	ldr	r2, [pc, #164]	; (8003024 <USB_SetTurnaroundTime+0x134>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d802      	bhi.n	8002f88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002f82:	230a      	movs	r3, #10
 8002f84:	617b      	str	r3, [r7, #20]
 8002f86:	e02b      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	4a26      	ldr	r2, [pc, #152]	; (8003024 <USB_SetTurnaroundTime+0x134>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d906      	bls.n	8002f9e <USB_SetTurnaroundTime+0xae>
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	4a25      	ldr	r2, [pc, #148]	; (8003028 <USB_SetTurnaroundTime+0x138>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d202      	bcs.n	8002f9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002f98:	2309      	movs	r3, #9
 8002f9a:	617b      	str	r3, [r7, #20]
 8002f9c:	e020      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	4a21      	ldr	r2, [pc, #132]	; (8003028 <USB_SetTurnaroundTime+0x138>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d306      	bcc.n	8002fb4 <USB_SetTurnaroundTime+0xc4>
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4a20      	ldr	r2, [pc, #128]	; (800302c <USB_SetTurnaroundTime+0x13c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d802      	bhi.n	8002fb4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002fae:	2308      	movs	r3, #8
 8002fb0:	617b      	str	r3, [r7, #20]
 8002fb2:	e015      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	4a1d      	ldr	r2, [pc, #116]	; (800302c <USB_SetTurnaroundTime+0x13c>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d906      	bls.n	8002fca <USB_SetTurnaroundTime+0xda>
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	4a1c      	ldr	r2, [pc, #112]	; (8003030 <USB_SetTurnaroundTime+0x140>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d202      	bcs.n	8002fca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002fc4:	2307      	movs	r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]
 8002fc8:	e00a      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002fca:	2306      	movs	r3, #6
 8002fcc:	617b      	str	r3, [r7, #20]
 8002fce:	e007      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002fd0:	79fb      	ldrb	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	617b      	str	r3, [r7, #20]
 8002fda:	e001      	b.n	8002fe0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002fdc:	2309      	movs	r3, #9
 8002fde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68da      	ldr	r2, [r3, #12]
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	029b      	lsls	r3, r3, #10
 8002ff4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002ff8:	431a      	orrs	r2, r3
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	00d8acbf 	.word	0x00d8acbf
 8003010:	00e4e1c0 	.word	0x00e4e1c0
 8003014:	00f42400 	.word	0x00f42400
 8003018:	01067380 	.word	0x01067380
 800301c:	011a499f 	.word	0x011a499f
 8003020:	01312cff 	.word	0x01312cff
 8003024:	014ca43f 	.word	0x014ca43f
 8003028:	016e3600 	.word	0x016e3600
 800302c:	01a6ab1f 	.word	0x01a6ab1f
 8003030:	01e84800 	.word	0x01e84800

08003034 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003034:	b480      	push	{r7}
 8003036:	b083      	sub	sp, #12
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f043 0201 	orr.w	r2, r3, #1
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003048:	2300      	movs	r3, #0
}
 800304a:	4618      	mov	r0, r3
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	f023 0201 	bic.w	r2, r3, #1
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr

08003078 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	460b      	mov	r3, r1
 8003082:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003084:	2300      	movs	r3, #0
 8003086:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003094:	78fb      	ldrb	r3, [r7, #3]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d115      	bne.n	80030c6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030a6:	2001      	movs	r0, #1
 80030a8:	f7fd fd24 	bl	8000af4 <HAL_Delay>
      ms++;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3301      	adds	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f001 fa45 	bl	8004542 <USB_GetMode>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d01e      	beq.n	80030fc <USB_SetCurrentMode+0x84>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2b31      	cmp	r3, #49	; 0x31
 80030c2:	d9f0      	bls.n	80030a6 <USB_SetCurrentMode+0x2e>
 80030c4:	e01a      	b.n	80030fc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80030c6:	78fb      	ldrb	r3, [r7, #3]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d115      	bne.n	80030f8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030d8:	2001      	movs	r0, #1
 80030da:	f7fd fd0b 	bl	8000af4 <HAL_Delay>
      ms++;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	3301      	adds	r3, #1
 80030e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f001 fa2c 	bl	8004542 <USB_GetMode>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <USB_SetCurrentMode+0x84>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2b31      	cmp	r3, #49	; 0x31
 80030f4:	d9f0      	bls.n	80030d8 <USB_SetCurrentMode+0x60>
 80030f6:	e001      	b.n	80030fc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e005      	b.n	8003108 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2b32      	cmp	r3, #50	; 0x32
 8003100:	d101      	bne.n	8003106 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e000      	b.n	8003108 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003106:	2300      	movs	r3, #0
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003110:	b084      	sub	sp, #16
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
 800311a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800311e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003122:	2300      	movs	r3, #0
 8003124:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800312a:	2300      	movs	r3, #0
 800312c:	613b      	str	r3, [r7, #16]
 800312e:	e009      	b.n	8003144 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	3340      	adds	r3, #64	; 0x40
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4413      	add	r3, r2
 800313a:	2200      	movs	r2, #0
 800313c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3301      	adds	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b0e      	cmp	r3, #14
 8003148:	d9f2      	bls.n	8003130 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800314a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d11c      	bne.n	800318a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315e:	f043 0302 	orr.w	r3, r3, #2
 8003162:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003168:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003174:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003180:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
 8003188:	e00b      	b.n	80031a2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031a8:	461a      	mov	r2, r3
 80031aa:	2300      	movs	r3, #0
 80031ac:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b4:	4619      	mov	r1, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031bc:	461a      	mov	r2, r3
 80031be:	680b      	ldr	r3, [r1, #0]
 80031c0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80031c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d10c      	bne.n	80031e2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80031c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d104      	bne.n	80031d8 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80031ce:	2100      	movs	r1, #0
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f965 	bl	80034a0 <USB_SetDevSpeed>
 80031d6:	e008      	b.n	80031ea <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80031d8:	2101      	movs	r1, #1
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f960 	bl	80034a0 <USB_SetDevSpeed>
 80031e0:	e003      	b.n	80031ea <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80031e2:	2103      	movs	r1, #3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f95b 	bl	80034a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80031ea:	2110      	movs	r1, #16
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f8f3 	bl	80033d8 <USB_FlushTxFifo>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 f91f 	bl	8003440 <USB_FlushRxFifo>
 8003202:	4603      	mov	r3, r0
 8003204:	2b00      	cmp	r3, #0
 8003206:	d001      	beq.n	800320c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003212:	461a      	mov	r2, r3
 8003214:	2300      	movs	r3, #0
 8003216:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800321e:	461a      	mov	r2, r3
 8003220:	2300      	movs	r3, #0
 8003222:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800322a:	461a      	mov	r2, r3
 800322c:	2300      	movs	r3, #0
 800322e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003230:	2300      	movs	r3, #0
 8003232:	613b      	str	r3, [r7, #16]
 8003234:	e043      	b.n	80032be <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	015a      	lsls	r2, r3, #5
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4413      	add	r3, r2
 800323e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003248:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800324c:	d118      	bne.n	8003280 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	015a      	lsls	r2, r3, #5
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003260:	461a      	mov	r2, r3
 8003262:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003266:	6013      	str	r3, [r2, #0]
 8003268:	e013      	b.n	8003292 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	015a      	lsls	r2, r3, #5
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4413      	add	r3, r2
 8003272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003276:	461a      	mov	r2, r3
 8003278:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	e008      	b.n	8003292 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	015a      	lsls	r2, r3, #5
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	4413      	add	r3, r2
 8003288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328c:	461a      	mov	r2, r3
 800328e:	2300      	movs	r3, #0
 8003290:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4413      	add	r3, r2
 800329a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800329e:	461a      	mov	r2, r3
 80032a0:	2300      	movs	r3, #0
 80032a2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	015a      	lsls	r2, r3, #5
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032b0:	461a      	mov	r2, r3
 80032b2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80032b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032b8:	693b      	ldr	r3, [r7, #16]
 80032ba:	3301      	adds	r3, #1
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d3b7      	bcc.n	8003236 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	613b      	str	r3, [r7, #16]
 80032ca:	e043      	b.n	8003354 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80032de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032e2:	d118      	bne.n	8003316 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d10a      	bne.n	8003300 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	015a      	lsls	r2, r3, #5
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4413      	add	r3, r2
 80032f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032f6:	461a      	mov	r2, r3
 80032f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032fc:	6013      	str	r3, [r2, #0]
 80032fe:	e013      	b.n	8003328 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4413      	add	r3, r2
 8003308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800330c:	461a      	mov	r2, r3
 800330e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003312:	6013      	str	r3, [r2, #0]
 8003314:	e008      	b.n	8003328 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	015a      	lsls	r2, r3, #5
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4413      	add	r3, r2
 8003330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003334:	461a      	mov	r2, r3
 8003336:	2300      	movs	r3, #0
 8003338:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	015a      	lsls	r2, r3, #5
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	4413      	add	r3, r2
 8003342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003346:	461a      	mov	r2, r3
 8003348:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800334c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	3301      	adds	r3, #1
 8003352:	613b      	str	r3, [r7, #16]
 8003354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	429a      	cmp	r2, r3
 800335a:	d3b7      	bcc.n	80032cc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800336a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800336e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800337c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800337e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003380:	2b00      	cmp	r3, #0
 8003382:	d105      	bne.n	8003390 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	699a      	ldr	r2, [r3, #24]
 8003394:	4b0f      	ldr	r3, [pc, #60]	; (80033d4 <USB_DevInit+0x2c4>)
 8003396:	4313      	orrs	r3, r2
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800339c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d005      	beq.n	80033ae <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	f043 0208 	orr.w	r2, r3, #8
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d107      	bne.n	80033c4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80033bc:	f043 0304 	orr.w	r3, r3, #4
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80033c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	3718      	adds	r7, #24
 80033ca:	46bd      	mov	sp, r7
 80033cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80033d0:	b004      	add	sp, #16
 80033d2:	4770      	bx	lr
 80033d4:	803c3800 	.word	0x803c3800

080033d8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
 80033e0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	3301      	adds	r3, #1
 80033ea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a13      	ldr	r2, [pc, #76]	; (800343c <USB_FlushTxFifo+0x64>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d901      	bls.n	80033f8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80033f4:	2303      	movs	r3, #3
 80033f6:	e01b      	b.n	8003430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	daf2      	bge.n	80033e6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	019b      	lsls	r3, r3, #6
 8003408:	f043 0220 	orr.w	r2, r3, #32
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	4a08      	ldr	r2, [pc, #32]	; (800343c <USB_FlushTxFifo+0x64>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e006      	b.n	8003430 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	f003 0320 	and.w	r3, r3, #32
 800342a:	2b20      	cmp	r3, #32
 800342c:	d0f0      	beq.n	8003410 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	00030d40 	.word	0x00030d40

08003440 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003440:	b480      	push	{r7}
 8003442:	b085      	sub	sp, #20
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	3301      	adds	r3, #1
 8003450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	4a11      	ldr	r2, [pc, #68]	; (800349c <USB_FlushRxFifo+0x5c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d901      	bls.n	800345e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e018      	b.n	8003490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	daf2      	bge.n	800344c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2210      	movs	r2, #16
 800346e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	3301      	adds	r3, #1
 8003474:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	4a08      	ldr	r2, [pc, #32]	; (800349c <USB_FlushRxFifo+0x5c>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e006      	b.n	8003490 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b10      	cmp	r3, #16
 800348c:	d0f0      	beq.n	8003470 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr
 800349c:	00030d40 	.word	0x00030d40

080034a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b085      	sub	sp, #20
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	68f9      	ldr	r1, [r7, #12]
 80034bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80034c0:	4313      	orrs	r3, r2
 80034c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3714      	adds	r7, #20
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034e4:	689b      	ldr	r3, [r3, #8]
 80034e6:	f003 0306 	and.w	r3, r3, #6
 80034ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d102      	bne.n	80034f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80034f2:	2300      	movs	r3, #0
 80034f4:	75fb      	strb	r3, [r7, #23]
 80034f6:	e00a      	b.n	800350e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d002      	beq.n	8003504 <USB_GetDevSpeed+0x32>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2b06      	cmp	r3, #6
 8003502:	d102      	bne.n	800350a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003504:	2302      	movs	r3, #2
 8003506:	75fb      	strb	r3, [r7, #23]
 8003508:	e001      	b.n	800350e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800350a:	230f      	movs	r3, #15
 800350c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800350e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003510:	4618      	mov	r0, r3
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800351c:	b480      	push	{r7}
 800351e:	b085      	sub	sp, #20
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
 8003524:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	785b      	ldrb	r3, [r3, #1]
 8003534:	2b01      	cmp	r3, #1
 8003536:	d13a      	bne.n	80035ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	f003 030f 	and.w	r3, r3, #15
 8003548:	2101      	movs	r1, #1
 800354a:	fa01 f303 	lsl.w	r3, r1, r3
 800354e:	b29b      	uxth	r3, r3
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003556:	4313      	orrs	r3, r2
 8003558:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d155      	bne.n	800361c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	4413      	add	r3, r2
 8003578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	791b      	ldrb	r3, [r3, #4]
 800358a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800358c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	059b      	lsls	r3, r3, #22
 8003592:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003594:	4313      	orrs	r3, r2
 8003596:	68ba      	ldr	r2, [r7, #8]
 8003598:	0151      	lsls	r1, r2, #5
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	440a      	add	r2, r1
 800359e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035aa:	6013      	str	r3, [r2, #0]
 80035ac:	e036      	b.n	800361c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	2101      	movs	r1, #1
 80035c0:	fa01 f303 	lsl.w	r3, r1, r3
 80035c4:	041b      	lsls	r3, r3, #16
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035cc:	4313      	orrs	r3, r2
 80035ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d11a      	bne.n	800361c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	791b      	ldrb	r3, [r3, #4]
 8003600:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003602:	430b      	orrs	r3, r1
 8003604:	4313      	orrs	r3, r2
 8003606:	68ba      	ldr	r2, [r7, #8]
 8003608:	0151      	lsls	r1, r2, #5
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	440a      	add	r2, r1
 800360e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003612:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800361a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800361c:	2300      	movs	r3, #0
}
 800361e:	4618      	mov	r0, r3
 8003620:	3714      	adds	r7, #20
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
	...

0800362c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	785b      	ldrb	r3, [r3, #1]
 8003644:	2b01      	cmp	r3, #1
 8003646:	d161      	bne.n	800370c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	015a      	lsls	r2, r3, #5
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4413      	add	r3, r2
 8003650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800365a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800365e:	d11f      	bne.n	80036a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	015a      	lsls	r2, r3, #5
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4413      	add	r3, r2
 8003668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68ba      	ldr	r2, [r7, #8]
 8003670:	0151      	lsls	r1, r2, #5
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	440a      	add	r2, r1
 8003676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800367a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800367e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	0151      	lsls	r1, r2, #5
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	440a      	add	r2, r1
 8003696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800369a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800369e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f003 030f 	and.w	r3, r3, #15
 80036b0:	2101      	movs	r1, #1
 80036b2:	fa01 f303 	lsl.w	r3, r1, r3
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	43db      	mvns	r3, r3
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036c0:	4013      	ands	r3, r2
 80036c2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036ca:	69da      	ldr	r2, [r3, #28]
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	f003 030f 	and.w	r3, r3, #15
 80036d4:	2101      	movs	r1, #1
 80036d6:	fa01 f303 	lsl.w	r3, r1, r3
 80036da:	b29b      	uxth	r3, r3
 80036dc:	43db      	mvns	r3, r3
 80036de:	68f9      	ldr	r1, [r7, #12]
 80036e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036e4:	4013      	ands	r3, r2
 80036e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	0159      	lsls	r1, r3, #5
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	440b      	add	r3, r1
 80036fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003702:	4619      	mov	r1, r3
 8003704:	4b35      	ldr	r3, [pc, #212]	; (80037dc <USB_DeactivateEndpoint+0x1b0>)
 8003706:	4013      	ands	r3, r2
 8003708:	600b      	str	r3, [r1, #0]
 800370a:	e060      	b.n	80037ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	015a      	lsls	r2, r3, #5
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	4413      	add	r3, r2
 8003714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800371e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003722:	d11f      	bne.n	8003764 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	015a      	lsls	r2, r3, #5
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68ba      	ldr	r2, [r7, #8]
 8003734:	0151      	lsls	r1, r2, #5
 8003736:	68fa      	ldr	r2, [r7, #12]
 8003738:	440a      	add	r2, r1
 800373a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800373e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003742:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003744:	68bb      	ldr	r3, [r7, #8]
 8003746:	015a      	lsls	r2, r3, #5
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	4413      	add	r3, r2
 800374c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	0151      	lsls	r1, r2, #5
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	440a      	add	r2, r1
 800375a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800375e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003762:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800376a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	2101      	movs	r1, #1
 8003776:	fa01 f303 	lsl.w	r3, r1, r3
 800377a:	041b      	lsls	r3, r3, #16
 800377c:	43db      	mvns	r3, r3
 800377e:	68f9      	ldr	r1, [r7, #12]
 8003780:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003784:	4013      	ands	r3, r2
 8003786:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	781b      	ldrb	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	2101      	movs	r1, #1
 800379a:	fa01 f303 	lsl.w	r3, r1, r3
 800379e:	041b      	lsls	r3, r3, #16
 80037a0:	43db      	mvns	r3, r3
 80037a2:	68f9      	ldr	r1, [r7, #12]
 80037a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a8:	4013      	ands	r3, r2
 80037aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	015a      	lsls	r2, r3, #5
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	4413      	add	r3, r2
 80037b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68bb      	ldr	r3, [r7, #8]
 80037bc:	0159      	lsls	r1, r3, #5
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	440b      	add	r3, r1
 80037c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037c6:	4619      	mov	r1, r3
 80037c8:	4b05      	ldr	r3, [pc, #20]	; (80037e0 <USB_DeactivateEndpoint+0x1b4>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3714      	adds	r7, #20
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	ec337800 	.word	0xec337800
 80037e0:	eff37800 	.word	0xeff37800

080037e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	4613      	mov	r3, r2
 80037f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	785b      	ldrb	r3, [r3, #1]
 8003800:	2b01      	cmp	r3, #1
 8003802:	f040 815c 	bne.w	8003abe <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d132      	bne.n	8003874 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	4413      	add	r3, r2
 8003816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381a:	691b      	ldr	r3, [r3, #16]
 800381c:	69ba      	ldr	r2, [r7, #24]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	69fa      	ldr	r2, [r7, #28]
 8003822:	440a      	add	r2, r1
 8003824:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003828:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800382c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003830:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	4413      	add	r3, r2
 800385a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	0151      	lsls	r1, r2, #5
 8003864:	69fa      	ldr	r2, [r7, #28]
 8003866:	440a      	add	r2, r1
 8003868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386c:	0cdb      	lsrs	r3, r3, #19
 800386e:	04db      	lsls	r3, r3, #19
 8003870:	6113      	str	r3, [r2, #16]
 8003872:	e074      	b.n	800395e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003874:	69bb      	ldr	r3, [r7, #24]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	69ba      	ldr	r2, [r7, #24]
 8003884:	0151      	lsls	r1, r2, #5
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	440a      	add	r2, r1
 800388a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800388e:	0cdb      	lsrs	r3, r3, #19
 8003890:	04db      	lsls	r3, r3, #19
 8003892:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	015a      	lsls	r2, r3, #5
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	4413      	add	r3, r2
 800389c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	0151      	lsls	r1, r2, #5
 80038a6:	69fa      	ldr	r2, [r7, #28]
 80038a8:	440a      	add	r2, r1
 80038aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ae:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038b2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80038b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	6999      	ldr	r1, [r3, #24]
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	68db      	ldr	r3, [r3, #12]
 80038ce:	440b      	add	r3, r1
 80038d0:	1e59      	subs	r1, r3, #1
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80038da:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80038dc:	4b9d      	ldr	r3, [pc, #628]	; (8003b54 <USB_EPStartXfer+0x370>)
 80038de:	400b      	ands	r3, r1
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	0148      	lsls	r0, r1, #5
 80038e4:	69f9      	ldr	r1, [r7, #28]
 80038e6:	4401      	add	r1, r0
 80038e8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80038ec:	4313      	orrs	r3, r2
 80038ee:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fc:	691a      	ldr	r2, [r3, #16]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	699b      	ldr	r3, [r3, #24]
 8003902:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003906:	69b9      	ldr	r1, [r7, #24]
 8003908:	0148      	lsls	r0, r1, #5
 800390a:	69f9      	ldr	r1, [r7, #28]
 800390c:	4401      	add	r1, r0
 800390e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003912:	4313      	orrs	r3, r2
 8003914:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	791b      	ldrb	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d11f      	bne.n	800395e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800391e:	69bb      	ldr	r3, [r7, #24]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	4413      	add	r3, r2
 8003926:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	0151      	lsls	r1, r2, #5
 8003930:	69fa      	ldr	r2, [r7, #28]
 8003932:	440a      	add	r2, r1
 8003934:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003938:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800393c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	015a      	lsls	r2, r3, #5
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	4413      	add	r3, r2
 8003946:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	0151      	lsls	r1, r2, #5
 8003950:	69fa      	ldr	r2, [r7, #28]
 8003952:	440a      	add	r2, r1
 8003954:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003958:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800395c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d14b      	bne.n	80039fc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d009      	beq.n	8003980 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003978:	461a      	mov	r2, r3
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	791b      	ldrb	r3, [r3, #4]
 8003984:	2b01      	cmp	r3, #1
 8003986:	d128      	bne.n	80039da <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d110      	bne.n	80039ba <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	0151      	lsls	r1, r2, #5
 80039aa:	69fa      	ldr	r2, [r7, #28]
 80039ac:	440a      	add	r2, r1
 80039ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039b6:	6013      	str	r3, [r2, #0]
 80039b8:	e00f      	b.n	80039da <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	69fb      	ldr	r3, [r7, #28]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	69ba      	ldr	r2, [r7, #24]
 80039ca:	0151      	lsls	r1, r2, #5
 80039cc:	69fa      	ldr	r2, [r7, #28]
 80039ce:	440a      	add	r2, r1
 80039d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039d8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	0151      	lsls	r1, r2, #5
 80039ec:	69fa      	ldr	r2, [r7, #28]
 80039ee:	440a      	add	r2, r1
 80039f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80039f8:	6013      	str	r3, [r2, #0]
 80039fa:	e133      	b.n	8003c64 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	69ba      	ldr	r2, [r7, #24]
 8003a0c:	0151      	lsls	r1, r2, #5
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	440a      	add	r2, r1
 8003a12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a16:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a1a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	791b      	ldrb	r3, [r3, #4]
 8003a20:	2b01      	cmp	r3, #1
 8003a22:	d015      	beq.n	8003a50 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 811b 	beq.w	8003c64 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a2e:	69fb      	ldr	r3, [r7, #28]
 8003a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	781b      	ldrb	r3, [r3, #0]
 8003a3a:	f003 030f 	and.w	r3, r3, #15
 8003a3e:	2101      	movs	r1, #1
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	69f9      	ldr	r1, [r7, #28]
 8003a46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	634b      	str	r3, [r1, #52]	; 0x34
 8003a4e:	e109      	b.n	8003c64 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	0151      	lsls	r1, r2, #5
 8003a72:	69fa      	ldr	r2, [r7, #28]
 8003a74:	440a      	add	r2, r1
 8003a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a7a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a7e:	6013      	str	r3, [r2, #0]
 8003a80:	e00f      	b.n	8003aa2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	015a      	lsls	r2, r3, #5
 8003a86:	69fb      	ldr	r3, [r7, #28]
 8003a88:	4413      	add	r3, r2
 8003a8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	69ba      	ldr	r2, [r7, #24]
 8003a92:	0151      	lsls	r1, r2, #5
 8003a94:	69fa      	ldr	r2, [r7, #28]
 8003a96:	440a      	add	r2, r1
 8003a98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	6919      	ldr	r1, [r3, #16]
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	781a      	ldrb	r2, [r3, #0]
 8003aaa:	68bb      	ldr	r3, [r7, #8]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	b298      	uxth	r0, r3
 8003ab0:	79fb      	ldrb	r3, [r7, #7]
 8003ab2:	9300      	str	r3, [sp, #0]
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fade 	bl	8004078 <USB_WritePacket>
 8003abc:	e0d2      	b.n	8003c64 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	015a      	lsls	r2, r3, #5
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	0151      	lsls	r1, r2, #5
 8003ad0:	69fa      	ldr	r2, [r7, #28]
 8003ad2:	440a      	add	r2, r1
 8003ad4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ad8:	0cdb      	lsrs	r3, r3, #19
 8003ada:	04db      	lsls	r3, r3, #19
 8003adc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003af8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003afc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b00:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d126      	bne.n	8003b58 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b20:	69b9      	ldr	r1, [r7, #24]
 8003b22:	0148      	lsls	r0, r1, #5
 8003b24:	69f9      	ldr	r1, [r7, #28]
 8003b26:	4401      	add	r1, r0
 8003b28:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b30:	69bb      	ldr	r3, [r7, #24]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	69ba      	ldr	r2, [r7, #24]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b4e:	6113      	str	r3, [r2, #16]
 8003b50:	e03a      	b.n	8003bc8 <USB_EPStartXfer+0x3e4>
 8003b52:	bf00      	nop
 8003b54:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	699a      	ldr	r2, [r3, #24]
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	68db      	ldr	r3, [r3, #12]
 8003b60:	4413      	add	r3, r2
 8003b62:	1e5a      	subs	r2, r3, #1
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b6c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	8afa      	ldrh	r2, [r7, #22]
 8003b74:	fb03 f202 	mul.w	r2, r3, r2
 8003b78:	68bb      	ldr	r3, [r7, #8]
 8003b7a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	691a      	ldr	r2, [r3, #16]
 8003b8a:	8afb      	ldrh	r3, [r7, #22]
 8003b8c:	04d9      	lsls	r1, r3, #19
 8003b8e:	4b38      	ldr	r3, [pc, #224]	; (8003c70 <USB_EPStartXfer+0x48c>)
 8003b90:	400b      	ands	r3, r1
 8003b92:	69b9      	ldr	r1, [r7, #24]
 8003b94:	0148      	lsls	r0, r1, #5
 8003b96:	69f9      	ldr	r1, [r7, #28]
 8003b98:	4401      	add	r1, r0
 8003b9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb8:	69b9      	ldr	r1, [r7, #24]
 8003bba:	0148      	lsls	r0, r1, #5
 8003bbc:	69f9      	ldr	r1, [r7, #28]
 8003bbe:	4401      	add	r1, r0
 8003bc0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bc8:	79fb      	ldrb	r3, [r7, #7]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d10d      	bne.n	8003bea <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d009      	beq.n	8003bea <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	6919      	ldr	r1, [r3, #16]
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	015a      	lsls	r2, r3, #5
 8003bde:	69fb      	ldr	r3, [r7, #28]
 8003be0:	4413      	add	r3, r2
 8003be2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003be6:	460a      	mov	r2, r1
 8003be8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	791b      	ldrb	r3, [r3, #4]
 8003bee:	2b01      	cmp	r3, #1
 8003bf0:	d128      	bne.n	8003c44 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d110      	bne.n	8003c24 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c02:	69bb      	ldr	r3, [r7, #24]
 8003c04:	015a      	lsls	r2, r3, #5
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	4413      	add	r3, r2
 8003c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	0151      	lsls	r1, r2, #5
 8003c14:	69fa      	ldr	r2, [r7, #28]
 8003c16:	440a      	add	r2, r1
 8003c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c1c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c20:	6013      	str	r3, [r2, #0]
 8003c22:	e00f      	b.n	8003c44 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69ba      	ldr	r2, [r7, #24]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	69fa      	ldr	r2, [r7, #28]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c42:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	69fa      	ldr	r2, [r7, #28]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c5e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c62:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3720      	adds	r7, #32
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	1ff80000 	.word	0x1ff80000

08003c74 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	785b      	ldrb	r3, [r3, #1]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	f040 80ce 	bne.w	8003e32 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d132      	bne.n	8003d04 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	015a      	lsls	r2, r3, #5
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4413      	add	r3, r2
 8003cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cce:	691b      	ldr	r3, [r3, #16]
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	0151      	lsls	r1, r2, #5
 8003cd4:	697a      	ldr	r2, [r7, #20]
 8003cd6:	440a      	add	r2, r1
 8003cd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cdc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ce0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	015a      	lsls	r2, r3, #5
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	4413      	add	r3, r2
 8003cea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cee:	691b      	ldr	r3, [r3, #16]
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	0151      	lsls	r1, r2, #5
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	440a      	add	r2, r1
 8003cf8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cfc:	0cdb      	lsrs	r3, r3, #19
 8003cfe:	04db      	lsls	r3, r3, #19
 8003d00:	6113      	str	r3, [r2, #16]
 8003d02:	e04e      	b.n	8003da2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	0151      	lsls	r1, r2, #5
 8003d16:	697a      	ldr	r2, [r7, #20]
 8003d18:	440a      	add	r2, r1
 8003d1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d1e:	0cdb      	lsrs	r3, r3, #19
 8003d20:	04db      	lsls	r3, r3, #19
 8003d22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	697b      	ldr	r3, [r7, #20]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	0151      	lsls	r1, r2, #5
 8003d36:	697a      	ldr	r2, [r7, #20]
 8003d38:	440a      	add	r2, r1
 8003d3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d46:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	699a      	ldr	r2, [r3, #24]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d903      	bls.n	8003d5c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	68da      	ldr	r2, [r3, #12]
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	015a      	lsls	r2, r3, #5
 8003d60:	697b      	ldr	r3, [r7, #20]
 8003d62:	4413      	add	r3, r2
 8003d64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	0151      	lsls	r1, r2, #5
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	440a      	add	r2, r1
 8003d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d92:	6939      	ldr	r1, [r7, #16]
 8003d94:	0148      	lsls	r0, r1, #5
 8003d96:	6979      	ldr	r1, [r7, #20]
 8003d98:	4401      	add	r1, r0
 8003d9a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d11e      	bne.n	8003de6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	015a      	lsls	r2, r3, #5
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	4413      	add	r3, r2
 8003db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	695b      	ldr	r3, [r3, #20]
 8003dc2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	015a      	lsls	r2, r3, #5
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	4413      	add	r3, r2
 8003dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	0151      	lsls	r1, r2, #5
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	440a      	add	r2, r1
 8003dda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dde:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003de2:	6013      	str	r3, [r2, #0]
 8003de4:	e097      	b.n	8003f16 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	015a      	lsls	r2, r3, #5
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	4413      	add	r3, r2
 8003dee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	693a      	ldr	r2, [r7, #16]
 8003df6:	0151      	lsls	r1, r2, #5
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	440a      	add	r2, r1
 8003dfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e00:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e04:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 8083 	beq.w	8003f16 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	f003 030f 	and.w	r3, r3, #15
 8003e20:	2101      	movs	r1, #1
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	6979      	ldr	r1, [r7, #20]
 8003e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	634b      	str	r3, [r1, #52]	; 0x34
 8003e30:	e071      	b.n	8003f16 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e4c:	0cdb      	lsrs	r3, r3, #19
 8003e4e:	04db      	lsls	r3, r3, #19
 8003e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	015a      	lsls	r2, r3, #5
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	4413      	add	r3, r2
 8003e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	0151      	lsls	r1, r2, #5
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	440a      	add	r2, r1
 8003e68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e6c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e70:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e74:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d003      	beq.n	8003e86 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	68da      	ldr	r2, [r3, #12]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	697a      	ldr	r2, [r7, #20]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ea8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003eac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eba:	691a      	ldr	r2, [r3, #16]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	69db      	ldr	r3, [r3, #28]
 8003ec0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ec4:	6939      	ldr	r1, [r7, #16]
 8003ec6:	0148      	lsls	r0, r1, #5
 8003ec8:	6979      	ldr	r1, [r7, #20]
 8003eca:	4401      	add	r1, r0
 8003ecc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003ed4:	79fb      	ldrb	r3, [r7, #7]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d10d      	bne.n	8003ef6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d009      	beq.n	8003ef6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	6919      	ldr	r1, [r3, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef2:	460a      	mov	r2, r1
 8003ef4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	0151      	lsls	r1, r2, #5
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	440a      	add	r2, r1
 8003f0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f10:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f14:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	371c      	adds	r7, #28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f22:	4770      	bx	lr

08003f24 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f24:	b480      	push	{r7}
 8003f26:	b087      	sub	sp, #28
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	6078      	str	r0, [r7, #4]
 8003f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	785b      	ldrb	r3, [r3, #1]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d14a      	bne.n	8003fd8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	015a      	lsls	r2, r3, #5
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f5a:	f040 8086 	bne.w	800406a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	781b      	ldrb	r3, [r3, #0]
 8003f62:	015a      	lsls	r2, r3, #5
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4413      	add	r3, r2
 8003f68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	7812      	ldrb	r2, [r2, #0]
 8003f72:	0151      	lsls	r1, r2, #5
 8003f74:	693a      	ldr	r2, [r7, #16]
 8003f76:	440a      	add	r2, r1
 8003f78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f7c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f80:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	683a      	ldr	r2, [r7, #0]
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	0151      	lsls	r1, r2, #5
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	440a      	add	r2, r1
 8003f9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fa0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fa4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	3301      	adds	r3, #1
 8003faa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f242 7210 	movw	r2, #10000	; 0x2710
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d902      	bls.n	8003fbc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8003fba:	e056      	b.n	800406a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	015a      	lsls	r2, r3, #5
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	4413      	add	r3, r2
 8003fc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fd4:	d0e7      	beq.n	8003fa6 <USB_EPStopXfer+0x82>
 8003fd6:	e048      	b.n	800406a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ff0:	d13b      	bne.n	800406a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	7812      	ldrb	r2, [r2, #0]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	440a      	add	r2, r1
 800400c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004010:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004014:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	7812      	ldrb	r2, [r2, #0]
 800402a:	0151      	lsls	r1, r2, #5
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	440a      	add	r2, r1
 8004030:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004034:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004038:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	3301      	adds	r3, #1
 800403e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f242 7210 	movw	r2, #10000	; 0x2710
 8004046:	4293      	cmp	r3, r2
 8004048:	d902      	bls.n	8004050 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	75fb      	strb	r3, [r7, #23]
          break;
 800404e:	e00c      	b.n	800406a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004064:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004068:	d0e7      	beq.n	800403a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
}
 800406c:	4618      	mov	r0, r3
 800406e:	371c      	adds	r7, #28
 8004070:	46bd      	mov	sp, r7
 8004072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004076:	4770      	bx	lr

08004078 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004078:	b480      	push	{r7}
 800407a:	b089      	sub	sp, #36	; 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	4611      	mov	r1, r2
 8004084:	461a      	mov	r2, r3
 8004086:	460b      	mov	r3, r1
 8004088:	71fb      	strb	r3, [r7, #7]
 800408a:	4613      	mov	r3, r2
 800408c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004096:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d123      	bne.n	80040e6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800409e:	88bb      	ldrh	r3, [r7, #4]
 80040a0:	3303      	adds	r3, #3
 80040a2:	089b      	lsrs	r3, r3, #2
 80040a4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040a6:	2300      	movs	r3, #0
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	e018      	b.n	80040de <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	031a      	lsls	r2, r3, #12
 80040b0:	697b      	ldr	r3, [r7, #20]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b8:	461a      	mov	r2, r3
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6013      	str	r3, [r2, #0]
      pSrc++;
 80040c0:	69fb      	ldr	r3, [r7, #28]
 80040c2:	3301      	adds	r3, #1
 80040c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040c6:	69fb      	ldr	r3, [r7, #28]
 80040c8:	3301      	adds	r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040cc:	69fb      	ldr	r3, [r7, #28]
 80040ce:	3301      	adds	r3, #1
 80040d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	3301      	adds	r3, #1
 80040dc:	61bb      	str	r3, [r7, #24]
 80040de:	69ba      	ldr	r2, [r7, #24]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d3e2      	bcc.n	80040ac <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80040e6:	2300      	movs	r3, #0
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3724      	adds	r7, #36	; 0x24
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr

080040f4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b08b      	sub	sp, #44	; 0x2c
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800410a:	88fb      	ldrh	r3, [r7, #6]
 800410c:	089b      	lsrs	r3, r3, #2
 800410e:	b29b      	uxth	r3, r3
 8004110:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004112:	88fb      	ldrh	r3, [r7, #6]
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800411a:	2300      	movs	r3, #0
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	e014      	b.n	800414a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412a:	601a      	str	r2, [r3, #0]
    pDest++;
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	3301      	adds	r3, #1
 8004130:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004134:	3301      	adds	r3, #1
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	3301      	adds	r3, #1
 800413c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800413e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004140:	3301      	adds	r3, #1
 8004142:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004144:	6a3b      	ldr	r3, [r7, #32]
 8004146:	3301      	adds	r3, #1
 8004148:	623b      	str	r3, [r7, #32]
 800414a:	6a3a      	ldr	r2, [r7, #32]
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	429a      	cmp	r2, r3
 8004150:	d3e6      	bcc.n	8004120 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004152:	8bfb      	ldrh	r3, [r7, #30]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01e      	beq.n	8004196 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004158:	2300      	movs	r3, #0
 800415a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004162:	461a      	mov	r2, r3
 8004164:	f107 0310 	add.w	r3, r7, #16
 8004168:	6812      	ldr	r2, [r2, #0]
 800416a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	b2db      	uxtb	r3, r3
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	fa22 f303 	lsr.w	r3, r2, r3
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	701a      	strb	r2, [r3, #0]
      i++;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	3301      	adds	r3, #1
 8004182:	623b      	str	r3, [r7, #32]
      pDest++;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	3301      	adds	r3, #1
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800418a:	8bfb      	ldrh	r3, [r7, #30]
 800418c:	3b01      	subs	r3, #1
 800418e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004190:	8bfb      	ldrh	r3, [r7, #30]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d1ea      	bne.n	800416c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004198:	4618      	mov	r0, r3
 800419a:	372c      	adds	r7, #44	; 0x2c
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	785b      	ldrb	r3, [r3, #1]
 80041bc:	2b01      	cmp	r3, #1
 80041be:	d12c      	bne.n	800421a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	015a      	lsls	r2, r3, #5
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	4413      	add	r3, r2
 80041c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	db12      	blt.n	80041f8 <USB_EPSetStall+0x54>
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00f      	beq.n	80041f8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	0151      	lsls	r1, r2, #5
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	440a      	add	r2, r1
 80041ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041f2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80041f6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	68ba      	ldr	r2, [r7, #8]
 8004208:	0151      	lsls	r1, r2, #5
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	440a      	add	r2, r1
 800420e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004212:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004216:	6013      	str	r3, [r2, #0]
 8004218:	e02b      	b.n	8004272 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	db12      	blt.n	8004252 <USB_EPSetStall+0xae>
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00f      	beq.n	8004252 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68ba      	ldr	r2, [r7, #8]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	68fa      	ldr	r2, [r7, #12]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800424c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004250:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	015a      	lsls	r2, r3, #5
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	4413      	add	r3, r2
 800425a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	68ba      	ldr	r2, [r7, #8]
 8004262:	0151      	lsls	r1, r2, #5
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	440a      	add	r2, r1
 8004268:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004270:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3714      	adds	r7, #20
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr

08004280 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004280:	b480      	push	{r7}
 8004282:	b085      	sub	sp, #20
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	2b01      	cmp	r3, #1
 800429a:	d128      	bne.n	80042ee <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	015a      	lsls	r2, r3, #5
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4413      	add	r3, r2
 80042a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	68ba      	ldr	r2, [r7, #8]
 80042ac:	0151      	lsls	r1, r2, #5
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	440a      	add	r2, r1
 80042b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ba:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	791b      	ldrb	r3, [r3, #4]
 80042c0:	2b03      	cmp	r3, #3
 80042c2:	d003      	beq.n	80042cc <USB_EPClearStall+0x4c>
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	791b      	ldrb	r3, [r3, #4]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	d138      	bne.n	800433e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	015a      	lsls	r2, r3, #5
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	4413      	add	r3, r2
 80042d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	68ba      	ldr	r2, [r7, #8]
 80042dc:	0151      	lsls	r1, r2, #5
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	440a      	add	r2, r1
 80042e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042ea:	6013      	str	r3, [r2, #0]
 80042ec:	e027      	b.n	800433e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	68ba      	ldr	r2, [r7, #8]
 80042fe:	0151      	lsls	r1, r2, #5
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	440a      	add	r2, r1
 8004304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004308:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800430c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	791b      	ldrb	r3, [r3, #4]
 8004312:	2b03      	cmp	r3, #3
 8004314:	d003      	beq.n	800431e <USB_EPClearStall+0x9e>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	791b      	ldrb	r3, [r3, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d10f      	bne.n	800433e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	4413      	add	r3, r2
 8004326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68ba      	ldr	r2, [r7, #8]
 800432e:	0151      	lsls	r1, r2, #5
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	440a      	add	r2, r1
 8004334:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800433c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800434c:	b480      	push	{r7}
 800434e:	b085      	sub	sp, #20
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
 8004354:	460b      	mov	r3, r1
 8004356:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800436a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800436e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004380:	68f9      	ldr	r1, [r7, #12]
 8004382:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004386:	4313      	orrs	r3, r2
 8004388:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043b2:	f023 0303 	bic.w	r3, r3, #3
 80043b6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043c6:	f023 0302 	bic.w	r3, r3, #2
 80043ca:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043da:	b480      	push	{r7}
 80043dc:	b085      	sub	sp, #20
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043f4:	f023 0303 	bic.w	r3, r3, #3
 80043f8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004408:	f043 0302 	orr.w	r3, r3, #2
 800440c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800440e:	2300      	movs	r3, #0
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800441c:	b480      	push	{r7}
 800441e:	b085      	sub	sp, #20
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	68fa      	ldr	r2, [r7, #12]
 8004430:	4013      	ands	r3, r2
 8004432:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	4618      	mov	r0, r3
 8004438:	3714      	adds	r7, #20
 800443a:	46bd      	mov	sp, r7
 800443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004440:	4770      	bx	lr

08004442 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004442:	b480      	push	{r7}
 8004444:	b085      	sub	sp, #20
 8004446:	af00      	add	r7, sp, #0
 8004448:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	68ba      	ldr	r2, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	0c1b      	lsrs	r3, r3, #16
}
 800446a:	4618      	mov	r0, r3
 800446c:	3714      	adds	r7, #20
 800446e:	46bd      	mov	sp, r7
 8004470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004474:	4770      	bx	lr

08004476 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004476:	b480      	push	{r7}
 8004478:	b085      	sub	sp, #20
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004488:	699b      	ldr	r3, [r3, #24]
 800448a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004492:	69db      	ldr	r3, [r3, #28]
 8004494:	68ba      	ldr	r2, [r7, #8]
 8004496:	4013      	ands	r3, r2
 8004498:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	b29b      	uxth	r3, r3
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3714      	adds	r7, #20
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr

080044aa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80044ba:	78fb      	ldrb	r3, [r7, #3]
 80044bc:	015a      	lsls	r2, r3, #5
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4413      	add	r3, r2
 80044c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	4013      	ands	r3, r2
 80044d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80044d8:	68bb      	ldr	r3, [r7, #8]
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e4:	4770      	bx	lr

080044e6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b087      	sub	sp, #28
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	460b      	mov	r3, r1
 80044f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800450a:	78fb      	ldrb	r3, [r7, #3]
 800450c:	f003 030f 	and.w	r3, r3, #15
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	01db      	lsls	r3, r3, #7
 8004518:	b2db      	uxtb	r3, r3
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004520:	78fb      	ldrb	r3, [r7, #3]
 8004522:	015a      	lsls	r2, r3, #5
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	4413      	add	r3, r2
 8004528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800452c:	689b      	ldr	r3, [r3, #8]
 800452e:	693a      	ldr	r2, [r7, #16]
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004534:	68bb      	ldr	r3, [r7, #8]
}
 8004536:	4618      	mov	r0, r3
 8004538:	371c      	adds	r7, #28
 800453a:	46bd      	mov	sp, r7
 800453c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004540:	4770      	bx	lr

08004542 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004542:	b480      	push	{r7}
 8004544:	b083      	sub	sp, #12
 8004546:	af00      	add	r7, sp, #0
 8004548:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0301 	and.w	r3, r3, #1
}
 8004552:	4618      	mov	r0, r3
 8004554:	370c      	adds	r7, #12
 8004556:	46bd      	mov	sp, r7
 8004558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455c:	4770      	bx	lr

0800455e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800455e:	b480      	push	{r7}
 8004560:	b085      	sub	sp, #20
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	68fa      	ldr	r2, [r7, #12]
 8004574:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004578:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800457c:	f023 0307 	bic.w	r3, r3, #7
 8004580:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	68fa      	ldr	r2, [r7, #12]
 800458c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004594:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3714      	adds	r7, #20
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	460b      	mov	r3, r1
 80045ae:	607a      	str	r2, [r7, #4]
 80045b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	333c      	adds	r3, #60	; 0x3c
 80045ba:	3304      	adds	r3, #4
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	4a26      	ldr	r2, [pc, #152]	; (800465c <USB_EP0_OutStart+0xb8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d90a      	bls.n	80045de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80045d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80045d8:	d101      	bne.n	80045de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80045da:	2300      	movs	r3, #0
 80045dc:	e037      	b.n	800464e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045e4:	461a      	mov	r2, r3
 80045e6:	2300      	movs	r3, #0
 80045e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80045ea:	697b      	ldr	r3, [r7, #20]
 80045ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	697a      	ldr	r2, [r7, #20]
 80045f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	697a      	ldr	r2, [r7, #20]
 8004608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800460c:	f043 0318 	orr.w	r3, r3, #24
 8004610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004620:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004624:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004626:	7afb      	ldrb	r3, [r7, #11]
 8004628:	2b01      	cmp	r3, #1
 800462a:	d10f      	bne.n	800464c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004632:	461a      	mov	r2, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004646:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800464a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	371c      	adds	r7, #28
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	4f54300a 	.word	0x4f54300a

08004660 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	3301      	adds	r3, #1
 8004670:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	4a13      	ldr	r2, [pc, #76]	; (80046c4 <USB_CoreReset+0x64>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e01b      	b.n	80046b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	2b00      	cmp	r3, #0
 8004684:	daf2      	bge.n	800466c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004686:	2300      	movs	r3, #0
 8004688:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	3301      	adds	r3, #1
 800469a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	4a09      	ldr	r2, [pc, #36]	; (80046c4 <USB_CoreReset+0x64>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d901      	bls.n	80046a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e006      	b.n	80046b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	691b      	ldr	r3, [r3, #16]
 80046ac:	f003 0301 	and.w	r3, r3, #1
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d0f0      	beq.n	8004696 <USB_CoreReset+0x36>

  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3714      	adds	r7, #20
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	00030d40 	.word	0x00030d40

080046c8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80046d4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80046d8:	f002 fcd8 	bl	800708c <USBD_static_malloc>
 80046dc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d109      	bne.n	80046f8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	32b0      	adds	r2, #176	; 0xb0
 80046ee:	2100      	movs	r1, #0
 80046f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80046f4:	2302      	movs	r3, #2
 80046f6:	e0d4      	b.n	80048a2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80046f8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80046fc:	2100      	movs	r1, #0
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f002 fd3a 	bl	8007178 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	32b0      	adds	r2, #176	; 0xb0
 800470e:	68f9      	ldr	r1, [r7, #12]
 8004710:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	32b0      	adds	r2, #176	; 0xb0
 800471e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	7c1b      	ldrb	r3, [r3, #16]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d138      	bne.n	80047a2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004730:	4b5e      	ldr	r3, [pc, #376]	; (80048ac <USBD_CDC_Init+0x1e4>)
 8004732:	7819      	ldrb	r1, [r3, #0]
 8004734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004738:	2202      	movs	r2, #2
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f002 fb83 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004740:	4b5a      	ldr	r3, [pc, #360]	; (80048ac <USBD_CDC_Init+0x1e4>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 020f 	and.w	r2, r3, #15
 8004748:	6879      	ldr	r1, [r7, #4]
 800474a:	4613      	mov	r3, r2
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	440b      	add	r3, r1
 8004754:	3324      	adds	r3, #36	; 0x24
 8004756:	2201      	movs	r2, #1
 8004758:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800475a:	4b55      	ldr	r3, [pc, #340]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 800475c:	7819      	ldrb	r1, [r3, #0]
 800475e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004762:	2202      	movs	r2, #2
 8004764:	6878      	ldr	r0, [r7, #4]
 8004766:	f002 fb6e 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800476a:	4b51      	ldr	r3, [pc, #324]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	f003 020f 	and.w	r2, r3, #15
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004782:	2201      	movs	r2, #1
 8004784:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004786:	4b4b      	ldr	r3, [pc, #300]	; (80048b4 <USBD_CDC_Init+0x1ec>)
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	f003 020f 	and.w	r2, r3, #15
 800478e:	6879      	ldr	r1, [r7, #4]
 8004790:	4613      	mov	r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4413      	add	r3, r2
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	440b      	add	r3, r1
 800479a:	3326      	adds	r3, #38	; 0x26
 800479c:	2210      	movs	r2, #16
 800479e:	801a      	strh	r2, [r3, #0]
 80047a0:	e035      	b.n	800480e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80047a2:	4b42      	ldr	r3, [pc, #264]	; (80048ac <USBD_CDC_Init+0x1e4>)
 80047a4:	7819      	ldrb	r1, [r3, #0]
 80047a6:	2340      	movs	r3, #64	; 0x40
 80047a8:	2202      	movs	r2, #2
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f002 fb4b 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80047b0:	4b3e      	ldr	r3, [pc, #248]	; (80048ac <USBD_CDC_Init+0x1e4>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	6879      	ldr	r1, [r7, #4]
 80047ba:	4613      	mov	r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	4413      	add	r3, r2
 80047c0:	009b      	lsls	r3, r3, #2
 80047c2:	440b      	add	r3, r1
 80047c4:	3324      	adds	r3, #36	; 0x24
 80047c6:	2201      	movs	r2, #1
 80047c8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80047ca:	4b39      	ldr	r3, [pc, #228]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 80047cc:	7819      	ldrb	r1, [r3, #0]
 80047ce:	2340      	movs	r3, #64	; 0x40
 80047d0:	2202      	movs	r2, #2
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f002 fb37 	bl	8006e46 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80047d8:	4b35      	ldr	r3, [pc, #212]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	6879      	ldr	r1, [r7, #4]
 80047e2:	4613      	mov	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	4413      	add	r3, r2
 80047e8:	009b      	lsls	r3, r3, #2
 80047ea:	440b      	add	r3, r1
 80047ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047f0:	2201      	movs	r2, #1
 80047f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80047f4:	4b2f      	ldr	r3, [pc, #188]	; (80048b4 <USBD_CDC_Init+0x1ec>)
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	f003 020f 	and.w	r2, r3, #15
 80047fc:	6879      	ldr	r1, [r7, #4]
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3326      	adds	r3, #38	; 0x26
 800480a:	2210      	movs	r2, #16
 800480c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800480e:	4b29      	ldr	r3, [pc, #164]	; (80048b4 <USBD_CDC_Init+0x1ec>)
 8004810:	7819      	ldrb	r1, [r3, #0]
 8004812:	2308      	movs	r3, #8
 8004814:	2203      	movs	r2, #3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f002 fb15 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800481c:	4b25      	ldr	r3, [pc, #148]	; (80048b4 <USBD_CDC_Init+0x1ec>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	f003 020f 	and.w	r2, r3, #15
 8004824:	6879      	ldr	r1, [r7, #4]
 8004826:	4613      	mov	r3, r2
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	440b      	add	r3, r1
 8004830:	3324      	adds	r3, #36	; 0x24
 8004832:	2201      	movs	r2, #1
 8004834:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2200      	movs	r2, #0
 800483a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	33b0      	adds	r3, #176	; 0xb0
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	4413      	add	r3, r2
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2200      	movs	r2, #0
 8004856:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800486c:	2302      	movs	r3, #2
 800486e:	e018      	b.n	80048a2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7c1b      	ldrb	r3, [r3, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 800487a:	7819      	ldrb	r1, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004882:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f002 fbcc 	bl	8007024 <USBD_LL_PrepareReceive>
 800488c:	e008      	b.n	80048a0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800488e:	4b08      	ldr	r3, [pc, #32]	; (80048b0 <USBD_CDC_Init+0x1e8>)
 8004890:	7819      	ldrb	r1, [r3, #0]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004898:	2340      	movs	r3, #64	; 0x40
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f002 fbc2 	bl	8007024 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000093 	.word	0x20000093
 80048b0:	20000094 	.word	0x20000094
 80048b4:	20000095 	.word	0x20000095

080048b8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	460b      	mov	r3, r1
 80048c2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80048c4:	4b3a      	ldr	r3, [pc, #232]	; (80049b0 <USBD_CDC_DeInit+0xf8>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	4619      	mov	r1, r3
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f002 fae1 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80048d0:	4b37      	ldr	r3, [pc, #220]	; (80049b0 <USBD_CDC_DeInit+0xf8>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f003 020f 	and.w	r2, r3, #15
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	3324      	adds	r3, #36	; 0x24
 80048e6:	2200      	movs	r2, #0
 80048e8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80048ea:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <USBD_CDC_DeInit+0xfc>)
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	4619      	mov	r1, r3
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f002 face 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80048f6:	4b2f      	ldr	r3, [pc, #188]	; (80049b4 <USBD_CDC_DeInit+0xfc>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	f003 020f 	and.w	r2, r3, #15
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	4613      	mov	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800490e:	2200      	movs	r2, #0
 8004910:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004912:	4b29      	ldr	r3, [pc, #164]	; (80049b8 <USBD_CDC_DeInit+0x100>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	4619      	mov	r1, r3
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f002 faba 	bl	8006e92 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800491e:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <USBD_CDC_DeInit+0x100>)
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	f003 020f 	and.w	r2, r3, #15
 8004926:	6879      	ldr	r1, [r7, #4]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	440b      	add	r3, r1
 8004932:	3324      	adds	r3, #36	; 0x24
 8004934:	2200      	movs	r2, #0
 8004936:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004938:	4b1f      	ldr	r3, [pc, #124]	; (80049b8 <USBD_CDC_DeInit+0x100>)
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f003 020f 	and.w	r2, r3, #15
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	4613      	mov	r3, r2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	4413      	add	r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	440b      	add	r3, r1
 800494c:	3326      	adds	r3, #38	; 0x26
 800494e:	2200      	movs	r2, #0
 8004950:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	32b0      	adds	r2, #176	; 0xb0
 800495c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01f      	beq.n	80049a4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	33b0      	adds	r3, #176	; 0xb0
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	4413      	add	r3, r2
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	32b0      	adds	r2, #176	; 0xb0
 8004982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004986:	4618      	mov	r0, r3
 8004988:	f002 fb8e 	bl	80070a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	32b0      	adds	r2, #176	; 0xb0
 8004996:	2100      	movs	r1, #0
 8004998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80049a4:	2300      	movs	r3, #0
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	3708      	adds	r7, #8
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	20000093 	.word	0x20000093
 80049b4:	20000094 	.word	0x20000094
 80049b8:	20000095 	.word	0x20000095

080049bc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	32b0      	adds	r2, #176	; 0xb0
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80049d6:	2300      	movs	r3, #0
 80049d8:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80049da:	2300      	movs	r3, #0
 80049dc:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e0bf      	b.n	8004b6c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d050      	beq.n	8004a9a <USBD_CDC_Setup+0xde>
 80049f8:	2b20      	cmp	r3, #32
 80049fa:	f040 80af 	bne.w	8004b5c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	88db      	ldrh	r3, [r3, #6]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d03a      	beq.n	8004a7c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b25b      	sxtb	r3, r3
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	da1b      	bge.n	8004a48 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	33b0      	adds	r3, #176	; 0xb0
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	4413      	add	r3, r2
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004a26:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a28:	683a      	ldr	r2, [r7, #0]
 8004a2a:	88d2      	ldrh	r2, [r2, #6]
 8004a2c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	88db      	ldrh	r3, [r3, #6]
 8004a32:	2b07      	cmp	r3, #7
 8004a34:	bf28      	it	cs
 8004a36:	2307      	movcs	r3, #7
 8004a38:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	89fa      	ldrh	r2, [r7, #14]
 8004a3e:	4619      	mov	r1, r3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f001 fd89 	bl	8006558 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004a46:	e090      	b.n	8004b6a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785a      	ldrb	r2, [r3, #1]
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	88db      	ldrh	r3, [r3, #6]
 8004a56:	2b3f      	cmp	r3, #63	; 0x3f
 8004a58:	d803      	bhi.n	8004a62 <USBD_CDC_Setup+0xa6>
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	88db      	ldrh	r3, [r3, #6]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	e000      	b.n	8004a64 <USBD_CDC_Setup+0xa8>
 8004a62:	2240      	movs	r2, #64	; 0x40
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004a6a:	6939      	ldr	r1, [r7, #16]
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004a72:	461a      	mov	r2, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f001 fd9b 	bl	80065b0 <USBD_CtlPrepareRx>
      break;
 8004a7a:	e076      	b.n	8004b6a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	33b0      	adds	r3, #176	; 0xb0
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	4413      	add	r3, r2
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	7850      	ldrb	r0, [r2, #1]
 8004a92:	2200      	movs	r2, #0
 8004a94:	6839      	ldr	r1, [r7, #0]
 8004a96:	4798      	blx	r3
      break;
 8004a98:	e067      	b.n	8004b6a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	2b0b      	cmp	r3, #11
 8004aa0:	d851      	bhi.n	8004b46 <USBD_CDC_Setup+0x18a>
 8004aa2:	a201      	add	r2, pc, #4	; (adr r2, 8004aa8 <USBD_CDC_Setup+0xec>)
 8004aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa8:	08004ad9 	.word	0x08004ad9
 8004aac:	08004b55 	.word	0x08004b55
 8004ab0:	08004b47 	.word	0x08004b47
 8004ab4:	08004b47 	.word	0x08004b47
 8004ab8:	08004b47 	.word	0x08004b47
 8004abc:	08004b47 	.word	0x08004b47
 8004ac0:	08004b47 	.word	0x08004b47
 8004ac4:	08004b47 	.word	0x08004b47
 8004ac8:	08004b47 	.word	0x08004b47
 8004acc:	08004b47 	.word	0x08004b47
 8004ad0:	08004b03 	.word	0x08004b03
 8004ad4:	08004b2d 	.word	0x08004b2d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b03      	cmp	r3, #3
 8004ae2:	d107      	bne.n	8004af4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ae4:	f107 030a 	add.w	r3, r7, #10
 8004ae8:	2202      	movs	r2, #2
 8004aea:	4619      	mov	r1, r3
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f001 fd33 	bl	8006558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004af2:	e032      	b.n	8004b5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004af4:	6839      	ldr	r1, [r7, #0]
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f001 fcbd 	bl	8006476 <USBD_CtlError>
            ret = USBD_FAIL;
 8004afc:	2303      	movs	r3, #3
 8004afe:	75fb      	strb	r3, [r7, #23]
          break;
 8004b00:	e02b      	b.n	8004b5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b03      	cmp	r3, #3
 8004b0c:	d107      	bne.n	8004b1e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004b0e:	f107 030d 	add.w	r3, r7, #13
 8004b12:	2201      	movs	r2, #1
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fd1e 	bl	8006558 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b1c:	e01d      	b.n	8004b5a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b1e:	6839      	ldr	r1, [r7, #0]
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f001 fca8 	bl	8006476 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b26:	2303      	movs	r3, #3
 8004b28:	75fb      	strb	r3, [r7, #23]
          break;
 8004b2a:	e016      	b.n	8004b5a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b03      	cmp	r3, #3
 8004b36:	d00f      	beq.n	8004b58 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004b38:	6839      	ldr	r1, [r7, #0]
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f001 fc9b 	bl	8006476 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b40:	2303      	movs	r3, #3
 8004b42:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b44:	e008      	b.n	8004b58 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b46:	6839      	ldr	r1, [r7, #0]
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f001 fc94 	bl	8006476 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b4e:	2303      	movs	r3, #3
 8004b50:	75fb      	strb	r3, [r7, #23]
          break;
 8004b52:	e002      	b.n	8004b5a <USBD_CDC_Setup+0x19e>
          break;
 8004b54:	bf00      	nop
 8004b56:	e008      	b.n	8004b6a <USBD_CDC_Setup+0x1ae>
          break;
 8004b58:	bf00      	nop
      }
      break;
 8004b5a:	e006      	b.n	8004b6a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004b5c:	6839      	ldr	r1, [r7, #0]
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f001 fc89 	bl	8006476 <USBD_CtlError>
      ret = USBD_FAIL;
 8004b64:	2303      	movs	r3, #3
 8004b66:	75fb      	strb	r3, [r7, #23]
      break;
 8004b68:	bf00      	nop
  }

  return (uint8_t)ret;
 8004b6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004b86:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	32b0      	adds	r2, #176	; 0xb0
 8004b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e065      	b.n	8004c6a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	32b0      	adds	r2, #176	; 0xb0
 8004ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bac:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	f003 020f 	and.w	r2, r3, #15
 8004bb4:	6879      	ldr	r1, [r7, #4]
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	009b      	lsls	r3, r3, #2
 8004bba:	4413      	add	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	440b      	add	r3, r1
 8004bc0:	3318      	adds	r3, #24
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d02f      	beq.n	8004c28 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004bc8:	78fb      	ldrb	r3, [r7, #3]
 8004bca:	f003 020f 	and.w	r2, r3, #15
 8004bce:	6879      	ldr	r1, [r7, #4]
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	4413      	add	r3, r2
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	440b      	add	r3, r1
 8004bda:	3318      	adds	r3, #24
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	78fb      	ldrb	r3, [r7, #3]
 8004be0:	f003 010f 	and.w	r1, r3, #15
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	460b      	mov	r3, r1
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	440b      	add	r3, r1
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4403      	add	r3, r0
 8004bf0:	3348      	adds	r3, #72	; 0x48
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d112      	bne.n	8004c28 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004c02:	78fb      	ldrb	r3, [r7, #3]
 8004c04:	f003 020f 	and.w	r2, r3, #15
 8004c08:	6879      	ldr	r1, [r7, #4]
 8004c0a:	4613      	mov	r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	4413      	add	r3, r2
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	440b      	add	r3, r1
 8004c14:	3318      	adds	r3, #24
 8004c16:	2200      	movs	r2, #0
 8004c18:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004c1a:	78f9      	ldrb	r1, [r7, #3]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2200      	movs	r2, #0
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f002 f9de 	bl	8006fe2 <USBD_LL_Transmit>
 8004c26:	e01f      	b.n	8004c68 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	33b0      	adds	r3, #176	; 0xb0
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d010      	beq.n	8004c68 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	33b0      	adds	r3, #176	; 0xb0
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	4413      	add	r3, r2
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004c5e:	68ba      	ldr	r2, [r7, #8]
 8004c60:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004c64:	78fa      	ldrb	r2, [r7, #3]
 8004c66:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}

08004c72 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004c72:	b580      	push	{r7, lr}
 8004c74:	b084      	sub	sp, #16
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
 8004c7a:	460b      	mov	r3, r1
 8004c7c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	32b0      	adds	r2, #176	; 0xb0
 8004c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c8c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	32b0      	adds	r2, #176	; 0xb0
 8004c98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d101      	bne.n	8004ca4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e01a      	b.n	8004cda <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004ca4:	78fb      	ldrb	r3, [r7, #3]
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	f002 f9dc 	bl	8007066 <USBD_LL_GetRxDataSize>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	33b0      	adds	r3, #176	; 0xb0
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4413      	add	r3, r2
 8004cc4:	685b      	ldr	r3, [r3, #4]
 8004cc6:	68db      	ldr	r3, [r3, #12]
 8004cc8:	68fa      	ldr	r2, [r7, #12]
 8004cca:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004cce:	68fa      	ldr	r2, [r7, #12]
 8004cd0:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004cd4:	4611      	mov	r1, r2
 8004cd6:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	32b0      	adds	r2, #176	; 0xb0
 8004cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e025      	b.n	8004d50 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d0a:	687a      	ldr	r2, [r7, #4]
 8004d0c:	33b0      	adds	r3, #176	; 0xb0
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4413      	add	r3, r2
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01a      	beq.n	8004d4e <USBD_CDC_EP0_RxReady+0x6c>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d1e:	2bff      	cmp	r3, #255	; 0xff
 8004d20:	d015      	beq.n	8004d4e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	33b0      	adds	r3, #176	; 0xb0
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4413      	add	r3, r2
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	689b      	ldr	r3, [r3, #8]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004d3a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d42:	b292      	uxth	r2, r2
 8004d44:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	22ff      	movs	r2, #255	; 0xff
 8004d4a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d4e:	2300      	movs	r3, #0
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b086      	sub	sp, #24
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004d60:	2182      	movs	r1, #130	; 0x82
 8004d62:	4818      	ldr	r0, [pc, #96]	; (8004dc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d64:	f000 fd4f 	bl	8005806 <USBD_GetEpDesc>
 8004d68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004d6a:	2101      	movs	r1, #1
 8004d6c:	4815      	ldr	r0, [pc, #84]	; (8004dc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d6e:	f000 fd4a 	bl	8005806 <USBD_GetEpDesc>
 8004d72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004d74:	2181      	movs	r1, #129	; 0x81
 8004d76:	4813      	ldr	r0, [pc, #76]	; (8004dc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004d78:	f000 fd45 	bl	8005806 <USBD_GetEpDesc>
 8004d7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d002      	beq.n	8004d8a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	2210      	movs	r2, #16
 8004d88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d006      	beq.n	8004d9e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	2200      	movs	r2, #0
 8004d94:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d98:	711a      	strb	r2, [r3, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d006      	beq.n	8004db2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004dac:	711a      	strb	r2, [r3, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2243      	movs	r2, #67	; 0x43
 8004db6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004db8:	4b02      	ldr	r3, [pc, #8]	; (8004dc4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3718      	adds	r7, #24
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
 8004dc2:	bf00      	nop
 8004dc4:	20000050 	.word	0x20000050

08004dc8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004dd0:	2182      	movs	r1, #130	; 0x82
 8004dd2:	4818      	ldr	r0, [pc, #96]	; (8004e34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dd4:	f000 fd17 	bl	8005806 <USBD_GetEpDesc>
 8004dd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004dda:	2101      	movs	r1, #1
 8004ddc:	4815      	ldr	r0, [pc, #84]	; (8004e34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004dde:	f000 fd12 	bl	8005806 <USBD_GetEpDesc>
 8004de2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004de4:	2181      	movs	r1, #129	; 0x81
 8004de6:	4813      	ldr	r0, [pc, #76]	; (8004e34 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004de8:	f000 fd0d 	bl	8005806 <USBD_GetEpDesc>
 8004dec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d002      	beq.n	8004dfa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2210      	movs	r2, #16
 8004df8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d006      	beq.n	8004e0e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	2200      	movs	r2, #0
 8004e04:	711a      	strb	r2, [r3, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f042 0202 	orr.w	r2, r2, #2
 8004e0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d006      	beq.n	8004e22 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	2200      	movs	r2, #0
 8004e18:	711a      	strb	r2, [r3, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f042 0202 	orr.w	r2, r2, #2
 8004e20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2243      	movs	r2, #67	; 0x43
 8004e26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e28:	4b02      	ldr	r3, [pc, #8]	; (8004e34 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000050 	.word	0x20000050

08004e38 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e40:	2182      	movs	r1, #130	; 0x82
 8004e42:	4818      	ldr	r0, [pc, #96]	; (8004ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e44:	f000 fcdf 	bl	8005806 <USBD_GetEpDesc>
 8004e48:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e4a:	2101      	movs	r1, #1
 8004e4c:	4815      	ldr	r0, [pc, #84]	; (8004ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e4e:	f000 fcda 	bl	8005806 <USBD_GetEpDesc>
 8004e52:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e54:	2181      	movs	r1, #129	; 0x81
 8004e56:	4813      	ldr	r0, [pc, #76]	; (8004ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e58:	f000 fcd5 	bl	8005806 <USBD_GetEpDesc>
 8004e5c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2210      	movs	r2, #16
 8004e68:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d006      	beq.n	8004e7e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e70:	693b      	ldr	r3, [r7, #16]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e78:	711a      	strb	r2, [r3, #4]
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d006      	beq.n	8004e92 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e8c:	711a      	strb	r2, [r3, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2243      	movs	r2, #67	; 0x43
 8004e96:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e98:	4b02      	ldr	r3, [pc, #8]	; (8004ea4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3718      	adds	r7, #24
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20000050 	.word	0x20000050

08004ea8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ea8:	b480      	push	{r7}
 8004eaa:	b083      	sub	sp, #12
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	220a      	movs	r2, #10
 8004eb4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004eb6:	4b03      	ldr	r3, [pc, #12]	; (8004ec4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	370c      	adds	r7, #12
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	2000000c 	.word	0x2000000c

08004ec8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d101      	bne.n	8004edc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	e009      	b.n	8004ef0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	33b0      	adds	r3, #176	; 0xb0
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	683a      	ldr	r2, [r7, #0]
 8004eec:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	370c      	adds	r7, #12
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	32b0      	adds	r2, #176	; 0xb0
 8004f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f16:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e008      	b.n	8004f34 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	32b0      	adds	r2, #176	; 0xb0
 8004f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f58:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004f60:	2303      	movs	r3, #3
 8004f62:	e004      	b.n	8004f6e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
	...

08004f7c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	32b0      	adds	r2, #176	; 0xb0
 8004f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f92:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004f94:	2301      	movs	r3, #1
 8004f96:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	32b0      	adds	r2, #176	; 0xb0
 8004fa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e025      	b.n	8004ffa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d11f      	bne.n	8004ff8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8004fc0:	4b10      	ldr	r3, [pc, #64]	; (8005004 <USBD_CDC_TransmitPacket+0x88>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	f003 020f 	and.w	r2, r3, #15
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8004fce:	6878      	ldr	r0, [r7, #4]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4403      	add	r3, r0
 8004fda:	3318      	adds	r3, #24
 8004fdc:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8004fde:	4b09      	ldr	r3, [pc, #36]	; (8005004 <USBD_CDC_TransmitPacket+0x88>)
 8004fe0:	7819      	ldrb	r1, [r3, #0]
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f001 fff7 	bl	8006fe2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	3710      	adds	r7, #16
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	20000093 	.word	0x20000093

08005008 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	32b0      	adds	r2, #176	; 0xb0
 800501a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800501e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	32b0      	adds	r2, #176	; 0xb0
 800502a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005032:	2303      	movs	r3, #3
 8005034:	e018      	b.n	8005068 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	7c1b      	ldrb	r3, [r3, #16]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800503e:	4b0c      	ldr	r3, [pc, #48]	; (8005070 <USBD_CDC_ReceivePacket+0x68>)
 8005040:	7819      	ldrb	r1, [r3, #0]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800504c:	6878      	ldr	r0, [r7, #4]
 800504e:	f001 ffe9 	bl	8007024 <USBD_LL_PrepareReceive>
 8005052:	e008      	b.n	8005066 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005054:	4b06      	ldr	r3, [pc, #24]	; (8005070 <USBD_CDC_ReceivePacket+0x68>)
 8005056:	7819      	ldrb	r1, [r3, #0]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800505e:	2340      	movs	r3, #64	; 0x40
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f001 ffdf 	bl	8007024 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	20000094 	.word	0x20000094

08005074 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	4613      	mov	r3, r2
 8005080:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005088:	2303      	movs	r3, #3
 800508a:	e01f      	b.n	80050cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	2200      	movs	r2, #0
 8005090:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	68ba      	ldr	r2, [r7, #8]
 80050ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	79fa      	ldrb	r2, [r7, #7]
 80050be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80050c0:	68f8      	ldr	r0, [r7, #12]
 80050c2:	f001 fe59 	bl	8006d78 <USBD_LL_Init>
 80050c6:	4603      	mov	r3, r0
 80050c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80050ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3718      	adds	r7, #24
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80050de:	2300      	movs	r3, #0
 80050e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d101      	bne.n	80050ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80050e8:	2303      	movs	r3, #3
 80050ea:	e025      	b.n	8005138 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	32ae      	adds	r2, #174	; 0xae
 80050fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00f      	beq.n	8005128 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	32ae      	adds	r2, #174	; 0xae
 8005112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005118:	f107 020e 	add.w	r2, r7, #14
 800511c:	4610      	mov	r0, r2
 800511e:	4798      	blx	r3
 8005120:	4602      	mov	r2, r0
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800512e:	1c5a      	adds	r2, r3, #1
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3710      	adds	r7, #16
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}

08005140 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f001 fe61 	bl	8006e10 <USBD_LL_Start>
 800514e:	4603      	mov	r3, r0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005160:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005162:	4618      	mov	r0, r3
 8005164:	370c      	adds	r7, #12
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr

0800516e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800516e:	b580      	push	{r7, lr}
 8005170:	b084      	sub	sp, #16
 8005172:	af00      	add	r7, sp, #0
 8005174:	6078      	str	r0, [r7, #4]
 8005176:	460b      	mov	r3, r1
 8005178:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005184:	2b00      	cmp	r3, #0
 8005186:	d009      	beq.n	800519c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	78fa      	ldrb	r2, [r7, #3]
 8005192:	4611      	mov	r1, r2
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	4798      	blx	r3
 8005198:	4603      	mov	r3, r0
 800519a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800519c:	7bfb      	ldrb	r3, [r7, #15]
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
 80051ae:	460b      	mov	r3, r1
 80051b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	78fa      	ldrb	r2, [r7, #3]
 80051c0:	4611      	mov	r1, r2
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
 80051c6:	4603      	mov	r3, r0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d001      	beq.n	80051d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80051cc:	2303      	movs	r3, #3
 80051ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b084      	sub	sp, #16
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80051ea:	6839      	ldr	r1, [r7, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f001 f908 	bl	8006402 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005200:	461a      	mov	r2, r3
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800520e:	f003 031f 	and.w	r3, r3, #31
 8005212:	2b02      	cmp	r3, #2
 8005214:	d01a      	beq.n	800524c <USBD_LL_SetupStage+0x72>
 8005216:	2b02      	cmp	r3, #2
 8005218:	d822      	bhi.n	8005260 <USBD_LL_SetupStage+0x86>
 800521a:	2b00      	cmp	r3, #0
 800521c:	d002      	beq.n	8005224 <USBD_LL_SetupStage+0x4a>
 800521e:	2b01      	cmp	r3, #1
 8005220:	d00a      	beq.n	8005238 <USBD_LL_SetupStage+0x5e>
 8005222:	e01d      	b.n	8005260 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800522a:	4619      	mov	r1, r3
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb5f 	bl	80058f0 <USBD_StdDevReq>
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]
      break;
 8005236:	e020      	b.n	800527a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800523e:	4619      	mov	r1, r3
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 fbc7 	bl	80059d4 <USBD_StdItfReq>
 8005246:	4603      	mov	r3, r0
 8005248:	73fb      	strb	r3, [r7, #15]
      break;
 800524a:	e016      	b.n	800527a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005252:	4619      	mov	r1, r3
 8005254:	6878      	ldr	r0, [r7, #4]
 8005256:	f000 fc29 	bl	8005aac <USBD_StdEPReq>
 800525a:	4603      	mov	r3, r0
 800525c:	73fb      	strb	r3, [r7, #15]
      break;
 800525e:	e00c      	b.n	800527a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005266:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800526a:	b2db      	uxtb	r3, r3
 800526c:	4619      	mov	r1, r3
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f001 fe2e 	bl	8006ed0 <USBD_LL_StallEP>
 8005274:	4603      	mov	r3, r0
 8005276:	73fb      	strb	r3, [r7, #15]
      break;
 8005278:	bf00      	nop
  }

  return ret;
 800527a:	7bfb      	ldrb	r3, [r7, #15]
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	460b      	mov	r3, r1
 800528e:	607a      	str	r2, [r7, #4]
 8005290:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005292:	2300      	movs	r3, #0
 8005294:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d16e      	bne.n	800537a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052aa:	2b03      	cmp	r3, #3
 80052ac:	f040 8098 	bne.w	80053e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d913      	bls.n	80052e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	689a      	ldr	r2, [r3, #8]
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	1ad2      	subs	r2, r2, r3
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	68da      	ldr	r2, [r3, #12]
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	4293      	cmp	r3, r2
 80052d4:	bf28      	it	cs
 80052d6:	4613      	movcs	r3, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	68f8      	ldr	r0, [r7, #12]
 80052de:	f001 f984 	bl	80065ea <USBD_CtlContinueRx>
 80052e2:	e07d      	b.n	80053e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052ea:	f003 031f 	and.w	r3, r3, #31
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d014      	beq.n	800531c <USBD_LL_DataOutStage+0x98>
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d81d      	bhi.n	8005332 <USBD_LL_DataOutStage+0xae>
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <USBD_LL_DataOutStage+0x7c>
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d003      	beq.n	8005306 <USBD_LL_DataOutStage+0x82>
 80052fe:	e018      	b.n	8005332 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005300:	2300      	movs	r3, #0
 8005302:	75bb      	strb	r3, [r7, #22]
            break;
 8005304:	e018      	b.n	8005338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fa5e 	bl	80057d2 <USBD_CoreFindIF>
 8005316:	4603      	mov	r3, r0
 8005318:	75bb      	strb	r3, [r7, #22]
            break;
 800531a:	e00d      	b.n	8005338 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005322:	b2db      	uxtb	r3, r3
 8005324:	4619      	mov	r1, r3
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f000 fa60 	bl	80057ec <USBD_CoreFindEP>
 800532c:	4603      	mov	r3, r0
 800532e:	75bb      	strb	r3, [r7, #22]
            break;
 8005330:	e002      	b.n	8005338 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005332:	2300      	movs	r3, #0
 8005334:	75bb      	strb	r3, [r7, #22]
            break;
 8005336:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005338:	7dbb      	ldrb	r3, [r7, #22]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d119      	bne.n	8005372 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b03      	cmp	r3, #3
 8005348:	d113      	bne.n	8005372 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800534a:	7dba      	ldrb	r2, [r7, #22]
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	32ae      	adds	r2, #174	; 0xae
 8005350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00b      	beq.n	8005372 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800535a:	7dba      	ldrb	r2, [r7, #22]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005362:	7dba      	ldrb	r2, [r7, #22]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	32ae      	adds	r2, #174	; 0xae
 8005368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f001 f94a 	bl	800660c <USBD_CtlSendStatus>
 8005378:	e032      	b.n	80053e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800537a:	7afb      	ldrb	r3, [r7, #11]
 800537c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005380:	b2db      	uxtb	r3, r3
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 fa31 	bl	80057ec <USBD_CoreFindEP>
 800538a:	4603      	mov	r3, r0
 800538c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800538e:	7dbb      	ldrb	r3, [r7, #22]
 8005390:	2bff      	cmp	r3, #255	; 0xff
 8005392:	d025      	beq.n	80053e0 <USBD_LL_DataOutStage+0x15c>
 8005394:	7dbb      	ldrb	r3, [r7, #22]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d122      	bne.n	80053e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053a0:	b2db      	uxtb	r3, r3
 80053a2:	2b03      	cmp	r3, #3
 80053a4:	d117      	bne.n	80053d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80053a6:	7dba      	ldrb	r2, [r7, #22]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	32ae      	adds	r2, #174	; 0xae
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00f      	beq.n	80053d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80053b6:	7dba      	ldrb	r2, [r7, #22]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80053be:	7dba      	ldrb	r2, [r7, #22]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	32ae      	adds	r2, #174	; 0xae
 80053c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053c8:	699b      	ldr	r3, [r3, #24]
 80053ca:	7afa      	ldrb	r2, [r7, #11]
 80053cc:	4611      	mov	r1, r2
 80053ce:	68f8      	ldr	r0, [r7, #12]
 80053d0:	4798      	blx	r3
 80053d2:	4603      	mov	r3, r0
 80053d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80053d6:	7dfb      	ldrb	r3, [r7, #23]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d001      	beq.n	80053e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
 80053de:	e000      	b.n	80053e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}

080053ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80053ea:	b580      	push	{r7, lr}
 80053ec:	b086      	sub	sp, #24
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	60f8      	str	r0, [r7, #12]
 80053f2:	460b      	mov	r3, r1
 80053f4:	607a      	str	r2, [r7, #4]
 80053f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80053f8:	7afb      	ldrb	r3, [r7, #11]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d16f      	bne.n	80054de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	3314      	adds	r3, #20
 8005402:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800540a:	2b02      	cmp	r3, #2
 800540c:	d15a      	bne.n	80054c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	689a      	ldr	r2, [r3, #8]
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	429a      	cmp	r2, r3
 8005418:	d914      	bls.n	8005444 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	461a      	mov	r2, r3
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f001 f8ac 	bl	800658e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005436:	2300      	movs	r3, #0
 8005438:	2200      	movs	r2, #0
 800543a:	2100      	movs	r1, #0
 800543c:	68f8      	ldr	r0, [r7, #12]
 800543e:	f001 fdf1 	bl	8007024 <USBD_LL_PrepareReceive>
 8005442:	e03f      	b.n	80054c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d11c      	bne.n	800548a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005458:	429a      	cmp	r2, r3
 800545a:	d316      	bcc.n	800548a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	685a      	ldr	r2, [r3, #4]
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005466:	429a      	cmp	r2, r3
 8005468:	d20f      	bcs.n	800548a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800546a:	2200      	movs	r2, #0
 800546c:	2100      	movs	r1, #0
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f001 f88d 	bl	800658e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2200      	movs	r2, #0
 8005478:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800547c:	2300      	movs	r3, #0
 800547e:	2200      	movs	r2, #0
 8005480:	2100      	movs	r1, #0
 8005482:	68f8      	ldr	r0, [r7, #12]
 8005484:	f001 fdce 	bl	8007024 <USBD_LL_PrepareReceive>
 8005488:	e01c      	b.n	80054c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005490:	b2db      	uxtb	r3, r3
 8005492:	2b03      	cmp	r3, #3
 8005494:	d10f      	bne.n	80054b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d009      	beq.n	80054b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054b0:	68db      	ldr	r3, [r3, #12]
 80054b2:	68f8      	ldr	r0, [r7, #12]
 80054b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80054b6:	2180      	movs	r1, #128	; 0x80
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f001 fd09 	bl	8006ed0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80054be:	68f8      	ldr	r0, [r7, #12]
 80054c0:	f001 f8b7 	bl	8006632 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d03a      	beq.n	8005544 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f7ff fe42 	bl	8005158 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80054dc:	e032      	b.n	8005544 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80054de:	7afb      	ldrb	r3, [r7, #11]
 80054e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80054e4:	b2db      	uxtb	r3, r3
 80054e6:	4619      	mov	r1, r3
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 f97f 	bl	80057ec <USBD_CoreFindEP>
 80054ee:	4603      	mov	r3, r0
 80054f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054f2:	7dfb      	ldrb	r3, [r7, #23]
 80054f4:	2bff      	cmp	r3, #255	; 0xff
 80054f6:	d025      	beq.n	8005544 <USBD_LL_DataInStage+0x15a>
 80054f8:	7dfb      	ldrb	r3, [r7, #23]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d122      	bne.n	8005544 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b03      	cmp	r3, #3
 8005508:	d11c      	bne.n	8005544 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800550a:	7dfa      	ldrb	r2, [r7, #23]
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	32ae      	adds	r2, #174	; 0xae
 8005510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005514:	695b      	ldr	r3, [r3, #20]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d014      	beq.n	8005544 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800551a:	7dfa      	ldrb	r2, [r7, #23]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005522:	7dfa      	ldrb	r2, [r7, #23]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	32ae      	adds	r2, #174	; 0xae
 8005528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	7afa      	ldrb	r2, [r7, #11]
 8005530:	4611      	mov	r1, r2
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	4798      	blx	r3
 8005536:	4603      	mov	r3, r0
 8005538:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800553a:	7dbb      	ldrb	r3, [r7, #22]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d001      	beq.n	8005544 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005540:	7dbb      	ldrb	r3, [r7, #22]
 8005542:	e000      	b.n	8005546 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}

0800554e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800554e:	b580      	push	{r7, lr}
 8005550:	b084      	sub	sp, #16
 8005552:	af00      	add	r7, sp, #0
 8005554:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005556:	2300      	movs	r3, #0
 8005558:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005586:	2b00      	cmp	r3, #0
 8005588:	d014      	beq.n	80055b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d00e      	beq.n	80055b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	687a      	ldr	r2, [r7, #4]
 80055a0:	6852      	ldr	r2, [r2, #4]
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	4611      	mov	r1, r2
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	4798      	blx	r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d001      	beq.n	80055b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80055b0:	2303      	movs	r3, #3
 80055b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055b4:	2340      	movs	r3, #64	; 0x40
 80055b6:	2200      	movs	r2, #0
 80055b8:	2100      	movs	r1, #0
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f001 fc43 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80055d0:	2340      	movs	r3, #64	; 0x40
 80055d2:	2200      	movs	r2, #0
 80055d4:	2180      	movs	r1, #128	; 0x80
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f001 fc35 	bl	8006e46 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2240      	movs	r2, #64	; 0x40
 80055e6:	621a      	str	r2, [r3, #32]

  return ret;
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3710      	adds	r7, #16
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80055f2:	b480      	push	{r7}
 80055f4:	b083      	sub	sp, #12
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	460b      	mov	r3, r1
 80055fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	370c      	adds	r7, #12
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr

08005612 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005620:	b2da      	uxtb	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2204      	movs	r2, #4
 800562c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	370c      	adds	r7, #12
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr

0800563e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b04      	cmp	r3, #4
 8005650:	d106      	bne.n	8005660 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005658:	b2da      	uxtb	r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	370c      	adds	r7, #12
 8005666:	46bd      	mov	sp, r7
 8005668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566c:	4770      	bx	lr

0800566e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b082      	sub	sp, #8
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b03      	cmp	r3, #3
 8005680:	d110      	bne.n	80056a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005692:	69db      	ldr	r3, [r3, #28]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80056a4:	2300      	movs	r3, #0
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3708      	adds	r7, #8
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}

080056ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b082      	sub	sp, #8
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
 80056b6:	460b      	mov	r3, r1
 80056b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	32ae      	adds	r2, #174	; 0xae
 80056c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d101      	bne.n	80056d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80056cc:	2303      	movs	r3, #3
 80056ce:	e01c      	b.n	800570a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	2b03      	cmp	r3, #3
 80056da:	d115      	bne.n	8005708 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	32ae      	adds	r2, #174	; 0xae
 80056e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056ea:	6a1b      	ldr	r3, [r3, #32]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00b      	beq.n	8005708 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	32ae      	adds	r2, #174	; 0xae
 80056fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	78fa      	ldrb	r2, [r7, #3]
 8005702:	4611      	mov	r1, r2
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3708      	adds	r7, #8
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b082      	sub	sp, #8
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
 800571a:	460b      	mov	r3, r1
 800571c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	32ae      	adds	r2, #174	; 0xae
 8005728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005730:	2303      	movs	r3, #3
 8005732:	e01c      	b.n	800576e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b03      	cmp	r3, #3
 800573e:	d115      	bne.n	800576c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	32ae      	adds	r2, #174	; 0xae
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00b      	beq.n	800576c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	32ae      	adds	r2, #174	; 0xae
 800575e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	78fa      	ldrb	r2, [r7, #3]
 8005766:	4611      	mov	r1, r2
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800576c:	2300      	movs	r3, #0
}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}

08005776 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005776:	b480      	push	{r7}
 8005778:	b083      	sub	sp, #12
 800577a:	af00      	add	r7, sp, #0
 800577c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	4618      	mov	r0, r3
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00e      	beq.n	80057c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6852      	ldr	r2, [r2, #4]
 80057b6:	b2d2      	uxtb	r2, r2
 80057b8:	4611      	mov	r1, r2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80057c4:	2303      	movs	r3, #3
 80057c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80057c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3710      	adds	r7, #16
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}

080057d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80057d2:	b480      	push	{r7}
 80057d4:	b083      	sub	sp, #12
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80057de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80057f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b086      	sub	sp, #24
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
 800580e:	460b      	mov	r3, r1
 8005810:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800581a:	2300      	movs	r3, #0
 800581c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	885b      	ldrh	r3, [r3, #2]
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	b29b      	uxth	r3, r3
 800582a:	429a      	cmp	r2, r3
 800582c:	d920      	bls.n	8005870 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005836:	e013      	b.n	8005860 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005838:	f107 030a 	add.w	r3, r7, #10
 800583c:	4619      	mov	r1, r3
 800583e:	6978      	ldr	r0, [r7, #20]
 8005840:	f000 f81b 	bl	800587a <USBD_GetNextDesc>
 8005844:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	785b      	ldrb	r3, [r3, #1]
 800584a:	2b05      	cmp	r3, #5
 800584c:	d108      	bne.n	8005860 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	789b      	ldrb	r3, [r3, #2]
 8005856:	78fa      	ldrb	r2, [r7, #3]
 8005858:	429a      	cmp	r2, r3
 800585a:	d008      	beq.n	800586e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800585c:	2300      	movs	r3, #0
 800585e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	885b      	ldrh	r3, [r3, #2]
 8005864:	b29a      	uxth	r2, r3
 8005866:	897b      	ldrh	r3, [r7, #10]
 8005868:	429a      	cmp	r2, r3
 800586a:	d8e5      	bhi.n	8005838 <USBD_GetEpDesc+0x32>
 800586c:	e000      	b.n	8005870 <USBD_GetEpDesc+0x6a>
          break;
 800586e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005870:	693b      	ldr	r3, [r7, #16]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3718      	adds	r7, #24
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}

0800587a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800587a:	b480      	push	{r7}
 800587c:	b085      	sub	sp, #20
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	881a      	ldrh	r2, [r3, #0]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	b29b      	uxth	r3, r3
 8005892:	4413      	add	r3, r2
 8005894:	b29a      	uxth	r2, r3
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	461a      	mov	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80058a6:	68fb      	ldr	r3, [r7, #12]
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3714      	adds	r7, #20
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	3301      	adds	r3, #1
 80058ca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	781b      	ldrb	r3, [r3, #0]
 80058d0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80058d2:	8a3b      	ldrh	r3, [r7, #16]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	b21a      	sxth	r2, r3
 80058d8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80058dc:	4313      	orrs	r3, r2
 80058de:	b21b      	sxth	r3, r3
 80058e0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80058e2:	89fb      	ldrh	r3, [r7, #14]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	371c      	adds	r7, #28
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80058fa:	2300      	movs	r3, #0
 80058fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005906:	2b40      	cmp	r3, #64	; 0x40
 8005908:	d005      	beq.n	8005916 <USBD_StdDevReq+0x26>
 800590a:	2b40      	cmp	r3, #64	; 0x40
 800590c:	d857      	bhi.n	80059be <USBD_StdDevReq+0xce>
 800590e:	2b00      	cmp	r3, #0
 8005910:	d00f      	beq.n	8005932 <USBD_StdDevReq+0x42>
 8005912:	2b20      	cmp	r3, #32
 8005914:	d153      	bne.n	80059be <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	32ae      	adds	r2, #174	; 0xae
 8005920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	6839      	ldr	r1, [r7, #0]
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
 800592c:	4603      	mov	r3, r0
 800592e:	73fb      	strb	r3, [r7, #15]
      break;
 8005930:	e04a      	b.n	80059c8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	785b      	ldrb	r3, [r3, #1]
 8005936:	2b09      	cmp	r3, #9
 8005938:	d83b      	bhi.n	80059b2 <USBD_StdDevReq+0xc2>
 800593a:	a201      	add	r2, pc, #4	; (adr r2, 8005940 <USBD_StdDevReq+0x50>)
 800593c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005940:	08005995 	.word	0x08005995
 8005944:	080059a9 	.word	0x080059a9
 8005948:	080059b3 	.word	0x080059b3
 800594c:	0800599f 	.word	0x0800599f
 8005950:	080059b3 	.word	0x080059b3
 8005954:	08005973 	.word	0x08005973
 8005958:	08005969 	.word	0x08005969
 800595c:	080059b3 	.word	0x080059b3
 8005960:	0800598b 	.word	0x0800598b
 8005964:	0800597d 	.word	0x0800597d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005968:	6839      	ldr	r1, [r7, #0]
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa3c 	bl	8005de8 <USBD_GetDescriptor>
          break;
 8005970:	e024      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	f000 fba1 	bl	80060bc <USBD_SetAddress>
          break;
 800597a:	e01f      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800597c:	6839      	ldr	r1, [r7, #0]
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f000 fbe0 	bl	8006144 <USBD_SetConfig>
 8005984:	4603      	mov	r3, r0
 8005986:	73fb      	strb	r3, [r7, #15]
          break;
 8005988:	e018      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800598a:	6839      	ldr	r1, [r7, #0]
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f000 fc83 	bl	8006298 <USBD_GetConfig>
          break;
 8005992:	e013      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005994:	6839      	ldr	r1, [r7, #0]
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fcb4 	bl	8006304 <USBD_GetStatus>
          break;
 800599c:	e00e      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f000 fce3 	bl	800636c <USBD_SetFeature>
          break;
 80059a6:	e009      	b.n	80059bc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059a8:	6839      	ldr	r1, [r7, #0]
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 fd07 	bl	80063be <USBD_ClrFeature>
          break;
 80059b0:	e004      	b.n	80059bc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80059b2:	6839      	ldr	r1, [r7, #0]
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 fd5e 	bl	8006476 <USBD_CtlError>
          break;
 80059ba:	bf00      	nop
      }
      break;
 80059bc:	e004      	b.n	80059c8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fd58 	bl	8006476 <USBD_CtlError>
      break;
 80059c6:	bf00      	nop
  }

  return ret;
 80059c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop

080059d4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059ea:	2b40      	cmp	r3, #64	; 0x40
 80059ec:	d005      	beq.n	80059fa <USBD_StdItfReq+0x26>
 80059ee:	2b40      	cmp	r3, #64	; 0x40
 80059f0:	d852      	bhi.n	8005a98 <USBD_StdItfReq+0xc4>
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <USBD_StdItfReq+0x26>
 80059f6:	2b20      	cmp	r3, #32
 80059f8:	d14e      	bne.n	8005a98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	3b01      	subs	r3, #1
 8005a04:	2b02      	cmp	r3, #2
 8005a06:	d840      	bhi.n	8005a8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	889b      	ldrh	r3, [r3, #4]
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d836      	bhi.n	8005a80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	889b      	ldrh	r3, [r3, #4]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	4619      	mov	r1, r3
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7ff fed9 	bl	80057d2 <USBD_CoreFindIF>
 8005a20:	4603      	mov	r3, r0
 8005a22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a24:	7bbb      	ldrb	r3, [r7, #14]
 8005a26:	2bff      	cmp	r3, #255	; 0xff
 8005a28:	d01d      	beq.n	8005a66 <USBD_StdItfReq+0x92>
 8005a2a:	7bbb      	ldrb	r3, [r7, #14]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d11a      	bne.n	8005a66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005a30:	7bba      	ldrb	r2, [r7, #14]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	32ae      	adds	r2, #174	; 0xae
 8005a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d00f      	beq.n	8005a60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005a40:	7bba      	ldrb	r2, [r7, #14]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a48:	7bba      	ldrb	r2, [r7, #14]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	32ae      	adds	r2, #174	; 0xae
 8005a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	6839      	ldr	r1, [r7, #0]
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	4798      	blx	r3
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a5e:	e004      	b.n	8005a6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005a60:	2303      	movs	r3, #3
 8005a62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005a64:	e001      	b.n	8005a6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005a66:	2303      	movs	r3, #3
 8005a68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	88db      	ldrh	r3, [r3, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d110      	bne.n	8005a94 <USBD_StdItfReq+0xc0>
 8005a72:	7bfb      	ldrb	r3, [r7, #15]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d10d      	bne.n	8005a94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fdc7 	bl	800660c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005a7e:	e009      	b.n	8005a94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005a80:	6839      	ldr	r1, [r7, #0]
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fcf7 	bl	8006476 <USBD_CtlError>
          break;
 8005a88:	e004      	b.n	8005a94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fcf2 	bl	8006476 <USBD_CtlError>
          break;
 8005a92:	e000      	b.n	8005a96 <USBD_StdItfReq+0xc2>
          break;
 8005a94:	bf00      	nop
      }
      break;
 8005a96:	e004      	b.n	8005aa2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 fceb 	bl	8006476 <USBD_CtlError>
      break;
 8005aa0:	bf00      	nop
  }

  return ret;
 8005aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3710      	adds	r7, #16
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bd80      	pop	{r7, pc}

08005aac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b084      	sub	sp, #16
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	889b      	ldrh	r3, [r3, #4]
 8005abe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d007      	beq.n	8005adc <USBD_StdEPReq+0x30>
 8005acc:	2b40      	cmp	r3, #64	; 0x40
 8005ace:	f200 817f 	bhi.w	8005dd0 <USBD_StdEPReq+0x324>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d02a      	beq.n	8005b2c <USBD_StdEPReq+0x80>
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	f040 817a 	bne.w	8005dd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	4619      	mov	r1, r3
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f7ff fe83 	bl	80057ec <USBD_CoreFindEP>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aea:	7b7b      	ldrb	r3, [r7, #13]
 8005aec:	2bff      	cmp	r3, #255	; 0xff
 8005aee:	f000 8174 	beq.w	8005dda <USBD_StdEPReq+0x32e>
 8005af2:	7b7b      	ldrb	r3, [r7, #13]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	f040 8170 	bne.w	8005dda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005afa:	7b7a      	ldrb	r2, [r7, #13]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b02:	7b7a      	ldrb	r2, [r7, #13]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	32ae      	adds	r2, #174	; 0xae
 8005b08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	f000 8163 	beq.w	8005dda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005b14:	7b7a      	ldrb	r2, [r7, #13]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	32ae      	adds	r2, #174	; 0xae
 8005b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	6839      	ldr	r1, [r7, #0]
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	4798      	blx	r3
 8005b26:	4603      	mov	r3, r0
 8005b28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b2a:	e156      	b.n	8005dda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b03      	cmp	r3, #3
 8005b32:	d008      	beq.n	8005b46 <USBD_StdEPReq+0x9a>
 8005b34:	2b03      	cmp	r3, #3
 8005b36:	f300 8145 	bgt.w	8005dc4 <USBD_StdEPReq+0x318>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 809b 	beq.w	8005c76 <USBD_StdEPReq+0x1ca>
 8005b40:	2b01      	cmp	r3, #1
 8005b42:	d03c      	beq.n	8005bbe <USBD_StdEPReq+0x112>
 8005b44:	e13e      	b.n	8005dc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b02      	cmp	r3, #2
 8005b50:	d002      	beq.n	8005b58 <USBD_StdEPReq+0xac>
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d016      	beq.n	8005b84 <USBD_StdEPReq+0xd8>
 8005b56:	e02c      	b.n	8005bb2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00d      	beq.n	8005b7a <USBD_StdEPReq+0xce>
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	2b80      	cmp	r3, #128	; 0x80
 8005b62:	d00a      	beq.n	8005b7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b64:	7bbb      	ldrb	r3, [r7, #14]
 8005b66:	4619      	mov	r1, r3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 f9b1 	bl	8006ed0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b6e:	2180      	movs	r1, #128	; 0x80
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f001 f9ad 	bl	8006ed0 <USBD_LL_StallEP>
 8005b76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b78:	e020      	b.n	8005bbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005b7a:	6839      	ldr	r1, [r7, #0]
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fc7a 	bl	8006476 <USBD_CtlError>
              break;
 8005b82:	e01b      	b.n	8005bbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	885b      	ldrh	r3, [r3, #2]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10e      	bne.n	8005baa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b8c:	7bbb      	ldrb	r3, [r7, #14]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00b      	beq.n	8005baa <USBD_StdEPReq+0xfe>
 8005b92:	7bbb      	ldrb	r3, [r7, #14]
 8005b94:	2b80      	cmp	r3, #128	; 0x80
 8005b96:	d008      	beq.n	8005baa <USBD_StdEPReq+0xfe>
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	88db      	ldrh	r3, [r3, #6]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ba0:	7bbb      	ldrb	r3, [r7, #14]
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f001 f993 	bl	8006ed0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fd2e 	bl	800660c <USBD_CtlSendStatus>

              break;
 8005bb0:	e004      	b.n	8005bbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005bb2:	6839      	ldr	r1, [r7, #0]
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fc5e 	bl	8006476 <USBD_CtlError>
              break;
 8005bba:	bf00      	nop
          }
          break;
 8005bbc:	e107      	b.n	8005dce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b02      	cmp	r3, #2
 8005bc8:	d002      	beq.n	8005bd0 <USBD_StdEPReq+0x124>
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d016      	beq.n	8005bfc <USBD_StdEPReq+0x150>
 8005bce:	e04b      	b.n	8005c68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bd0:	7bbb      	ldrb	r3, [r7, #14]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00d      	beq.n	8005bf2 <USBD_StdEPReq+0x146>
 8005bd6:	7bbb      	ldrb	r3, [r7, #14]
 8005bd8:	2b80      	cmp	r3, #128	; 0x80
 8005bda:	d00a      	beq.n	8005bf2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bdc:	7bbb      	ldrb	r3, [r7, #14]
 8005bde:	4619      	mov	r1, r3
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f001 f975 	bl	8006ed0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be6:	2180      	movs	r1, #128	; 0x80
 8005be8:	6878      	ldr	r0, [r7, #4]
 8005bea:	f001 f971 	bl	8006ed0 <USBD_LL_StallEP>
 8005bee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bf0:	e040      	b.n	8005c74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005bf2:	6839      	ldr	r1, [r7, #0]
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fc3e 	bl	8006476 <USBD_CtlError>
              break;
 8005bfa:	e03b      	b.n	8005c74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	885b      	ldrh	r3, [r3, #2]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d136      	bne.n	8005c72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c04:	7bbb      	ldrb	r3, [r7, #14]
 8005c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d004      	beq.n	8005c18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c0e:	7bbb      	ldrb	r3, [r7, #14]
 8005c10:	4619      	mov	r1, r3
 8005c12:	6878      	ldr	r0, [r7, #4]
 8005c14:	f001 f97b 	bl	8006f0e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f000 fcf7 	bl	800660c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c1e:	7bbb      	ldrb	r3, [r7, #14]
 8005c20:	4619      	mov	r1, r3
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fde2 	bl	80057ec <USBD_CoreFindEP>
 8005c28:	4603      	mov	r3, r0
 8005c2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c2c:	7b7b      	ldrb	r3, [r7, #13]
 8005c2e:	2bff      	cmp	r3, #255	; 0xff
 8005c30:	d01f      	beq.n	8005c72 <USBD_StdEPReq+0x1c6>
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d11c      	bne.n	8005c72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005c38:	7b7a      	ldrb	r2, [r7, #13]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005c40:	7b7a      	ldrb	r2, [r7, #13]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	32ae      	adds	r2, #174	; 0xae
 8005c46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d010      	beq.n	8005c72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c50:	7b7a      	ldrb	r2, [r7, #13]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	32ae      	adds	r2, #174	; 0xae
 8005c56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	4798      	blx	r3
 8005c62:	4603      	mov	r3, r0
 8005c64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005c66:	e004      	b.n	8005c72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005c68:	6839      	ldr	r1, [r7, #0]
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 fc03 	bl	8006476 <USBD_CtlError>
              break;
 8005c70:	e000      	b.n	8005c74 <USBD_StdEPReq+0x1c8>
              break;
 8005c72:	bf00      	nop
          }
          break;
 8005c74:	e0ab      	b.n	8005dce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d002      	beq.n	8005c88 <USBD_StdEPReq+0x1dc>
 8005c82:	2b03      	cmp	r3, #3
 8005c84:	d032      	beq.n	8005cec <USBD_StdEPReq+0x240>
 8005c86:	e097      	b.n	8005db8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c88:	7bbb      	ldrb	r3, [r7, #14]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d007      	beq.n	8005c9e <USBD_StdEPReq+0x1f2>
 8005c8e:	7bbb      	ldrb	r3, [r7, #14]
 8005c90:	2b80      	cmp	r3, #128	; 0x80
 8005c92:	d004      	beq.n	8005c9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005c94:	6839      	ldr	r1, [r7, #0]
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 fbed 	bl	8006476 <USBD_CtlError>
                break;
 8005c9c:	e091      	b.n	8005dc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da0b      	bge.n	8005cbe <USBD_StdEPReq+0x212>
 8005ca6:	7bbb      	ldrb	r3, [r7, #14]
 8005ca8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cac:	4613      	mov	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	4413      	add	r3, r2
 8005cb2:	009b      	lsls	r3, r3, #2
 8005cb4:	3310      	adds	r3, #16
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4413      	add	r3, r2
 8005cba:	3304      	adds	r3, #4
 8005cbc:	e00b      	b.n	8005cd6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005cbe:	7bbb      	ldrb	r3, [r7, #14]
 8005cc0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005cd0:	687a      	ldr	r2, [r7, #4]
 8005cd2:	4413      	add	r3, r2
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	2202      	movs	r2, #2
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fc37 	bl	8006558 <USBD_CtlSendData>
              break;
 8005cea:	e06a      	b.n	8005dc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	da11      	bge.n	8005d18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cf4:	7bbb      	ldrb	r3, [r7, #14]
 8005cf6:	f003 020f 	and.w	r2, r3, #15
 8005cfa:	6879      	ldr	r1, [r7, #4]
 8005cfc:	4613      	mov	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	4413      	add	r3, r2
 8005d02:	009b      	lsls	r3, r3, #2
 8005d04:	440b      	add	r3, r1
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	881b      	ldrh	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d117      	bne.n	8005d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fbb0 	bl	8006476 <USBD_CtlError>
                  break;
 8005d16:	e054      	b.n	8005dc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d18:	7bbb      	ldrb	r3, [r7, #14]
 8005d1a:	f003 020f 	and.w	r2, r3, #15
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	009b      	lsls	r3, r3, #2
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d2e:	881b      	ldrh	r3, [r3, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d104      	bne.n	8005d3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fb9d 	bl	8006476 <USBD_CtlError>
                  break;
 8005d3c:	e041      	b.n	8005dc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	da0b      	bge.n	8005d5e <USBD_StdEPReq+0x2b2>
 8005d46:	7bbb      	ldrb	r3, [r7, #14]
 8005d48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	3310      	adds	r3, #16
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	4413      	add	r3, r2
 8005d5a:	3304      	adds	r3, #4
 8005d5c:	e00b      	b.n	8005d76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d5e:	7bbb      	ldrb	r3, [r7, #14]
 8005d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d64:	4613      	mov	r3, r2
 8005d66:	009b      	lsls	r3, r3, #2
 8005d68:	4413      	add	r3, r2
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d70:	687a      	ldr	r2, [r7, #4]
 8005d72:	4413      	add	r3, r2
 8005d74:	3304      	adds	r3, #4
 8005d76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d78:	7bbb      	ldrb	r3, [r7, #14]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d002      	beq.n	8005d84 <USBD_StdEPReq+0x2d8>
 8005d7e:	7bbb      	ldrb	r3, [r7, #14]
 8005d80:	2b80      	cmp	r3, #128	; 0x80
 8005d82:	d103      	bne.n	8005d8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
 8005d8a:	e00e      	b.n	8005daa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d8c:	7bbb      	ldrb	r3, [r7, #14]
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f001 f8db 	bl	8006f4c <USBD_LL_IsStallEP>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	e002      	b.n	8005daa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2200      	movs	r2, #0
 8005da8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	2202      	movs	r2, #2
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 fbd1 	bl	8006558 <USBD_CtlSendData>
              break;
 8005db6:	e004      	b.n	8005dc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005db8:	6839      	ldr	r1, [r7, #0]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f000 fb5b 	bl	8006476 <USBD_CtlError>
              break;
 8005dc0:	bf00      	nop
          }
          break;
 8005dc2:	e004      	b.n	8005dce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005dc4:	6839      	ldr	r1, [r7, #0]
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 fb55 	bl	8006476 <USBD_CtlError>
          break;
 8005dcc:	bf00      	nop
      }
      break;
 8005dce:	e005      	b.n	8005ddc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fb4f 	bl	8006476 <USBD_CtlError>
      break;
 8005dd8:	e000      	b.n	8005ddc <USBD_StdEPReq+0x330>
      break;
 8005dda:	bf00      	nop
  }

  return ret;
 8005ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b084      	sub	sp, #16
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005df2:	2300      	movs	r3, #0
 8005df4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	885b      	ldrh	r3, [r3, #2]
 8005e02:	0a1b      	lsrs	r3, r3, #8
 8005e04:	b29b      	uxth	r3, r3
 8005e06:	3b01      	subs	r3, #1
 8005e08:	2b06      	cmp	r3, #6
 8005e0a:	f200 8128 	bhi.w	800605e <USBD_GetDescriptor+0x276>
 8005e0e:	a201      	add	r2, pc, #4	; (adr r2, 8005e14 <USBD_GetDescriptor+0x2c>)
 8005e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e14:	08005e31 	.word	0x08005e31
 8005e18:	08005e49 	.word	0x08005e49
 8005e1c:	08005e89 	.word	0x08005e89
 8005e20:	0800605f 	.word	0x0800605f
 8005e24:	0800605f 	.word	0x0800605f
 8005e28:	08005fff 	.word	0x08005fff
 8005e2c:	0800602b 	.word	0x0800602b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	7c12      	ldrb	r2, [r2, #16]
 8005e3c:	f107 0108 	add.w	r1, r7, #8
 8005e40:	4610      	mov	r0, r2
 8005e42:	4798      	blx	r3
 8005e44:	60f8      	str	r0, [r7, #12]
      break;
 8005e46:	e112      	b.n	800606e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	7c1b      	ldrb	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10d      	bne.n	8005e6c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e58:	f107 0208 	add.w	r2, r7, #8
 8005e5c:	4610      	mov	r0, r2
 8005e5e:	4798      	blx	r3
 8005e60:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	3301      	adds	r3, #1
 8005e66:	2202      	movs	r2, #2
 8005e68:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e6a:	e100      	b.n	800606e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e74:	f107 0208 	add.w	r2, r7, #8
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4798      	blx	r3
 8005e7c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	2202      	movs	r2, #2
 8005e84:	701a      	strb	r2, [r3, #0]
      break;
 8005e86:	e0f2      	b.n	800606e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	885b      	ldrh	r3, [r3, #2]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b05      	cmp	r3, #5
 8005e90:	f200 80ac 	bhi.w	8005fec <USBD_GetDescriptor+0x204>
 8005e94:	a201      	add	r2, pc, #4	; (adr r2, 8005e9c <USBD_GetDescriptor+0xb4>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005eb5 	.word	0x08005eb5
 8005ea0:	08005ee9 	.word	0x08005ee9
 8005ea4:	08005f1d 	.word	0x08005f1d
 8005ea8:	08005f51 	.word	0x08005f51
 8005eac:	08005f85 	.word	0x08005f85
 8005eb0:	08005fb9 	.word	0x08005fb9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d00b      	beq.n	8005ed8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	7c12      	ldrb	r2, [r2, #16]
 8005ecc:	f107 0108 	add.w	r1, r7, #8
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	4798      	blx	r3
 8005ed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ed6:	e091      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ed8:	6839      	ldr	r1, [r7, #0]
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 facb 	bl	8006476 <USBD_CtlError>
            err++;
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	3301      	adds	r3, #1
 8005ee4:	72fb      	strb	r3, [r7, #11]
          break;
 8005ee6:	e089      	b.n	8005ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eee:	689b      	ldr	r3, [r3, #8]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00b      	beq.n	8005f0c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	687a      	ldr	r2, [r7, #4]
 8005efe:	7c12      	ldrb	r2, [r2, #16]
 8005f00:	f107 0108 	add.w	r1, r7, #8
 8005f04:	4610      	mov	r0, r2
 8005f06:	4798      	blx	r3
 8005f08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f0a:	e077      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f0c:	6839      	ldr	r1, [r7, #0]
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 fab1 	bl	8006476 <USBD_CtlError>
            err++;
 8005f14:	7afb      	ldrb	r3, [r7, #11]
 8005f16:	3301      	adds	r3, #1
 8005f18:	72fb      	strb	r3, [r7, #11]
          break;
 8005f1a:	e06f      	b.n	8005ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00b      	beq.n	8005f40 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	687a      	ldr	r2, [r7, #4]
 8005f32:	7c12      	ldrb	r2, [r2, #16]
 8005f34:	f107 0108 	add.w	r1, r7, #8
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4798      	blx	r3
 8005f3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f3e:	e05d      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f40:	6839      	ldr	r1, [r7, #0]
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fa97 	bl	8006476 <USBD_CtlError>
            err++;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	3301      	adds	r3, #1
 8005f4c:	72fb      	strb	r3, [r7, #11]
          break;
 8005f4e:	e055      	b.n	8005ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f62:	691b      	ldr	r3, [r3, #16]
 8005f64:	687a      	ldr	r2, [r7, #4]
 8005f66:	7c12      	ldrb	r2, [r2, #16]
 8005f68:	f107 0108 	add.w	r1, r7, #8
 8005f6c:	4610      	mov	r0, r2
 8005f6e:	4798      	blx	r3
 8005f70:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f72:	e043      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa7d 	bl	8006476 <USBD_CtlError>
            err++;
 8005f7c:	7afb      	ldrb	r3, [r7, #11]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	72fb      	strb	r3, [r7, #11]
          break;
 8005f82:	e03b      	b.n	8005ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f96:	695b      	ldr	r3, [r3, #20]
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	7c12      	ldrb	r2, [r2, #16]
 8005f9c:	f107 0108 	add.w	r1, r7, #8
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	4798      	blx	r3
 8005fa4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fa6:	e029      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fa8:	6839      	ldr	r1, [r7, #0]
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fa63 	bl	8006476 <USBD_CtlError>
            err++;
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	72fb      	strb	r3, [r7, #11]
          break;
 8005fb6:	e021      	b.n	8005ffc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fbe:	699b      	ldr	r3, [r3, #24]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00b      	beq.n	8005fdc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fca:	699b      	ldr	r3, [r3, #24]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	7c12      	ldrb	r2, [r2, #16]
 8005fd0:	f107 0108 	add.w	r1, r7, #8
 8005fd4:	4610      	mov	r0, r2
 8005fd6:	4798      	blx	r3
 8005fd8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fda:	e00f      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fdc:	6839      	ldr	r1, [r7, #0]
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f000 fa49 	bl	8006476 <USBD_CtlError>
            err++;
 8005fe4:	7afb      	ldrb	r3, [r7, #11]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	72fb      	strb	r3, [r7, #11]
          break;
 8005fea:	e007      	b.n	8005ffc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005fec:	6839      	ldr	r1, [r7, #0]
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 fa41 	bl	8006476 <USBD_CtlError>
          err++;
 8005ff4:	7afb      	ldrb	r3, [r7, #11]
 8005ff6:	3301      	adds	r3, #1
 8005ff8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8005ffa:	bf00      	nop
      }
      break;
 8005ffc:	e037      	b.n	800606e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	7c1b      	ldrb	r3, [r3, #16]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d109      	bne.n	800601a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800600c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800600e:	f107 0208 	add.w	r2, r7, #8
 8006012:	4610      	mov	r0, r2
 8006014:	4798      	blx	r3
 8006016:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006018:	e029      	b.n	800606e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fa2a 	bl	8006476 <USBD_CtlError>
        err++;
 8006022:	7afb      	ldrb	r3, [r7, #11]
 8006024:	3301      	adds	r3, #1
 8006026:	72fb      	strb	r3, [r7, #11]
      break;
 8006028:	e021      	b.n	800606e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7c1b      	ldrb	r3, [r3, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d10d      	bne.n	800604e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	f107 0208 	add.w	r2, r7, #8
 800603e:	4610      	mov	r0, r2
 8006040:	4798      	blx	r3
 8006042:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	3301      	adds	r3, #1
 8006048:	2207      	movs	r2, #7
 800604a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800604c:	e00f      	b.n	800606e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800604e:	6839      	ldr	r1, [r7, #0]
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 fa10 	bl	8006476 <USBD_CtlError>
        err++;
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	3301      	adds	r3, #1
 800605a:	72fb      	strb	r3, [r7, #11]
      break;
 800605c:	e007      	b.n	800606e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800605e:	6839      	ldr	r1, [r7, #0]
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 fa08 	bl	8006476 <USBD_CtlError>
      err++;
 8006066:	7afb      	ldrb	r3, [r7, #11]
 8006068:	3301      	adds	r3, #1
 800606a:	72fb      	strb	r3, [r7, #11]
      break;
 800606c:	bf00      	nop
  }

  if (err != 0U)
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d11e      	bne.n	80060b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	88db      	ldrh	r3, [r3, #6]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d016      	beq.n	80060aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800607c:	893b      	ldrh	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d00e      	beq.n	80060a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	88da      	ldrh	r2, [r3, #6]
 8006086:	893b      	ldrh	r3, [r7, #8]
 8006088:	4293      	cmp	r3, r2
 800608a:	bf28      	it	cs
 800608c:	4613      	movcs	r3, r2
 800608e:	b29b      	uxth	r3, r3
 8006090:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006092:	893b      	ldrh	r3, [r7, #8]
 8006094:	461a      	mov	r2, r3
 8006096:	68f9      	ldr	r1, [r7, #12]
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fa5d 	bl	8006558 <USBD_CtlSendData>
 800609e:	e009      	b.n	80060b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060a0:	6839      	ldr	r1, [r7, #0]
 80060a2:	6878      	ldr	r0, [r7, #4]
 80060a4:	f000 f9e7 	bl	8006476 <USBD_CtlError>
 80060a8:	e004      	b.n	80060b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 faae 	bl	800660c <USBD_CtlSendStatus>
 80060b0:	e000      	b.n	80060b4 <USBD_GetDescriptor+0x2cc>
    return;
 80060b2:	bf00      	nop
  }
}
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop

080060bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b084      	sub	sp, #16
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	889b      	ldrh	r3, [r3, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d131      	bne.n	8006132 <USBD_SetAddress+0x76>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	88db      	ldrh	r3, [r3, #6]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d12d      	bne.n	8006132 <USBD_SetAddress+0x76>
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	885b      	ldrh	r3, [r3, #2]
 80060da:	2b7f      	cmp	r3, #127	; 0x7f
 80060dc:	d829      	bhi.n	8006132 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	885b      	ldrh	r3, [r3, #2]
 80060e2:	b2db      	uxtb	r3, r3
 80060e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80060e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060f0:	b2db      	uxtb	r3, r3
 80060f2:	2b03      	cmp	r3, #3
 80060f4:	d104      	bne.n	8006100 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80060f6:	6839      	ldr	r1, [r7, #0]
 80060f8:	6878      	ldr	r0, [r7, #4]
 80060fa:	f000 f9bc 	bl	8006476 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fe:	e01d      	b.n	800613c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7bfa      	ldrb	r2, [r7, #15]
 8006104:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 ff49 	bl	8006fa4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa7a 	bl	800660c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006118:	7bfb      	ldrb	r3, [r7, #15]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d004      	beq.n	8006128 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2202      	movs	r2, #2
 8006122:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006126:	e009      	b.n	800613c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006130:	e004      	b.n	800613c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f99e 	bl	8006476 <USBD_CtlError>
  }
}
 800613a:	bf00      	nop
 800613c:	bf00      	nop
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b084      	sub	sp, #16
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
 800614c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	885b      	ldrh	r3, [r3, #2]
 8006156:	b2da      	uxtb	r2, r3
 8006158:	4b4e      	ldr	r3, [pc, #312]	; (8006294 <USBD_SetConfig+0x150>)
 800615a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800615c:	4b4d      	ldr	r3, [pc, #308]	; (8006294 <USBD_SetConfig+0x150>)
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	2b01      	cmp	r3, #1
 8006162:	d905      	bls.n	8006170 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006164:	6839      	ldr	r1, [r7, #0]
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f985 	bl	8006476 <USBD_CtlError>
    return USBD_FAIL;
 800616c:	2303      	movs	r3, #3
 800616e:	e08c      	b.n	800628a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006176:	b2db      	uxtb	r3, r3
 8006178:	2b02      	cmp	r3, #2
 800617a:	d002      	beq.n	8006182 <USBD_SetConfig+0x3e>
 800617c:	2b03      	cmp	r3, #3
 800617e:	d029      	beq.n	80061d4 <USBD_SetConfig+0x90>
 8006180:	e075      	b.n	800626e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006182:	4b44      	ldr	r3, [pc, #272]	; (8006294 <USBD_SetConfig+0x150>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d020      	beq.n	80061cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800618a:	4b42      	ldr	r3, [pc, #264]	; (8006294 <USBD_SetConfig+0x150>)
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	461a      	mov	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006194:	4b3f      	ldr	r3, [pc, #252]	; (8006294 <USBD_SetConfig+0x150>)
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	4619      	mov	r1, r3
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f7fe ffe7 	bl	800516e <USBD_SetClassConfig>
 80061a0:	4603      	mov	r3, r0
 80061a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061a4:	7bfb      	ldrb	r3, [r7, #15]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d008      	beq.n	80061bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80061aa:	6839      	ldr	r1, [r7, #0]
 80061ac:	6878      	ldr	r0, [r7, #4]
 80061ae:	f000 f962 	bl	8006476 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2202      	movs	r2, #2
 80061b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061ba:	e065      	b.n	8006288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f000 fa25 	bl	800660c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2203      	movs	r2, #3
 80061c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061ca:	e05d      	b.n	8006288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa1d 	bl	800660c <USBD_CtlSendStatus>
      break;
 80061d2:	e059      	b.n	8006288 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061d4:	4b2f      	ldr	r3, [pc, #188]	; (8006294 <USBD_SetConfig+0x150>)
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d112      	bne.n	8006202 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061e4:	4b2b      	ldr	r3, [pc, #172]	; (8006294 <USBD_SetConfig+0x150>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	461a      	mov	r2, r3
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061ee:	4b29      	ldr	r3, [pc, #164]	; (8006294 <USBD_SetConfig+0x150>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f7fe ffd6 	bl	80051a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fa06 	bl	800660c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006200:	e042      	b.n	8006288 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006202:	4b24      	ldr	r3, [pc, #144]	; (8006294 <USBD_SetConfig+0x150>)
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	461a      	mov	r2, r3
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	685b      	ldr	r3, [r3, #4]
 800620c:	429a      	cmp	r2, r3
 800620e:	d02a      	beq.n	8006266 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	b2db      	uxtb	r3, r3
 8006216:	4619      	mov	r1, r3
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f7fe ffc4 	bl	80051a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800621e:	4b1d      	ldr	r3, [pc, #116]	; (8006294 <USBD_SetConfig+0x150>)
 8006220:	781b      	ldrb	r3, [r3, #0]
 8006222:	461a      	mov	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006228:	4b1a      	ldr	r3, [pc, #104]	; (8006294 <USBD_SetConfig+0x150>)
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fe ff9d 	bl	800516e <USBD_SetClassConfig>
 8006234:	4603      	mov	r3, r0
 8006236:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006238:	7bfb      	ldrb	r3, [r7, #15]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00f      	beq.n	800625e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800623e:	6839      	ldr	r1, [r7, #0]
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f918 	bl	8006476 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	4619      	mov	r1, r3
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe ffa9 	bl	80051a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2202      	movs	r2, #2
 8006258:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800625c:	e014      	b.n	8006288 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 f9d4 	bl	800660c <USBD_CtlSendStatus>
      break;
 8006264:	e010      	b.n	8006288 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9d0 	bl	800660c <USBD_CtlSendStatus>
      break;
 800626c:	e00c      	b.n	8006288 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800626e:	6839      	ldr	r1, [r7, #0]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f900 	bl	8006476 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006276:	4b07      	ldr	r3, [pc, #28]	; (8006294 <USBD_SetConfig+0x150>)
 8006278:	781b      	ldrb	r3, [r3, #0]
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7fe ff92 	bl	80051a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006282:	2303      	movs	r3, #3
 8006284:	73fb      	strb	r3, [r7, #15]
      break;
 8006286:	bf00      	nop
  }

  return ret;
 8006288:	7bfb      	ldrb	r3, [r7, #15]
}
 800628a:	4618      	mov	r0, r3
 800628c:	3710      	adds	r7, #16
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	20000124 	.word	0x20000124

08006298 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b082      	sub	sp, #8
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	88db      	ldrh	r3, [r3, #6]
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d004      	beq.n	80062b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f8e2 	bl	8006476 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062b2:	e023      	b.n	80062fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b02      	cmp	r3, #2
 80062be:	dc02      	bgt.n	80062c6 <USBD_GetConfig+0x2e>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	dc03      	bgt.n	80062cc <USBD_GetConfig+0x34>
 80062c4:	e015      	b.n	80062f2 <USBD_GetConfig+0x5a>
 80062c6:	2b03      	cmp	r3, #3
 80062c8:	d00b      	beq.n	80062e2 <USBD_GetConfig+0x4a>
 80062ca:	e012      	b.n	80062f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3308      	adds	r3, #8
 80062d6:	2201      	movs	r2, #1
 80062d8:	4619      	mov	r1, r3
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 f93c 	bl	8006558 <USBD_CtlSendData>
        break;
 80062e0:	e00c      	b.n	80062fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3304      	adds	r3, #4
 80062e6:	2201      	movs	r2, #1
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f934 	bl	8006558 <USBD_CtlSendData>
        break;
 80062f0:	e004      	b.n	80062fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f000 f8be 	bl	8006476 <USBD_CtlError>
        break;
 80062fa:	bf00      	nop
}
 80062fc:	bf00      	nop
 80062fe:	3708      	adds	r7, #8
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}

08006304 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
 800630c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006314:	b2db      	uxtb	r3, r3
 8006316:	3b01      	subs	r3, #1
 8006318:	2b02      	cmp	r3, #2
 800631a:	d81e      	bhi.n	800635a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	88db      	ldrh	r3, [r3, #6]
 8006320:	2b02      	cmp	r3, #2
 8006322:	d004      	beq.n	800632e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f8a5 	bl	8006476 <USBD_CtlError>
        break;
 800632c:	e01a      	b.n	8006364 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2201      	movs	r2, #1
 8006332:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800633a:	2b00      	cmp	r3, #0
 800633c:	d005      	beq.n	800634a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68db      	ldr	r3, [r3, #12]
 8006342:	f043 0202 	orr.w	r2, r3, #2
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	330c      	adds	r3, #12
 800634e:	2202      	movs	r2, #2
 8006350:	4619      	mov	r1, r3
 8006352:	6878      	ldr	r0, [r7, #4]
 8006354:	f000 f900 	bl	8006558 <USBD_CtlSendData>
      break;
 8006358:	e004      	b.n	8006364 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 f88a 	bl	8006476 <USBD_CtlError>
      break;
 8006362:	bf00      	nop
  }
}
 8006364:	bf00      	nop
 8006366:	3708      	adds	r7, #8
 8006368:	46bd      	mov	sp, r7
 800636a:	bd80      	pop	{r7, pc}

0800636c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	885b      	ldrh	r3, [r3, #2]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d107      	bne.n	800638e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f940 	bl	800660c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800638c:	e013      	b.n	80063b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	885b      	ldrh	r3, [r3, #2]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d10b      	bne.n	80063ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	889b      	ldrh	r3, [r3, #4]
 800639a:	0a1b      	lsrs	r3, r3, #8
 800639c:	b29b      	uxth	r3, r3
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f930 	bl	800660c <USBD_CtlSendStatus>
}
 80063ac:	e003      	b.n	80063b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80063ae:	6839      	ldr	r1, [r7, #0]
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f000 f860 	bl	8006476 <USBD_CtlError>
}
 80063b6:	bf00      	nop
 80063b8:	3708      	adds	r7, #8
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}

080063be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063be:	b580      	push	{r7, lr}
 80063c0:	b082      	sub	sp, #8
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	6078      	str	r0, [r7, #4]
 80063c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ce:	b2db      	uxtb	r3, r3
 80063d0:	3b01      	subs	r3, #1
 80063d2:	2b02      	cmp	r3, #2
 80063d4:	d80b      	bhi.n	80063ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	885b      	ldrh	r3, [r3, #2]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10c      	bne.n	80063f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f910 	bl	800660c <USBD_CtlSendStatus>
      }
      break;
 80063ec:	e004      	b.n	80063f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063ee:	6839      	ldr	r1, [r7, #0]
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 f840 	bl	8006476 <USBD_CtlError>
      break;
 80063f6:	e000      	b.n	80063fa <USBD_ClrFeature+0x3c>
      break;
 80063f8:	bf00      	nop
  }
}
 80063fa:	bf00      	nop
 80063fc:	3708      	adds	r7, #8
 80063fe:	46bd      	mov	sp, r7
 8006400:	bd80      	pop	{r7, pc}

08006402 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	781a      	ldrb	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	3301      	adds	r3, #1
 800641c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	781a      	ldrb	r2, [r3, #0]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fa41 	bl	80058b4 <SWAPBYTE>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fa34 	bl	80058b4 <SWAPBYTE>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	3301      	adds	r3, #1
 8006458:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f7ff fa27 	bl	80058b4 <SWAPBYTE>
 8006466:	4603      	mov	r3, r0
 8006468:	461a      	mov	r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	80da      	strh	r2, [r3, #6]
}
 800646e:	bf00      	nop
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b082      	sub	sp, #8
 800647a:	af00      	add	r7, sp, #0
 800647c:	6078      	str	r0, [r7, #4]
 800647e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	f000 fd24 	bl	8006ed0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006488:	2100      	movs	r1, #0
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fd20 	bl	8006ed0 <USBD_LL_StallEP>
}
 8006490:	bf00      	nop
 8006492:	3708      	adds	r7, #8
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064a4:	2300      	movs	r3, #0
 80064a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d036      	beq.n	800651c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064b2:	6938      	ldr	r0, [r7, #16]
 80064b4:	f000 f836 	bl	8006524 <USBD_GetLen>
 80064b8:	4603      	mov	r3, r0
 80064ba:	3301      	adds	r3, #1
 80064bc:	b29b      	uxth	r3, r3
 80064be:	005b      	lsls	r3, r3, #1
 80064c0:	b29a      	uxth	r2, r3
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064c6:	7dfb      	ldrb	r3, [r7, #23]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	4413      	add	r3, r2
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	7812      	ldrb	r2, [r2, #0]
 80064d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80064d2:	7dfb      	ldrb	r3, [r7, #23]
 80064d4:	3301      	adds	r3, #1
 80064d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	68ba      	ldr	r2, [r7, #8]
 80064dc:	4413      	add	r3, r2
 80064de:	2203      	movs	r2, #3
 80064e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	3301      	adds	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064e8:	e013      	b.n	8006512 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064ea:	7dfb      	ldrb	r3, [r7, #23]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	4413      	add	r3, r2
 80064f0:	693a      	ldr	r2, [r7, #16]
 80064f2:	7812      	ldrb	r2, [r2, #0]
 80064f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	3301      	adds	r3, #1
 80064fa:	613b      	str	r3, [r7, #16]
    idx++;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	3301      	adds	r3, #1
 8006500:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006502:	7dfb      	ldrb	r3, [r7, #23]
 8006504:	68ba      	ldr	r2, [r7, #8]
 8006506:	4413      	add	r3, r2
 8006508:	2200      	movs	r2, #0
 800650a:	701a      	strb	r2, [r3, #0]
    idx++;
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	3301      	adds	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d1e7      	bne.n	80064ea <USBD_GetString+0x52>
 800651a:	e000      	b.n	800651e <USBD_GetString+0x86>
    return;
 800651c:	bf00      	nop
  }
}
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}

08006524 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006524:	b480      	push	{r7}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800652c:	2300      	movs	r3, #0
 800652e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006534:	e005      	b.n	8006542 <USBD_GetLen+0x1e>
  {
    len++;
 8006536:	7bfb      	ldrb	r3, [r7, #15]
 8006538:	3301      	adds	r3, #1
 800653a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	3301      	adds	r3, #1
 8006540:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d1f5      	bne.n	8006536 <USBD_GetLen+0x12>
  }

  return len;
 800654a:	7bfb      	ldrb	r3, [r7, #15]
}
 800654c:	4618      	mov	r0, r3
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b084      	sub	sp, #16
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2202      	movs	r2, #2
 8006568:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	687a      	ldr	r2, [r7, #4]
 8006576:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	2100      	movs	r1, #0
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fd2f 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3710      	adds	r7, #16
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}

0800658e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800658e:	b580      	push	{r7, lr}
 8006590:	b084      	sub	sp, #16
 8006592:	af00      	add	r7, sp, #0
 8006594:	60f8      	str	r0, [r7, #12]
 8006596:	60b9      	str	r1, [r7, #8]
 8006598:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	68ba      	ldr	r2, [r7, #8]
 800659e:	2100      	movs	r1, #0
 80065a0:	68f8      	ldr	r0, [r7, #12]
 80065a2:	f000 fd1e 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3710      	adds	r7, #16
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	2203      	movs	r2, #3
 80065c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	2100      	movs	r1, #0
 80065da:	68f8      	ldr	r0, [r7, #12]
 80065dc:	f000 fd22 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	60b9      	str	r1, [r7, #8]
 80065f4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	2100      	movs	r1, #0
 80065fc:	68f8      	ldr	r0, [r7, #12]
 80065fe:	f000 fd11 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2204      	movs	r2, #4
 8006618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800661c:	2300      	movs	r3, #0
 800661e:	2200      	movs	r2, #0
 8006620:	2100      	movs	r1, #0
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 fcdd 	bl	8006fe2 <USBD_LL_Transmit>

  return USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006632:	b580      	push	{r7, lr}
 8006634:	b082      	sub	sp, #8
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2205      	movs	r2, #5
 800663e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006642:	2300      	movs	r3, #0
 8006644:	2200      	movs	r2, #0
 8006646:	2100      	movs	r1, #0
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 fceb 	bl	8007024 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3708      	adds	r7, #8
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800665c:	2200      	movs	r2, #0
 800665e:	4912      	ldr	r1, [pc, #72]	; (80066a8 <MX_USB_DEVICE_Init+0x50>)
 8006660:	4812      	ldr	r0, [pc, #72]	; (80066ac <MX_USB_DEVICE_Init+0x54>)
 8006662:	f7fe fd07 	bl	8005074 <USBD_Init>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d001      	beq.n	8006670 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800666c:	f7fa f910 	bl	8000890 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006670:	490f      	ldr	r1, [pc, #60]	; (80066b0 <MX_USB_DEVICE_Init+0x58>)
 8006672:	480e      	ldr	r0, [pc, #56]	; (80066ac <MX_USB_DEVICE_Init+0x54>)
 8006674:	f7fe fd2e 	bl	80050d4 <USBD_RegisterClass>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d001      	beq.n	8006682 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800667e:	f7fa f907 	bl	8000890 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006682:	490c      	ldr	r1, [pc, #48]	; (80066b4 <MX_USB_DEVICE_Init+0x5c>)
 8006684:	4809      	ldr	r0, [pc, #36]	; (80066ac <MX_USB_DEVICE_Init+0x54>)
 8006686:	f7fe fc1f 	bl	8004ec8 <USBD_CDC_RegisterInterface>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006690:	f7fa f8fe 	bl	8000890 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006694:	4805      	ldr	r0, [pc, #20]	; (80066ac <MX_USB_DEVICE_Init+0x54>)
 8006696:	f7fe fd53 	bl	8005140 <USBD_Start>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d001      	beq.n	80066a4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80066a0:	f7fa f8f6 	bl	8000890 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066a4:	bf00      	nop
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	200000ac 	.word	0x200000ac
 80066ac:	20000128 	.word	0x20000128
 80066b0:	20000018 	.word	0x20000018
 80066b4:	20000098 	.word	0x20000098

080066b8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066bc:	2200      	movs	r2, #0
 80066be:	4905      	ldr	r1, [pc, #20]	; (80066d4 <CDC_Init_FS+0x1c>)
 80066c0:	4805      	ldr	r0, [pc, #20]	; (80066d8 <CDC_Init_FS+0x20>)
 80066c2:	f7fe fc1b 	bl	8004efc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066c6:	4905      	ldr	r1, [pc, #20]	; (80066dc <CDC_Init_FS+0x24>)
 80066c8:	4803      	ldr	r0, [pc, #12]	; (80066d8 <CDC_Init_FS+0x20>)
 80066ca:	f7fe fc39 	bl	8004f40 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066ce:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	bd80      	pop	{r7, pc}
 80066d4:	20000c04 	.word	0x20000c04
 80066d8:	20000128 	.word	0x20000128
 80066dc:	20000404 	.word	0x20000404

080066e0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066e4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	4603      	mov	r3, r0
 80066f8:	6039      	str	r1, [r7, #0]
 80066fa:	71fb      	strb	r3, [r7, #7]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006700:	79fb      	ldrb	r3, [r7, #7]
 8006702:	2b23      	cmp	r3, #35	; 0x23
 8006704:	d85c      	bhi.n	80067c0 <CDC_Control_FS+0xd0>
 8006706:	a201      	add	r2, pc, #4	; (adr r2, 800670c <CDC_Control_FS+0x1c>)
 8006708:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800670c:	080067c1 	.word	0x080067c1
 8006710:	080067c1 	.word	0x080067c1
 8006714:	080067c1 	.word	0x080067c1
 8006718:	080067c1 	.word	0x080067c1
 800671c:	080067c1 	.word	0x080067c1
 8006720:	080067c1 	.word	0x080067c1
 8006724:	080067c1 	.word	0x080067c1
 8006728:	080067c1 	.word	0x080067c1
 800672c:	080067c1 	.word	0x080067c1
 8006730:	080067c1 	.word	0x080067c1
 8006734:	080067c1 	.word	0x080067c1
 8006738:	080067c1 	.word	0x080067c1
 800673c:	080067c1 	.word	0x080067c1
 8006740:	080067c1 	.word	0x080067c1
 8006744:	080067c1 	.word	0x080067c1
 8006748:	080067c1 	.word	0x080067c1
 800674c:	080067c1 	.word	0x080067c1
 8006750:	080067c1 	.word	0x080067c1
 8006754:	080067c1 	.word	0x080067c1
 8006758:	080067c1 	.word	0x080067c1
 800675c:	080067c1 	.word	0x080067c1
 8006760:	080067c1 	.word	0x080067c1
 8006764:	080067c1 	.word	0x080067c1
 8006768:	080067c1 	.word	0x080067c1
 800676c:	080067c1 	.word	0x080067c1
 8006770:	080067c1 	.word	0x080067c1
 8006774:	080067c1 	.word	0x080067c1
 8006778:	080067c1 	.word	0x080067c1
 800677c:	080067c1 	.word	0x080067c1
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
 8006788:	080067c1 	.word	0x080067c1
 800678c:	0800679d 	.word	0x0800679d
 8006790:	080067af 	.word	0x080067af
 8006794:	080067c1 	.word	0x080067c1
 8006798:	080067c1 	.word	0x080067c1
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(buf, pbuf, 7);
 800679c:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <CDC_Control_FS+0xe0>)
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	6810      	ldr	r0, [r2, #0]
 80067a2:	6018      	str	r0, [r3, #0]
 80067a4:	8891      	ldrh	r1, [r2, #4]
 80067a6:	7992      	ldrb	r2, [r2, #6]
 80067a8:	8099      	strh	r1, [r3, #4]
 80067aa:	719a      	strb	r2, [r3, #6]
    break;
 80067ac:	e009      	b.n	80067c2 <CDC_Control_FS+0xd2>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, buf, 7);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	4a07      	ldr	r2, [pc, #28]	; (80067d0 <CDC_Control_FS+0xe0>)
 80067b2:	6810      	ldr	r0, [r2, #0]
 80067b4:	6018      	str	r0, [r3, #0]
 80067b6:	8891      	ldrh	r1, [r2, #4]
 80067b8:	7992      	ldrb	r2, [r2, #6]
 80067ba:	8099      	strh	r1, [r3, #4]
 80067bc:	719a      	strb	r2, [r3, #6]
    break;
 80067be:	e000      	b.n	80067c2 <CDC_Control_FS+0xd2>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067c0:	bf00      	nop
  }

  return (USBD_OK);
 80067c2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ce:	4770      	bx	lr
 80067d0:	20001408 	.word	0x20001408

080067d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */

  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067de:	4808      	ldr	r0, [pc, #32]	; (8006800 <CDC_Receive_FS+0x2c>)
 80067e0:	f7fe fc12 	bl	8005008 <USBD_CDC_ReceivePacket>
  is_data_available = 1;
 80067e4:	4b07      	ldr	r3, [pc, #28]	; (8006804 <CDC_Receive_FS+0x30>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	701a      	strb	r2, [r3, #0]
  data_size = (uint16_t)(*Len);
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <CDC_Receive_FS+0x34>)
 80067f2:	801a      	strh	r2, [r3, #0]

  return (USBD_OK);
 80067f4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3708      	adds	r7, #8
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000128 	.word	0x20000128
 8006804:	20001404 	.word	0x20001404
 8006808:	20001406 	.word	0x20001406

0800680c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
 8006814:	460b      	mov	r3, r1
 8006816:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006818:	2300      	movs	r3, #0
 800681a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800681c:	4b0d      	ldr	r3, [pc, #52]	; (8006854 <CDC_Transmit_FS+0x48>)
 800681e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006822:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800682a:	2b00      	cmp	r3, #0
 800682c:	d001      	beq.n	8006832 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800682e:	2301      	movs	r3, #1
 8006830:	e00b      	b.n	800684a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006832:	887b      	ldrh	r3, [r7, #2]
 8006834:	461a      	mov	r2, r3
 8006836:	6879      	ldr	r1, [r7, #4]
 8006838:	4806      	ldr	r0, [pc, #24]	; (8006854 <CDC_Transmit_FS+0x48>)
 800683a:	f7fe fb5f 	bl	8004efc <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800683e:	4805      	ldr	r0, [pc, #20]	; (8006854 <CDC_Transmit_FS+0x48>)
 8006840:	f7fe fb9c 	bl	8004f7c <USBD_CDC_TransmitPacket>
 8006844:	4603      	mov	r3, r0
 8006846:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006848:	7bfb      	ldrb	r3, [r7, #15]
}
 800684a:	4618      	mov	r0, r3
 800684c:	3710      	adds	r7, #16
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000128 	.word	0x20000128

08006858 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006858:	b480      	push	{r7}
 800685a:	b087      	sub	sp, #28
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	4613      	mov	r3, r2
 8006864:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800686a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800686e:	4618      	mov	r0, r3
 8006870:	371c      	adds	r7, #28
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr
	...

0800687c <CDC_Get_Received_Data_FS>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */

uint16_t CDC_Get_Received_Data_FS(uint8_t *rcv_data, uint32_t timeout)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	uint32_t prev_time = HAL_GetTick();
 8006886:	f7fa f929 	bl	8000adc <HAL_GetTick>
 800688a:	60f8      	str	r0, [r7, #12]

	while((is_data_available != 1) && ((HAL_GetTick() - prev_time) < timeout))
 800688c:	bf00      	nop
 800688e:	4b11      	ldr	r3, [pc, #68]	; (80068d4 <CDC_Get_Received_Data_FS+0x58>)
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d007      	beq.n	80068a6 <CDC_Get_Received_Data_FS+0x2a>
 8006896:	f7fa f921 	bl	8000adc <HAL_GetTick>
 800689a:	4602      	mov	r2, r0
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	683a      	ldr	r2, [r7, #0]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d8f3      	bhi.n	800688e <CDC_Get_Received_Data_FS+0x12>
	{}

	if(is_data_available == 1)
 80068a6:	4b0b      	ldr	r3, [pc, #44]	; (80068d4 <CDC_Get_Received_Data_FS+0x58>)
 80068a8:	781b      	ldrb	r3, [r3, #0]
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d10c      	bne.n	80068c8 <CDC_Get_Received_Data_FS+0x4c>
	{
		is_data_available = 0;
 80068ae:	4b09      	ldr	r3, [pc, #36]	; (80068d4 <CDC_Get_Received_Data_FS+0x58>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	701a      	strb	r2, [r3, #0]
		memcpy(rcv_data, UserRxBufferFS, data_size);
 80068b4:	4b08      	ldr	r3, [pc, #32]	; (80068d8 <CDC_Get_Received_Data_FS+0x5c>)
 80068b6:	881b      	ldrh	r3, [r3, #0]
 80068b8:	461a      	mov	r2, r3
 80068ba:	4908      	ldr	r1, [pc, #32]	; (80068dc <CDC_Get_Received_Data_FS+0x60>)
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	f000 fc4d 	bl	800715c <memcpy>
		return data_size;
 80068c2:	4b05      	ldr	r3, [pc, #20]	; (80068d8 <CDC_Get_Received_Data_FS+0x5c>)
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	e000      	b.n	80068ca <CDC_Get_Received_Data_FS+0x4e>
	}

	return 0;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3710      	adds	r7, #16
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20001404 	.word	0x20001404
 80068d8:	20001406 	.word	0x20001406
 80068dc:	20000404 	.word	0x20000404

080068e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2212      	movs	r2, #18
 80068f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <USBD_FS_DeviceDescriptor+0x20>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	200000c8 	.word	0x200000c8

08006904 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	6039      	str	r1, [r7, #0]
 800690e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	2204      	movs	r2, #4
 8006914:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006916:	4b03      	ldr	r3, [pc, #12]	; (8006924 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006918:	4618      	mov	r0, r3
 800691a:	370c      	adds	r7, #12
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr
 8006924:	200000dc 	.word	0x200000dc

08006928 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b082      	sub	sp, #8
 800692c:	af00      	add	r7, sp, #0
 800692e:	4603      	mov	r3, r0
 8006930:	6039      	str	r1, [r7, #0]
 8006932:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006934:	79fb      	ldrb	r3, [r7, #7]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d105      	bne.n	8006946 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4907      	ldr	r1, [pc, #28]	; (800695c <USBD_FS_ProductStrDescriptor+0x34>)
 800693e:	4808      	ldr	r0, [pc, #32]	; (8006960 <USBD_FS_ProductStrDescriptor+0x38>)
 8006940:	f7ff fdaa 	bl	8006498 <USBD_GetString>
 8006944:	e004      	b.n	8006950 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006946:	683a      	ldr	r2, [r7, #0]
 8006948:	4904      	ldr	r1, [pc, #16]	; (800695c <USBD_FS_ProductStrDescriptor+0x34>)
 800694a:	4805      	ldr	r0, [pc, #20]	; (8006960 <USBD_FS_ProductStrDescriptor+0x38>)
 800694c:	f7ff fda4 	bl	8006498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006950:	4b02      	ldr	r3, [pc, #8]	; (800695c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006952:	4618      	mov	r0, r3
 8006954:	3708      	adds	r7, #8
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	20001410 	.word	0x20001410
 8006960:	080071a0 	.word	0x080071a0

08006964 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	6039      	str	r1, [r7, #0]
 800696e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006970:	683a      	ldr	r2, [r7, #0]
 8006972:	4904      	ldr	r1, [pc, #16]	; (8006984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006974:	4804      	ldr	r0, [pc, #16]	; (8006988 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006976:	f7ff fd8f 	bl	8006498 <USBD_GetString>
  return USBD_StrDesc;
 800697a:	4b02      	ldr	r3, [pc, #8]	; (8006984 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	3708      	adds	r7, #8
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}
 8006984:	20001410 	.word	0x20001410
 8006988:	080071b8 	.word	0x080071b8

0800698c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	221a      	movs	r2, #26
 800699c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800699e:	f000 f843 	bl	8006a28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069a2:	4b02      	ldr	r3, [pc, #8]	; (80069ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	200000e0 	.word	0x200000e0

080069b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80069bc:	79fb      	ldrb	r3, [r7, #7]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d105      	bne.n	80069ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069c2:	683a      	ldr	r2, [r7, #0]
 80069c4:	4907      	ldr	r1, [pc, #28]	; (80069e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069c6:	4808      	ldr	r0, [pc, #32]	; (80069e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069c8:	f7ff fd66 	bl	8006498 <USBD_GetString>
 80069cc:	e004      	b.n	80069d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069ce:	683a      	ldr	r2, [r7, #0]
 80069d0:	4904      	ldr	r1, [pc, #16]	; (80069e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069d2:	4805      	ldr	r0, [pc, #20]	; (80069e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069d4:	f7ff fd60 	bl	8006498 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069d8:	4b02      	ldr	r3, [pc, #8]	; (80069e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3708      	adds	r7, #8
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20001410 	.word	0x20001410
 80069e8:	080071cc 	.word	0x080071cc

080069ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	6039      	str	r1, [r7, #0]
 80069f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d105      	bne.n	8006a0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069fe:	683a      	ldr	r2, [r7, #0]
 8006a00:	4907      	ldr	r1, [pc, #28]	; (8006a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a02:	4808      	ldr	r0, [pc, #32]	; (8006a24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a04:	f7ff fd48 	bl	8006498 <USBD_GetString>
 8006a08:	e004      	b.n	8006a14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a0a:	683a      	ldr	r2, [r7, #0]
 8006a0c:	4904      	ldr	r1, [pc, #16]	; (8006a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a0e:	4805      	ldr	r0, [pc, #20]	; (8006a24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a10:	f7ff fd42 	bl	8006498 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a14:	4b02      	ldr	r3, [pc, #8]	; (8006a20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20001410 	.word	0x20001410
 8006a24:	080071d8 	.word	0x080071d8

08006a28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b084      	sub	sp, #16
 8006a2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a2e:	4b0f      	ldr	r3, [pc, #60]	; (8006a6c <Get_SerialNum+0x44>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a34:	4b0e      	ldr	r3, [pc, #56]	; (8006a70 <Get_SerialNum+0x48>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a3a:	4b0e      	ldr	r3, [pc, #56]	; (8006a74 <Get_SerialNum+0x4c>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a40:	68fa      	ldr	r2, [r7, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4413      	add	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d009      	beq.n	8006a62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a4e:	2208      	movs	r2, #8
 8006a50:	4909      	ldr	r1, [pc, #36]	; (8006a78 <Get_SerialNum+0x50>)
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	f000 f814 	bl	8006a80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a58:	2204      	movs	r2, #4
 8006a5a:	4908      	ldr	r1, [pc, #32]	; (8006a7c <Get_SerialNum+0x54>)
 8006a5c:	68b8      	ldr	r0, [r7, #8]
 8006a5e:	f000 f80f 	bl	8006a80 <IntToUnicode>
  }
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	1fff7a10 	.word	0x1fff7a10
 8006a70:	1fff7a14 	.word	0x1fff7a14
 8006a74:	1fff7a18 	.word	0x1fff7a18
 8006a78:	200000e2 	.word	0x200000e2
 8006a7c:	200000f2 	.word	0x200000f2

08006a80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b087      	sub	sp, #28
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	60f8      	str	r0, [r7, #12]
 8006a88:	60b9      	str	r1, [r7, #8]
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a92:	2300      	movs	r3, #0
 8006a94:	75fb      	strb	r3, [r7, #23]
 8006a96:	e027      	b.n	8006ae8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	0f1b      	lsrs	r3, r3, #28
 8006a9c:	2b09      	cmp	r3, #9
 8006a9e:	d80b      	bhi.n	8006ab8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	0f1b      	lsrs	r3, r3, #28
 8006aa4:	b2da      	uxtb	r2, r3
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	005b      	lsls	r3, r3, #1
 8006aaa:	4619      	mov	r1, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	440b      	add	r3, r1
 8006ab0:	3230      	adds	r2, #48	; 0x30
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	701a      	strb	r2, [r3, #0]
 8006ab6:	e00a      	b.n	8006ace <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	0f1b      	lsrs	r3, r3, #28
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	005b      	lsls	r3, r3, #1
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	440b      	add	r3, r1
 8006ac8:	3237      	adds	r2, #55	; 0x37
 8006aca:	b2d2      	uxtb	r2, r2
 8006acc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ad4:	7dfb      	ldrb	r3, [r7, #23]
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	3301      	adds	r3, #1
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	4413      	add	r3, r2
 8006ade:	2200      	movs	r2, #0
 8006ae0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ae2:	7dfb      	ldrb	r3, [r7, #23]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	75fb      	strb	r3, [r7, #23]
 8006ae8:	7dfa      	ldrb	r2, [r7, #23]
 8006aea:	79fb      	ldrb	r3, [r7, #7]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d3d3      	bcc.n	8006a98 <IntToUnicode+0x18>
  }
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	371c      	adds	r7, #28
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
	...

08006b00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b08:	f107 0314 	add.w	r3, r7, #20
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	601a      	str	r2, [r3, #0]
 8006b10:	605a      	str	r2, [r3, #4]
 8006b12:	609a      	str	r2, [r3, #8]
 8006b14:	60da      	str	r2, [r3, #12]
 8006b16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b20:	d13a      	bne.n	8006b98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b22:	2300      	movs	r3, #0
 8006b24:	613b      	str	r3, [r7, #16]
 8006b26:	4b1e      	ldr	r3, [pc, #120]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b2a:	4a1d      	ldr	r2, [pc, #116]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b2c:	f043 0301 	orr.w	r3, r3, #1
 8006b30:	6313      	str	r3, [r2, #48]	; 0x30
 8006b32:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b36:	f003 0301 	and.w	r3, r3, #1
 8006b3a:	613b      	str	r3, [r7, #16]
 8006b3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b3e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b44:	2302      	movs	r3, #2
 8006b46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b50:	230a      	movs	r3, #10
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	4619      	mov	r1, r3
 8006b5a:	4812      	ldr	r0, [pc, #72]	; (8006ba4 <HAL_PCD_MspInit+0xa4>)
 8006b5c:	f7fa f91c 	bl	8000d98 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b60:	4b0f      	ldr	r3, [pc, #60]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b64:	4a0e      	ldr	r2, [pc, #56]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b6a:	6353      	str	r3, [r2, #52]	; 0x34
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	60fb      	str	r3, [r7, #12]
 8006b70:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b74:	4a0a      	ldr	r2, [pc, #40]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b7a:	6453      	str	r3, [r2, #68]	; 0x44
 8006b7c:	4b08      	ldr	r3, [pc, #32]	; (8006ba0 <HAL_PCD_MspInit+0xa0>)
 8006b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b84:	60fb      	str	r3, [r7, #12]
 8006b86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	2043      	movs	r0, #67	; 0x43
 8006b8e:	f7fa f8b0 	bl	8000cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b92:	2043      	movs	r0, #67	; 0x43
 8006b94:	f7fa f8c9 	bl	8000d2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b98:	bf00      	nop
 8006b9a:	3728      	adds	r7, #40	; 0x28
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40023800 	.word	0x40023800
 8006ba4:	40020000 	.word	0x40020000

08006ba8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	f7fe fb0b 	bl	80051da <USBD_LL_SetupStage>
}
 8006bc4:	bf00      	nop
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	460b      	mov	r3, r1
 8006bd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bde:	78fa      	ldrb	r2, [r7, #3]
 8006be0:	6879      	ldr	r1, [r7, #4]
 8006be2:	4613      	mov	r3, r2
 8006be4:	00db      	lsls	r3, r3, #3
 8006be6:	4413      	add	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	440b      	add	r3, r1
 8006bec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	78fb      	ldrb	r3, [r7, #3]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	f7fe fb45 	bl	8005284 <USBD_LL_DataOutStage>
}
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c02:	b580      	push	{r7, lr}
 8006c04:	b082      	sub	sp, #8
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006c14:	78fa      	ldrb	r2, [r7, #3]
 8006c16:	6879      	ldr	r1, [r7, #4]
 8006c18:	4613      	mov	r3, r2
 8006c1a:	00db      	lsls	r3, r3, #3
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	440b      	add	r3, r1
 8006c22:	334c      	adds	r3, #76	; 0x4c
 8006c24:	681a      	ldr	r2, [r3, #0]
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	4619      	mov	r1, r3
 8006c2a:	f7fe fbde 	bl	80053ea <USBD_LL_DataInStage>
}
 8006c2e:	bf00      	nop
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c44:	4618      	mov	r0, r3
 8006c46:	f7fe fd12 	bl	800566e <USBD_LL_SOF>
}
 8006c4a:	bf00      	nop
 8006c4c:	3708      	adds	r7, #8
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b084      	sub	sp, #16
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	68db      	ldr	r3, [r3, #12]
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d001      	beq.n	8006c6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c66:	f7f9 fe13 	bl	8000890 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c70:	7bfa      	ldrb	r2, [r7, #15]
 8006c72:	4611      	mov	r1, r2
 8006c74:	4618      	mov	r0, r3
 8006c76:	f7fe fcbc 	bl	80055f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fc64 	bl	800554e <USBD_LL_Reset>
}
 8006c86:	bf00      	nop
 8006c88:	3710      	adds	r7, #16
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
	...

08006c90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fcb7 	bl	8005612 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d005      	beq.n	8006cd0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cc4:	4b04      	ldr	r3, [pc, #16]	; (8006cd8 <HAL_PCD_SuspendCallback+0x48>)
 8006cc6:	691b      	ldr	r3, [r3, #16]
 8006cc8:	4a03      	ldr	r2, [pc, #12]	; (8006cd8 <HAL_PCD_SuspendCallback+0x48>)
 8006cca:	f043 0306 	orr.w	r3, r3, #6
 8006cce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cd0:	bf00      	nop
 8006cd2:	3708      	adds	r7, #8
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	e000ed00 	.word	0xe000ed00

08006cdc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fca7 	bl	800563e <USBD_LL_Resume>
}
 8006cf0:	bf00      	nop
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b082      	sub	sp, #8
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d0a:	78fa      	ldrb	r2, [r7, #3]
 8006d0c:	4611      	mov	r1, r2
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fe fcff 	bl	8005712 <USBD_LL_IsoOUTIncomplete>
}
 8006d14:	bf00      	nop
 8006d16:	3708      	adds	r7, #8
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	bd80      	pop	{r7, pc}

08006d1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b082      	sub	sp, #8
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	460b      	mov	r3, r1
 8006d26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d2e:	78fa      	ldrb	r2, [r7, #3]
 8006d30:	4611      	mov	r1, r2
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fcbb 	bl	80056ae <USBD_LL_IsoINIncomplete>
}
 8006d38:	bf00      	nop
 8006d3a:	3708      	adds	r7, #8
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fd11 	bl	8005776 <USBD_LL_DevConnected>
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f7fe fd0e 	bl	800578c <USBD_LL_DevDisconnected>
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b082      	sub	sp, #8
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d13c      	bne.n	8006e02 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d88:	4a20      	ldr	r2, [pc, #128]	; (8006e0c <USBD_LL_Init+0x94>)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a1e      	ldr	r2, [pc, #120]	; (8006e0c <USBD_LL_Init+0x94>)
 8006d94:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d98:	4b1c      	ldr	r3, [pc, #112]	; (8006e0c <USBD_LL_Init+0x94>)
 8006d9a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006da0:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <USBD_LL_Init+0x94>)
 8006da2:	2204      	movs	r2, #4
 8006da4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006da6:	4b19      	ldr	r3, [pc, #100]	; (8006e0c <USBD_LL_Init+0x94>)
 8006da8:	2202      	movs	r2, #2
 8006daa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006dac:	4b17      	ldr	r3, [pc, #92]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dae:	2200      	movs	r2, #0
 8006db0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006db2:	4b16      	ldr	r3, [pc, #88]	; (8006e0c <USBD_LL_Init+0x94>)
 8006db4:	2202      	movs	r2, #2
 8006db6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006db8:	4b14      	ldr	r3, [pc, #80]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dba:	2200      	movs	r2, #0
 8006dbc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006dc4:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dcc:	2200      	movs	r2, #0
 8006dce:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006dd0:	4b0e      	ldr	r3, [pc, #56]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006dd6:	480d      	ldr	r0, [pc, #52]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dd8:	f7fa f97b 	bl	80010d2 <HAL_PCD_Init>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d001      	beq.n	8006de6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006de2:	f7f9 fd55 	bl	8000890 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	4808      	ldr	r0, [pc, #32]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dea:	f7fb fbd2 	bl	8002592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dee:	2240      	movs	r2, #64	; 0x40
 8006df0:	2100      	movs	r1, #0
 8006df2:	4806      	ldr	r0, [pc, #24]	; (8006e0c <USBD_LL_Init+0x94>)
 8006df4:	f7fb fb86 	bl	8002504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006df8:	2280      	movs	r2, #128	; 0x80
 8006dfa:	2101      	movs	r1, #1
 8006dfc:	4803      	ldr	r0, [pc, #12]	; (8006e0c <USBD_LL_Init+0x94>)
 8006dfe:	f7fb fb81 	bl	8002504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e02:	2300      	movs	r3, #0
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20001610 	.word	0x20001610

08006e10 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fa fa70 	bl	800130c <HAL_PCD_Start>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f942 	bl	80070bc <USBD_Get_USB_Status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b084      	sub	sp, #16
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	70fb      	strb	r3, [r7, #3]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70bb      	strb	r3, [r7, #2]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e6e:	78bb      	ldrb	r3, [r7, #2]
 8006e70:	883a      	ldrh	r2, [r7, #0]
 8006e72:	78f9      	ldrb	r1, [r7, #3]
 8006e74:	f7fa ff41 	bl	8001cfa <HAL_PCD_EP_Open>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f91c 	bl	80070bc <USBD_Get_USB_Status>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	460b      	mov	r3, r1
 8006e9c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eac:	78fa      	ldrb	r2, [r7, #3]
 8006eae:	4611      	mov	r1, r2
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fa ff8a 	bl	8001dca <HAL_PCD_EP_Close>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eba:	7bfb      	ldrb	r3, [r7, #15]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 f8fd 	bl	80070bc <USBD_Get_USB_Status>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ec6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b084      	sub	sp, #16
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	460b      	mov	r3, r1
 8006eda:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eea:	78fa      	ldrb	r2, [r7, #3]
 8006eec:	4611      	mov	r1, r2
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fb f862 	bl	8001fb8 <HAL_PCD_EP_SetStall>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ef8:	7bfb      	ldrb	r3, [r7, #15]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 f8de 	bl	80070bc <USBD_Get_USB_Status>
 8006f00:	4603      	mov	r3, r0
 8006f02:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f04:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3710      	adds	r7, #16
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd80      	pop	{r7, pc}

08006f0e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f0e:	b580      	push	{r7, lr}
 8006f10:	b084      	sub	sp, #16
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f28:	78fa      	ldrb	r2, [r7, #3]
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	4618      	mov	r0, r3
 8006f2e:	f7fb f8a7 	bl	8002080 <HAL_PCD_EP_ClrStall>
 8006f32:	4603      	mov	r3, r0
 8006f34:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 f8bf 	bl	80070bc <USBD_Get_USB_Status>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f42:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b085      	sub	sp, #20
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	460b      	mov	r3, r1
 8006f56:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f5e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	da0b      	bge.n	8006f80 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f6e:	68f9      	ldr	r1, [r7, #12]
 8006f70:	4613      	mov	r3, r2
 8006f72:	00db      	lsls	r3, r3, #3
 8006f74:	4413      	add	r3, r2
 8006f76:	009b      	lsls	r3, r3, #2
 8006f78:	440b      	add	r3, r1
 8006f7a:	333e      	adds	r3, #62	; 0x3e
 8006f7c:	781b      	ldrb	r3, [r3, #0]
 8006f7e:	e00b      	b.n	8006f98 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f80:	78fb      	ldrb	r3, [r7, #3]
 8006f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f86:	68f9      	ldr	r1, [r7, #12]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	4413      	add	r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f96:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3714      	adds	r7, #20
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa2:	4770      	bx	lr

08006fa4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b084      	sub	sp, #16
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fbe:	78fa      	ldrb	r2, [r7, #3]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fa fe74 	bl	8001cb0 <HAL_PCD_SetAddress>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fcc:	7bfb      	ldrb	r3, [r7, #15]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f874 	bl	80070bc <USBD_Get_USB_Status>
 8006fd4:	4603      	mov	r3, r0
 8006fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fda:	4618      	mov	r0, r3
 8006fdc:	3710      	adds	r7, #16
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	bd80      	pop	{r7, pc}

08006fe2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fe2:	b580      	push	{r7, lr}
 8006fe4:	b086      	sub	sp, #24
 8006fe6:	af00      	add	r7, sp, #0
 8006fe8:	60f8      	str	r0, [r7, #12]
 8006fea:	607a      	str	r2, [r7, #4]
 8006fec:	603b      	str	r3, [r7, #0]
 8006fee:	460b      	mov	r3, r1
 8006ff0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007000:	7af9      	ldrb	r1, [r7, #11]
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	687a      	ldr	r2, [r7, #4]
 8007006:	f7fa ff8d 	bl	8001f24 <HAL_PCD_EP_Transmit>
 800700a:	4603      	mov	r3, r0
 800700c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800700e:	7dfb      	ldrb	r3, [r7, #23]
 8007010:	4618      	mov	r0, r3
 8007012:	f000 f853 	bl	80070bc <USBD_Get_USB_Status>
 8007016:	4603      	mov	r3, r0
 8007018:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800701a:	7dbb      	ldrb	r3, [r7, #22]
}
 800701c:	4618      	mov	r0, r3
 800701e:	3718      	adds	r7, #24
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b086      	sub	sp, #24
 8007028:	af00      	add	r7, sp, #0
 800702a:	60f8      	str	r0, [r7, #12]
 800702c:	607a      	str	r2, [r7, #4]
 800702e:	603b      	str	r3, [r7, #0]
 8007030:	460b      	mov	r3, r1
 8007032:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007034:	2300      	movs	r3, #0
 8007036:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007042:	7af9      	ldrb	r1, [r7, #11]
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	687a      	ldr	r2, [r7, #4]
 8007048:	f7fa ff09 	bl	8001e5e <HAL_PCD_EP_Receive>
 800704c:	4603      	mov	r3, r0
 800704e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007050:	7dfb      	ldrb	r3, [r7, #23]
 8007052:	4618      	mov	r0, r3
 8007054:	f000 f832 	bl	80070bc <USBD_Get_USB_Status>
 8007058:	4603      	mov	r3, r0
 800705a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800705c:	7dbb      	ldrb	r3, [r7, #22]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3718      	adds	r7, #24
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}

08007066 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007066:	b580      	push	{r7, lr}
 8007068:	b082      	sub	sp, #8
 800706a:	af00      	add	r7, sp, #0
 800706c:	6078      	str	r0, [r7, #4]
 800706e:	460b      	mov	r3, r1
 8007070:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007078:	78fa      	ldrb	r2, [r7, #3]
 800707a:	4611      	mov	r1, r2
 800707c:	4618      	mov	r0, r3
 800707e:	f7fa ff39 	bl	8001ef4 <HAL_PCD_EP_GetRxCount>
 8007082:	4603      	mov	r3, r0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3708      	adds	r7, #8
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007094:	4b03      	ldr	r3, [pc, #12]	; (80070a4 <USBD_static_malloc+0x18>)
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	20001b1c 	.word	0x20001b1c

080070a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]

}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070c6:	2300      	movs	r3, #0
 80070c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d817      	bhi.n	8007100 <USBD_Get_USB_Status+0x44>
 80070d0:	a201      	add	r2, pc, #4	; (adr r2, 80070d8 <USBD_Get_USB_Status+0x1c>)
 80070d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070d6:	bf00      	nop
 80070d8:	080070e9 	.word	0x080070e9
 80070dc:	080070ef 	.word	0x080070ef
 80070e0:	080070f5 	.word	0x080070f5
 80070e4:	080070fb 	.word	0x080070fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070e8:	2300      	movs	r3, #0
 80070ea:	73fb      	strb	r3, [r7, #15]
    break;
 80070ec:	e00b      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070ee:	2303      	movs	r3, #3
 80070f0:	73fb      	strb	r3, [r7, #15]
    break;
 80070f2:	e008      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070f4:	2301      	movs	r3, #1
 80070f6:	73fb      	strb	r3, [r7, #15]
    break;
 80070f8:	e005      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070fa:	2303      	movs	r3, #3
 80070fc:	73fb      	strb	r3, [r7, #15]
    break;
 80070fe:	e002      	b.n	8007106 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007100:	2303      	movs	r3, #3
 8007102:	73fb      	strb	r3, [r7, #15]
    break;
 8007104:	bf00      	nop
  }
  return usb_status;
 8007106:	7bfb      	ldrb	r3, [r7, #15]
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr

08007114 <__libc_init_array>:
 8007114:	b570      	push	{r4, r5, r6, lr}
 8007116:	4d0d      	ldr	r5, [pc, #52]	; (800714c <__libc_init_array+0x38>)
 8007118:	4c0d      	ldr	r4, [pc, #52]	; (8007150 <__libc_init_array+0x3c>)
 800711a:	1b64      	subs	r4, r4, r5
 800711c:	10a4      	asrs	r4, r4, #2
 800711e:	2600      	movs	r6, #0
 8007120:	42a6      	cmp	r6, r4
 8007122:	d109      	bne.n	8007138 <__libc_init_array+0x24>
 8007124:	4d0b      	ldr	r5, [pc, #44]	; (8007154 <__libc_init_array+0x40>)
 8007126:	4c0c      	ldr	r4, [pc, #48]	; (8007158 <__libc_init_array+0x44>)
 8007128:	f000 f82e 	bl	8007188 <_init>
 800712c:	1b64      	subs	r4, r4, r5
 800712e:	10a4      	asrs	r4, r4, #2
 8007130:	2600      	movs	r6, #0
 8007132:	42a6      	cmp	r6, r4
 8007134:	d105      	bne.n	8007142 <__libc_init_array+0x2e>
 8007136:	bd70      	pop	{r4, r5, r6, pc}
 8007138:	f855 3b04 	ldr.w	r3, [r5], #4
 800713c:	4798      	blx	r3
 800713e:	3601      	adds	r6, #1
 8007140:	e7ee      	b.n	8007120 <__libc_init_array+0xc>
 8007142:	f855 3b04 	ldr.w	r3, [r5], #4
 8007146:	4798      	blx	r3
 8007148:	3601      	adds	r6, #1
 800714a:	e7f2      	b.n	8007132 <__libc_init_array+0x1e>
 800714c:	08007200 	.word	0x08007200
 8007150:	08007200 	.word	0x08007200
 8007154:	08007200 	.word	0x08007200
 8007158:	08007204 	.word	0x08007204

0800715c <memcpy>:
 800715c:	440a      	add	r2, r1
 800715e:	4291      	cmp	r1, r2
 8007160:	f100 33ff 	add.w	r3, r0, #4294967295
 8007164:	d100      	bne.n	8007168 <memcpy+0xc>
 8007166:	4770      	bx	lr
 8007168:	b510      	push	{r4, lr}
 800716a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800716e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007172:	4291      	cmp	r1, r2
 8007174:	d1f9      	bne.n	800716a <memcpy+0xe>
 8007176:	bd10      	pop	{r4, pc}

08007178 <memset>:
 8007178:	4402      	add	r2, r0
 800717a:	4603      	mov	r3, r0
 800717c:	4293      	cmp	r3, r2
 800717e:	d100      	bne.n	8007182 <memset+0xa>
 8007180:	4770      	bx	lr
 8007182:	f803 1b01 	strb.w	r1, [r3], #1
 8007186:	e7f9      	b.n	800717c <memset+0x4>

08007188 <_init>:
 8007188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718a:	bf00      	nop
 800718c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800718e:	bc08      	pop	{r3}
 8007190:	469e      	mov	lr, r3
 8007192:	4770      	bx	lr

08007194 <_fini>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	bf00      	nop
 8007198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719a:	bc08      	pop	{r3}
 800719c:	469e      	mov	lr, r3
 800719e:	4770      	bx	lr
