
Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007038  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007228  08007228  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08007228  08007228  00017228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007230  08007230  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007230  08007230  00017230  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007234  08007234  00017234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08007238  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c34  200000fc  08007334  000200fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d30  08007334  00021d30  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f680  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c8  00000000  00000000  0002f7ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  00032878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b10  00000000  00000000  00033500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019023  00000000  00000000  00034010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011719  00000000  00000000  0004d033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b6e  00000000  00000000  0005e74c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e62ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030f8  00000000  00000000  000e630c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000fc 	.word	0x200000fc
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080071b8 	.word	0x080071b8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000100 	.word	0x20000100
 80001d4:	080071b8 	.word	0x080071b8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Bootloader_JumToApplication>:
	}
}


void Bootloader_JumToApplication(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
    uint32_t application_entry_point_address = (*(volatile uint32_t *)(APP_START_ADDRESS + 4));
 80004e2:	4b12      	ldr	r3, [pc, #72]	; (800052c <Bootloader_JumToApplication+0x50>)
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	60fb      	str	r3, [r7, #12]

    pFunction application_entry_point = (pFunction)application_entry_point_address ;
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	60bb      	str	r3, [r7, #8]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ec:	b672      	cpsid	i
}
 80004ee:	bf00      	nop

    // Disable interrupts
    __disable_irq();

    // Reset peripherals
    HAL_RCC_DeInit();
 80004f0:	f002 fcae 	bl	8002e50 <HAL_RCC_DeInit>
    HAL_DeInit();
 80004f4:	f000 fa72 	bl	80009dc <HAL_DeInit>

    // Reset Systick
    SysTick->CTRL = 0;  // Disable SysTick
 80004f8:	4b0d      	ldr	r3, [pc, #52]	; (8000530 <Bootloader_JumToApplication+0x54>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	601a      	str	r2, [r3, #0]
    SysTick->VAL = 0;   // Reset current value
 80004fe:	4b0c      	ldr	r3, [pc, #48]	; (8000530 <Bootloader_JumToApplication+0x54>)
 8000500:	2200      	movs	r2, #0
 8000502:	609a      	str	r2, [r3, #8]
    SysTick->LOAD = 0;  // Reset reload value
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <Bootloader_JumToApplication+0x54>)
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]

    // Set the vector table base address
    SCB->VTOR = APP_START_ADDRESS;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <Bootloader_JumToApplication+0x58>)
 800050c:	4a0a      	ldr	r2, [pc, #40]	; (8000538 <Bootloader_JumToApplication+0x5c>)
 800050e:	609a      	str	r2, [r3, #8]

    // Set the stack pointer
    __set_MSP(*(volatile uint32_t*)(APP_START_ADDRESS));
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <Bootloader_JumToApplication+0x5c>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	f383 8808 	msr	MSP, r3
}
 800051c:	bf00      	nop

    // Jump to the application
    application_entry_point();
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4798      	blx	r3
}
 8000522:	bf00      	nop
 8000524:	3710      	adds	r7, #16
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	08008004 	.word	0x08008004
 8000530:	e000e010 	.word	0xe000e010
 8000534:	e000ed00 	.word	0xe000ed00
 8000538:	08008000 	.word	0x08008000

0800053c <Bootloader_CheckApplicationExist>:


bool Bootloader_CheckApplicationExist(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
    uint32_t stack_address = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	607b      	str	r3, [r7, #4]

    Flash_Read_Word(APP_START_ADDRESS, &stack_address, (uint32_t)1);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	2201      	movs	r2, #1
 800054a:	4619      	mov	r1, r3
 800054c:	4809      	ldr	r0, [pc, #36]	; (8000574 <Bootloader_CheckApplicationExist+0x38>)
 800054e:	f000 f813 	bl	8000578 <Flash_Read_Word>

    if ((stack_address < RAM_BASE_ADDRESS) && ((stack_address - RAM_BASE_ADDRESS) > RAM_SIZE))
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000558:	d207      	bcs.n	800056a <Bootloader_CheckApplicationExist+0x2e>
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000560:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000564:	d901      	bls.n	800056a <Bootloader_CheckApplicationExist+0x2e>
    {
        return false;
 8000566:	2300      	movs	r3, #0
 8000568:	e000      	b.n	800056c <Bootloader_CheckApplicationExist+0x30>
    }

    return true;
 800056a:	2301      	movs	r3, #1
}
 800056c:	4618      	mov	r0, r3
 800056e:	3708      	adds	r7, #8
 8000570:	46bd      	mov	sp, r7
 8000572:	bd80      	pop	{r7, pc}
 8000574:	08008000 	.word	0x08008000

08000578 <Flash_Read_Word>:
 * @return	Flasg error code ::eFlashErrorCodes
 * 			- FLASH_OK: The flash read operation was successful.
 * 			- FLASH_READ_OVER_ERROR: The read operation exceeded the flash memory boundaries.
 */
uint8_t Flash_Read_Word(uint32_t address, uint32_t *data, uint32_t size)
{
 8000578:	b480      	push	{r7}
 800057a:	b087      	sub	sp, #28
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
	uint8_t flash_status = FLASH_OK;
 8000584:	2300      	movs	r3, #0
 8000586:	75fb      	strb	r3, [r7, #23]

    if ((address < FLASH_BASE_ADDRESS) ||
 8000588:	68fb      	ldr	r3, [r7, #12]
 800058a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800058e:	d30b      	bcc.n	80005a8 <Flash_Read_Word+0x30>
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	009a      	lsls	r2, r3, #2
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	4413      	add	r3, r2
    if ((address < FLASH_BASE_ADDRESS) ||
 8000598:	4a13      	ldr	r2, [pc, #76]	; (80005e8 <Flash_Read_Word+0x70>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d804      	bhi.n	80005a8 <Flash_Read_Word+0x30>
		((address % 4) != 0))
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	f003 0303 	and.w	r3, r3, #3
        ((address + (size * 4)) > (FLASH_BASE_ADDRESS + FLASH_SIZE)) ||
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d002      	beq.n	80005ae <Flash_Read_Word+0x36>
    {
    	flash_status = FLASH_READ_OVER_ERROR;
 80005a8:	2305      	movs	r3, #5
 80005aa:	75fb      	strb	r3, [r7, #23]
 80005ac:	e014      	b.n	80005d8 <Flash_Read_Word+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < size; i += 1)
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	e00d      	b.n	80005d0 <Flash_Read_Word+0x58>
        {
            data[i] = *(uint32_t *)(address + (i * 4));
 80005b4:	693b      	ldr	r3, [r7, #16]
 80005b6:	009a      	lsls	r2, r3, #2
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4413      	add	r3, r2
 80005bc:	4619      	mov	r1, r3
 80005be:	693b      	ldr	r3, [r7, #16]
 80005c0:	009b      	lsls	r3, r3, #2
 80005c2:	68ba      	ldr	r2, [r7, #8]
 80005c4:	4413      	add	r3, r2
 80005c6:	680a      	ldr	r2, [r1, #0]
 80005c8:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < size; i += 1)
 80005ca:	693b      	ldr	r3, [r7, #16]
 80005cc:	3301      	adds	r3, #1
 80005ce:	613b      	str	r3, [r7, #16]
 80005d0:	693a      	ldr	r2, [r7, #16]
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	429a      	cmp	r2, r3
 80005d6:	d3ed      	bcc.n	80005b4 <Flash_Read_Word+0x3c>
        }
    }


    return flash_status;
 80005d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80005da:	4618      	mov	r0, r3
 80005dc:	371c      	adds	r7, #28
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	08080000 	.word	0x08080000

080005ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 f9d1 	bl	8000998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f821 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f89f 	bl	800073c <MX_GPIO_Init>
  MX_CRC_Init();
 80005fe:	f000 f889 	bl	8000714 <MX_CRC_Init>
  MX_USB_DEVICE_Init();
 8000602:	f006 f8c3 	bl	800678c <MX_USB_DEVICE_Init>


  while (1)
  {

	  if(Bootloader_CheckApplicationExist() == true)
 8000606:	f7ff ff99 	bl	800053c <Bootloader_CheckApplicationExist>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0fa      	beq.n	8000606 <main+0x1a>
	  {
		  for(int i = 0; i < 10; i++)
 8000610:	2300      	movs	r3, #0
 8000612:	607b      	str	r3, [r7, #4]
 8000614:	e00a      	b.n	800062c <main+0x40>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000616:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800061a:	4807      	ldr	r0, [pc, #28]	; (8000638 <main+0x4c>)
 800061c:	f000 fd51 	bl	80010c2 <HAL_GPIO_TogglePin>
			  HAL_Delay(200);
 8000620:	20c8      	movs	r0, #200	; 0xc8
 8000622:	f000 fa5f 	bl	8000ae4 <HAL_Delay>
		  for(int i = 0; i < 10; i++)
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	3301      	adds	r3, #1
 800062a:	607b      	str	r3, [r7, #4]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2b09      	cmp	r3, #9
 8000630:	ddf1      	ble.n	8000616 <main+0x2a>
		  }

		  Bootloader_JumToApplication();
 8000632:	f7ff ff53 	bl	80004dc <Bootloader_JumToApplication>
	  if(Bootloader_CheckApplicationExist() == true)
 8000636:	e7e6      	b.n	8000606 <main+0x1a>
 8000638:	40020800 	.word	0x40020800

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0320 	add.w	r3, r7, #32
 8000646:	2230      	movs	r2, #48	; 0x30
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f006 fdac 	bl	80071a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	f107 030c 	add.w	r3, r7, #12
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]
 800065e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	4b29      	ldr	r3, [pc, #164]	; (800070c <SystemClock_Config+0xd0>)
 8000666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000668:	4a28      	ldr	r2, [pc, #160]	; (800070c <SystemClock_Config+0xd0>)
 800066a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800066e:	6413      	str	r3, [r2, #64]	; 0x40
 8000670:	4b26      	ldr	r3, [pc, #152]	; (800070c <SystemClock_Config+0xd0>)
 8000672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000678:	60bb      	str	r3, [r7, #8]
 800067a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	2300      	movs	r3, #0
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	4b23      	ldr	r3, [pc, #140]	; (8000710 <SystemClock_Config+0xd4>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <SystemClock_Config+0xd4>)
 8000686:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800068a:	6013      	str	r3, [r2, #0]
 800068c:	4b20      	ldr	r3, [pc, #128]	; (8000710 <SystemClock_Config+0xd4>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000694:	607b      	str	r3, [r7, #4]
 8000696:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000698:	2303      	movs	r3, #3
 800069a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800069c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a2:	2301      	movs	r3, #1
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006a6:	2310      	movs	r3, #16
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80006b4:	230f      	movs	r3, #15
 80006b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80006b8:	2390      	movs	r3, #144	; 0x90
 80006ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006bc:	2302      	movs	r3, #2
 80006be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006c0:	2305      	movs	r3, #5
 80006c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c4:	f107 0320 	add.w	r3, r7, #32
 80006c8:	4618      	mov	r0, r3
 80006ca:	f001 ff91 	bl	80025f0 <HAL_RCC_OscConfig>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006d4:	f000 f8a0 	bl	8000818 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d8:	230f      	movs	r3, #15
 80006da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006ec:	f107 030c 	add.w	r3, r7, #12
 80006f0:	2100      	movs	r1, #0
 80006f2:	4618      	mov	r0, r3
 80006f4:	f002 f9f4 	bl	8002ae0 <HAL_RCC_ClockConfig>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80006fe:	f000 f88b 	bl	8000818 <Error_Handler>
  }
}
 8000702:	bf00      	nop
 8000704:	3750      	adds	r7, #80	; 0x50
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40007000 	.word	0x40007000

08000714 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <MX_CRC_Init+0x20>)
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <MX_CRC_Init+0x24>)
 800071c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800071e:	4805      	ldr	r0, [pc, #20]	; (8000734 <MX_CRC_Init+0x20>)
 8000720:	f000 fb15 	bl	8000d4e <HAL_CRC_Init>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800072a:	f000 f875 	bl	8000818 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800072e:	bf00      	nop
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000118 	.word	0x20000118
 8000738:	40023000 	.word	0x40023000

0800073c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b08a      	sub	sp, #40	; 0x28
 8000740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000742:	f107 0314 	add.w	r3, r7, #20
 8000746:	2200      	movs	r2, #0
 8000748:	601a      	str	r2, [r3, #0]
 800074a:	605a      	str	r2, [r3, #4]
 800074c:	609a      	str	r2, [r3, #8]
 800074e:	60da      	str	r2, [r3, #12]
 8000750:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	613b      	str	r3, [r7, #16]
 8000756:	4b2d      	ldr	r3, [pc, #180]	; (800080c <MX_GPIO_Init+0xd0>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	4a2c      	ldr	r2, [pc, #176]	; (800080c <MX_GPIO_Init+0xd0>)
 800075c:	f043 0304 	orr.w	r3, r3, #4
 8000760:	6313      	str	r3, [r2, #48]	; 0x30
 8000762:	4b2a      	ldr	r3, [pc, #168]	; (800080c <MX_GPIO_Init+0xd0>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	f003 0304 	and.w	r3, r3, #4
 800076a:	613b      	str	r3, [r7, #16]
 800076c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	60fb      	str	r3, [r7, #12]
 8000772:	4b26      	ldr	r3, [pc, #152]	; (800080c <MX_GPIO_Init+0xd0>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	4a25      	ldr	r2, [pc, #148]	; (800080c <MX_GPIO_Init+0xd0>)
 8000778:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800077c:	6313      	str	r3, [r2, #48]	; 0x30
 800077e:	4b23      	ldr	r3, [pc, #140]	; (800080c <MX_GPIO_Init+0xd0>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000786:	60fb      	str	r3, [r7, #12]
 8000788:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	4b1f      	ldr	r3, [pc, #124]	; (800080c <MX_GPIO_Init+0xd0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a1e      	ldr	r2, [pc, #120]	; (800080c <MX_GPIO_Init+0xd0>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b1c      	ldr	r3, [pc, #112]	; (800080c <MX_GPIO_Init+0xd0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	607b      	str	r3, [r7, #4]
 80007aa:	4b18      	ldr	r3, [pc, #96]	; (800080c <MX_GPIO_Init+0xd0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a17      	ldr	r2, [pc, #92]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b15      	ldr	r3, [pc, #84]	; (800080c <MX_GPIO_Init+0xd0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_Blue_GPIO_Port, LED_Blue_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007c8:	4811      	ldr	r0, [pc, #68]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007ca:	f000 fc61 	bl	8001090 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Blue_Pin */
  GPIO_InitStruct.Pin = LED_Blue_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_Blue_GPIO_Port, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <MX_GPIO_Init+0xd4>)
 80007e8:	f000 face 	bl	8000d88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ec:	2301      	movs	r3, #1
 80007ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f0:	2300      	movs	r3, #0
 80007f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007f4:	2301      	movs	r3, #1
 80007f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_GPIO_Init+0xd8>)
 8000800:	f000 fac2 	bl	8000d88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000804:	bf00      	nop
 8000806:	3728      	adds	r7, #40	; 0x28
 8000808:	46bd      	mov	sp, r7
 800080a:	bd80      	pop	{r7, pc}
 800080c:	40023800 	.word	0x40023800
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000

08000818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800081c:	b672      	cpsid	i
}
 800081e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000820:	e7fe      	b.n	8000820 <Error_Handler+0x8>
	...

08000824 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	607b      	str	r3, [r7, #4]
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	4a0f      	ldr	r2, [pc, #60]	; (8000870 <HAL_MspInit+0x4c>)
 8000834:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000838:	6453      	str	r3, [r2, #68]	; 0x44
 800083a:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <HAL_MspInit+0x4c>)
 800083c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	4a08      	ldr	r2, [pc, #32]	; (8000870 <HAL_MspInit+0x4c>)
 8000850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000854:	6413      	str	r3, [r2, #64]	; 0x40
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <HAL_MspInit+0x4c>)
 8000858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085e:	603b      	str	r3, [r7, #0]
 8000860:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	40023800 	.word	0x40023800

08000874 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a0b      	ldr	r2, [pc, #44]	; (80008b0 <HAL_CRC_MspInit+0x3c>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d10d      	bne.n	80008a2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b0a      	ldr	r3, [pc, #40]	; (80008b4 <HAL_CRC_MspInit+0x40>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_CRC_MspInit+0x40>)
 8000890:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b07      	ldr	r3, [pc, #28]	; (80008b4 <HAL_CRC_MspInit+0x40>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80008a2:	bf00      	nop
 80008a4:	3714      	adds	r7, #20
 80008a6:	46bd      	mov	sp, r7
 80008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40023000 	.word	0x40023000
 80008b4:	40023800 	.word	0x40023800

080008b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008bc:	e7fe      	b.n	80008bc <NMI_Handler+0x4>

080008be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008be:	b480      	push	{r7}
 80008c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008c2:	e7fe      	b.n	80008c2 <HardFault_Handler+0x4>

080008c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c8:	e7fe      	b.n	80008c8 <MemManage_Handler+0x4>

080008ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ca:	b480      	push	{r7}
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ce:	e7fe      	b.n	80008ce <BusFault_Handler+0x4>

080008d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008d0:	b480      	push	{r7}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d4:	e7fe      	b.n	80008d4 <UsageFault_Handler+0x4>

080008d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d6:	b480      	push	{r7}
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008da:	bf00      	nop
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr

080008e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr

080008f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	46bd      	mov	sp, r7
 80008fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fe:	4770      	bx	lr

08000900 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000904:	f000 f8ce 	bl	8000aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000908:	bf00      	nop
 800090a:	bd80      	pop	{r7, pc}

0800090c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000910:	4802      	ldr	r0, [pc, #8]	; (800091c <OTG_FS_IRQHandler+0x10>)
 8000912:	f000 fd40 	bl	8001396 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	20001604 	.word	0x20001604

08000920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000924:	4b06      	ldr	r3, [pc, #24]	; (8000940 <SystemInit+0x20>)
 8000926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800092a:	4a05      	ldr	r2, [pc, #20]	; (8000940 <SystemInit+0x20>)
 800092c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000930:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000934:	bf00      	nop
 8000936:	46bd      	mov	sp, r7
 8000938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093c:	4770      	bx	lr
 800093e:	bf00      	nop
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000948:	480d      	ldr	r0, [pc, #52]	; (8000980 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800094a:	490e      	ldr	r1, [pc, #56]	; (8000984 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800094e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000950:	e002      	b.n	8000958 <LoopCopyDataInit>

08000952 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000952:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000954:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000956:	3304      	adds	r3, #4

08000958 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000958:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800095c:	d3f9      	bcc.n	8000952 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800095e:	4a0b      	ldr	r2, [pc, #44]	; (800098c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000960:	4c0b      	ldr	r4, [pc, #44]	; (8000990 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000962:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000964:	e001      	b.n	800096a <LoopFillZerobss>

08000966 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000966:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000968:	3204      	adds	r2, #4

0800096a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800096c:	d3fb      	bcc.n	8000966 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800096e:	f7ff ffd7 	bl	8000920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000972:	f006 fbf5 	bl	8007160 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000976:	f7ff fe39 	bl	80005ec <main>
  bx  lr    
 800097a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800097c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000988:	08007238 	.word	0x08007238
  ldr r2, =_sbss
 800098c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000990:	20001d30 	.word	0x20001d30

08000994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <ADC_IRQHandler>
	...

08000998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800099c:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <HAL_Init+0x40>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0d      	ldr	r2, [pc, #52]	; (80009d8 <HAL_Init+0x40>)
 80009a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a8:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <HAL_Init+0x40>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <HAL_Init+0x40>)
 80009ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <HAL_Init+0x40>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a07      	ldr	r2, [pc, #28]	; (80009d8 <HAL_Init+0x40>)
 80009ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c0:	2003      	movs	r0, #3
 80009c2:	f000 f983 	bl	8000ccc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009c6:	200f      	movs	r0, #15
 80009c8:	f000 f83c 	bl	8000a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009cc:	f7ff ff2a 	bl	8000824 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40023c00 	.word	0x40023c00

080009dc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80009e0:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_DeInit+0x54>)
 80009e2:	f04f 32ff 	mov.w	r2, #4294967295
 80009e6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80009e8:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HAL_DeInit+0x54>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80009ee:	4b10      	ldr	r3, [pc, #64]	; (8000a30 <HAL_DeInit+0x54>)
 80009f0:	f04f 32ff 	mov.w	r2, #4294967295
 80009f4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80009f6:	4b0e      	ldr	r3, [pc, #56]	; (8000a30 <HAL_DeInit+0x54>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_DeInit+0x54>)
 80009fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000a02:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000a04:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <HAL_DeInit+0x54>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000a0a:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_DeInit+0x54>)
 8000a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000a10:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000a12:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_DeInit+0x54>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000a18:	4b05      	ldr	r3, [pc, #20]	; (8000a30 <HAL_DeInit+0x54>)
 8000a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8000a1e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <HAL_DeInit+0x54>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000a26:	f000 f805 	bl	8000a34 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000a2a:	2300      	movs	r3, #0
}
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	40023800 	.word	0x40023800

08000a34 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
	...

08000a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a4c:	4b12      	ldr	r3, [pc, #72]	; (8000a98 <HAL_InitTick+0x54>)
 8000a4e:	681a      	ldr	r2, [r3, #0]
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <HAL_InitTick+0x58>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a62:	4618      	mov	r0, r3
 8000a64:	f000 f967 	bl	8000d36 <HAL_SYSTICK_Config>
 8000a68:	4603      	mov	r3, r0
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00e      	b.n	8000a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b0f      	cmp	r3, #15
 8000a76:	d80a      	bhi.n	8000a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	6879      	ldr	r1, [r7, #4]
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f000 f92f 	bl	8000ce2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a84:	4a06      	ldr	r2, [pc, #24]	; (8000aa0 <HAL_InitTick+0x5c>)
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	e000      	b.n	8000a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	3708      	adds	r7, #8
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	20000000 	.word	0x20000000
 8000a9c:	20000008 	.word	0x20000008
 8000aa0:	20000004 	.word	0x20000004

08000aa4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x20>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	461a      	mov	r2, r3
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <HAL_IncTick+0x24>)
 8000ab6:	6013      	str	r3, [r2, #0]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000008 	.word	0x20000008
 8000ac8:	20000120 	.word	0x20000120

08000acc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return uwTick;
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_GetTick+0x14>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	20000120 	.word	0x20000120

08000ae4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aec:	f7ff ffee 	bl	8000acc <HAL_GetTick>
 8000af0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000afc:	d005      	beq.n	8000b0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000afe:	4b0a      	ldr	r3, [pc, #40]	; (8000b28 <HAL_Delay+0x44>)
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b0a:	bf00      	nop
 8000b0c:	f7ff ffde 	bl	8000acc <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	68bb      	ldr	r3, [r7, #8]
 8000b14:	1ad3      	subs	r3, r2, r3
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	429a      	cmp	r2, r3
 8000b1a:	d8f7      	bhi.n	8000b0c <HAL_Delay+0x28>
  {
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	20000008 	.word	0x20000008

08000b2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b085      	sub	sp, #20
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f003 0307 	and.w	r3, r3, #7
 8000b3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b3c:	4b0c      	ldr	r3, [pc, #48]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b3e:	68db      	ldr	r3, [r3, #12]
 8000b40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b48:	4013      	ands	r3, r2
 8000b4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b5e:	4a04      	ldr	r2, [pc, #16]	; (8000b70 <__NVIC_SetPriorityGrouping+0x44>)
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	60d3      	str	r3, [r2, #12]
}
 8000b64:	bf00      	nop
 8000b66:	3714      	adds	r7, #20
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr
 8000b70:	e000ed00 	.word	0xe000ed00

08000b74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b78:	4b04      	ldr	r3, [pc, #16]	; (8000b8c <__NVIC_GetPriorityGrouping+0x18>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	0a1b      	lsrs	r3, r3, #8
 8000b7e:	f003 0307 	and.w	r3, r3, #7
}
 8000b82:	4618      	mov	r0, r3
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr
 8000b8c:	e000ed00 	.word	0xe000ed00

08000b90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	db0b      	blt.n	8000bba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba2:	79fb      	ldrb	r3, [r7, #7]
 8000ba4:	f003 021f 	and.w	r2, r3, #31
 8000ba8:	4907      	ldr	r1, [pc, #28]	; (8000bc8 <__NVIC_EnableIRQ+0x38>)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	095b      	lsrs	r3, r3, #5
 8000bb0:	2001      	movs	r0, #1
 8000bb2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	e000e100 	.word	0xe000e100

08000bcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	6039      	str	r1, [r7, #0]
 8000bd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	db0a      	blt.n	8000bf6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	683b      	ldr	r3, [r7, #0]
 8000be2:	b2da      	uxtb	r2, r3
 8000be4:	490c      	ldr	r1, [pc, #48]	; (8000c18 <__NVIC_SetPriority+0x4c>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf4:	e00a      	b.n	8000c0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	b2da      	uxtb	r2, r3
 8000bfa:	4908      	ldr	r1, [pc, #32]	; (8000c1c <__NVIC_SetPriority+0x50>)
 8000bfc:	79fb      	ldrb	r3, [r7, #7]
 8000bfe:	f003 030f 	and.w	r3, r3, #15
 8000c02:	3b04      	subs	r3, #4
 8000c04:	0112      	lsls	r2, r2, #4
 8000c06:	b2d2      	uxtb	r2, r2
 8000c08:	440b      	add	r3, r1
 8000c0a:	761a      	strb	r2, [r3, #24]
}
 8000c0c:	bf00      	nop
 8000c0e:	370c      	adds	r7, #12
 8000c10:	46bd      	mov	sp, r7
 8000c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c16:	4770      	bx	lr
 8000c18:	e000e100 	.word	0xe000e100
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60f8      	str	r0, [r7, #12]
 8000c28:	60b9      	str	r1, [r7, #8]
 8000c2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c34:	69fb      	ldr	r3, [r7, #28]
 8000c36:	f1c3 0307 	rsb	r3, r3, #7
 8000c3a:	2b04      	cmp	r3, #4
 8000c3c:	bf28      	it	cs
 8000c3e:	2304      	movcs	r3, #4
 8000c40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	3304      	adds	r3, #4
 8000c46:	2b06      	cmp	r3, #6
 8000c48:	d902      	bls.n	8000c50 <NVIC_EncodePriority+0x30>
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	3b03      	subs	r3, #3
 8000c4e:	e000      	b.n	8000c52 <NVIC_EncodePriority+0x32>
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c54:	f04f 32ff 	mov.w	r2, #4294967295
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43da      	mvns	r2, r3
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	401a      	ands	r2, r3
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c68:	f04f 31ff 	mov.w	r1, #4294967295
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c72:	43d9      	mvns	r1, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c78:	4313      	orrs	r3, r2
         );
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3724      	adds	r7, #36	; 0x24
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
	...

08000c88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	3b01      	subs	r3, #1
 8000c94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c98:	d301      	bcc.n	8000c9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00f      	b.n	8000cbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c9e:	4a0a      	ldr	r2, [pc, #40]	; (8000cc8 <SysTick_Config+0x40>)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ca6:	210f      	movs	r1, #15
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f7ff ff8e 	bl	8000bcc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb0:	4b05      	ldr	r3, [pc, #20]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cb6:	4b04      	ldr	r3, [pc, #16]	; (8000cc8 <SysTick_Config+0x40>)
 8000cb8:	2207      	movs	r2, #7
 8000cba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cbc:	2300      	movs	r3, #0
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	e000e010 	.word	0xe000e010

08000ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd4:	6878      	ldr	r0, [r7, #4]
 8000cd6:	f7ff ff29 	bl	8000b2c <__NVIC_SetPriorityGrouping>
}
 8000cda:	bf00      	nop
 8000cdc:	3708      	adds	r7, #8
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b086      	sub	sp, #24
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	4603      	mov	r3, r0
 8000cea:	60b9      	str	r1, [r7, #8]
 8000cec:	607a      	str	r2, [r7, #4]
 8000cee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf4:	f7ff ff3e 	bl	8000b74 <__NVIC_GetPriorityGrouping>
 8000cf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	6978      	ldr	r0, [r7, #20]
 8000d00:	f7ff ff8e 	bl	8000c20 <NVIC_EncodePriority>
 8000d04:	4602      	mov	r2, r0
 8000d06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0a:	4611      	mov	r1, r2
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff5d 	bl	8000bcc <__NVIC_SetPriority>
}
 8000d12:	bf00      	nop
 8000d14:	3718      	adds	r7, #24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	4603      	mov	r3, r0
 8000d22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f7ff ff31 	bl	8000b90 <__NVIC_EnableIRQ>
}
 8000d2e:	bf00      	nop
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}

08000d36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ffa2 	bl	8000c88 <SysTick_Config>
 8000d44:	4603      	mov	r3, r0
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3708      	adds	r7, #8
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d101      	bne.n	8000d60 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	e00e      	b.n	8000d7e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	795b      	ldrb	r3, [r3, #5]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d105      	bne.n	8000d76 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fd7f 	bl	8000874 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	2201      	movs	r2, #1
 8000d7a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d7c:	2300      	movs	r3, #0
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61fb      	str	r3, [r7, #28]
 8000da2:	e159      	b.n	8001058 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da4:	2201      	movs	r2, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	697a      	ldr	r2, [r7, #20]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	f040 8148 	bne.w	8001052 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d005      	beq.n	8000dda <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d130      	bne.n	8000e3c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	2203      	movs	r2, #3
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43db      	mvns	r3, r3
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	4013      	ands	r3, r2
 8000df0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	68da      	ldr	r2, [r3, #12]
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfe:	69ba      	ldr	r2, [r7, #24]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	69ba      	ldr	r2, [r7, #24]
 8000e08:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	091b      	lsrs	r3, r3, #4
 8000e26:	f003 0201 	and.w	r2, r3, #1
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	f003 0303 	and.w	r3, r3, #3
 8000e44:	2b03      	cmp	r3, #3
 8000e46:	d017      	beq.n	8000e78 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68db      	ldr	r3, [r3, #12]
 8000e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	689a      	ldr	r2, [r3, #8]
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f003 0303 	and.w	r3, r3, #3
 8000e80:	2b02      	cmp	r3, #2
 8000e82:	d123      	bne.n	8000ecc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	08da      	lsrs	r2, r3, #3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e90:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e92:	69fb      	ldr	r3, [r7, #28]
 8000e94:	f003 0307 	and.w	r3, r3, #7
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	220f      	movs	r2, #15
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	691a      	ldr	r2, [r3, #16]
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	08da      	lsrs	r2, r3, #3
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	3208      	adds	r2, #8
 8000ec6:	69b9      	ldr	r1, [r7, #24]
 8000ec8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	2203      	movs	r2, #3
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	43db      	mvns	r3, r3
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0203 	and.w	r2, r3, #3
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80a2 	beq.w	8001052 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	4b57      	ldr	r3, [pc, #348]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	4a56      	ldr	r2, [pc, #344]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f1e:	4b54      	ldr	r3, [pc, #336]	; (8001070 <HAL_GPIO_Init+0x2e8>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2a:	4a52      	ldr	r2, [pc, #328]	; (8001074 <HAL_GPIO_Init+0x2ec>)
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	089b      	lsrs	r3, r3, #2
 8000f30:	3302      	adds	r3, #2
 8000f32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f003 0303 	and.w	r3, r3, #3
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	220f      	movs	r2, #15
 8000f42:	fa02 f303 	lsl.w	r3, r2, r3
 8000f46:	43db      	mvns	r3, r3
 8000f48:	69ba      	ldr	r2, [r7, #24]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a49      	ldr	r2, [pc, #292]	; (8001078 <HAL_GPIO_Init+0x2f0>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x202>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a48      	ldr	r2, [pc, #288]	; (800107c <HAL_GPIO_Init+0x2f4>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x1fe>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a47      	ldr	r2, [pc, #284]	; (8001080 <HAL_GPIO_Init+0x2f8>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x1fa>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a46      	ldr	r2, [pc, #280]	; (8001084 <HAL_GPIO_Init+0x2fc>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x1f6>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a45      	ldr	r2, [pc, #276]	; (8001088 <HAL_GPIO_Init+0x300>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x1f2>
 8000f76:	2304      	movs	r3, #4
 8000f78:	e008      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f7a:	2307      	movs	r3, #7
 8000f7c:	e006      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e004      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f82:	2302      	movs	r3, #2
 8000f84:	e002      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f86:	2301      	movs	r3, #1
 8000f88:	e000      	b.n	8000f8c <HAL_GPIO_Init+0x204>
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	69fa      	ldr	r2, [r7, #28]
 8000f8e:	f002 0203 	and.w	r2, r2, #3
 8000f92:	0092      	lsls	r2, r2, #2
 8000f94:	4093      	lsls	r3, r2
 8000f96:	69ba      	ldr	r2, [r7, #24]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f9c:	4935      	ldr	r1, [pc, #212]	; (8001074 <HAL_GPIO_Init+0x2ec>)
 8000f9e:	69fb      	ldr	r3, [r7, #28]
 8000fa0:	089b      	lsrs	r3, r3, #2
 8000fa2:	3302      	adds	r3, #2
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000faa:	4b38      	ldr	r3, [pc, #224]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	69ba      	ldr	r2, [r7, #24]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	685b      	ldr	r3, [r3, #4]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d003      	beq.n	8000fce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4313      	orrs	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fd4:	4b2d      	ldr	r3, [pc, #180]	; (800108c <HAL_GPIO_Init+0x304>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	43db      	mvns	r3, r3
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d003      	beq.n	8000ff8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ff8:	4a24      	ldr	r2, [pc, #144]	; (800108c <HAL_GPIO_Init+0x304>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <HAL_GPIO_Init+0x304>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001022:	4a1a      	ldr	r2, [pc, #104]	; (800108c <HAL_GPIO_Init+0x304>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001028:	4b18      	ldr	r3, [pc, #96]	; (800108c <HAL_GPIO_Init+0x304>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800104c:	4a0f      	ldr	r2, [pc, #60]	; (800108c <HAL_GPIO_Init+0x304>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3301      	adds	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	2b0f      	cmp	r3, #15
 800105c:	f67f aea2 	bls.w	8000da4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3724      	adds	r7, #36	; 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	40023800 	.word	0x40023800
 8001074:	40013800 	.word	0x40013800
 8001078:	40020000 	.word	0x40020000
 800107c:	40020400 	.word	0x40020400
 8001080:	40020800 	.word	0x40020800
 8001084:	40020c00 	.word	0x40020c00
 8001088:	40021000 	.word	0x40021000
 800108c:	40013c00 	.word	0x40013c00

08001090 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	460b      	mov	r3, r1
 800109a:	807b      	strh	r3, [r7, #2]
 800109c:	4613      	mov	r3, r2
 800109e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010a0:	787b      	ldrb	r3, [r7, #1]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010a6:	887a      	ldrh	r2, [r7, #2]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010ac:	e003      	b.n	80010b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010ae:	887b      	ldrh	r3, [r7, #2]
 80010b0:	041a      	lsls	r2, r3, #16
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	619a      	str	r2, [r3, #24]
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr

080010c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
 80010ca:	460b      	mov	r3, r1
 80010cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	695b      	ldr	r3, [r3, #20]
 80010d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010d4:	887a      	ldrh	r2, [r7, #2]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4013      	ands	r3, r2
 80010da:	041a      	lsls	r2, r3, #16
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43d9      	mvns	r1, r3
 80010e0:	887b      	ldrh	r3, [r7, #2]
 80010e2:	400b      	ands	r3, r1
 80010e4:	431a      	orrs	r2, r3
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	619a      	str	r2, [r3, #24]
}
 80010ea:	bf00      	nop
 80010ec:	3714      	adds	r7, #20
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80010f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010f8:	b08f      	sub	sp, #60	; 0x3c
 80010fa:	af0a      	add	r7, sp, #40	; 0x28
 80010fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d101      	bne.n	8001108 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001104:	2301      	movs	r3, #1
 8001106:	e10f      	b.n	8001328 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001114:	b2db      	uxtb	r3, r3
 8001116:	2b00      	cmp	r3, #0
 8001118:	d106      	bne.n	8001128 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2200      	movs	r2, #0
 800111e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f005 fd12 	bl	8006b4c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2203      	movs	r2, #3
 800112c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001138:	2b00      	cmp	r3, #0
 800113a:	d102      	bne.n	8001142 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4618      	mov	r0, r3
 8001148:	f002 f865 	bl	8003216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	603b      	str	r3, [r7, #0]
 8001152:	687e      	ldr	r6, [r7, #4]
 8001154:	466d      	mov	r5, sp
 8001156:	f106 0410 	add.w	r4, r6, #16
 800115a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800115c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800115e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001160:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001162:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001166:	e885 0003 	stmia.w	r5, {r0, r1}
 800116a:	1d33      	adds	r3, r6, #4
 800116c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800116e:	6838      	ldr	r0, [r7, #0]
 8001170:	f001 ff3c 	bl	8002fec <USB_CoreInit>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d005      	beq.n	8001186 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2202      	movs	r2, #2
 800117e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e0d0      	b.n	8001328 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f002 f853 	bl	8003238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001192:	2300      	movs	r3, #0
 8001194:	73fb      	strb	r3, [r7, #15]
 8001196:	e04a      	b.n	800122e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001198:	7bfa      	ldrb	r2, [r7, #15]
 800119a:	6879      	ldr	r1, [r7, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	00db      	lsls	r3, r3, #3
 80011a0:	4413      	add	r3, r2
 80011a2:	009b      	lsls	r3, r3, #2
 80011a4:	440b      	add	r3, r1
 80011a6:	333d      	adds	r3, #61	; 0x3d
 80011a8:	2201      	movs	r2, #1
 80011aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011ac:	7bfa      	ldrb	r2, [r7, #15]
 80011ae:	6879      	ldr	r1, [r7, #4]
 80011b0:	4613      	mov	r3, r2
 80011b2:	00db      	lsls	r3, r3, #3
 80011b4:	4413      	add	r3, r2
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	440b      	add	r3, r1
 80011ba:	333c      	adds	r3, #60	; 0x3c
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011c0:	7bfa      	ldrb	r2, [r7, #15]
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
 80011c4:	b298      	uxth	r0, r3
 80011c6:	6879      	ldr	r1, [r7, #4]
 80011c8:	4613      	mov	r3, r2
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	440b      	add	r3, r1
 80011d2:	3344      	adds	r3, #68	; 0x44
 80011d4:	4602      	mov	r2, r0
 80011d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80011d8:	7bfa      	ldrb	r2, [r7, #15]
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	4613      	mov	r3, r2
 80011de:	00db      	lsls	r3, r3, #3
 80011e0:	4413      	add	r3, r2
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	440b      	add	r3, r1
 80011e6:	3340      	adds	r3, #64	; 0x40
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80011ec:	7bfa      	ldrb	r2, [r7, #15]
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	4613      	mov	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4413      	add	r3, r2
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	440b      	add	r3, r1
 80011fa:	3348      	adds	r3, #72	; 0x48
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001200:	7bfa      	ldrb	r2, [r7, #15]
 8001202:	6879      	ldr	r1, [r7, #4]
 8001204:	4613      	mov	r3, r2
 8001206:	00db      	lsls	r3, r3, #3
 8001208:	4413      	add	r3, r2
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	440b      	add	r3, r1
 800120e:	334c      	adds	r3, #76	; 0x4c
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001214:	7bfa      	ldrb	r2, [r7, #15]
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	4613      	mov	r3, r2
 800121a:	00db      	lsls	r3, r3, #3
 800121c:	4413      	add	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	440b      	add	r3, r1
 8001222:	3354      	adds	r3, #84	; 0x54
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001228:	7bfb      	ldrb	r3, [r7, #15]
 800122a:	3301      	adds	r3, #1
 800122c:	73fb      	strb	r3, [r7, #15]
 800122e:	7bfa      	ldrb	r2, [r7, #15]
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	d3af      	bcc.n	8001198 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001238:	2300      	movs	r3, #0
 800123a:	73fb      	strb	r3, [r7, #15]
 800123c:	e044      	b.n	80012c8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001266:	7bfa      	ldrb	r2, [r7, #15]
 8001268:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	6879      	ldr	r1, [r7, #4]
 800126e:	4613      	mov	r3, r2
 8001270:	00db      	lsls	r3, r3, #3
 8001272:	4413      	add	r3, r2
 8001274:	009b      	lsls	r3, r3, #2
 8001276:	440b      	add	r3, r1
 8001278:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800127c:	2200      	movs	r2, #0
 800127e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001280:	7bfa      	ldrb	r2, [r7, #15]
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	4613      	mov	r3, r2
 8001286:	00db      	lsls	r3, r3, #3
 8001288:	4413      	add	r3, r2
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	440b      	add	r3, r1
 800128e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001296:	7bfa      	ldrb	r2, [r7, #15]
 8001298:	6879      	ldr	r1, [r7, #4]
 800129a:	4613      	mov	r3, r2
 800129c:	00db      	lsls	r3, r3, #3
 800129e:	4413      	add	r3, r2
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	440b      	add	r3, r1
 80012a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	6879      	ldr	r1, [r7, #4]
 80012b0:	4613      	mov	r3, r2
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	4413      	add	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	440b      	add	r3, r1
 80012ba:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012c2:	7bfb      	ldrb	r3, [r7, #15]
 80012c4:	3301      	adds	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d3b5      	bcc.n	800123e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	687e      	ldr	r6, [r7, #4]
 80012da:	466d      	mov	r5, sp
 80012dc:	f106 0410 	add.w	r4, r6, #16
 80012e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012ec:	e885 0003 	stmia.w	r5, {r0, r1}
 80012f0:	1d33      	adds	r3, r6, #4
 80012f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012f4:	6838      	ldr	r0, [r7, #0]
 80012f6:	f001 ffeb 	bl	80032d0 <USB_DevInit>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d005      	beq.n	800130c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2202      	movs	r2, #2
 8001304:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	e00d      	b.n	8001328 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2200      	movs	r2, #0
 8001310:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f003 f93a 	bl	800459a <USB_DevDisconnect>

  return HAL_OK;
 8001326:	2300      	movs	r3, #0
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001330 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_PCD_Start+0x1c>
 8001348:	2302      	movs	r3, #2
 800134a:	e020      	b.n	800138e <HAL_PCD_Start+0x5e>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	2b01      	cmp	r3, #1
 800135a:	d109      	bne.n	8001370 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001360:	2b01      	cmp	r3, #1
 8001362:	d005      	beq.n	8001370 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001368:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f001 ff3d 	bl	80031f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f003 f8ea 	bl	8004558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800138c:	2300      	movs	r3, #0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3710      	adds	r7, #16
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001396:	b590      	push	{r4, r7, lr}
 8001398:	b08d      	sub	sp, #52	; 0x34
 800139a:	af00      	add	r7, sp, #0
 800139c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80013a4:	6a3b      	ldr	r3, [r7, #32]
 80013a6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 f9a8 	bl	8004702 <USB_GetMode>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f040 848a 	bne.w	8001cce <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	4618      	mov	r0, r3
 80013c0:	f003 f90c 	bl	80045dc <USB_ReadInterrupts>
 80013c4:	4603      	mov	r3, r0
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8480 	beq.w	8001ccc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80013d2:	689b      	ldr	r3, [r3, #8]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4618      	mov	r0, r3
 80013e6:	f003 f8f9 	bl	80045dc <USB_ReadInterrupts>
 80013ea:	4603      	mov	r3, r0
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d107      	bne.n	8001404 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	695a      	ldr	r2, [r3, #20]
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f002 0202 	and.w	r2, r2, #2
 8001402:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f003 f8e7 	bl	80045dc <USB_ReadInterrupts>
 800140e:	4603      	mov	r3, r0
 8001410:	f003 0310 	and.w	r3, r3, #16
 8001414:	2b10      	cmp	r3, #16
 8001416:	d161      	bne.n	80014dc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699a      	ldr	r2, [r3, #24]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f022 0210 	bic.w	r2, r2, #16
 8001426:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001428:	6a3b      	ldr	r3, [r7, #32]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	f003 020f 	and.w	r2, r3, #15
 8001434:	4613      	mov	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	4413      	add	r3, r2
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001440:	687a      	ldr	r2, [r7, #4]
 8001442:	4413      	add	r3, r2
 8001444:	3304      	adds	r3, #4
 8001446:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	0c5b      	lsrs	r3, r3, #17
 800144c:	f003 030f 	and.w	r3, r3, #15
 8001450:	2b02      	cmp	r3, #2
 8001452:	d124      	bne.n	800149e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800145a:	4013      	ands	r3, r2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d035      	beq.n	80014cc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	091b      	lsrs	r3, r3, #4
 8001468:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800146a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146e:	b29b      	uxth	r3, r3
 8001470:	461a      	mov	r2, r3
 8001472:	6a38      	ldr	r0, [r7, #32]
 8001474:	f002 ff1e 	bl	80042b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	691a      	ldr	r2, [r3, #16]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001484:	441a      	add	r2, r3
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	091b      	lsrs	r3, r3, #4
 8001492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001496:	441a      	add	r2, r3
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	621a      	str	r2, [r3, #32]
 800149c:	e016      	b.n	80014cc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	0c5b      	lsrs	r3, r3, #17
 80014a2:	f003 030f 	and.w	r3, r3, #15
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d110      	bne.n	80014cc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80014b0:	2208      	movs	r2, #8
 80014b2:	4619      	mov	r1, r3
 80014b4:	6a38      	ldr	r0, [r7, #32]
 80014b6:	f002 fefd 	bl	80042b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	6a1a      	ldr	r2, [r3, #32]
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	091b      	lsrs	r3, r3, #4
 80014c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80014c6:	441a      	add	r2, r3
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	699a      	ldr	r2, [r3, #24]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f042 0210 	orr.w	r2, r2, #16
 80014da:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f003 f87b 	bl	80045dc <USB_ReadInterrupts>
 80014e6:	4603      	mov	r3, r0
 80014e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80014ec:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80014f0:	f040 80a7 	bne.w	8001642 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f003 f880 	bl	8004602 <USB_ReadDevAllOutEpInterrupt>
 8001502:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001504:	e099      	b.n	800163a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 808e 	beq.w	800162e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	4611      	mov	r1, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f8a4 	bl	800466a <USB_ReadDevOutEPInterrupt>
 8001522:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	2b00      	cmp	r3, #0
 800152c:	d00c      	beq.n	8001548 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800152e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001530:	015a      	lsls	r2, r3, #5
 8001532:	69fb      	ldr	r3, [r7, #28]
 8001534:	4413      	add	r3, r2
 8001536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800153a:	461a      	mov	r2, r3
 800153c:	2301      	movs	r3, #1
 800153e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 fec2 	bl	80022cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001548:	693b      	ldr	r3, [r7, #16]
 800154a:	f003 0308 	and.w	r3, r3, #8
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	015a      	lsls	r2, r3, #5
 8001556:	69fb      	ldr	r3, [r7, #28]
 8001558:	4413      	add	r3, r2
 800155a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800155e:	461a      	mov	r2, r3
 8001560:	2308      	movs	r3, #8
 8001562:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001564:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001566:	6878      	ldr	r0, [r7, #4]
 8001568:	f000 ff98 	bl	800249c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	f003 0310 	and.w	r3, r3, #16
 8001572:	2b00      	cmp	r3, #0
 8001574:	d008      	beq.n	8001588 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001578:	015a      	lsls	r2, r3, #5
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	4413      	add	r3, r2
 800157e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001582:	461a      	mov	r2, r3
 8001584:	2310      	movs	r3, #16
 8001586:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d030      	beq.n	80015f4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159a:	2b80      	cmp	r3, #128	; 0x80
 800159c:	d109      	bne.n	80015b2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015b0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80015b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015b4:	4613      	mov	r3, r2
 80015b6:	00db      	lsls	r3, r3, #3
 80015b8:	4413      	add	r3, r2
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	4413      	add	r3, r2
 80015c4:	3304      	adds	r3, #4
 80015c6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	78db      	ldrb	r3, [r3, #3]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d108      	bne.n	80015e2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2200      	movs	r2, #0
 80015d4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f005 fbb1 	bl	8006d44 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	015a      	lsls	r2, r3, #5
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	4413      	add	r3, r2
 80015ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ee:	461a      	mov	r2, r3
 80015f0:	2302      	movs	r3, #2
 80015f2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d008      	beq.n	8001610 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001600:	015a      	lsls	r2, r3, #5
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	4413      	add	r3, r2
 8001606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800160a:	461a      	mov	r2, r3
 800160c:	2320      	movs	r3, #32
 800160e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001610:	693b      	ldr	r3, [r7, #16]
 8001612:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d009      	beq.n	800162e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800161a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800161c:	015a      	lsls	r2, r3, #5
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001626:	461a      	mov	r2, r3
 8001628:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800162c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001630:	3301      	adds	r3, #1
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	085b      	lsrs	r3, r3, #1
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800163a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163c:	2b00      	cmp	r3, #0
 800163e:	f47f af62 	bne.w	8001506 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f002 ffc8 	bl	80045dc <USB_ReadInterrupts>
 800164c:	4603      	mov	r3, r0
 800164e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001652:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001656:	f040 80db 	bne.w	8001810 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ffe9 	bl	8004636 <USB_ReadDevAllInEpInterrupt>
 8001664:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800166a:	e0cd      	b.n	8001808 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800166e:	f003 0301 	and.w	r3, r3, #1
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80c2 	beq.w	80017fc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	4611      	mov	r1, r2
 8001682:	4618      	mov	r0, r3
 8001684:	f003 f80f 	bl	80046a6 <USB_ReadDevInEPInterrupt>
 8001688:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d057      	beq.n	8001744 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001696:	f003 030f 	and.w	r3, r3, #15
 800169a:	2201      	movs	r2, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69f9      	ldr	r1, [r7, #28]
 80016b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80016b4:	4013      	ands	r3, r2
 80016b6:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80016b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ba:	015a      	lsls	r2, r3, #5
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	4413      	add	r3, r2
 80016c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016c4:	461a      	mov	r2, r3
 80016c6:	2301      	movs	r3, #1
 80016c8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d132      	bne.n	8001738 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80016d2:	6879      	ldr	r1, [r7, #4]
 80016d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016d6:	4613      	mov	r3, r2
 80016d8:	00db      	lsls	r3, r3, #3
 80016da:	4413      	add	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	440b      	add	r3, r1
 80016e0:	334c      	adds	r3, #76	; 0x4c
 80016e2:	6819      	ldr	r1, [r3, #0]
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016e8:	4613      	mov	r3, r2
 80016ea:	00db      	lsls	r3, r3, #3
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	4403      	add	r3, r0
 80016f2:	3348      	adds	r3, #72	; 0x48
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4419      	add	r1, r3
 80016f8:	6878      	ldr	r0, [r7, #4]
 80016fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016fc:	4613      	mov	r3, r2
 80016fe:	00db      	lsls	r3, r3, #3
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	4403      	add	r3, r0
 8001706:	334c      	adds	r3, #76	; 0x4c
 8001708:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800170a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170c:	2b00      	cmp	r3, #0
 800170e:	d113      	bne.n	8001738 <HAL_PCD_IRQHandler+0x3a2>
 8001710:	6879      	ldr	r1, [r7, #4]
 8001712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001714:	4613      	mov	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	4413      	add	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	440b      	add	r3, r1
 800171e:	3354      	adds	r3, #84	; 0x54
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d108      	bne.n	8001738 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6818      	ldr	r0, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001730:	461a      	mov	r2, r3
 8001732:	2101      	movs	r1, #1
 8001734:	f003 f816 	bl	8004764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	b2db      	uxtb	r3, r3
 800173c:	4619      	mov	r1, r3
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f005 fa85 	bl	8006c4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d008      	beq.n	8001760 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	015a      	lsls	r2, r3, #5
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	4413      	add	r3, r2
 8001756:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800175a:	461a      	mov	r2, r3
 800175c:	2308      	movs	r3, #8
 800175e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0310 	and.w	r3, r3, #16
 8001766:	2b00      	cmp	r3, #0
 8001768:	d008      	beq.n	800177c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001776:	461a      	mov	r2, r3
 8001778:	2310      	movs	r3, #16
 800177a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001782:	2b00      	cmp	r3, #0
 8001784:	d008      	beq.n	8001798 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	015a      	lsls	r2, r3, #5
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	4413      	add	r3, r2
 800178e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001792:	461a      	mov	r2, r3
 8001794:	2340      	movs	r3, #64	; 0x40
 8001796:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f003 0302 	and.w	r3, r3, #2
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d023      	beq.n	80017ea <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a4:	6a38      	ldr	r0, [r7, #32]
 80017a6:	f001 fef7 	bl	8003598 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80017aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017ac:	4613      	mov	r3, r2
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	3304      	adds	r3, #4
 80017bc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	78db      	ldrb	r3, [r3, #3]
 80017c2:	2b01      	cmp	r3, #1
 80017c4:	d108      	bne.n	80017d8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2200      	movs	r2, #0
 80017ca:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	4619      	mov	r1, r3
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f005 fac8 	bl	8006d68 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017da:	015a      	lsls	r2, r3, #5
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	4413      	add	r3, r2
 80017e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e4:	461a      	mov	r2, r3
 80017e6:	2302      	movs	r3, #2
 80017e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d003      	beq.n	80017fc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80017f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fcdb 	bl	80021b2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	3301      	adds	r3, #1
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001804:	085b      	lsrs	r3, r3, #1
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180a:	2b00      	cmp	r3, #0
 800180c:	f47f af2e 	bne.w	800166c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fee1 	bl	80045dc <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001820:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001824:	d122      	bne.n	800186c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001834:	f023 0301 	bic.w	r3, r3, #1
 8001838:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001840:	2b01      	cmp	r3, #1
 8001842:	d108      	bne.n	8001856 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800184c:	2100      	movs	r1, #0
 800184e:	6878      	ldr	r0, [r7, #4]
 8001850:	f000 fec2 	bl	80025d8 <HAL_PCDEx_LPM_Callback>
 8001854:	e002      	b.n	800185c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f005 fa66 	bl	8006d28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800186a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4618      	mov	r0, r3
 8001872:	f002 feb3 	bl	80045dc <USB_ReadInterrupts>
 8001876:	4603      	mov	r3, r0
 8001878:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800187c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001880:	d112      	bne.n	80018a8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b01      	cmp	r3, #1
 8001890:	d102      	bne.n	8001898 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001892:	6878      	ldr	r0, [r7, #4]
 8001894:	f005 fa22 	bl	8006cdc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695a      	ldr	r2, [r3, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018a6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f002 fe95 	bl	80045dc <USB_ReadInterrupts>
 80018b2:	4603      	mov	r3, r0
 80018b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018bc:	f040 80b7 	bne.w	8001a2e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80018c0:	69fb      	ldr	r3, [r7, #28]
 80018c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	69fa      	ldr	r2, [r7, #28]
 80018ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80018ce:	f023 0301 	bic.w	r3, r3, #1
 80018d2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	2110      	movs	r1, #16
 80018da:	4618      	mov	r0, r3
 80018dc:	f001 fe5c 	bl	8003598 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018e4:	e046      	b.n	8001974 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80018e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018e8:	015a      	lsls	r2, r3, #5
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	4413      	add	r3, r2
 80018ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f2:	461a      	mov	r2, r3
 80018f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018f8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018fc:	015a      	lsls	r2, r3, #5
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	4413      	add	r3, r2
 8001902:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800190a:	0151      	lsls	r1, r2, #5
 800190c:	69fa      	ldr	r2, [r7, #28]
 800190e:	440a      	add	r2, r1
 8001910:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001914:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001918:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800191a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800191c:	015a      	lsls	r2, r3, #5
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	4413      	add	r3, r2
 8001922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001926:	461a      	mov	r2, r3
 8001928:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800192c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800192e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001930:	015a      	lsls	r2, r3, #5
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	4413      	add	r3, r2
 8001936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800193e:	0151      	lsls	r1, r2, #5
 8001940:	69fa      	ldr	r2, [r7, #28]
 8001942:	440a      	add	r2, r1
 8001944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001948:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800194c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800194e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001950:	015a      	lsls	r2, r3, #5
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800195e:	0151      	lsls	r1, r2, #5
 8001960:	69fa      	ldr	r2, [r7, #28]
 8001962:	440a      	add	r2, r1
 8001964:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001968:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800196c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800196e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001970:	3301      	adds	r3, #1
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800197a:	429a      	cmp	r2, r3
 800197c:	d3b3      	bcc.n	80018e6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001984:	69db      	ldr	r3, [r3, #28]
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800198c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001990:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	2b00      	cmp	r3, #0
 8001998:	d016      	beq.n	80019c8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019aa:	f043 030b 	orr.w	r3, r3, #11
 80019ae:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019c0:	f043 030b 	orr.w	r3, r3, #11
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	e015      	b.n	80019f4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	69fa      	ldr	r2, [r7, #28]
 80019d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019da:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80019de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019e6:	691b      	ldr	r3, [r3, #16]
 80019e8:	69fa      	ldr	r2, [r7, #28]
 80019ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019ee:	f043 030b 	orr.w	r3, r3, #11
 80019f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	69fa      	ldr	r2, [r7, #28]
 80019fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a02:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6818      	ldr	r0, [r3, #0]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001a18:	461a      	mov	r2, r3
 8001a1a:	f002 fea3 	bl	8004764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	695a      	ldr	r2, [r3, #20]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001a2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fdd2 	bl	80045dc <USB_ReadInterrupts>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a42:	d124      	bne.n	8001a8e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fe68 	bl	800471e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f001 fe1d 	bl	8003692 <USB_GetDevSpeed>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681c      	ldr	r4, [r3, #0]
 8001a64:	f001 f9e8 	bl	8002e38 <HAL_RCC_GetHCLKFreq>
 8001a68:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	461a      	mov	r2, r3
 8001a72:	4620      	mov	r0, r4
 8001a74:	f001 fb1c 	bl	80030b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f005 f910 	bl	8006c9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	695a      	ldr	r2, [r3, #20]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fda2 	bl	80045dc <USB_ReadInterrupts>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	f003 0308 	and.w	r3, r3, #8
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d10a      	bne.n	8001ab8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f005 f8ed 	bl	8006c82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f002 0208 	and.w	r2, r2, #8
 8001ab6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f002 fd8d 	bl	80045dc <USB_ReadInterrupts>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ac8:	2b80      	cmp	r3, #128	; 0x80
 8001aca:	d122      	bne.n	8001b12 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	699b      	ldr	r3, [r3, #24]
 8001ad0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001ad4:	6a3b      	ldr	r3, [r7, #32]
 8001ad6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad8:	2301      	movs	r3, #1
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
 8001adc:	e014      	b.n	8001b08 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ade:	6879      	ldr	r1, [r7, #4]
 8001ae0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	00db      	lsls	r3, r3, #3
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d105      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fb27 	bl	8002150 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	3301      	adds	r3, #1
 8001b06:	627b      	str	r3, [r7, #36]	; 0x24
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d3e5      	bcc.n	8001ade <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f002 fd60 	bl	80045dc <USB_ReadInterrupts>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b26:	d13b      	bne.n	8001ba0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b28:	2301      	movs	r3, #1
 8001b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2c:	e02b      	b.n	8001b86 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b30:	015a      	lsls	r2, r3, #5
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	4413      	add	r3, r2
 8001b36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b3e:	6879      	ldr	r1, [r7, #4]
 8001b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b42:	4613      	mov	r3, r2
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4413      	add	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	440b      	add	r3, r1
 8001b4c:	3340      	adds	r3, #64	; 0x40
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d115      	bne.n	8001b80 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001b54:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	da12      	bge.n	8001b80 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b5a:	6879      	ldr	r1, [r7, #4]
 8001b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b5e:	4613      	mov	r3, r2
 8001b60:	00db      	lsls	r3, r3, #3
 8001b62:	4413      	add	r3, r2
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	440b      	add	r3, r1
 8001b68:	333f      	adds	r3, #63	; 0x3f
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	4619      	mov	r1, r3
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fae8 	bl	8002150 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b82:	3301      	adds	r3, #1
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d3ce      	bcc.n	8001b2e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695a      	ldr	r2, [r3, #20]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f002 fd19 	bl	80045dc <USB_ReadInterrupts>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001bb4:	d155      	bne.n	8001c62 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8001bba:	e045      	b.n	8001c48 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	015a      	lsls	r2, r3, #5
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	4413      	add	r3, r2
 8001bc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	4413      	add	r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	440b      	add	r3, r1
 8001bda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d12e      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001be4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	da2b      	bge.n	8001c42 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001bf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d121      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001bfe:	6879      	ldr	r1, [r7, #4]
 8001c00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001c14:	6a3b      	ldr	r3, [r7, #32]
 8001c16:	699b      	ldr	r3, [r3, #24]
 8001c18:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	695b      	ldr	r3, [r3, #20]
 8001c24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10a      	bne.n	8001c42 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	69fa      	ldr	r2, [r7, #28]
 8001c36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c3e:	6053      	str	r3, [r2, #4]
            break;
 8001c40:	e007      	b.n	8001c52 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c44:	3301      	adds	r3, #1
 8001c46:	627b      	str	r3, [r7, #36]	; 0x24
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3b4      	bcc.n	8001bbc <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	695a      	ldr	r2, [r3, #20]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4618      	mov	r0, r3
 8001c68:	f002 fcb8 	bl	80045dc <USB_ReadInterrupts>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c76:	d10a      	bne.n	8001c8e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f005 f887 	bl	8006d8c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695a      	ldr	r2, [r3, #20]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f002 fca2 	bl	80045dc <USB_ReadInterrupts>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	f003 0304 	and.w	r3, r3, #4
 8001c9e:	2b04      	cmp	r3, #4
 8001ca0:	d115      	bne.n	8001cce <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f003 0304 	and.w	r3, r3, #4
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cb4:	6878      	ldr	r0, [r7, #4]
 8001cb6:	f005 f877 	bl	8006da8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	6859      	ldr	r1, [r3, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	430a      	orrs	r2, r1
 8001cc8:	605a      	str	r2, [r3, #4]
 8001cca:	e000      	b.n	8001cce <HAL_PCD_IRQHandler+0x938>
      return;
 8001ccc:	bf00      	nop
    }
  }
}
 8001cce:	3734      	adds	r7, #52	; 0x34
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd90      	pop	{r4, r7, pc}

08001cd4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	460b      	mov	r3, r1
 8001cde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d101      	bne.n	8001cee <HAL_PCD_SetAddress+0x1a>
 8001cea:	2302      	movs	r3, #2
 8001cec:	e013      	b.n	8001d16 <HAL_PCD_SetAddress+0x42>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	78fa      	ldrb	r2, [r7, #3]
 8001cfa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	78fa      	ldrb	r2, [r7, #3]
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fc00 	bl	800450c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}

08001d1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d1e:	b580      	push	{r7, lr}
 8001d20:	b084      	sub	sp, #16
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	70fb      	strb	r3, [r7, #3]
 8001d30:	460b      	mov	r3, r1
 8001d32:	803b      	strh	r3, [r7, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	da0f      	bge.n	8001d64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d44:	78fb      	ldrb	r3, [r7, #3]
 8001d46:	f003 020f 	and.w	r2, r3, #15
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	00db      	lsls	r3, r3, #3
 8001d4e:	4413      	add	r3, r2
 8001d50:	009b      	lsls	r3, r3, #2
 8001d52:	3338      	adds	r3, #56	; 0x38
 8001d54:	687a      	ldr	r2, [r7, #4]
 8001d56:	4413      	add	r3, r2
 8001d58:	3304      	adds	r3, #4
 8001d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	705a      	strb	r2, [r3, #1]
 8001d62:	e00f      	b.n	8001d84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d64:	78fb      	ldrb	r3, [r7, #3]
 8001d66:	f003 020f 	and.w	r2, r3, #15
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	00db      	lsls	r3, r3, #3
 8001d6e:	4413      	add	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d76:	687a      	ldr	r2, [r7, #4]
 8001d78:	4413      	add	r3, r2
 8001d7a:	3304      	adds	r3, #4
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2200      	movs	r2, #0
 8001d82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d84:	78fb      	ldrb	r3, [r7, #3]
 8001d86:	f003 030f 	and.w	r3, r3, #15
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d90:	883a      	ldrh	r2, [r7, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	78ba      	ldrb	r2, [r7, #2]
 8001d9a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	785b      	ldrb	r3, [r3, #1]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d004      	beq.n	8001dae <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dae:	78bb      	ldrb	r3, [r7, #2]
 8001db0:	2b02      	cmp	r3, #2
 8001db2:	d102      	bne.n	8001dba <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2200      	movs	r2, #0
 8001db8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d101      	bne.n	8001dc8 <HAL_PCD_EP_Open+0xaa>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e00e      	b.n	8001de6 <HAL_PCD_EP_Open+0xc8>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68f9      	ldr	r1, [r7, #12]
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f001 fc80 	bl	80036dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001de4:	7afb      	ldrb	r3, [r7, #11]
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3710      	adds	r7, #16
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}

08001dee <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dee:	b580      	push	{r7, lr}
 8001df0:	b084      	sub	sp, #16
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	460b      	mov	r3, r1
 8001df8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001dfa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	da0f      	bge.n	8001e22 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 020f 	and.w	r2, r3, #15
 8001e08:	4613      	mov	r3, r2
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	3338      	adds	r3, #56	; 0x38
 8001e12:	687a      	ldr	r2, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	3304      	adds	r3, #4
 8001e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	705a      	strb	r2, [r3, #1]
 8001e20:	e00f      	b.n	8001e42 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e22:	78fb      	ldrb	r3, [r7, #3]
 8001e24:	f003 020f 	and.w	r2, r3, #15
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 030f 	and.w	r3, r3, #15
 8001e48:	b2da      	uxtb	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d101      	bne.n	8001e5c <HAL_PCD_EP_Close+0x6e>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e00e      	b.n	8001e7a <HAL_PCD_EP_Close+0x8c>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68f9      	ldr	r1, [r7, #12]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f001 fcbe 	bl	80037ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b086      	sub	sp, #24
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	60f8      	str	r0, [r7, #12]
 8001e8a:	607a      	str	r2, [r7, #4]
 8001e8c:	603b      	str	r3, [r7, #0]
 8001e8e:	460b      	mov	r3, r1
 8001e90:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e92:	7afb      	ldrb	r3, [r7, #11]
 8001e94:	f003 020f 	and.w	r2, r3, #15
 8001e98:	4613      	mov	r3, r2
 8001e9a:	00db      	lsls	r3, r3, #3
 8001e9c:	4413      	add	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	683a      	ldr	r2, [r7, #0]
 8001eb6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec4:	7afb      	ldrb	r3, [r7, #11]
 8001ec6:	f003 030f 	and.w	r3, r3, #15
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d102      	bne.n	8001ede <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ede:	7afb      	ldrb	r3, [r7, #11]
 8001ee0:	f003 030f 	and.w	r3, r3, #15
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d109      	bne.n	8001efc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6818      	ldr	r0, [r3, #0]
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6979      	ldr	r1, [r7, #20]
 8001ef6:	f001 ff9d 	bl	8003e34 <USB_EP0StartXfer>
 8001efa:	e008      	b.n	8001f0e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6818      	ldr	r0, [r3, #0]
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	691b      	ldr	r3, [r3, #16]
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	461a      	mov	r2, r3
 8001f08:	6979      	ldr	r1, [r7, #20]
 8001f0a:	f001 fd4b 	bl	80039a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3718      	adds	r7, #24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}

08001f18 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	f003 020f 	and.w	r2, r3, #15
 8001f2a:	6879      	ldr	r1, [r7, #4]
 8001f2c:	4613      	mov	r3, r2
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001f3a:	681b      	ldr	r3, [r3, #0]
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b086      	sub	sp, #24
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	460b      	mov	r3, r1
 8001f56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f58:	7afb      	ldrb	r3, [r7, #11]
 8001f5a:	f003 020f 	and.w	r2, r3, #15
 8001f5e:	4613      	mov	r3, r2
 8001f60:	00db      	lsls	r3, r3, #3
 8001f62:	4413      	add	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	3338      	adds	r3, #56	; 0x38
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	687a      	ldr	r2, [r7, #4]
 8001f74:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	2201      	movs	r2, #1
 8001f86:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f88:	7afb      	ldrb	r3, [r7, #11]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d102      	bne.n	8001fa2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
 8001fa4:	f003 030f 	and.w	r3, r3, #15
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d109      	bne.n	8001fc0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6818      	ldr	r0, [r3, #0]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	6979      	ldr	r1, [r7, #20]
 8001fba:	f001 ff3b 	bl	8003e34 <USB_EP0StartXfer>
 8001fbe:	e008      	b.n	8001fd2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6818      	ldr	r0, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	6979      	ldr	r1, [r7, #20]
 8001fce:	f001 fce9 	bl	80039a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fd2:	2300      	movs	r3, #0
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3718      	adds	r7, #24
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fe8:	78fb      	ldrb	r3, [r7, #3]
 8001fea:	f003 020f 	and.w	r2, r3, #15
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d901      	bls.n	8001ffa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e050      	b.n	800209c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ffa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	da0f      	bge.n	8002022 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 020f 	and.w	r2, r3, #15
 8002008:	4613      	mov	r3, r2
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4413      	add	r3, r2
 800200e:	009b      	lsls	r3, r3, #2
 8002010:	3338      	adds	r3, #56	; 0x38
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	4413      	add	r3, r2
 8002016:	3304      	adds	r3, #4
 8002018:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2201      	movs	r2, #1
 800201e:	705a      	strb	r2, [r3, #1]
 8002020:	e00d      	b.n	800203e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002022:	78fa      	ldrb	r2, [r7, #3]
 8002024:	4613      	mov	r3, r2
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	4413      	add	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	4413      	add	r3, r2
 8002034:	3304      	adds	r3, #4
 8002036:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	2200      	movs	r2, #0
 800203c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	2201      	movs	r2, #1
 8002042:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	f003 030f 	and.w	r3, r3, #15
 800204a:	b2da      	uxtb	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002056:	2b01      	cmp	r3, #1
 8002058:	d101      	bne.n	800205e <HAL_PCD_EP_SetStall+0x82>
 800205a:	2302      	movs	r3, #2
 800205c:	e01e      	b.n	800209c <HAL_PCD_EP_SetStall+0xc0>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68f9      	ldr	r1, [r7, #12]
 800206c:	4618      	mov	r0, r3
 800206e:	f002 f979 	bl	8004364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 030f 	and.w	r3, r3, #15
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10a      	bne.n	8002092 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6818      	ldr	r0, [r3, #0]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	b2d9      	uxtb	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800208c:	461a      	mov	r2, r3
 800208e:	f002 fb69 	bl	8004764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80020b0:	78fb      	ldrb	r3, [r7, #3]
 80020b2:	f003 020f 	and.w	r2, r3, #15
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d901      	bls.n	80020c2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e042      	b.n	8002148 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	da0f      	bge.n	80020ea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020ca:	78fb      	ldrb	r3, [r7, #3]
 80020cc:	f003 020f 	and.w	r2, r3, #15
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	4413      	add	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	3338      	adds	r3, #56	; 0x38
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	3304      	adds	r3, #4
 80020e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2201      	movs	r2, #1
 80020e6:	705a      	strb	r2, [r3, #1]
 80020e8:	e00f      	b.n	800210a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	f003 020f 	and.w	r2, r3, #15
 80020f0:	4613      	mov	r3, r2
 80020f2:	00db      	lsls	r3, r3, #3
 80020f4:	4413      	add	r3, r2
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	4413      	add	r3, r2
 8002100:	3304      	adds	r3, #4
 8002102:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2200      	movs	r2, #0
 8002108:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2200      	movs	r2, #0
 800210e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	b2da      	uxtb	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002122:	2b01      	cmp	r3, #1
 8002124:	d101      	bne.n	800212a <HAL_PCD_EP_ClrStall+0x86>
 8002126:	2302      	movs	r3, #2
 8002128:	e00e      	b.n	8002148 <HAL_PCD_EP_ClrStall+0xa4>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2201      	movs	r2, #1
 800212e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	68f9      	ldr	r1, [r7, #12]
 8002138:	4618      	mov	r0, r3
 800213a:	f002 f981 	bl	8004440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b084      	sub	sp, #16
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800215c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da0c      	bge.n	800217e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002164:	78fb      	ldrb	r3, [r7, #3]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	4613      	mov	r3, r2
 800216c:	00db      	lsls	r3, r3, #3
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	3338      	adds	r3, #56	; 0x38
 8002174:	687a      	ldr	r2, [r7, #4]
 8002176:	4413      	add	r3, r2
 8002178:	3304      	adds	r3, #4
 800217a:	60fb      	str	r3, [r7, #12]
 800217c:	e00c      	b.n	8002198 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800217e:	78fb      	ldrb	r3, [r7, #3]
 8002180:	f003 020f 	and.w	r2, r3, #15
 8002184:	4613      	mov	r3, r2
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	4413      	add	r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	4413      	add	r3, r2
 8002194:	3304      	adds	r3, #4
 8002196:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68f9      	ldr	r1, [r7, #12]
 800219e:	4618      	mov	r0, r3
 80021a0:	f001 ffa0 	bl	80040e4 <USB_EPStopXfer>
 80021a4:	4603      	mov	r3, r0
 80021a6:	72fb      	strb	r3, [r7, #11]

  return ret;
 80021a8:	7afb      	ldrb	r3, [r7, #11]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b08a      	sub	sp, #40	; 0x28
 80021b6:	af02      	add	r7, sp, #8
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80021c6:	683a      	ldr	r2, [r7, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	3338      	adds	r3, #56	; 0x38
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	4413      	add	r3, r2
 80021d6:	3304      	adds	r3, #4
 80021d8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a1a      	ldr	r2, [r3, #32]
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d901      	bls.n	80021ea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e06c      	b.n	80022c4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	699a      	ldr	r2, [r3, #24]
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6a1b      	ldr	r3, [r3, #32]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	68db      	ldr	r3, [r3, #12]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d902      	bls.n	8002206 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3303      	adds	r3, #3
 800220a:	089b      	lsrs	r3, r3, #2
 800220c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800220e:	e02b      	b.n	8002268 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	699a      	ldr	r2, [r3, #24]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a1b      	ldr	r3, [r3, #32]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	69fa      	ldr	r2, [r7, #28]
 8002222:	429a      	cmp	r2, r3
 8002224:	d902      	bls.n	800222c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	3303      	adds	r3, #3
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6919      	ldr	r1, [r3, #16]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	b2da      	uxtb	r2, r3
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002244:	b2db      	uxtb	r3, r3
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	4603      	mov	r3, r0
 800224a:	6978      	ldr	r0, [r7, #20]
 800224c:	f001 fff4 	bl	8004238 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	441a      	add	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6a1a      	ldr	r2, [r3, #32]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	441a      	add	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	015a      	lsls	r2, r3, #5
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	4413      	add	r3, r2
 8002270:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002274:	699b      	ldr	r3, [r3, #24]
 8002276:	b29b      	uxth	r3, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	429a      	cmp	r2, r3
 800227c:	d809      	bhi.n	8002292 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1a      	ldr	r2, [r3, #32]
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002286:	429a      	cmp	r2, r3
 8002288:	d203      	bcs.n	8002292 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	699b      	ldr	r3, [r3, #24]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1be      	bne.n	8002210 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	429a      	cmp	r2, r3
 800229c:	d811      	bhi.n	80022c2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	f003 030f 	and.w	r3, r3, #15
 80022a4:	2201      	movs	r2, #1
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	43db      	mvns	r3, r3
 80022b8:	6939      	ldr	r1, [r7, #16]
 80022ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80022be:	4013      	ands	r3, r2
 80022c0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3720      	adds	r7, #32
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}

080022cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b088      	sub	sp, #32
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	333c      	adds	r3, #60	; 0x3c
 80022e4:	3304      	adds	r3, #4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d17b      	bne.n	80023fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	f003 0308 	and.w	r3, r3, #8
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	4a61      	ldr	r2, [pc, #388]	; (8002494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002310:	4293      	cmp	r3, r2
 8002312:	f240 80b9 	bls.w	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80b3 	beq.w	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	015a      	lsls	r2, r3, #5
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	4413      	add	r3, r2
 800232a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800232e:	461a      	mov	r2, r3
 8002330:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002334:	6093      	str	r3, [r2, #8]
 8002336:	e0a7      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	f003 0320 	and.w	r3, r3, #32
 800233e:	2b00      	cmp	r3, #0
 8002340:	d009      	beq.n	8002356 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	015a      	lsls	r2, r3, #5
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4413      	add	r3, r2
 800234a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800234e:	461a      	mov	r2, r3
 8002350:	2320      	movs	r3, #32
 8002352:	6093      	str	r3, [r2, #8]
 8002354:	e098      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800235c:	2b00      	cmp	r3, #0
 800235e:	f040 8093 	bne.w	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	4a4b      	ldr	r2, [pc, #300]	; (8002494 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d90f      	bls.n	800238a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002386:	6093      	str	r3, [r2, #8]
 8002388:	e07e      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	4613      	mov	r3, r2
 800238e:	00db      	lsls	r3, r3, #3
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002398:	687a      	ldr	r2, [r7, #4]
 800239a:	4413      	add	r3, r2
 800239c:	3304      	adds	r3, #4
 800239e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	0159      	lsls	r1, r3, #5
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	440b      	add	r3, r1
 80023ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b0:	691b      	ldr	r3, [r3, #16]
 80023b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023b6:	1ad2      	subs	r2, r2, r3
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d114      	bne.n	80023ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6818      	ldr	r0, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023d4:	461a      	mov	r2, r3
 80023d6:	2101      	movs	r1, #1
 80023d8:	f002 f9c4 	bl	8004764 <USB_EP0_OutStart>
 80023dc:	e006      	b.n	80023ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	691a      	ldr	r2, [r3, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a1b      	ldr	r3, [r3, #32]
 80023e6:	441a      	add	r2, r3
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f004 fc10 	bl	8006c18 <HAL_PCD_DataOutStageCallback>
 80023f8:	e046      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	4a26      	ldr	r2, [pc, #152]	; (8002498 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d124      	bne.n	800244c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00a      	beq.n	8002422 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	015a      	lsls	r2, r3, #5
 8002410:	69bb      	ldr	r3, [r7, #24]
 8002412:	4413      	add	r3, r2
 8002414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002418:	461a      	mov	r2, r3
 800241a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800241e:	6093      	str	r3, [r2, #8]
 8002420:	e032      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	f003 0320 	and.w	r3, r3, #32
 8002428:	2b00      	cmp	r3, #0
 800242a:	d008      	beq.n	800243e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	4413      	add	r3, r2
 8002434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002438:	461a      	mov	r2, r3
 800243a:	2320      	movs	r3, #32
 800243c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4619      	mov	r1, r3
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f004 fbe7 	bl	8006c18 <HAL_PCD_DataOutStageCallback>
 800244a:	e01d      	b.n	8002488 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d114      	bne.n	800247c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002452:	6879      	ldr	r1, [r7, #4]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	4613      	mov	r3, r2
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	009b      	lsls	r3, r3, #2
 800245e:	440b      	add	r3, r1
 8002460:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d108      	bne.n	800247c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002474:	461a      	mov	r2, r3
 8002476:	2100      	movs	r1, #0
 8002478:	f002 f974 	bl	8004764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	b2db      	uxtb	r3, r3
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f004 fbc8 	bl	8006c18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	4f54300a 	.word	0x4f54300a
 8002498:	4f54310a 	.word	0x4f54310a

0800249c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b086      	sub	sp, #24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	333c      	adds	r3, #60	; 0x3c
 80024b4:	3304      	adds	r3, #4
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4a15      	ldr	r2, [pc, #84]	; (8002524 <PCD_EP_OutSetupPacket_int+0x88>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d90e      	bls.n	80024f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d009      	beq.n	80024f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024e8:	461a      	mov	r2, r3
 80024ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f004 fb7f 	bl	8006bf4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <PCD_EP_OutSetupPacket_int+0x88>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d90c      	bls.n	8002518 <PCD_EP_OutSetupPacket_int+0x7c>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d108      	bne.n	8002518 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002510:	461a      	mov	r2, r3
 8002512:	2101      	movs	r1, #1
 8002514:	f002 f926 	bl	8004764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3718      	adds	r7, #24
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	4f54300a 	.word	0x4f54300a

08002528 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	460b      	mov	r3, r1
 8002532:	70fb      	strb	r3, [r7, #3]
 8002534:	4613      	mov	r3, r2
 8002536:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d107      	bne.n	8002556 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002546:	883b      	ldrh	r3, [r7, #0]
 8002548:	0419      	lsls	r1, r3, #16
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	430a      	orrs	r2, r1
 8002552:	629a      	str	r2, [r3, #40]	; 0x28
 8002554:	e028      	b.n	80025a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	4413      	add	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002564:	2300      	movs	r3, #0
 8002566:	73fb      	strb	r3, [r7, #15]
 8002568:	e00d      	b.n	8002586 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	3340      	adds	r3, #64	; 0x40
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	0c1b      	lsrs	r3, r3, #16
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	3301      	adds	r3, #1
 8002584:	73fb      	strb	r3, [r7, #15]
 8002586:	7bfa      	ldrb	r2, [r7, #15]
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	3b01      	subs	r3, #1
 800258c:	429a      	cmp	r2, r3
 800258e:	d3ec      	bcc.n	800256a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002590:	883b      	ldrh	r3, [r7, #0]
 8002592:	0418      	lsls	r0, r3, #16
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6819      	ldr	r1, [r3, #0]
 8002598:	78fb      	ldrb	r3, [r7, #3]
 800259a:	3b01      	subs	r3, #1
 800259c:	68ba      	ldr	r2, [r7, #8]
 800259e:	4302      	orrs	r2, r0
 80025a0:	3340      	adds	r3, #64	; 0x40
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	440b      	add	r3, r1
 80025a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80025a8:	2300      	movs	r3, #0
}
 80025aa:	4618      	mov	r0, r3
 80025ac:	3714      	adds	r7, #20
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr

080025b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80025b6:	b480      	push	{r7}
 80025b8:	b083      	sub	sp, #12
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
 80025be:	460b      	mov	r3, r1
 80025c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	887a      	ldrh	r2, [r7, #2]
 80025c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d101      	bne.n	8002602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e267      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f003 0301 	and.w	r3, r3, #1
 800260a:	2b00      	cmp	r3, #0
 800260c:	d075      	beq.n	80026fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800260e:	4b88      	ldr	r3, [pc, #544]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 030c 	and.w	r3, r3, #12
 8002616:	2b04      	cmp	r3, #4
 8002618:	d00c      	beq.n	8002634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800261a:	4b85      	ldr	r3, [pc, #532]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002622:	2b08      	cmp	r3, #8
 8002624:	d112      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002626:	4b82      	ldr	r3, [pc, #520]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800262e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002632:	d10b      	bne.n	800264c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002634:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d05b      	beq.n	80026f8 <HAL_RCC_OscConfig+0x108>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d157      	bne.n	80026f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e242      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002654:	d106      	bne.n	8002664 <HAL_RCC_OscConfig+0x74>
 8002656:	4b76      	ldr	r3, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a75      	ldr	r2, [pc, #468]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800265c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002660:	6013      	str	r3, [r2, #0]
 8002662:	e01d      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800266c:	d10c      	bne.n	8002688 <HAL_RCC_OscConfig+0x98>
 800266e:	4b70      	ldr	r3, [pc, #448]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a6f      	ldr	r2, [pc, #444]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	4b6d      	ldr	r3, [pc, #436]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a6c      	ldr	r2, [pc, #432]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002684:	6013      	str	r3, [r2, #0]
 8002686:	e00b      	b.n	80026a0 <HAL_RCC_OscConfig+0xb0>
 8002688:	4b69      	ldr	r3, [pc, #420]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a68      	ldr	r2, [pc, #416]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800268e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002692:	6013      	str	r3, [r2, #0]
 8002694:	4b66      	ldr	r3, [pc, #408]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a65      	ldr	r2, [pc, #404]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800269a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d013      	beq.n	80026d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a8:	f7fe fa10 	bl	8000acc <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe fa0c 	bl	8000acc <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e207      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c2:	4b5b      	ldr	r3, [pc, #364]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0xc0>
 80026ce:	e014      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe f9fc 	bl	8000acc <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026d6:	e008      	b.n	80026ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026d8:	f7fe f9f8 	bl	8000acc <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	2b64      	cmp	r3, #100	; 0x64
 80026e4:	d901      	bls.n	80026ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e1f3      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ea:	4b51      	ldr	r3, [pc, #324]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1f0      	bne.n	80026d8 <HAL_RCC_OscConfig+0xe8>
 80026f6:	e000      	b.n	80026fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 0302 	and.w	r3, r3, #2
 8002702:	2b00      	cmp	r3, #0
 8002704:	d063      	beq.n	80027ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002706:	4b4a      	ldr	r3, [pc, #296]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	f003 030c 	and.w	r3, r3, #12
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00b      	beq.n	800272a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002712:	4b47      	ldr	r3, [pc, #284]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800271a:	2b08      	cmp	r3, #8
 800271c:	d11c      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271e:	4b44      	ldr	r3, [pc, #272]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d116      	bne.n	8002758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272a:	4b41      	ldr	r3, [pc, #260]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0302 	and.w	r3, r3, #2
 8002732:	2b00      	cmp	r3, #0
 8002734:	d005      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d001      	beq.n	8002742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e1c7      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002742:	4b3b      	ldr	r3, [pc, #236]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	691b      	ldr	r3, [r3, #16]
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4937      	ldr	r1, [pc, #220]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002752:	4313      	orrs	r3, r2
 8002754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002756:	e03a      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d020      	beq.n	80027a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002760:	4b34      	ldr	r3, [pc, #208]	; (8002834 <HAL_RCC_OscConfig+0x244>)
 8002762:	2201      	movs	r2, #1
 8002764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe f9b1 	bl	8000acc <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe f9ad 	bl	8000acc <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e1a8      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002780:	4b2b      	ldr	r3, [pc, #172]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	00db      	lsls	r3, r3, #3
 800279a:	4925      	ldr	r1, [pc, #148]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 800279c:	4313      	orrs	r3, r2
 800279e:	600b      	str	r3, [r1, #0]
 80027a0:	e015      	b.n	80027ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b24      	ldr	r3, [pc, #144]	; (8002834 <HAL_RCC_OscConfig+0x244>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7fe f990 	bl	8000acc <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027b0:	f7fe f98c 	bl	8000acc <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e187      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	4b1b      	ldr	r3, [pc, #108]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0308 	and.w	r3, r3, #8
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d036      	beq.n	8002848 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	695b      	ldr	r3, [r3, #20]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e2:	4b15      	ldr	r3, [pc, #84]	; (8002838 <HAL_RCC_OscConfig+0x248>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027e8:	f7fe f970 	bl	8000acc <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027f0:	f7fe f96c 	bl	8000acc <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e167      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002802:	4b0b      	ldr	r3, [pc, #44]	; (8002830 <HAL_RCC_OscConfig+0x240>)
 8002804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x200>
 800280e:	e01b      	b.n	8002848 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002810:	4b09      	ldr	r3, [pc, #36]	; (8002838 <HAL_RCC_OscConfig+0x248>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002816:	f7fe f959 	bl	8000acc <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281c:	e00e      	b.n	800283c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800281e:	f7fe f955 	bl	8000acc <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d907      	bls.n	800283c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e150      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002830:	40023800 	.word	0x40023800
 8002834:	42470000 	.word	0x42470000
 8002838:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b88      	ldr	r3, [pc, #544]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800283e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1ea      	bne.n	800281e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 8097 	beq.w	8002984 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b81      	ldr	r3, [pc, #516]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10f      	bne.n	8002886 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60bb      	str	r3, [r7, #8]
 800286a:	4b7d      	ldr	r3, [pc, #500]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800286c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286e:	4a7c      	ldr	r2, [pc, #496]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002874:	6413      	str	r3, [r2, #64]	; 0x40
 8002876:	4b7a      	ldr	r3, [pc, #488]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800287e:	60bb      	str	r3, [r7, #8]
 8002880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002882:	2301      	movs	r3, #1
 8002884:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002886:	4b77      	ldr	r3, [pc, #476]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800288e:	2b00      	cmp	r3, #0
 8002890:	d118      	bne.n	80028c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002892:	4b74      	ldr	r3, [pc, #464]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a73      	ldr	r2, [pc, #460]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 8002898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800289c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289e:	f7fe f915 	bl	8000acc <HAL_GetTick>
 80028a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a4:	e008      	b.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a6:	f7fe f911 	bl	8000acc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d901      	bls.n	80028b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e10c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b8:	4b6a      	ldr	r3, [pc, #424]	; (8002a64 <HAL_RCC_OscConfig+0x474>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d0f0      	beq.n	80028a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d106      	bne.n	80028da <HAL_RCC_OscConfig+0x2ea>
 80028cc:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d0:	4a63      	ldr	r2, [pc, #396]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6713      	str	r3, [r2, #112]	; 0x70
 80028d8:	e01c      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	689b      	ldr	r3, [r3, #8]
 80028de:	2b05      	cmp	r3, #5
 80028e0:	d10c      	bne.n	80028fc <HAL_RCC_OscConfig+0x30c>
 80028e2:	4b5f      	ldr	r3, [pc, #380]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	4a5e      	ldr	r2, [pc, #376]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028e8:	f043 0304 	orr.w	r3, r3, #4
 80028ec:	6713      	str	r3, [r2, #112]	; 0x70
 80028ee:	4b5c      	ldr	r3, [pc, #368]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f2:	4a5b      	ldr	r2, [pc, #364]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028f4:	f043 0301 	orr.w	r3, r3, #1
 80028f8:	6713      	str	r3, [r2, #112]	; 0x70
 80028fa:	e00b      	b.n	8002914 <HAL_RCC_OscConfig+0x324>
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80028fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002900:	4a57      	ldr	r2, [pc, #348]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002902:	f023 0301 	bic.w	r3, r3, #1
 8002906:	6713      	str	r3, [r2, #112]	; 0x70
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290c:	4a54      	ldr	r2, [pc, #336]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800290e:	f023 0304 	bic.w	r3, r3, #4
 8002912:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d015      	beq.n	8002948 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7fe f8d6 	bl	8000acc <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002922:	e00a      	b.n	800293a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002924:	f7fe f8d2 	bl	8000acc <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002932:	4293      	cmp	r3, r2
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e0cb      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293a:	4b49      	ldr	r3, [pc, #292]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0ee      	beq.n	8002924 <HAL_RCC_OscConfig+0x334>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002948:	f7fe f8c0 	bl	8000acc <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe f8bc 	bl	8000acc <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e0b5      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002966:	4b3e      	ldr	r3, [pc, #248]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1ee      	bne.n	8002950 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002972:	7dfb      	ldrb	r3, [r7, #23]
 8002974:	2b01      	cmp	r3, #1
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002978:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	4a38      	ldr	r2, [pc, #224]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 800297e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002982:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	2b00      	cmp	r3, #0
 800298a:	f000 80a1 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800298e:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d05c      	beq.n	8002a54 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d141      	bne.n	8002a26 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a8:	f7fe f890 	bl	8000acc <HAL_GetTick>
 80029ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ae:	e008      	b.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b0:	f7fe f88c 	bl	8000acc <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	693b      	ldr	r3, [r7, #16]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d901      	bls.n	80029c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80029be:	2303      	movs	r3, #3
 80029c0:	e087      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d1f0      	bne.n	80029b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	431a      	orrs	r2, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029dc:	019b      	lsls	r3, r3, #6
 80029de:	431a      	orrs	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e4:	085b      	lsrs	r3, r3, #1
 80029e6:	3b01      	subs	r3, #1
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	491b      	ldr	r1, [pc, #108]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029f8:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 80029fa:	2201      	movs	r2, #1
 80029fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fe:	f7fe f865 	bl	8000acc <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a04:	e008      	b.n	8002a18 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a06:	f7fe f861 	bl	8000acc <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d901      	bls.n	8002a18 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e05c      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0f0      	beq.n	8002a06 <HAL_RCC_OscConfig+0x416>
 8002a24:	e054      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a26:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_RCC_OscConfig+0x478>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2c:	f7fe f84e 	bl	8000acc <HAL_GetTick>
 8002a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a34:	f7fe f84a 	bl	8000acc <HAL_GetTick>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e045      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <HAL_RCC_OscConfig+0x470>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d1f0      	bne.n	8002a34 <HAL_RCC_OscConfig+0x444>
 8002a52:	e03d      	b.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e038      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	40007000 	.word	0x40007000
 8002a68:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a6c:	4b1b      	ldr	r3, [pc, #108]	; (8002adc <HAL_RCC_OscConfig+0x4ec>)
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	699b      	ldr	r3, [r3, #24]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d028      	beq.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d121      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d11a      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a96:	68fa      	ldr	r2, [r7, #12]
 8002a98:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002aa2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d111      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	085b      	lsrs	r3, r3, #1
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d107      	bne.n	8002acc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d001      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3718      	adds	r7, #24
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	40023800 	.word	0x40023800

08002ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
 8002ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d101      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0cc      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0307 	and.w	r3, r3, #7
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d90c      	bls.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b02:	4b65      	ldr	r3, [pc, #404]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b04:	683a      	ldr	r2, [r7, #0]
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b0a:	4b63      	ldr	r3, [pc, #396]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0b8      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d020      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d005      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	4a58      	ldr	r2, [pc, #352]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0308 	and.w	r3, r3, #8
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d005      	beq.n	8002b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b4c:	4b53      	ldr	r3, [pc, #332]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	4a52      	ldr	r2, [pc, #328]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b58:	4b50      	ldr	r3, [pc, #320]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	494d      	ldr	r1, [pc, #308]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d044      	beq.n	8002c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d107      	bne.n	8002b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4b47      	ldr	r3, [pc, #284]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d119      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e07f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d003      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d107      	bne.n	8002bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b9e:	4b3f      	ldr	r3, [pc, #252]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bae:	4b3b      	ldr	r3, [pc, #236]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d101      	bne.n	8002bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bba:	2301      	movs	r3, #1
 8002bbc:	e067      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bbe:	4b37      	ldr	r3, [pc, #220]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f023 0203 	bic.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	4934      	ldr	r1, [pc, #208]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bd0:	f7fd ff7c 	bl	8000acc <HAL_GetTick>
 8002bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	e00a      	b.n	8002bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bd8:	f7fd ff78 	bl	8000acc <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d901      	bls.n	8002bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	e04f      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bee:	4b2b      	ldr	r3, [pc, #172]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 020c 	and.w	r2, r3, #12
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d1eb      	bne.n	8002bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c00:	4b25      	ldr	r3, [pc, #148]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0307 	and.w	r3, r3, #7
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d20c      	bcs.n	8002c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c0e:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c10:	683a      	ldr	r2, [r7, #0]
 8002c12:	b2d2      	uxtb	r2, r2
 8002c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c16:	4b20      	ldr	r3, [pc, #128]	; (8002c98 <HAL_RCC_ClockConfig+0x1b8>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	683a      	ldr	r2, [r7, #0]
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e032      	b.n	8002c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c34:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	4916      	ldr	r1, [pc, #88]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c42:	4313      	orrs	r3, r2
 8002c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d009      	beq.n	8002c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c52:	4b12      	ldr	r3, [pc, #72]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	490e      	ldr	r1, [pc, #56]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c66:	f000 f821 	bl	8002cac <HAL_RCC_GetSysClockFreq>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_ClockConfig+0x1bc>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	091b      	lsrs	r3, r3, #4
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	490a      	ldr	r1, [pc, #40]	; (8002ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8002c78:	5ccb      	ldrb	r3, [r1, r3]
 8002c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c7e:	4a09      	ldr	r2, [pc, #36]	; (8002ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c82:	4b09      	ldr	r3, [pc, #36]	; (8002ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fedc 	bl	8000a44 <HAL_InitTick>

  return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	08007218 	.word	0x08007218
 8002ca4:	20000000 	.word	0x20000000
 8002ca8:	20000004 	.word	0x20000004

08002cac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002cac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cb0:	b090      	sub	sp, #64	; 0x40
 8002cb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002cb8:	2300      	movs	r3, #0
 8002cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002cc4:	4b59      	ldr	r3, [pc, #356]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 030c 	and.w	r3, r3, #12
 8002ccc:	2b08      	cmp	r3, #8
 8002cce:	d00d      	beq.n	8002cec <HAL_RCC_GetSysClockFreq+0x40>
 8002cd0:	2b08      	cmp	r3, #8
 8002cd2:	f200 80a1 	bhi.w	8002e18 <HAL_RCC_GetSysClockFreq+0x16c>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x34>
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d003      	beq.n	8002ce6 <HAL_RCC_GetSysClockFreq+0x3a>
 8002cde:	e09b      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ce0:	4b53      	ldr	r3, [pc, #332]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002ce2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002ce4:	e09b      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ce6:	4b53      	ldr	r3, [pc, #332]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002ce8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cea:	e098      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cec:	4b4f      	ldr	r3, [pc, #316]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf6:	4b4d      	ldr	r3, [pc, #308]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d028      	beq.n	8002d54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d02:	4b4a      	ldr	r3, [pc, #296]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	099b      	lsrs	r3, r3, #6
 8002d08:	2200      	movs	r2, #0
 8002d0a:	623b      	str	r3, [r7, #32]
 8002d0c:	627a      	str	r2, [r7, #36]	; 0x24
 8002d0e:	6a3b      	ldr	r3, [r7, #32]
 8002d10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d14:	2100      	movs	r1, #0
 8002d16:	4b47      	ldr	r3, [pc, #284]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d18:	fb03 f201 	mul.w	r2, r3, r1
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	fb00 f303 	mul.w	r3, r0, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	4a43      	ldr	r2, [pc, #268]	; (8002e34 <HAL_RCC_GetSysClockFreq+0x188>)
 8002d26:	fba0 1202 	umull	r1, r2, r0, r2
 8002d2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d2c:	460a      	mov	r2, r1
 8002d2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d32:	4413      	add	r3, r2
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d38:	2200      	movs	r2, #0
 8002d3a:	61bb      	str	r3, [r7, #24]
 8002d3c:	61fa      	str	r2, [r7, #28]
 8002d3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d46:	f7fd fa47 	bl	80001d8 <__aeabi_uldivmod>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4613      	mov	r3, r2
 8002d50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d52:	e053      	b.n	8002dfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d54:	4b35      	ldr	r3, [pc, #212]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	099b      	lsrs	r3, r3, #6
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	617a      	str	r2, [r7, #20]
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002d66:	f04f 0b00 	mov.w	fp, #0
 8002d6a:	4652      	mov	r2, sl
 8002d6c:	465b      	mov	r3, fp
 8002d6e:	f04f 0000 	mov.w	r0, #0
 8002d72:	f04f 0100 	mov.w	r1, #0
 8002d76:	0159      	lsls	r1, r3, #5
 8002d78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d7c:	0150      	lsls	r0, r2, #5
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	ebb2 080a 	subs.w	r8, r2, sl
 8002d86:	eb63 090b 	sbc.w	r9, r3, fp
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	f04f 0300 	mov.w	r3, #0
 8002d92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002d96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002d9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002d9e:	ebb2 0408 	subs.w	r4, r2, r8
 8002da2:	eb63 0509 	sbc.w	r5, r3, r9
 8002da6:	f04f 0200 	mov.w	r2, #0
 8002daa:	f04f 0300 	mov.w	r3, #0
 8002dae:	00eb      	lsls	r3, r5, #3
 8002db0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002db4:	00e2      	lsls	r2, r4, #3
 8002db6:	4614      	mov	r4, r2
 8002db8:	461d      	mov	r5, r3
 8002dba:	eb14 030a 	adds.w	r3, r4, sl
 8002dbe:	603b      	str	r3, [r7, #0]
 8002dc0:	eb45 030b 	adc.w	r3, r5, fp
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f04f 0300 	mov.w	r3, #0
 8002dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dd2:	4629      	mov	r1, r5
 8002dd4:	028b      	lsls	r3, r1, #10
 8002dd6:	4621      	mov	r1, r4
 8002dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ddc:	4621      	mov	r1, r4
 8002dde:	028a      	lsls	r2, r1, #10
 8002de0:	4610      	mov	r0, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002de6:	2200      	movs	r2, #0
 8002de8:	60bb      	str	r3, [r7, #8]
 8002dea:	60fa      	str	r2, [r7, #12]
 8002dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002df0:	f7fd f9f2 	bl	80001d8 <__aeabi_uldivmod>
 8002df4:	4602      	mov	r2, r0
 8002df6:	460b      	mov	r3, r1
 8002df8:	4613      	mov	r3, r2
 8002dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002dfc:	4b0b      	ldr	r3, [pc, #44]	; (8002e2c <HAL_RCC_GetSysClockFreq+0x180>)
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	0c1b      	lsrs	r3, r3, #16
 8002e02:	f003 0303 	and.w	r3, r3, #3
 8002e06:	3301      	adds	r3, #1
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002e0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e16:	e002      	b.n	8002e1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e18:	4b05      	ldr	r3, [pc, #20]	; (8002e30 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3740      	adds	r7, #64	; 0x40
 8002e24:	46bd      	mov	sp, r7
 8002e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e2a:	bf00      	nop
 8002e2c:	40023800 	.word	0x40023800
 8002e30:	00f42400 	.word	0x00f42400
 8002e34:	017d7840 	.word	0x017d7840

08002e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e38:	b480      	push	{r7}
 8002e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e3c:	4b03      	ldr	r3, [pc, #12]	; (8002e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	46bd      	mov	sp, r7
 8002e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e48:	4770      	bx	lr
 8002e4a:	bf00      	nop
 8002e4c:	20000000 	.word	0x20000000

08002e50 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e56:	f7fd fe39 	bl	8000acc <HAL_GetTick>
 8002e5a:	6078      	str	r0, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8002e5c:	4b5d      	ldr	r3, [pc, #372]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a5c      	ldr	r2, [pc, #368]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e62:	f043 0301 	orr.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e68:	e008      	b.n	8002e7c <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e6a:	f7fd fe2f 	bl	8000acc <HAL_GetTick>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	1ad3      	subs	r3, r2, r3
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d901      	bls.n	8002e7c <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8002e78:	2303      	movs	r3, #3
 8002e7a:	e0a7      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8002e7c:	4b55      	ldr	r3, [pc, #340]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0302 	and.w	r3, r3, #2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d0f0      	beq.n	8002e6a <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM[4:0] bits to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
 8002e88:	4b52      	ldr	r3, [pc, #328]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a51      	ldr	r2, [pc, #324]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002e94:	f7fd fe1a 	bl	8000acc <HAL_GetTick>
 8002e98:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8002e9a:	4b4e      	ldr	r3, [pc, #312]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	609a      	str	r2, [r3, #8]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002ea0:	e00a      	b.n	8002eb8 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ea2:	f7fd fe13 	bl	8000acc <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d901      	bls.n	8002eb8 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8002eb4:	2303      	movs	r3, #3
 8002eb6:	e089      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002eb8:	4b46      	ldr	r3, [pc, #280]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002eba:	689b      	ldr	r3, [r3, #8]
 8002ebc:	f003 030c 	and.w	r3, r3, #12
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1ee      	bne.n	8002ea2 <HAL_RCC_DeInit+0x52>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ec4:	f7fd fe02 	bl	8000acc <HAL_GetTick>
 8002ec8:	6078      	str	r0, [r7, #4]

  /* Clear HSEON, HSEBYP and CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a41      	ldr	r2, [pc, #260]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002ed0:	f423 2350 	bic.w	r3, r3, #851968	; 0xd0000
 8002ed4:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002ed6:	e008      	b.n	8002eea <HAL_RCC_DeInit+0x9a>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ed8:	f7fd fdf8 	bl	8000acc <HAL_GetTick>
 8002edc:	4602      	mov	r2, r0
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	1ad3      	subs	r3, r2, r3
 8002ee2:	2b64      	cmp	r3, #100	; 0x64
 8002ee4:	d901      	bls.n	8002eea <HAL_RCC_DeInit+0x9a>
    {
      return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e070      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8002eea:	4b3a      	ldr	r3, [pc, #232]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d1f0      	bne.n	8002ed8 <HAL_RCC_DeInit+0x88>
    }
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002ef6:	f7fd fde9 	bl	8000acc <HAL_GetTick>
 8002efa:	6078      	str	r0, [r7, #4]

  /* Clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002efc:	4b35      	ldr	r3, [pc, #212]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a34      	ldr	r2, [pc, #208]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f06:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f08:	e008      	b.n	8002f1c <HAL_RCC_DeInit+0xcc>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0a:	f7fd fddf 	bl	8000acc <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d901      	bls.n	8002f1c <HAL_RCC_DeInit+0xcc>
    {
      return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e057      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002f1c:	4b2d      	ldr	r3, [pc, #180]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d1f0      	bne.n	8002f0a <HAL_RCC_DeInit+0xba>
    }
  }

#if defined(RCC_PLLI2S_SUPPORT)
  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002f28:	f7fd fdd0 	bl	8000acc <HAL_GetTick>
 8002f2c:	6078      	str	r0, [r7, #4]

  /* Reset PLLI2SON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
 8002f2e:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a28      	ldr	r2, [pc, #160]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f34:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f38:	6013      	str	r3, [r2, #0]

  /* Wait till PLLI2S is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_DeInit+0xfe>
  {
    if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f3c:	f7fd fdc6 	bl	8000acc <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b02      	cmp	r3, #2
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_DeInit+0xfe>
    {
      return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e03e      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
 8002f4e:	4b21      	ldr	r3, [pc, #132]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f0      	bne.n	8002f3c <HAL_RCC_DeInit+0xec>
    defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
#elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
  RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
#else
  RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
 8002f5a:	4b1e      	ldr	r3, [pc, #120]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f5c:	4a1e      	ldr	r2, [pc, #120]	; (8002fd8 <HAL_RCC_DeInit+0x188>)
 8002f5e:	605a      	str	r2, [r3, #4]
#elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
#elif defined(STM32F411xE)
  RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
 8002f60:	4b1c      	ldr	r3, [pc, #112]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_RCC_DeInit+0x18c>)
 8002f64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#elif defined(STM32F446xx)
  RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
#endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */

  /* Disable all interrupts */
  CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
 8002f68:	4b1a      	ldr	r3, [pc, #104]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	4a19      	ldr	r2, [pc, #100]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f6e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002f72:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
 8002f74:	4b17      	ldr	r3, [pc, #92]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a16      	ldr	r2, [pc, #88]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f7e:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYIE)
  CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
#endif /* RCC_CIR_PLLSAIRDYIE */

  /* Clear all interrupt flags */
  SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
 8002f80:	4b14      	ldr	r3, [pc, #80]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	4a13      	ldr	r2, [pc, #76]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f86:	f443 031f 	orr.w	r3, r3, #10420224	; 0x9f0000
 8002f8a:	60d3      	str	r3, [r2, #12]

#if defined(RCC_CIR_PLLI2SRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
 8002f8c:	4b11      	ldr	r3, [pc, #68]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	4a10      	ldr	r2, [pc, #64]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f96:	60d3      	str	r3, [r2, #12]
#if defined(RCC_CIR_PLLSAIRDYC)
  SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
#endif /* RCC_CIR_PLLSAIRDYC */

  /* Clear LSION bit */
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8002f98:	4b0e      	ldr	r3, [pc, #56]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f9c:	4a0d      	ldr	r2, [pc, #52]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6753      	str	r3, [r2, #116]	; 0x74

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa8:	4a0a      	ldr	r2, [pc, #40]	; (8002fd4 <HAL_RCC_DeInit+0x184>)
 8002faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fae:	6753      	str	r3, [r2, #116]	; 0x74

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002fb0:	4b0b      	ldr	r3, [pc, #44]	; (8002fe0 <HAL_RCC_DeInit+0x190>)
 8002fb2:	4a0c      	ldr	r2, [pc, #48]	; (8002fe4 <HAL_RCC_DeInit+0x194>)
 8002fb4:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if(HAL_InitTick(uwTickPrio) != HAL_OK)
 8002fb6:	4b0c      	ldr	r3, [pc, #48]	; (8002fe8 <HAL_RCC_DeInit+0x198>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fd42 	bl	8000a44 <HAL_InitTick>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_DeInit+0x17a>
  {
    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_DeInit+0x17c>
  }
  else
  {
    return HAL_OK;
 8002fca:	2300      	movs	r3, #0
  }
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	04003010 	.word	0x04003010
 8002fdc:	20003010 	.word	0x20003010
 8002fe0:	20000000 	.word	0x20000000
 8002fe4:	00f42400 	.word	0x00f42400
 8002fe8:	20000004 	.word	0x20000004

08002fec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002fec:	b084      	sub	sp, #16
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b084      	sub	sp, #16
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	f107 001c 	add.w	r0, r7, #28
 8002ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003000:	2b01      	cmp	r3, #1
 8003002:	d122      	bne.n	800304a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800302c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800302e:	2b01      	cmp	r3, #1
 8003030:	d105      	bne.n	800303e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	f001 fbee 	bl	8004820 <USB_CoreReset>
 8003044:	4603      	mov	r3, r0
 8003046:	73fb      	strb	r3, [r7, #15]
 8003048:	e01a      	b.n	8003080 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f001 fbe2 	bl	8004820 <USB_CoreReset>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003062:	2b00      	cmp	r3, #0
 8003064:	d106      	bne.n	8003074 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	639a      	str	r2, [r3, #56]	; 0x38
 8003072:	e005      	b.n	8003080 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003082:	2b01      	cmp	r3, #1
 8003084:	d10b      	bne.n	800309e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	689b      	ldr	r3, [r3, #8]
 800308a:	f043 0206 	orr.w	r2, r3, #6
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800309e:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3710      	adds	r7, #16
 80030a4:	46bd      	mov	sp, r7
 80030a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030aa:	b004      	add	sp, #16
 80030ac:	4770      	bx	lr
	...

080030b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b087      	sub	sp, #28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	60b9      	str	r1, [r7, #8]
 80030ba:	4613      	mov	r3, r2
 80030bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80030be:	79fb      	ldrb	r3, [r7, #7]
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d165      	bne.n	8003190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	4a41      	ldr	r2, [pc, #260]	; (80031cc <USB_SetTurnaroundTime+0x11c>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d906      	bls.n	80030da <USB_SetTurnaroundTime+0x2a>
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	4a40      	ldr	r2, [pc, #256]	; (80031d0 <USB_SetTurnaroundTime+0x120>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d202      	bcs.n	80030da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80030d4:	230f      	movs	r3, #15
 80030d6:	617b      	str	r3, [r7, #20]
 80030d8:	e062      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	4a3c      	ldr	r2, [pc, #240]	; (80031d0 <USB_SetTurnaroundTime+0x120>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d306      	bcc.n	80030f0 <USB_SetTurnaroundTime+0x40>
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	4a3b      	ldr	r2, [pc, #236]	; (80031d4 <USB_SetTurnaroundTime+0x124>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d202      	bcs.n	80030f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80030ea:	230e      	movs	r3, #14
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	e057      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4a38      	ldr	r2, [pc, #224]	; (80031d4 <USB_SetTurnaroundTime+0x124>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d306      	bcc.n	8003106 <USB_SetTurnaroundTime+0x56>
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	4a37      	ldr	r2, [pc, #220]	; (80031d8 <USB_SetTurnaroundTime+0x128>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d202      	bcs.n	8003106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003100:	230d      	movs	r3, #13
 8003102:	617b      	str	r3, [r7, #20]
 8003104:	e04c      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <USB_SetTurnaroundTime+0x128>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d306      	bcc.n	800311c <USB_SetTurnaroundTime+0x6c>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	4a32      	ldr	r2, [pc, #200]	; (80031dc <USB_SetTurnaroundTime+0x12c>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d802      	bhi.n	800311c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003116:	230c      	movs	r3, #12
 8003118:	617b      	str	r3, [r7, #20]
 800311a:	e041      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4a2f      	ldr	r2, [pc, #188]	; (80031dc <USB_SetTurnaroundTime+0x12c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d906      	bls.n	8003132 <USB_SetTurnaroundTime+0x82>
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4a2e      	ldr	r2, [pc, #184]	; (80031e0 <USB_SetTurnaroundTime+0x130>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d802      	bhi.n	8003132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800312c:	230b      	movs	r3, #11
 800312e:	617b      	str	r3, [r7, #20]
 8003130:	e036      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	4a2a      	ldr	r2, [pc, #168]	; (80031e0 <USB_SetTurnaroundTime+0x130>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d906      	bls.n	8003148 <USB_SetTurnaroundTime+0x98>
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	4a29      	ldr	r2, [pc, #164]	; (80031e4 <USB_SetTurnaroundTime+0x134>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d802      	bhi.n	8003148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003142:	230a      	movs	r3, #10
 8003144:	617b      	str	r3, [r7, #20]
 8003146:	e02b      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	4a26      	ldr	r2, [pc, #152]	; (80031e4 <USB_SetTurnaroundTime+0x134>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d906      	bls.n	800315e <USB_SetTurnaroundTime+0xae>
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <USB_SetTurnaroundTime+0x138>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d202      	bcs.n	800315e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003158:	2309      	movs	r3, #9
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	e020      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4a21      	ldr	r2, [pc, #132]	; (80031e8 <USB_SetTurnaroundTime+0x138>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d306      	bcc.n	8003174 <USB_SetTurnaroundTime+0xc4>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	4a20      	ldr	r2, [pc, #128]	; (80031ec <USB_SetTurnaroundTime+0x13c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d802      	bhi.n	8003174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800316e:	2308      	movs	r3, #8
 8003170:	617b      	str	r3, [r7, #20]
 8003172:	e015      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003174:	68bb      	ldr	r3, [r7, #8]
 8003176:	4a1d      	ldr	r2, [pc, #116]	; (80031ec <USB_SetTurnaroundTime+0x13c>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d906      	bls.n	800318a <USB_SetTurnaroundTime+0xda>
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	4a1c      	ldr	r2, [pc, #112]	; (80031f0 <USB_SetTurnaroundTime+0x140>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d202      	bcs.n	800318a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003184:	2307      	movs	r3, #7
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	e00a      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800318a:	2306      	movs	r3, #6
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	e007      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d102      	bne.n	800319c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003196:	2309      	movs	r3, #9
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	e001      	b.n	80031a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800319c:	2309      	movs	r3, #9
 800319e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	029b      	lsls	r3, r3, #10
 80031b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80031be:	2300      	movs	r3, #0
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	00d8acbf 	.word	0x00d8acbf
 80031d0:	00e4e1c0 	.word	0x00e4e1c0
 80031d4:	00f42400 	.word	0x00f42400
 80031d8:	01067380 	.word	0x01067380
 80031dc:	011a499f 	.word	0x011a499f
 80031e0:	01312cff 	.word	0x01312cff
 80031e4:	014ca43f 	.word	0x014ca43f
 80031e8:	016e3600 	.word	0x016e3600
 80031ec:	01a6ab1f 	.word	0x01a6ab1f
 80031f0:	01e84800 	.word	0x01e84800

080031f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003208:	2300      	movs	r3, #0
}
 800320a:	4618      	mov	r0, r3
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003216:	b480      	push	{r7}
 8003218:	b083      	sub	sp, #12
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f023 0201 	bic.w	r2, r3, #1
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	4618      	mov	r0, r3
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr

08003238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003244:	2300      	movs	r3, #0
 8003246:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d115      	bne.n	8003286 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003266:	2001      	movs	r0, #1
 8003268:	f7fd fc3c 	bl	8000ae4 <HAL_Delay>
      ms++;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3301      	adds	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f001 fa45 	bl	8004702 <USB_GetMode>
 8003278:	4603      	mov	r3, r0
 800327a:	2b01      	cmp	r3, #1
 800327c:	d01e      	beq.n	80032bc <USB_SetCurrentMode+0x84>
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2b31      	cmp	r3, #49	; 0x31
 8003282:	d9f0      	bls.n	8003266 <USB_SetCurrentMode+0x2e>
 8003284:	e01a      	b.n	80032bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003286:	78fb      	ldrb	r3, [r7, #3]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d115      	bne.n	80032b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003298:	2001      	movs	r0, #1
 800329a:	f7fd fc23 	bl	8000ae4 <HAL_Delay>
      ms++;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	3301      	adds	r3, #1
 80032a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f001 fa2c 	bl	8004702 <USB_GetMode>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <USB_SetCurrentMode+0x84>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2b31      	cmp	r3, #49	; 0x31
 80032b4:	d9f0      	bls.n	8003298 <USB_SetCurrentMode+0x60>
 80032b6:	e001      	b.n	80032bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e005      	b.n	80032c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2b32      	cmp	r3, #50	; 0x32
 80032c0:	d101      	bne.n	80032c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80032c2:	2301      	movs	r3, #1
 80032c4:	e000      	b.n	80032c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80032d0:	b084      	sub	sp, #16
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b086      	sub	sp, #24
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
 80032da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80032de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80032ea:	2300      	movs	r3, #0
 80032ec:	613b      	str	r3, [r7, #16]
 80032ee:	e009      	b.n	8003304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	3340      	adds	r3, #64	; 0x40
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	2200      	movs	r2, #0
 80032fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	3301      	adds	r3, #1
 8003302:	613b      	str	r3, [r7, #16]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b0e      	cmp	r3, #14
 8003308:	d9f2      	bls.n	80032f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800330a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800330c:	2b00      	cmp	r3, #0
 800330e:	d11c      	bne.n	800334a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800331e:	f043 0302 	orr.w	r3, r3, #2
 8003322:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003328:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	639a      	str	r2, [r3, #56]	; 0x38
 8003348:	e00b      	b.n	8003362 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003368:	461a      	mov	r2, r3
 800336a:	2300      	movs	r3, #0
 800336c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003374:	4619      	mov	r1, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800337c:	461a      	mov	r2, r3
 800337e:	680b      	ldr	r3, [r1, #0]
 8003380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003384:	2b01      	cmp	r3, #1
 8003386:	d10c      	bne.n	80033a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800338e:	2100      	movs	r1, #0
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f000 f965 	bl	8003660 <USB_SetDevSpeed>
 8003396:	e008      	b.n	80033aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003398:	2101      	movs	r1, #1
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f000 f960 	bl	8003660 <USB_SetDevSpeed>
 80033a0:	e003      	b.n	80033aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80033a2:	2103      	movs	r1, #3
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 f95b 	bl	8003660 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80033aa:	2110      	movs	r1, #16
 80033ac:	6878      	ldr	r0, [r7, #4]
 80033ae:	f000 f8f3 	bl	8003598 <USB_FlushTxFifo>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 f91f 	bl	8003600 <USB_FlushRxFifo>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033d2:	461a      	mov	r2, r3
 80033d4:	2300      	movs	r3, #0
 80033d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033de:	461a      	mov	r2, r3
 80033e0:	2300      	movs	r3, #0
 80033e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ea:	461a      	mov	r2, r3
 80033ec:	2300      	movs	r3, #0
 80033ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	e043      	b.n	800347e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	015a      	lsls	r2, r3, #5
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	4413      	add	r3, r2
 80033fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800340c:	d118      	bne.n	8003440 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	015a      	lsls	r2, r3, #5
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4413      	add	r3, r2
 800341c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003420:	461a      	mov	r2, r3
 8003422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003426:	6013      	str	r3, [r2, #0]
 8003428:	e013      	b.n	8003452 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	015a      	lsls	r2, r3, #5
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4413      	add	r3, r2
 8003432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003436:	461a      	mov	r2, r3
 8003438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800343c:	6013      	str	r3, [r2, #0]
 800343e:	e008      	b.n	8003452 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	015a      	lsls	r2, r3, #5
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	4413      	add	r3, r2
 8003448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800344c:	461a      	mov	r2, r3
 800344e:	2300      	movs	r3, #0
 8003450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	015a      	lsls	r2, r3, #5
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	4413      	add	r3, r2
 800345a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800345e:	461a      	mov	r2, r3
 8003460:	2300      	movs	r3, #0
 8003462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003464:	693b      	ldr	r3, [r7, #16]
 8003466:	015a      	lsls	r2, r3, #5
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	4413      	add	r3, r2
 800346c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003470:	461a      	mov	r2, r3
 8003472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	3301      	adds	r3, #1
 800347c:	613b      	str	r3, [r7, #16]
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	429a      	cmp	r2, r3
 8003484:	d3b7      	bcc.n	80033f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003486:	2300      	movs	r3, #0
 8003488:	613b      	str	r3, [r7, #16]
 800348a:	e043      	b.n	8003514 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800349e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034a2:	d118      	bne.n	80034d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034b6:	461a      	mov	r2, r3
 80034b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80034bc:	6013      	str	r3, [r2, #0]
 80034be:	e013      	b.n	80034e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034cc:	461a      	mov	r2, r3
 80034ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	e008      	b.n	80034e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	015a      	lsls	r2, r3, #5
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4413      	add	r3, r2
 80034de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034e2:	461a      	mov	r2, r3
 80034e4:	2300      	movs	r3, #0
 80034e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	015a      	lsls	r2, r3, #5
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	4413      	add	r3, r2
 80034f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034f4:	461a      	mov	r2, r3
 80034f6:	2300      	movs	r3, #0
 80034f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	4413      	add	r3, r2
 8003502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003506:	461a      	mov	r2, r3
 8003508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800350c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	3301      	adds	r3, #1
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3b7      	bcc.n	800348c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800352a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800352e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800353c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800353e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	f043 0210 	orr.w	r2, r3, #16
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699a      	ldr	r2, [r3, #24]
 8003554:	4b0f      	ldr	r3, [pc, #60]	; (8003594 <USB_DevInit+0x2c4>)
 8003556:	4313      	orrs	r3, r2
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800355c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355e:	2b00      	cmp	r3, #0
 8003560:	d005      	beq.n	800356e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800356e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003570:	2b01      	cmp	r3, #1
 8003572:	d107      	bne.n	8003584 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800357c:	f043 0304 	orr.w	r3, r3, #4
 8003580:	687a      	ldr	r2, [r7, #4]
 8003582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003584:	7dfb      	ldrb	r3, [r7, #23]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3718      	adds	r7, #24
 800358a:	46bd      	mov	sp, r7
 800358c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003590:	b004      	add	sp, #16
 8003592:	4770      	bx	lr
 8003594:	803c3800 	.word	0x803c3800

08003598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003598:	b480      	push	{r7}
 800359a:	b085      	sub	sp, #20
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	3301      	adds	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <USB_FlushTxFifo+0x64>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d901      	bls.n	80035b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e01b      	b.n	80035f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	daf2      	bge.n	80035a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	019b      	lsls	r3, r3, #6
 80035c8:	f043 0220 	orr.w	r2, r3, #32
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3301      	adds	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	4a08      	ldr	r2, [pc, #32]	; (80035fc <USB_FlushTxFifo+0x64>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e006      	b.n	80035f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b20      	cmp	r3, #32
 80035ec:	d0f0      	beq.n	80035d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3714      	adds	r7, #20
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr
 80035fc:	00030d40 	.word	0x00030d40

08003600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003600:	b480      	push	{r7}
 8003602:	b085      	sub	sp, #20
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	3301      	adds	r3, #1
 8003610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a11      	ldr	r2, [pc, #68]	; (800365c <USB_FlushRxFifo+0x5c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d901      	bls.n	800361e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800361a:	2303      	movs	r3, #3
 800361c:	e018      	b.n	8003650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	691b      	ldr	r3, [r3, #16]
 8003622:	2b00      	cmp	r3, #0
 8003624:	daf2      	bge.n	800360c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2210      	movs	r2, #16
 800362e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3301      	adds	r3, #1
 8003634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4a08      	ldr	r2, [pc, #32]	; (800365c <USB_FlushRxFifo+0x5c>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d901      	bls.n	8003642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e006      	b.n	8003650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0310 	and.w	r3, r3, #16
 800364a:	2b10      	cmp	r3, #16
 800364c:	d0f0      	beq.n	8003630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800364e:	2300      	movs	r3, #0
}
 8003650:	4618      	mov	r0, r3
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	00030d40 	.word	0x00030d40

08003660 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	460b      	mov	r3, r1
 800366a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003676:	681a      	ldr	r2, [r3, #0]
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	68f9      	ldr	r1, [r7, #12]
 800367c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003680:	4313      	orrs	r3, r2
 8003682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3714      	adds	r7, #20
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003692:	b480      	push	{r7}
 8003694:	b087      	sub	sp, #28
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 0306 	and.w	r3, r3, #6
 80036aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80036b2:	2300      	movs	r3, #0
 80036b4:	75fb      	strb	r3, [r7, #23]
 80036b6:	e00a      	b.n	80036ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d002      	beq.n	80036c4 <USB_GetDevSpeed+0x32>
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d102      	bne.n	80036ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80036c4:	2302      	movs	r3, #2
 80036c6:	75fb      	strb	r3, [r7, #23]
 80036c8:	e001      	b.n	80036ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80036ca:	230f      	movs	r3, #15
 80036cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80036ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	371c      	adds	r7, #28
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	785b      	ldrb	r3, [r3, #1]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d13a      	bne.n	800376e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036fe:	69da      	ldr	r2, [r3, #28]
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	2101      	movs	r1, #1
 800370a:	fa01 f303 	lsl.w	r3, r1, r3
 800370e:	b29b      	uxth	r3, r3
 8003710:	68f9      	ldr	r1, [r7, #12]
 8003712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003716:	4313      	orrs	r3, r2
 8003718:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d155      	bne.n	80037dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	015a      	lsls	r2, r3, #5
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4413      	add	r3, r2
 8003738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	791b      	ldrb	r3, [r3, #4]
 800374a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800374c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	059b      	lsls	r3, r3, #22
 8003752:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003754:	4313      	orrs	r3, r2
 8003756:	68ba      	ldr	r2, [r7, #8]
 8003758:	0151      	lsls	r1, r2, #5
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	440a      	add	r2, r1
 800375e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	e036      	b.n	80037dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003774:	69da      	ldr	r2, [r3, #28]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	f003 030f 	and.w	r3, r3, #15
 800377e:	2101      	movs	r1, #1
 8003780:	fa01 f303 	lsl.w	r3, r1, r3
 8003784:	041b      	lsls	r3, r3, #16
 8003786:	68f9      	ldr	r1, [r7, #12]
 8003788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800378c:	4313      	orrs	r3, r2
 800378e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d11a      	bne.n	80037dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	791b      	ldrb	r3, [r3, #4]
 80037c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80037c2:	430b      	orrs	r3, r1
 80037c4:	4313      	orrs	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	0151      	lsls	r1, r2, #5
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	440a      	add	r2, r1
 80037ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3714      	adds	r7, #20
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	785b      	ldrb	r3, [r3, #1]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d161      	bne.n	80038cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	015a      	lsls	r2, r3, #5
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4413      	add	r3, r2
 8003810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800381a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800381e:	d11f      	bne.n	8003860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	440a      	add	r2, r1
 8003836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800383a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800383e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	68ba      	ldr	r2, [r7, #8]
 8003850:	0151      	lsls	r1, r2, #5
 8003852:	68fa      	ldr	r2, [r7, #12]
 8003854:	440a      	add	r2, r1
 8003856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800385a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800385e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	2101      	movs	r1, #1
 8003872:	fa01 f303 	lsl.w	r3, r1, r3
 8003876:	b29b      	uxth	r3, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	68f9      	ldr	r1, [r7, #12]
 800387c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003880:	4013      	ands	r3, r2
 8003882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388a:	69da      	ldr	r2, [r3, #28]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	f003 030f 	and.w	r3, r3, #15
 8003894:	2101      	movs	r1, #1
 8003896:	fa01 f303 	lsl.w	r3, r1, r3
 800389a:	b29b      	uxth	r3, r3
 800389c:	43db      	mvns	r3, r3
 800389e:	68f9      	ldr	r1, [r7, #12]
 80038a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a4:	4013      	ands	r3, r2
 80038a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	015a      	lsls	r2, r3, #5
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	4413      	add	r3, r2
 80038b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	0159      	lsls	r1, r3, #5
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	440b      	add	r3, r1
 80038be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c2:	4619      	mov	r1, r3
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <USB_DeactivateEndpoint+0x1b0>)
 80038c6:	4013      	ands	r3, r2
 80038c8:	600b      	str	r3, [r1, #0]
 80038ca:	e060      	b.n	800398e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80038de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80038e2:	d11f      	bne.n	8003924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	0151      	lsls	r1, r2, #5
 8003916:	68fa      	ldr	r2, [r7, #12]
 8003918:	440a      	add	r2, r1
 800391a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800391e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800392a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	f003 030f 	and.w	r3, r3, #15
 8003934:	2101      	movs	r1, #1
 8003936:	fa01 f303 	lsl.w	r3, r1, r3
 800393a:	041b      	lsls	r3, r3, #16
 800393c:	43db      	mvns	r3, r3
 800393e:	68f9      	ldr	r1, [r7, #12]
 8003940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003944:	4013      	ands	r3, r2
 8003946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800394e:	69da      	ldr	r2, [r3, #28]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	f003 030f 	and.w	r3, r3, #15
 8003958:	2101      	movs	r1, #1
 800395a:	fa01 f303 	lsl.w	r3, r1, r3
 800395e:	041b      	lsls	r3, r3, #16
 8003960:	43db      	mvns	r3, r3
 8003962:	68f9      	ldr	r1, [r7, #12]
 8003964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003968:	4013      	ands	r3, r2
 800396a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	015a      	lsls	r2, r3, #5
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	0159      	lsls	r1, r3, #5
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	440b      	add	r3, r1
 8003982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003986:	4619      	mov	r1, r3
 8003988:	4b05      	ldr	r3, [pc, #20]	; (80039a0 <USB_DeactivateEndpoint+0x1b4>)
 800398a:	4013      	ands	r3, r2
 800398c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3714      	adds	r7, #20
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	ec337800 	.word	0xec337800
 80039a0:	eff37800 	.word	0xeff37800

080039a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af02      	add	r7, sp, #8
 80039aa:	60f8      	str	r0, [r7, #12]
 80039ac:	60b9      	str	r1, [r7, #8]
 80039ae:	4613      	mov	r3, r2
 80039b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80039b6:	68bb      	ldr	r3, [r7, #8]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	785b      	ldrb	r3, [r3, #1]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	f040 815c 	bne.w	8003c7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d132      	bne.n	8003a34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	69ba      	ldr	r2, [r7, #24]
 80039de:	0151      	lsls	r1, r2, #5
 80039e0:	69fa      	ldr	r2, [r7, #28]
 80039e2:	440a      	add	r2, r1
 80039e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80039ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80039f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	015a      	lsls	r2, r3, #5
 80039f6:	69fb      	ldr	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039fe:	691b      	ldr	r3, [r3, #16]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	0151      	lsls	r1, r2, #5
 8003a04:	69fa      	ldr	r2, [r7, #28]
 8003a06:	440a      	add	r2, r1
 8003a08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003a10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a12:	69bb      	ldr	r3, [r7, #24]
 8003a14:	015a      	lsls	r2, r3, #5
 8003a16:	69fb      	ldr	r3, [r7, #28]
 8003a18:	4413      	add	r3, r2
 8003a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	69ba      	ldr	r2, [r7, #24]
 8003a22:	0151      	lsls	r1, r2, #5
 8003a24:	69fa      	ldr	r2, [r7, #28]
 8003a26:	440a      	add	r2, r1
 8003a28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a2c:	0cdb      	lsrs	r3, r3, #19
 8003a2e:	04db      	lsls	r3, r3, #19
 8003a30:	6113      	str	r3, [r2, #16]
 8003a32:	e074      	b.n	8003b1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	69fb      	ldr	r3, [r7, #28]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a40:	691b      	ldr	r3, [r3, #16]
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	0151      	lsls	r1, r2, #5
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	440a      	add	r2, r1
 8003a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a4e:	0cdb      	lsrs	r3, r3, #19
 8003a50:	04db      	lsls	r3, r3, #19
 8003a52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	015a      	lsls	r2, r3, #5
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	4413      	add	r3, r2
 8003a5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	69ba      	ldr	r2, [r7, #24]
 8003a64:	0151      	lsls	r1, r2, #5
 8003a66:	69fa      	ldr	r2, [r7, #28]
 8003a68:	440a      	add	r2, r1
 8003a6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003a72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003a76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	015a      	lsls	r2, r3, #5
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	4413      	add	r3, r2
 8003a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003a86:	68bb      	ldr	r3, [r7, #8]
 8003a88:	6999      	ldr	r1, [r3, #24]
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	440b      	add	r3, r1
 8003a90:	1e59      	subs	r1, r3, #1
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	68db      	ldr	r3, [r3, #12]
 8003a96:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003a9c:	4b9d      	ldr	r3, [pc, #628]	; (8003d14 <USB_EPStartXfer+0x370>)
 8003a9e:	400b      	ands	r3, r1
 8003aa0:	69b9      	ldr	r1, [r7, #24]
 8003aa2:	0148      	lsls	r0, r1, #5
 8003aa4:	69f9      	ldr	r1, [r7, #28]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003aac:	4313      	orrs	r3, r2
 8003aae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	015a      	lsls	r2, r3, #5
 8003ab4:	69fb      	ldr	r3, [r7, #28]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003abc:	691a      	ldr	r2, [r3, #16]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	699b      	ldr	r3, [r3, #24]
 8003ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ac6:	69b9      	ldr	r1, [r7, #24]
 8003ac8:	0148      	lsls	r0, r1, #5
 8003aca:	69f9      	ldr	r1, [r7, #28]
 8003acc:	4401      	add	r1, r0
 8003ace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	791b      	ldrb	r3, [r3, #4]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d11f      	bne.n	8003b1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	015a      	lsls	r2, r3, #5
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	4413      	add	r3, r2
 8003ae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	0151      	lsls	r1, r2, #5
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	440a      	add	r2, r1
 8003af4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003af8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003afc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	0151      	lsls	r1, r2, #5
 8003b10:	69fa      	ldr	r2, [r7, #28]
 8003b12:	440a      	add	r2, r1
 8003b14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8003b1e:	79fb      	ldrb	r3, [r7, #7]
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d14b      	bne.n	8003bbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003b24:	68bb      	ldr	r3, [r7, #8]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d009      	beq.n	8003b40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	015a      	lsls	r2, r3, #5
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	4413      	add	r3, r2
 8003b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b38:	461a      	mov	r2, r3
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	695b      	ldr	r3, [r3, #20]
 8003b3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8003b40:	68bb      	ldr	r3, [r7, #8]
 8003b42:	791b      	ldrb	r3, [r3, #4]
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d128      	bne.n	8003b9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003b48:	69fb      	ldr	r3, [r7, #28]
 8003b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d110      	bne.n	8003b7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003b58:	69bb      	ldr	r3, [r7, #24]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	0151      	lsls	r1, r2, #5
 8003b6a:	69fa      	ldr	r2, [r7, #28]
 8003b6c:	440a      	add	r2, r1
 8003b6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	e00f      	b.n	8003b9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	015a      	lsls	r2, r3, #5
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	4413      	add	r3, r2
 8003b82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69ba      	ldr	r2, [r7, #24]
 8003b8a:	0151      	lsls	r1, r2, #5
 8003b8c:	69fa      	ldr	r2, [r7, #28]
 8003b8e:	440a      	add	r2, r1
 8003b90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003b9a:	69bb      	ldr	r3, [r7, #24]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bb8:	6013      	str	r3, [r2, #0]
 8003bba:	e133      	b.n	8003e24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	0151      	lsls	r1, r2, #5
 8003bce:	69fa      	ldr	r2, [r7, #28]
 8003bd0:	440a      	add	r2, r1
 8003bd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003bda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	791b      	ldrb	r3, [r3, #4]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d015      	beq.n	8003c10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	699b      	ldr	r3, [r3, #24]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	f000 811b 	beq.w	8003e24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003bee:	69fb      	ldr	r3, [r7, #28]
 8003bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	f003 030f 	and.w	r3, r3, #15
 8003bfe:	2101      	movs	r1, #1
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	69f9      	ldr	r1, [r7, #28]
 8003c06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	634b      	str	r3, [r1, #52]	; 0x34
 8003c0e:	e109      	b.n	8003e24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d110      	bne.n	8003c42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	0151      	lsls	r1, r2, #5
 8003c32:	69fa      	ldr	r2, [r7, #28]
 8003c34:	440a      	add	r2, r1
 8003c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c3e:	6013      	str	r3, [r2, #0]
 8003c40:	e00f      	b.n	8003c62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	6919      	ldr	r1, [r3, #16]
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	781a      	ldrb	r2, [r3, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	699b      	ldr	r3, [r3, #24]
 8003c6e:	b298      	uxth	r0, r3
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	9300      	str	r3, [sp, #0]
 8003c74:	4603      	mov	r3, r0
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f000 fade 	bl	8004238 <USB_WritePacket>
 8003c7c:	e0d2      	b.n	8003e24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c7e:	69bb      	ldr	r3, [r7, #24]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	69ba      	ldr	r2, [r7, #24]
 8003c8e:	0151      	lsls	r1, r2, #5
 8003c90:	69fa      	ldr	r2, [r7, #28]
 8003c92:	440a      	add	r2, r1
 8003c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c98:	0cdb      	lsrs	r3, r3, #19
 8003c9a:	04db      	lsls	r3, r3, #19
 8003c9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	0151      	lsls	r1, r2, #5
 8003cb0:	69fa      	ldr	r2, [r7, #28]
 8003cb2:	440a      	add	r2, r1
 8003cb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003cc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	699b      	ldr	r3, [r3, #24]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d126      	bne.n	8003d18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	015a      	lsls	r2, r3, #5
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	4413      	add	r3, r2
 8003cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd6:	691a      	ldr	r2, [r3, #16]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ce0:	69b9      	ldr	r1, [r7, #24]
 8003ce2:	0148      	lsls	r0, r1, #5
 8003ce4:	69f9      	ldr	r1, [r7, #28]
 8003ce6:	4401      	add	r1, r0
 8003ce8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003cec:	4313      	orrs	r3, r2
 8003cee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	69fb      	ldr	r3, [r7, #28]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	0151      	lsls	r1, r2, #5
 8003d02:	69fa      	ldr	r2, [r7, #28]
 8003d04:	440a      	add	r2, r1
 8003d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d0e:	6113      	str	r3, [r2, #16]
 8003d10:	e03a      	b.n	8003d88 <USB_EPStartXfer+0x3e4>
 8003d12:	bf00      	nop
 8003d14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	699a      	ldr	r2, [r3, #24]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4413      	add	r3, r2
 8003d22:	1e5a      	subs	r2, r3, #1
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	8afa      	ldrh	r2, [r7, #22]
 8003d34:	fb03 f202 	mul.w	r2, r3, r2
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d48:	691a      	ldr	r2, [r3, #16]
 8003d4a:	8afb      	ldrh	r3, [r7, #22]
 8003d4c:	04d9      	lsls	r1, r3, #19
 8003d4e:	4b38      	ldr	r3, [pc, #224]	; (8003e30 <USB_EPStartXfer+0x48c>)
 8003d50:	400b      	ands	r3, r1
 8003d52:	69b9      	ldr	r1, [r7, #24]
 8003d54:	0148      	lsls	r0, r1, #5
 8003d56:	69f9      	ldr	r1, [r7, #28]
 8003d58:	4401      	add	r1, r0
 8003d5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	015a      	lsls	r2, r3, #5
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	4413      	add	r3, r2
 8003d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	69db      	ldr	r3, [r3, #28]
 8003d74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d78:	69b9      	ldr	r1, [r7, #24]
 8003d7a:	0148      	lsls	r0, r1, #5
 8003d7c:	69f9      	ldr	r1, [r7, #28]
 8003d7e:	4401      	add	r1, r0
 8003d80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d84:	4313      	orrs	r3, r2
 8003d86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003d88:	79fb      	ldrb	r3, [r7, #7]
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d10d      	bne.n	8003daa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d009      	beq.n	8003daa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	6919      	ldr	r1, [r3, #16]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	015a      	lsls	r2, r3, #5
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	4413      	add	r3, r2
 8003da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003da6:	460a      	mov	r2, r1
 8003da8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	791b      	ldrb	r3, [r3, #4]
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d128      	bne.n	8003e04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d110      	bne.n	8003de4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	69fa      	ldr	r2, [r7, #28]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ddc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003de0:	6013      	str	r3, [r2, #0]
 8003de2:	e00f      	b.n	8003e04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	0151      	lsls	r1, r2, #5
 8003df6:	69fa      	ldr	r2, [r7, #28]
 8003df8:	440a      	add	r2, r1
 8003dfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003e04:	69bb      	ldr	r3, [r7, #24]
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	0151      	lsls	r1, r2, #5
 8003e16:	69fa      	ldr	r2, [r7, #28]
 8003e18:	440a      	add	r2, r1
 8003e1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	1ff80000 	.word	0x1ff80000

08003e34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b087      	sub	sp, #28
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	785b      	ldrb	r3, [r3, #1]
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	f040 80ce 	bne.w	8003ff2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d132      	bne.n	8003ec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	015a      	lsls	r2, r3, #5
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	4413      	add	r3, r2
 8003e66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	0151      	lsls	r1, r2, #5
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	440a      	add	r2, r1
 8003e74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003e7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003e80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003e82:	693b      	ldr	r3, [r7, #16]
 8003e84:	015a      	lsls	r2, r3, #5
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	4413      	add	r3, r2
 8003e8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	0151      	lsls	r1, r2, #5
 8003e94:	697a      	ldr	r2, [r7, #20]
 8003e96:	440a      	add	r2, r1
 8003e98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	015a      	lsls	r2, r3, #5
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eae:	691b      	ldr	r3, [r3, #16]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	0151      	lsls	r1, r2, #5
 8003eb4:	697a      	ldr	r2, [r7, #20]
 8003eb6:	440a      	add	r2, r1
 8003eb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ebc:	0cdb      	lsrs	r3, r3, #19
 8003ebe:	04db      	lsls	r3, r3, #19
 8003ec0:	6113      	str	r3, [r2, #16]
 8003ec2:	e04e      	b.n	8003f62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed0:	691b      	ldr	r3, [r3, #16]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	0151      	lsls	r1, r2, #5
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	440a      	add	r2, r1
 8003eda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ede:	0cdb      	lsrs	r3, r3, #19
 8003ee0:	04db      	lsls	r3, r3, #19
 8003ee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	693a      	ldr	r2, [r7, #16]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	697a      	ldr	r2, [r7, #20]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	699a      	ldr	r2, [r3, #24]
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	68db      	ldr	r3, [r3, #12]
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d903      	bls.n	8003f1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	68da      	ldr	r2, [r3, #12]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	015a      	lsls	r2, r3, #5
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	4413      	add	r3, r2
 8003f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	693a      	ldr	r2, [r7, #16]
 8003f2c:	0151      	lsls	r1, r2, #5
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	440a      	add	r2, r1
 8003f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f52:	6939      	ldr	r1, [r7, #16]
 8003f54:	0148      	lsls	r0, r1, #5
 8003f56:	6979      	ldr	r1, [r7, #20]
 8003f58:	4401      	add	r1, r0
 8003f5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003f62:	79fb      	ldrb	r3, [r7, #7]
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	d11e      	bne.n	8003fa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	695b      	ldr	r3, [r3, #20]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d009      	beq.n	8003f84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	015a      	lsls	r2, r3, #5
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	4413      	add	r3, r2
 8003f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	693a      	ldr	r2, [r7, #16]
 8003f94:	0151      	lsls	r1, r2, #5
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	440a      	add	r2, r1
 8003f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fa2:	6013      	str	r3, [r2, #0]
 8003fa4:	e097      	b.n	80040d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003fc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	f000 8083 	beq.w	80040d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	f003 030f 	and.w	r3, r3, #15
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe6:	6979      	ldr	r1, [r7, #20]
 8003fe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fec:	4313      	orrs	r3, r2
 8003fee:	634b      	str	r3, [r1, #52]	; 0x34
 8003ff0:	e071      	b.n	80040d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	693a      	ldr	r2, [r7, #16]
 8004002:	0151      	lsls	r1, r2, #5
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	440a      	add	r2, r1
 8004008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800400c:	0cdb      	lsrs	r3, r3, #19
 800400e:	04db      	lsls	r3, r3, #19
 8004010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	4413      	add	r3, r2
 800401a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	0151      	lsls	r1, r2, #5
 8004024:	697a      	ldr	r2, [r7, #20]
 8004026:	440a      	add	r2, r1
 8004028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800402c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d003      	beq.n	8004046 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68da      	ldr	r2, [r3, #12]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004046:	68bb      	ldr	r3, [r7, #8]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	693a      	ldr	r2, [r7, #16]
 800405e:	0151      	lsls	r1, r2, #5
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	440a      	add	r2, r1
 8004064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800406c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	691a      	ldr	r2, [r3, #16]
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004084:	6939      	ldr	r1, [r7, #16]
 8004086:	0148      	lsls	r0, r1, #5
 8004088:	6979      	ldr	r1, [r7, #20]
 800408a:	4401      	add	r1, r0
 800408c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004090:	4313      	orrs	r3, r2
 8004092:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d10d      	bne.n	80040b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d009      	beq.n	80040b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6919      	ldr	r1, [r3, #16]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	460a      	mov	r2, r1
 80040b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	015a      	lsls	r2, r3, #5
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	4413      	add	r3, r2
 80040be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	693a      	ldr	r2, [r7, #16]
 80040c6:	0151      	lsls	r1, r2, #5
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	440a      	add	r2, r1
 80040cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	371c      	adds	r7, #28
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d14a      	bne.n	8004198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800411a:	f040 8086 	bne.w	800422a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	683a      	ldr	r2, [r7, #0]
 8004130:	7812      	ldrb	r2, [r2, #0]
 8004132:	0151      	lsls	r1, r2, #5
 8004134:	693a      	ldr	r2, [r7, #16]
 8004136:	440a      	add	r2, r1
 8004138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4413      	add	r3, r2
 800414c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	7812      	ldrb	r2, [r2, #0]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	3301      	adds	r3, #1
 800416a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004172:	4293      	cmp	r3, r2
 8004174:	d902      	bls.n	800417c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	75fb      	strb	r3, [r7, #23]
          break;
 800417a:	e056      	b.n	800422a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004194:	d0e7      	beq.n	8004166 <USB_EPStopXfer+0x82>
 8004196:	e048      	b.n	800422a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80041ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80041b0:	d13b      	bne.n	800422a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	015a      	lsls	r2, r3, #5
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	4413      	add	r3, r2
 80041bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	683a      	ldr	r2, [r7, #0]
 80041c4:	7812      	ldrb	r2, [r2, #0]
 80041c6:	0151      	lsls	r1, r2, #5
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	440a      	add	r2, r1
 80041cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80041d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	781b      	ldrb	r3, [r3, #0]
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	7812      	ldrb	r2, [r2, #0]
 80041ea:	0151      	lsls	r1, r2, #5
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	440a      	add	r2, r1
 80041f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	3301      	adds	r3, #1
 80041fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f242 7210 	movw	r2, #10000	; 0x2710
 8004206:	4293      	cmp	r3, r2
 8004208:	d902      	bls.n	8004210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	75fb      	strb	r3, [r7, #23]
          break;
 800420e:	e00c      	b.n	800422a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	015a      	lsls	r2, r3, #5
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	4413      	add	r3, r2
 800421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004228:	d0e7      	beq.n	80041fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800422a:	7dfb      	ldrb	r3, [r7, #23]
}
 800422c:	4618      	mov	r0, r3
 800422e:	371c      	adds	r7, #28
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004238:	b480      	push	{r7}
 800423a:	b089      	sub	sp, #36	; 0x24
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	4611      	mov	r1, r2
 8004244:	461a      	mov	r2, r3
 8004246:	460b      	mov	r3, r1
 8004248:	71fb      	strb	r3, [r7, #7]
 800424a:	4613      	mov	r3, r2
 800424c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	d123      	bne.n	80042a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800425e:	88bb      	ldrh	r3, [r7, #4]
 8004260:	3303      	adds	r3, #3
 8004262:	089b      	lsrs	r3, r3, #2
 8004264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004266:	2300      	movs	r3, #0
 8004268:	61bb      	str	r3, [r7, #24]
 800426a:	e018      	b.n	800429e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	031a      	lsls	r2, r3, #12
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	4413      	add	r3, r2
 8004274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004278:	461a      	mov	r2, r3
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	3301      	adds	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	3301      	adds	r3, #1
 8004290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	3301      	adds	r3, #1
 8004296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	3301      	adds	r3, #1
 800429c:	61bb      	str	r3, [r7, #24]
 800429e:	69ba      	ldr	r2, [r7, #24]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d3e2      	bcc.n	800426c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3724      	adds	r7, #36	; 0x24
 80042ac:	46bd      	mov	sp, r7
 80042ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b2:	4770      	bx	lr

080042b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80042b4:	b480      	push	{r7}
 80042b6:	b08b      	sub	sp, #44	; 0x2c
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	60b9      	str	r1, [r7, #8]
 80042be:	4613      	mov	r3, r2
 80042c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80042ca:	88fb      	ldrh	r3, [r7, #6]
 80042cc:	089b      	lsrs	r3, r3, #2
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80042d2:	88fb      	ldrh	r3, [r7, #6]
 80042d4:	f003 0303 	and.w	r3, r3, #3
 80042d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80042da:	2300      	movs	r3, #0
 80042dc:	623b      	str	r3, [r7, #32]
 80042de:	e014      	b.n	800430a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	3301      	adds	r3, #1
 80042f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f4:	3301      	adds	r3, #1
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	3301      	adds	r3, #1
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	3301      	adds	r3, #1
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004304:	6a3b      	ldr	r3, [r7, #32]
 8004306:	3301      	adds	r3, #1
 8004308:	623b      	str	r3, [r7, #32]
 800430a:	6a3a      	ldr	r2, [r7, #32]
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	429a      	cmp	r2, r3
 8004310:	d3e6      	bcc.n	80042e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004312:	8bfb      	ldrh	r3, [r7, #30]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01e      	beq.n	8004356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800431c:	69bb      	ldr	r3, [r7, #24]
 800431e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004322:	461a      	mov	r2, r3
 8004324:	f107 0310 	add.w	r3, r7, #16
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	fa22 f303 	lsr.w	r3, r2, r3
 8004338:	b2da      	uxtb	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	701a      	strb	r2, [r3, #0]
      i++;
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	3301      	adds	r3, #1
 8004342:	623b      	str	r3, [r7, #32]
      pDest++;
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	3301      	adds	r3, #1
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800434a:	8bfb      	ldrh	r3, [r7, #30]
 800434c:	3b01      	subs	r3, #1
 800434e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004350:	8bfb      	ldrh	r3, [r7, #30]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1ea      	bne.n	800432c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004358:	4618      	mov	r0, r3
 800435a:	372c      	adds	r7, #44	; 0x2c
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr

08004364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
 800436c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	785b      	ldrb	r3, [r3, #1]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d12c      	bne.n	80043da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2b00      	cmp	r3, #0
 8004390:	db12      	blt.n	80043b8 <USB_EPSetStall+0x54>
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00f      	beq.n	80043b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80043b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	015a      	lsls	r2, r3, #5
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4413      	add	r3, r2
 80043c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	68ba      	ldr	r2, [r7, #8]
 80043c8:	0151      	lsls	r1, r2, #5
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	440a      	add	r2, r1
 80043ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80043d6:	6013      	str	r3, [r2, #0]
 80043d8:	e02b      	b.n	8004432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	015a      	lsls	r2, r3, #5
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	4413      	add	r3, r2
 80043e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db12      	blt.n	8004412 <USB_EPSetStall+0xae>
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68ba      	ldr	r2, [r7, #8]
 8004402:	0151      	lsls	r1, r2, #5
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	440a      	add	r2, r1
 8004408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800440c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004412:	68bb      	ldr	r3, [r7, #8]
 8004414:	015a      	lsls	r2, r3, #5
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4413      	add	r3, r2
 800441a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68ba      	ldr	r2, [r7, #8]
 8004422:	0151      	lsls	r1, r2, #5
 8004424:	68fa      	ldr	r2, [r7, #12]
 8004426:	440a      	add	r2, r1
 8004428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d128      	bne.n	80044ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	0151      	lsls	r1, r2, #5
 800446e:	68fa      	ldr	r2, [r7, #12]
 8004470:	440a      	add	r2, r1
 8004472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800447a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	791b      	ldrb	r3, [r3, #4]
 8004480:	2b03      	cmp	r3, #3
 8004482:	d003      	beq.n	800448c <USB_EPClearStall+0x4c>
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	791b      	ldrb	r3, [r3, #4]
 8004488:	2b02      	cmp	r3, #2
 800448a:	d138      	bne.n	80044fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044aa:	6013      	str	r3, [r2, #0]
 80044ac:	e027      	b.n	80044fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	68ba      	ldr	r2, [r7, #8]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80044cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	791b      	ldrb	r3, [r3, #4]
 80044d2:	2b03      	cmp	r3, #3
 80044d4:	d003      	beq.n	80044de <USB_EPClearStall+0x9e>
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	791b      	ldrb	r3, [r3, #4]
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d10f      	bne.n	80044fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	015a      	lsls	r2, r3, #5
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4413      	add	r3, r2
 80044e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	0151      	lsls	r1, r2, #5
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	440a      	add	r2, r1
 80044f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	3714      	adds	r7, #20
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800452e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	78fb      	ldrb	r3, [r7, #3]
 800453a:	011b      	lsls	r3, r3, #4
 800453c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004540:	68f9      	ldr	r1, [r7, #12]
 8004542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800454a:	2300      	movs	r3, #0
}
 800454c:	4618      	mov	r0, r3
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004558:	b480      	push	{r7}
 800455a:	b085      	sub	sp, #20
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004572:	f023 0303 	bic.w	r3, r3, #3
 8004576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004586:	f023 0302 	bic.w	r3, r3, #2
 800458a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3714      	adds	r7, #20
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr

0800459a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80045b4:	f023 0303 	bic.w	r3, r3, #3
 80045b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	68fa      	ldr	r2, [r7, #12]
 80045c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045c8:	f043 0302 	orr.w	r3, r3, #2
 80045cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80045dc:	b480      	push	{r7}
 80045de:	b085      	sub	sp, #20
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	695b      	ldr	r3, [r3, #20]
 80045e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4013      	ands	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80045f4:	68fb      	ldr	r3, [r7, #12]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3714      	adds	r7, #20
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004602:	b480      	push	{r7}
 8004604:	b085      	sub	sp, #20
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461e:	69db      	ldr	r3, [r3, #28]
 8004620:	68ba      	ldr	r2, [r7, #8]
 8004622:	4013      	ands	r3, r2
 8004624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	0c1b      	lsrs	r3, r3, #16
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr

08004636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004636:	b480      	push	{r7}
 8004638:	b085      	sub	sp, #20
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004648:	699b      	ldr	r3, [r3, #24]
 800464a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	68ba      	ldr	r2, [r7, #8]
 8004656:	4013      	ands	r3, r2
 8004658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	b29b      	uxth	r3, r3
}
 800465e:	4618      	mov	r0, r3
 8004660:	3714      	adds	r7, #20
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800466a:	b480      	push	{r7}
 800466c:	b085      	sub	sp, #20
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
 8004672:	460b      	mov	r3, r1
 8004674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	68ba      	ldr	r2, [r7, #8]
 8004694:	4013      	ands	r3, r2
 8004696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004698:	68bb      	ldr	r3, [r7, #8]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b087      	sub	sp, #28
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
 80046ae:	460b      	mov	r3, r1
 80046b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80046ca:	78fb      	ldrb	r3, [r7, #3]
 80046cc:	f003 030f 	and.w	r3, r3, #15
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	fa22 f303 	lsr.w	r3, r2, r3
 80046d6:	01db      	lsls	r3, r3, #7
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	693a      	ldr	r2, [r7, #16]
 80046dc:	4313      	orrs	r3, r2
 80046de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4013      	ands	r3, r2
 80046f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80046f4:	68bb      	ldr	r3, [r7, #8]
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	371c      	adds	r7, #28
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr

08004702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004702:	b480      	push	{r7}
 8004704:	b083      	sub	sp, #12
 8004706:	af00      	add	r7, sp, #0
 8004708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	f003 0301 	and.w	r3, r3, #1
}
 8004712:	4618      	mov	r0, r3
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800471e:	b480      	push	{r7}
 8004720:	b085      	sub	sp, #20
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	68fa      	ldr	r2, [r7, #12]
 8004734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800473c:	f023 0307 	bic.w	r3, r3, #7
 8004740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004756:	2300      	movs	r3, #0
}
 8004758:	4618      	mov	r0, r3
 800475a:	3714      	adds	r7, #20
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004764:	b480      	push	{r7}
 8004766:	b087      	sub	sp, #28
 8004768:	af00      	add	r7, sp, #0
 800476a:	60f8      	str	r0, [r7, #12]
 800476c:	460b      	mov	r3, r1
 800476e:	607a      	str	r2, [r7, #4]
 8004770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	333c      	adds	r3, #60	; 0x3c
 800477a:	3304      	adds	r3, #4
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4a26      	ldr	r2, [pc, #152]	; (800481c <USB_EP0_OutStart+0xb8>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d90a      	bls.n	800479e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004798:	d101      	bne.n	800479e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800479a:	2300      	movs	r3, #0
 800479c:	e037      	b.n	800480e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047a4:	461a      	mov	r2, r3
 80047a6:	2300      	movs	r3, #0
 80047a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	697a      	ldr	r2, [r7, #20]
 80047b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047cc:	f043 0318 	orr.w	r3, r3, #24
 80047d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	697a      	ldr	r2, [r7, #20]
 80047dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80047e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80047e6:	7afb      	ldrb	r3, [r7, #11]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d10f      	bne.n	800480c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f2:	461a      	mov	r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800480a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	4f54300a 	.word	0x4f54300a

08004820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	3301      	adds	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a13      	ldr	r2, [pc, #76]	; (8004884 <USB_CoreReset+0x64>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d901      	bls.n	800483e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e01b      	b.n	8004876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	691b      	ldr	r3, [r3, #16]
 8004842:	2b00      	cmp	r3, #0
 8004844:	daf2      	bge.n	800482c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004846:	2300      	movs	r3, #0
 8004848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	f043 0201 	orr.w	r2, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3301      	adds	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	4a09      	ldr	r2, [pc, #36]	; (8004884 <USB_CoreReset+0x64>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d901      	bls.n	8004868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e006      	b.n	8004876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	f003 0301 	and.w	r3, r3, #1
 8004870:	2b01      	cmp	r3, #1
 8004872:	d0f0      	beq.n	8004856 <USB_CoreReset+0x36>

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	4618      	mov	r0, r3
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	00030d40 	.word	0x00030d40

08004888 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004894:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004898:	f002 fc1e 	bl	80070d8 <USBD_static_malloc>
 800489c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d109      	bne.n	80048b8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	32b0      	adds	r2, #176	; 0xb0
 80048ae:	2100      	movs	r1, #0
 80048b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80048b4:	2302      	movs	r3, #2
 80048b6:	e0d4      	b.n	8004a62 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80048b8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80048bc:	2100      	movs	r1, #0
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f002 fc72 	bl	80071a8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	32b0      	adds	r2, #176	; 0xb0
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	32b0      	adds	r2, #176	; 0xb0
 80048de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	7c1b      	ldrb	r3, [r3, #16]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d138      	bne.n	8004962 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80048f0:	4b5e      	ldr	r3, [pc, #376]	; (8004a6c <USBD_CDC_Init+0x1e4>)
 80048f2:	7819      	ldrb	r1, [r3, #0]
 80048f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f8:	2202      	movs	r2, #2
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f002 fac9 	bl	8006e92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004900:	4b5a      	ldr	r3, [pc, #360]	; (8004a6c <USBD_CDC_Init+0x1e4>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	f003 020f 	and.w	r2, r3, #15
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3324      	adds	r3, #36	; 0x24
 8004916:	2201      	movs	r2, #1
 8004918:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800491a:	4b55      	ldr	r3, [pc, #340]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 800491c:	7819      	ldrb	r1, [r3, #0]
 800491e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004922:	2202      	movs	r2, #2
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f002 fab4 	bl	8006e92 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800492a:	4b51      	ldr	r3, [pc, #324]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	f003 020f 	and.w	r2, r3, #15
 8004932:	6879      	ldr	r1, [r7, #4]
 8004934:	4613      	mov	r3, r2
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	4413      	add	r3, r2
 800493a:	009b      	lsls	r3, r3, #2
 800493c:	440b      	add	r3, r1
 800493e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004942:	2201      	movs	r2, #1
 8004944:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004946:	4b4b      	ldr	r3, [pc, #300]	; (8004a74 <USBD_CDC_Init+0x1ec>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	f003 020f 	and.w	r2, r3, #15
 800494e:	6879      	ldr	r1, [r7, #4]
 8004950:	4613      	mov	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	3326      	adds	r3, #38	; 0x26
 800495c:	2210      	movs	r2, #16
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	e035      	b.n	80049ce <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8004962:	4b42      	ldr	r3, [pc, #264]	; (8004a6c <USBD_CDC_Init+0x1e4>)
 8004964:	7819      	ldrb	r1, [r3, #0]
 8004966:	2340      	movs	r3, #64	; 0x40
 8004968:	2202      	movs	r2, #2
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f002 fa91 	bl	8006e92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8004970:	4b3e      	ldr	r3, [pc, #248]	; (8004a6c <USBD_CDC_Init+0x1e4>)
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	f003 020f 	and.w	r2, r3, #15
 8004978:	6879      	ldr	r1, [r7, #4]
 800497a:	4613      	mov	r3, r2
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	440b      	add	r3, r1
 8004984:	3324      	adds	r3, #36	; 0x24
 8004986:	2201      	movs	r2, #1
 8004988:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800498a:	4b39      	ldr	r3, [pc, #228]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 800498c:	7819      	ldrb	r1, [r3, #0]
 800498e:	2340      	movs	r3, #64	; 0x40
 8004990:	2202      	movs	r2, #2
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f002 fa7d 	bl	8006e92 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004998:	4b35      	ldr	r3, [pc, #212]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80049b0:	2201      	movs	r2, #1
 80049b2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80049b4:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <USBD_CDC_Init+0x1ec>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	f003 020f 	and.w	r2, r3, #15
 80049bc:	6879      	ldr	r1, [r7, #4]
 80049be:	4613      	mov	r3, r2
 80049c0:	009b      	lsls	r3, r3, #2
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	440b      	add	r3, r1
 80049c8:	3326      	adds	r3, #38	; 0x26
 80049ca:	2210      	movs	r2, #16
 80049cc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80049ce:	4b29      	ldr	r3, [pc, #164]	; (8004a74 <USBD_CDC_Init+0x1ec>)
 80049d0:	7819      	ldrb	r1, [r3, #0]
 80049d2:	2308      	movs	r3, #8
 80049d4:	2203      	movs	r2, #3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f002 fa5b 	bl	8006e92 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80049dc:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <USBD_CDC_Init+0x1ec>)
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	f003 020f 	and.w	r2, r3, #15
 80049e4:	6879      	ldr	r1, [r7, #4]
 80049e6:	4613      	mov	r3, r2
 80049e8:	009b      	lsls	r3, r3, #2
 80049ea:	4413      	add	r3, r2
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	440b      	add	r3, r1
 80049f0:	3324      	adds	r3, #36	; 0x24
 80049f2:	2201      	movs	r2, #1
 80049f4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2200      	movs	r2, #0
 80049fa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	33b0      	adds	r3, #176	; 0xb0
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8004a2c:	2302      	movs	r3, #2
 8004a2e:	e018      	b.n	8004a62 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	7c1b      	ldrb	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10a      	bne.n	8004a4e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a38:	4b0d      	ldr	r3, [pc, #52]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 8004a3a:	7819      	ldrb	r1, [r3, #0]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f002 fb12 	bl	8007070 <USBD_LL_PrepareReceive>
 8004a4c:	e008      	b.n	8004a60 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <USBD_CDC_Init+0x1e8>)
 8004a50:	7819      	ldrb	r1, [r3, #0]
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004a58:	2340      	movs	r3, #64	; 0x40
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f002 fb08 	bl	8007070 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20000093 	.word	0x20000093
 8004a70:	20000094 	.word	0x20000094
 8004a74:	20000095 	.word	0x20000095

08004a78 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b082      	sub	sp, #8
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	460b      	mov	r3, r1
 8004a82:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004a84:	4b3a      	ldr	r3, [pc, #232]	; (8004b70 <USBD_CDC_DeInit+0xf8>)
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f002 fa27 	bl	8006ede <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8004a90:	4b37      	ldr	r3, [pc, #220]	; (8004b70 <USBD_CDC_DeInit+0xf8>)
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	f003 020f 	and.w	r2, r3, #15
 8004a98:	6879      	ldr	r1, [r7, #4]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	3324      	adds	r3, #36	; 0x24
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004aaa:	4b32      	ldr	r3, [pc, #200]	; (8004b74 <USBD_CDC_DeInit+0xfc>)
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	4619      	mov	r1, r3
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f002 fa14 	bl	8006ede <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004ab6:	4b2f      	ldr	r3, [pc, #188]	; (8004b74 <USBD_CDC_DeInit+0xfc>)
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	f003 020f 	and.w	r2, r3, #15
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8004ace:	2200      	movs	r2, #0
 8004ad0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8004ad2:	4b29      	ldr	r3, [pc, #164]	; (8004b78 <USBD_CDC_DeInit+0x100>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	4619      	mov	r1, r3
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f002 fa00 	bl	8006ede <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8004ade:	4b26      	ldr	r3, [pc, #152]	; (8004b78 <USBD_CDC_DeInit+0x100>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	f003 020f 	and.w	r2, r3, #15
 8004ae6:	6879      	ldr	r1, [r7, #4]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	4413      	add	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	3324      	adds	r3, #36	; 0x24
 8004af4:	2200      	movs	r2, #0
 8004af6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004af8:	4b1f      	ldr	r3, [pc, #124]	; (8004b78 <USBD_CDC_DeInit+0x100>)
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	f003 020f 	and.w	r2, r3, #15
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	3326      	adds	r3, #38	; 0x26
 8004b0e:	2200      	movs	r2, #0
 8004b10:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	32b0      	adds	r2, #176	; 0xb0
 8004b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01f      	beq.n	8004b64 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	33b0      	adds	r3, #176	; 0xb0
 8004b2e:	009b      	lsls	r3, r3, #2
 8004b30:	4413      	add	r3, r2
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	32b0      	adds	r2, #176	; 0xb0
 8004b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f002 fad4 	bl	80070f4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	32b0      	adds	r2, #176	; 0xb0
 8004b56:	2100      	movs	r1, #0
 8004b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3708      	adds	r7, #8
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000093 	.word	0x20000093
 8004b74:	20000094 	.word	0x20000094
 8004b78:	20000095 	.word	0x20000095

08004b7c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	32b0      	adds	r2, #176	; 0xb0
 8004b90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b94:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d101      	bne.n	8004bac <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e0bf      	b.n	8004d2c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d050      	beq.n	8004c5a <USBD_CDC_Setup+0xde>
 8004bb8:	2b20      	cmp	r3, #32
 8004bba:	f040 80af 	bne.w	8004d1c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	88db      	ldrh	r3, [r3, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d03a      	beq.n	8004c3c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	b25b      	sxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	da1b      	bge.n	8004c08 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	33b0      	adds	r3, #176	; 0xb0
 8004bda:	009b      	lsls	r3, r3, #2
 8004bdc:	4413      	add	r3, r2
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004be6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004be8:	683a      	ldr	r2, [r7, #0]
 8004bea:	88d2      	ldrh	r2, [r2, #6]
 8004bec:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	88db      	ldrh	r3, [r3, #6]
 8004bf2:	2b07      	cmp	r3, #7
 8004bf4:	bf28      	it	cs
 8004bf6:	2307      	movcs	r3, #7
 8004bf8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	89fa      	ldrh	r2, [r7, #14]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f001 fd43 	bl	800668c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004c06:	e090      	b.n	8004d2a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	785a      	ldrb	r2, [r3, #1]
 8004c0c:	693b      	ldr	r3, [r7, #16]
 8004c0e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	88db      	ldrh	r3, [r3, #6]
 8004c16:	2b3f      	cmp	r3, #63	; 0x3f
 8004c18:	d803      	bhi.n	8004c22 <USBD_CDC_Setup+0xa6>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	88db      	ldrh	r3, [r3, #6]
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	e000      	b.n	8004c24 <USBD_CDC_Setup+0xa8>
 8004c22:	2240      	movs	r2, #64	; 0x40
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004c2a:	6939      	ldr	r1, [r7, #16]
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004c32:	461a      	mov	r2, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f001 fd55 	bl	80066e4 <USBD_CtlPrepareRx>
      break;
 8004c3a:	e076      	b.n	8004d2a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	33b0      	adds	r3, #176	; 0xb0
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4413      	add	r3, r2
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	7850      	ldrb	r0, [r2, #1]
 8004c52:	2200      	movs	r2, #0
 8004c54:	6839      	ldr	r1, [r7, #0]
 8004c56:	4798      	blx	r3
      break;
 8004c58:	e067      	b.n	8004d2a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	785b      	ldrb	r3, [r3, #1]
 8004c5e:	2b0b      	cmp	r3, #11
 8004c60:	d851      	bhi.n	8004d06 <USBD_CDC_Setup+0x18a>
 8004c62:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <USBD_CDC_Setup+0xec>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c99 	.word	0x08004c99
 8004c6c:	08004d15 	.word	0x08004d15
 8004c70:	08004d07 	.word	0x08004d07
 8004c74:	08004d07 	.word	0x08004d07
 8004c78:	08004d07 	.word	0x08004d07
 8004c7c:	08004d07 	.word	0x08004d07
 8004c80:	08004d07 	.word	0x08004d07
 8004c84:	08004d07 	.word	0x08004d07
 8004c88:	08004d07 	.word	0x08004d07
 8004c8c:	08004d07 	.word	0x08004d07
 8004c90:	08004cc3 	.word	0x08004cc3
 8004c94:	08004ced 	.word	0x08004ced
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b03      	cmp	r3, #3
 8004ca2:	d107      	bne.n	8004cb4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ca4:	f107 030a 	add.w	r3, r7, #10
 8004ca8:	2202      	movs	r2, #2
 8004caa:	4619      	mov	r1, r3
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f001 fced 	bl	800668c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cb2:	e032      	b.n	8004d1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004cb4:	6839      	ldr	r1, [r7, #0]
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f001 fc77 	bl	80065aa <USBD_CtlError>
            ret = USBD_FAIL;
 8004cbc:	2303      	movs	r3, #3
 8004cbe:	75fb      	strb	r3, [r7, #23]
          break;
 8004cc0:	e02b      	b.n	8004d1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	2b03      	cmp	r3, #3
 8004ccc:	d107      	bne.n	8004cde <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004cce:	f107 030d 	add.w	r3, r7, #13
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f001 fcd8 	bl	800668c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004cdc:	e01d      	b.n	8004d1a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004cde:	6839      	ldr	r1, [r7, #0]
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f001 fc62 	bl	80065aa <USBD_CtlError>
            ret = USBD_FAIL;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	75fb      	strb	r3, [r7, #23]
          break;
 8004cea:	e016      	b.n	8004d1a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b03      	cmp	r3, #3
 8004cf6:	d00f      	beq.n	8004d18 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004cf8:	6839      	ldr	r1, [r7, #0]
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f001 fc55 	bl	80065aa <USBD_CtlError>
            ret = USBD_FAIL;
 8004d00:	2303      	movs	r3, #3
 8004d02:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004d04:	e008      	b.n	8004d18 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004d06:	6839      	ldr	r1, [r7, #0]
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f001 fc4e 	bl	80065aa <USBD_CtlError>
          ret = USBD_FAIL;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	75fb      	strb	r3, [r7, #23]
          break;
 8004d12:	e002      	b.n	8004d1a <USBD_CDC_Setup+0x19e>
          break;
 8004d14:	bf00      	nop
 8004d16:	e008      	b.n	8004d2a <USBD_CDC_Setup+0x1ae>
          break;
 8004d18:	bf00      	nop
      }
      break;
 8004d1a:	e006      	b.n	8004d2a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004d1c:	6839      	ldr	r1, [r7, #0]
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f001 fc43 	bl	80065aa <USBD_CtlError>
      ret = USBD_FAIL;
 8004d24:	2303      	movs	r3, #3
 8004d26:	75fb      	strb	r3, [r7, #23]
      break;
 8004d28:	bf00      	nop
  }

  return (uint8_t)ret;
 8004d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3718      	adds	r7, #24
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004d46:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	32b0      	adds	r2, #176	; 0xb0
 8004d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e065      	b.n	8004e2a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	32b0      	adds	r2, #176	; 0xb0
 8004d68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d6c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004d6e:	78fb      	ldrb	r3, [r7, #3]
 8004d70:	f003 020f 	and.w	r2, r3, #15
 8004d74:	6879      	ldr	r1, [r7, #4]
 8004d76:	4613      	mov	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	009b      	lsls	r3, r3, #2
 8004d7e:	440b      	add	r3, r1
 8004d80:	3318      	adds	r3, #24
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d02f      	beq.n	8004de8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	f003 020f 	and.w	r2, r3, #15
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	4613      	mov	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4413      	add	r3, r2
 8004d96:	009b      	lsls	r3, r3, #2
 8004d98:	440b      	add	r3, r1
 8004d9a:	3318      	adds	r3, #24
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	78fb      	ldrb	r3, [r7, #3]
 8004da0:	f003 010f 	and.w	r1, r3, #15
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	460b      	mov	r3, r1
 8004da8:	00db      	lsls	r3, r3, #3
 8004daa:	440b      	add	r3, r1
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	4403      	add	r3, r0
 8004db0:	3348      	adds	r3, #72	; 0x48
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	fbb2 f1f3 	udiv	r1, r2, r3
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d112      	bne.n	8004de8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004dc2:	78fb      	ldrb	r3, [r7, #3]
 8004dc4:	f003 020f 	and.w	r2, r3, #15
 8004dc8:	6879      	ldr	r1, [r7, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	009b      	lsls	r3, r3, #2
 8004dd2:	440b      	add	r3, r1
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004dda:	78f9      	ldrb	r1, [r7, #3]
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2200      	movs	r2, #0
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f002 f924 	bl	800702e <USBD_LL_Transmit>
 8004de6:	e01f      	b.n	8004e28 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	33b0      	adds	r3, #176	; 0xb0
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d010      	beq.n	8004e28 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	33b0      	adds	r3, #176	; 0xb0
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	68ba      	ldr	r2, [r7, #8]
 8004e1a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004e24:	78fa      	ldrb	r2, [r7, #3]
 8004e26:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3710      	adds	r7, #16
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b084      	sub	sp, #16
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	32b0      	adds	r2, #176	; 0xb0
 8004e48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e4c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	32b0      	adds	r2, #176	; 0xb0
 8004e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004e60:	2303      	movs	r3, #3
 8004e62:	e01a      	b.n	8004e9a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004e64:	78fb      	ldrb	r3, [r7, #3]
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f002 f922 	bl	80070b2 <USBD_LL_GetRxDataSize>
 8004e6e:	4602      	mov	r2, r0
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	33b0      	adds	r3, #176	; 0xb0
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	68db      	ldr	r3, [r3, #12]
 8004e88:	68fa      	ldr	r2, [r7, #12]
 8004e8a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004e94:	4611      	mov	r1, r2
 8004e96:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	32b0      	adds	r2, #176	; 0xb0
 8004eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eb8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004ec0:	2303      	movs	r3, #3
 8004ec2:	e025      	b.n	8004f10 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	33b0      	adds	r3, #176	; 0xb0
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d01a      	beq.n	8004f0e <USBD_CDC_EP0_RxReady+0x6c>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ede:	2bff      	cmp	r3, #255	; 0xff
 8004ee0:	d015      	beq.n	8004f0e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	33b0      	adds	r3, #176	; 0xb0
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	4413      	add	r3, r2
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	68fa      	ldr	r2, [r7, #12]
 8004ef6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004efa:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004f02:	b292      	uxth	r2, r2
 8004f04:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	22ff      	movs	r2, #255	; 0xff
 8004f0a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004f0e:	2300      	movs	r3, #0
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b086      	sub	sp, #24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f20:	2182      	movs	r1, #130	; 0x82
 8004f22:	4818      	ldr	r0, [pc, #96]	; (8004f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f24:	f000 fd09 	bl	800593a <USBD_GetEpDesc>
 8004f28:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f2a:	2101      	movs	r1, #1
 8004f2c:	4815      	ldr	r0, [pc, #84]	; (8004f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f2e:	f000 fd04 	bl	800593a <USBD_GetEpDesc>
 8004f32:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004f34:	2181      	movs	r1, #129	; 0x81
 8004f36:	4813      	ldr	r0, [pc, #76]	; (8004f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004f38:	f000 fcff 	bl	800593a <USBD_GetEpDesc>
 8004f3c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d002      	beq.n	8004f4a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2210      	movs	r2, #16
 8004f48:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d006      	beq.n	8004f5e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f58:	711a      	strb	r2, [r3, #4]
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d006      	beq.n	8004f72 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	2200      	movs	r2, #0
 8004f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f6c:	711a      	strb	r2, [r3, #4]
 8004f6e:	2200      	movs	r2, #0
 8004f70:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2243      	movs	r2, #67	; 0x43
 8004f76:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3718      	adds	r7, #24
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000050 	.word	0x20000050

08004f88 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b086      	sub	sp, #24
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004f90:	2182      	movs	r1, #130	; 0x82
 8004f92:	4818      	ldr	r0, [pc, #96]	; (8004ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f94:	f000 fcd1 	bl	800593a <USBD_GetEpDesc>
 8004f98:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004f9a:	2101      	movs	r1, #1
 8004f9c:	4815      	ldr	r0, [pc, #84]	; (8004ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004f9e:	f000 fccc 	bl	800593a <USBD_GetEpDesc>
 8004fa2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004fa4:	2181      	movs	r1, #129	; 0x81
 8004fa6:	4813      	ldr	r0, [pc, #76]	; (8004ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004fa8:	f000 fcc7 	bl	800593a <USBD_GetEpDesc>
 8004fac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d002      	beq.n	8004fba <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d006      	beq.n	8004fce <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	711a      	strb	r2, [r3, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f042 0202 	orr.w	r2, r2, #2
 8004fcc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d006      	beq.n	8004fe2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	711a      	strb	r2, [r3, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f042 0202 	orr.w	r2, r2, #2
 8004fe0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2243      	movs	r2, #67	; 0x43
 8004fe6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	20000050 	.word	0x20000050

08004ff8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b086      	sub	sp, #24
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8005000:	2182      	movs	r1, #130	; 0x82
 8005002:	4818      	ldr	r0, [pc, #96]	; (8005064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005004:	f000 fc99 	bl	800593a <USBD_GetEpDesc>
 8005008:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800500a:	2101      	movs	r1, #1
 800500c:	4815      	ldr	r0, [pc, #84]	; (8005064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800500e:	f000 fc94 	bl	800593a <USBD_GetEpDesc>
 8005012:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005014:	2181      	movs	r1, #129	; 0x81
 8005016:	4813      	ldr	r0, [pc, #76]	; (8005064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8005018:	f000 fc8f 	bl	800593a <USBD_GetEpDesc>
 800501c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2210      	movs	r2, #16
 8005028:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d006      	beq.n	800503e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	2200      	movs	r2, #0
 8005034:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005038:	711a      	strb	r2, [r3, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d006      	beq.n	8005052 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2200      	movs	r2, #0
 8005048:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800504c:	711a      	strb	r2, [r3, #4]
 800504e:	2200      	movs	r2, #0
 8005050:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2243      	movs	r2, #67	; 0x43
 8005056:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005058:	4b02      	ldr	r3, [pc, #8]	; (8005064 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800505a:	4618      	mov	r0, r3
 800505c:	3718      	adds	r7, #24
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
 8005062:	bf00      	nop
 8005064:	20000050 	.word	0x20000050

08005068 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	220a      	movs	r2, #10
 8005074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	2000000c 	.word	0x2000000c

08005088 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
 8005090:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005098:	2303      	movs	r3, #3
 800509a:	e009      	b.n	80050b0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80050a2:	687a      	ldr	r2, [r7, #4]
 80050a4:	33b0      	adds	r3, #176	; 0xb0
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	370c      	adds	r7, #12
 80050b4:	46bd      	mov	sp, r7
 80050b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ba:	4770      	bx	lr

080050bc <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	60f8      	str	r0, [r7, #12]
 80050c4:	60b9      	str	r1, [r7, #8]
 80050c6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	32b0      	adds	r2, #176	; 0xb0
 80050d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050d6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80050de:	2303      	movs	r3, #3
 80050e0:	e008      	b.n	80050f4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80050f2:	2300      	movs	r3, #0
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	371c      	adds	r7, #28
 80050f8:	46bd      	mov	sp, r7
 80050fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fe:	4770      	bx	lr

08005100 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005100:	b480      	push	{r7}
 8005102:	b085      	sub	sp, #20
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	32b0      	adds	r2, #176	; 0xb0
 8005114:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005118:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d101      	bne.n	8005124 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8005120:	2303      	movs	r3, #3
 8005122:	e004      	b.n	800512e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	683a      	ldr	r2, [r7, #0]
 8005128:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800512c:	2300      	movs	r3, #0
}
 800512e:	4618      	mov	r0, r3
 8005130:	3714      	adds	r7, #20
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
	...

0800513c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	32b0      	adds	r2, #176	; 0xb0
 800514e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005152:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	32b0      	adds	r2, #176	; 0xb0
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8005166:	2303      	movs	r3, #3
 8005168:	e018      	b.n	800519c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	7c1b      	ldrb	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005172:	4b0c      	ldr	r3, [pc, #48]	; (80051a4 <USBD_CDC_ReceivePacket+0x68>)
 8005174:	7819      	ldrb	r1, [r3, #0]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800517c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f001 ff75 	bl	8007070 <USBD_LL_PrepareReceive>
 8005186:	e008      	b.n	800519a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005188:	4b06      	ldr	r3, [pc, #24]	; (80051a4 <USBD_CDC_ReceivePacket+0x68>)
 800518a:	7819      	ldrb	r1, [r3, #0]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005192:	2340      	movs	r3, #64	; 0x40
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 ff6b 	bl	8007070 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800519a:	2300      	movs	r3, #0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}
 80051a4:	20000094 	.word	0x20000094

080051a8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	60f8      	str	r0, [r7, #12]
 80051b0:	60b9      	str	r1, [r7, #8]
 80051b2:	4613      	mov	r3, r2
 80051b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d101      	bne.n	80051c0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80051bc:	2303      	movs	r3, #3
 80051be:	e01f      	b.n	8005200 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	68ba      	ldr	r2, [r7, #8]
 80051e2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	79fa      	ldrb	r2, [r7, #7]
 80051f2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80051f4:	68f8      	ldr	r0, [r7, #12]
 80051f6:	f001 fde5 	bl	8006dc4 <USBD_LL_Init>
 80051fa:	4603      	mov	r3, r0
 80051fc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80051fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d101      	bne.n	8005220 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800521c:	2303      	movs	r3, #3
 800521e:	e025      	b.n	800526c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	683a      	ldr	r2, [r7, #0]
 8005224:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	32ae      	adds	r2, #174	; 0xae
 8005232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d00f      	beq.n	800525c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	32ae      	adds	r2, #174	; 0xae
 8005246:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800524a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800524c:	f107 020e 	add.w	r2, r7, #14
 8005250:	4610      	mov	r0, r2
 8005252:	4798      	blx	r3
 8005254:	4602      	mov	r2, r0
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005262:	1c5a      	adds	r2, r3, #1
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b082      	sub	sp, #8
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f001 fded 	bl	8006e5c <USBD_LL_Start>
 8005282:	4603      	mov	r3, r0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}

0800528c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800528c:	b480      	push	{r7}
 800528e:	b083      	sub	sp, #12
 8005290:	af00      	add	r7, sp, #0
 8005292:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005294:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a0:	4770      	bx	lr

080052a2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b084      	sub	sp, #16
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
 80052aa:	460b      	mov	r3, r1
 80052ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80052ae:	2300      	movs	r3, #0
 80052b0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d009      	beq.n	80052d0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	78fa      	ldrb	r2, [r7, #3]
 80052c6:	4611      	mov	r1, r2
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3710      	adds	r7, #16
 80052d6:	46bd      	mov	sp, r7
 80052d8:	bd80      	pop	{r7, pc}

080052da <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052da:	b580      	push	{r7, lr}
 80052dc:	b084      	sub	sp, #16
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
 80052e2:	460b      	mov	r3, r1
 80052e4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d001      	beq.n	8005304 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005300:	2303      	movs	r3, #3
 8005302:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005304:	7bfb      	ldrb	r3, [r7, #15]
}
 8005306:	4618      	mov	r0, r3
 8005308:	3710      	adds	r7, #16
 800530a:	46bd      	mov	sp, r7
 800530c:	bd80      	pop	{r7, pc}

0800530e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800530e:	b580      	push	{r7, lr}
 8005310:	b084      	sub	sp, #16
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	4618      	mov	r0, r3
 8005322:	f001 f908 	bl	8006536 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005334:	461a      	mov	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b02      	cmp	r3, #2
 8005348:	d01a      	beq.n	8005380 <USBD_LL_SetupStage+0x72>
 800534a:	2b02      	cmp	r3, #2
 800534c:	d822      	bhi.n	8005394 <USBD_LL_SetupStage+0x86>
 800534e:	2b00      	cmp	r3, #0
 8005350:	d002      	beq.n	8005358 <USBD_LL_SetupStage+0x4a>
 8005352:	2b01      	cmp	r3, #1
 8005354:	d00a      	beq.n	800536c <USBD_LL_SetupStage+0x5e>
 8005356:	e01d      	b.n	8005394 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800535e:	4619      	mov	r1, r3
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f000 fb5f 	bl	8005a24 <USBD_StdDevReq>
 8005366:	4603      	mov	r3, r0
 8005368:	73fb      	strb	r3, [r7, #15]
      break;
 800536a:	e020      	b.n	80053ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005372:	4619      	mov	r1, r3
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 fbc7 	bl	8005b08 <USBD_StdItfReq>
 800537a:	4603      	mov	r3, r0
 800537c:	73fb      	strb	r3, [r7, #15]
      break;
 800537e:	e016      	b.n	80053ae <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005386:	4619      	mov	r1, r3
 8005388:	6878      	ldr	r0, [r7, #4]
 800538a:	f000 fc29 	bl	8005be0 <USBD_StdEPReq>
 800538e:	4603      	mov	r3, r0
 8005390:	73fb      	strb	r3, [r7, #15]
      break;
 8005392:	e00c      	b.n	80053ae <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800539a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	4619      	mov	r1, r3
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f001 fdba 	bl	8006f1c <USBD_LL_StallEP>
 80053a8:	4603      	mov	r3, r0
 80053aa:	73fb      	strb	r3, [r7, #15]
      break;
 80053ac:	bf00      	nop
  }

  return ret;
 80053ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	460b      	mov	r3, r1
 80053c2:	607a      	str	r2, [r7, #4]
 80053c4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80053ca:	7afb      	ldrb	r3, [r7, #11]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d16e      	bne.n	80054ae <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053d6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80053de:	2b03      	cmp	r3, #3
 80053e0:	f040 8098 	bne.w	8005514 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d913      	bls.n	8005418 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	689a      	ldr	r2, [r3, #8]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	1ad2      	subs	r2, r2, r3
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80053fe:	693b      	ldr	r3, [r7, #16]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	4293      	cmp	r3, r2
 8005408:	bf28      	it	cs
 800540a:	4613      	movcs	r3, r2
 800540c:	461a      	mov	r2, r3
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f001 f984 	bl	800671e <USBD_CtlContinueRx>
 8005416:	e07d      	b.n	8005514 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	2b02      	cmp	r3, #2
 8005424:	d014      	beq.n	8005450 <USBD_LL_DataOutStage+0x98>
 8005426:	2b02      	cmp	r3, #2
 8005428:	d81d      	bhi.n	8005466 <USBD_LL_DataOutStage+0xae>
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <USBD_LL_DataOutStage+0x7c>
 800542e:	2b01      	cmp	r3, #1
 8005430:	d003      	beq.n	800543a <USBD_LL_DataOutStage+0x82>
 8005432:	e018      	b.n	8005466 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005434:	2300      	movs	r3, #0
 8005436:	75bb      	strb	r3, [r7, #22]
            break;
 8005438:	e018      	b.n	800546c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005440:	b2db      	uxtb	r3, r3
 8005442:	4619      	mov	r1, r3
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f000 fa5e 	bl	8005906 <USBD_CoreFindIF>
 800544a:	4603      	mov	r3, r0
 800544c:	75bb      	strb	r3, [r7, #22]
            break;
 800544e:	e00d      	b.n	800546c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005456:	b2db      	uxtb	r3, r3
 8005458:	4619      	mov	r1, r3
 800545a:	68f8      	ldr	r0, [r7, #12]
 800545c:	f000 fa60 	bl	8005920 <USBD_CoreFindEP>
 8005460:	4603      	mov	r3, r0
 8005462:	75bb      	strb	r3, [r7, #22]
            break;
 8005464:	e002      	b.n	800546c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005466:	2300      	movs	r3, #0
 8005468:	75bb      	strb	r3, [r7, #22]
            break;
 800546a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800546c:	7dbb      	ldrb	r3, [r7, #22]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d119      	bne.n	80054a6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005478:	b2db      	uxtb	r3, r3
 800547a:	2b03      	cmp	r3, #3
 800547c:	d113      	bne.n	80054a6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800547e:	7dba      	ldrb	r2, [r7, #22]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	32ae      	adds	r2, #174	; 0xae
 8005484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00b      	beq.n	80054a6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800548e:	7dba      	ldrb	r2, [r7, #22]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005496:	7dba      	ldrb	r2, [r7, #22]
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	32ae      	adds	r2, #174	; 0xae
 800549c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	68f8      	ldr	r0, [r7, #12]
 80054a4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80054a6:	68f8      	ldr	r0, [r7, #12]
 80054a8:	f001 f94a 	bl	8006740 <USBD_CtlSendStatus>
 80054ac:	e032      	b.n	8005514 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80054ae:	7afb      	ldrb	r3, [r7, #11]
 80054b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	4619      	mov	r1, r3
 80054b8:	68f8      	ldr	r0, [r7, #12]
 80054ba:	f000 fa31 	bl	8005920 <USBD_CoreFindEP>
 80054be:	4603      	mov	r3, r0
 80054c0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80054c2:	7dbb      	ldrb	r3, [r7, #22]
 80054c4:	2bff      	cmp	r3, #255	; 0xff
 80054c6:	d025      	beq.n	8005514 <USBD_LL_DataOutStage+0x15c>
 80054c8:	7dbb      	ldrb	r3, [r7, #22]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d122      	bne.n	8005514 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054d4:	b2db      	uxtb	r3, r3
 80054d6:	2b03      	cmp	r3, #3
 80054d8:	d117      	bne.n	800550a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80054da:	7dba      	ldrb	r2, [r7, #22]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	32ae      	adds	r2, #174	; 0xae
 80054e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00f      	beq.n	800550a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80054ea:	7dba      	ldrb	r2, [r7, #22]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80054f2:	7dba      	ldrb	r2, [r7, #22]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	32ae      	adds	r2, #174	; 0xae
 80054f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054fc:	699b      	ldr	r3, [r3, #24]
 80054fe:	7afa      	ldrb	r2, [r7, #11]
 8005500:	4611      	mov	r1, r2
 8005502:	68f8      	ldr	r0, [r7, #12]
 8005504:	4798      	blx	r3
 8005506:	4603      	mov	r3, r0
 8005508:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800550a:	7dfb      	ldrb	r3, [r7, #23]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d001      	beq.n	8005514 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005510:	7dfb      	ldrb	r3, [r7, #23]
 8005512:	e000      	b.n	8005516 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3718      	adds	r7, #24
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b086      	sub	sp, #24
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	460b      	mov	r3, r1
 8005528:	607a      	str	r2, [r7, #4]
 800552a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800552c:	7afb      	ldrb	r3, [r7, #11]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d16f      	bne.n	8005612 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3314      	adds	r3, #20
 8005536:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800553e:	2b02      	cmp	r3, #2
 8005540:	d15a      	bne.n	80055f8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	68db      	ldr	r3, [r3, #12]
 800554a:	429a      	cmp	r2, r3
 800554c:	d914      	bls.n	8005578 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	689a      	ldr	r2, [r3, #8]
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	689b      	ldr	r3, [r3, #8]
 8005560:	461a      	mov	r2, r3
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f001 f8ac 	bl	80066c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800556a:	2300      	movs	r3, #0
 800556c:	2200      	movs	r2, #0
 800556e:	2100      	movs	r1, #0
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f001 fd7d 	bl	8007070 <USBD_LL_PrepareReceive>
 8005576:	e03f      	b.n	80055f8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	68da      	ldr	r2, [r3, #12]
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	429a      	cmp	r2, r3
 8005582:	d11c      	bne.n	80055be <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800558c:	429a      	cmp	r2, r3
 800558e:	d316      	bcc.n	80055be <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005590:	693b      	ldr	r3, [r7, #16]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800559a:	429a      	cmp	r2, r3
 800559c:	d20f      	bcs.n	80055be <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800559e:	2200      	movs	r2, #0
 80055a0:	2100      	movs	r1, #0
 80055a2:	68f8      	ldr	r0, [r7, #12]
 80055a4:	f001 f88d 	bl	80066c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055b0:	2300      	movs	r3, #0
 80055b2:	2200      	movs	r2, #0
 80055b4:	2100      	movs	r1, #0
 80055b6:	68f8      	ldr	r0, [r7, #12]
 80055b8:	f001 fd5a 	bl	8007070 <USBD_LL_PrepareReceive>
 80055bc:	e01c      	b.n	80055f8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b03      	cmp	r3, #3
 80055c8:	d10f      	bne.n	80055ea <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d009      	beq.n	80055ea <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	68f8      	ldr	r0, [r7, #12]
 80055e8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80055ea:	2180      	movs	r1, #128	; 0x80
 80055ec:	68f8      	ldr	r0, [r7, #12]
 80055ee:	f001 fc95 	bl	8006f1c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80055f2:	68f8      	ldr	r0, [r7, #12]
 80055f4:	f001 f8b7 	bl	8006766 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d03a      	beq.n	8005678 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff fe42 	bl	800528c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2200      	movs	r2, #0
 800560c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005610:	e032      	b.n	8005678 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005612:	7afb      	ldrb	r3, [r7, #11]
 8005614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005618:	b2db      	uxtb	r3, r3
 800561a:	4619      	mov	r1, r3
 800561c:	68f8      	ldr	r0, [r7, #12]
 800561e:	f000 f97f 	bl	8005920 <USBD_CoreFindEP>
 8005622:	4603      	mov	r3, r0
 8005624:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005626:	7dfb      	ldrb	r3, [r7, #23]
 8005628:	2bff      	cmp	r3, #255	; 0xff
 800562a:	d025      	beq.n	8005678 <USBD_LL_DataInStage+0x15a>
 800562c:	7dfb      	ldrb	r3, [r7, #23]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d122      	bne.n	8005678 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005638:	b2db      	uxtb	r3, r3
 800563a:	2b03      	cmp	r3, #3
 800563c:	d11c      	bne.n	8005678 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800563e:	7dfa      	ldrb	r2, [r7, #23]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	32ae      	adds	r2, #174	; 0xae
 8005644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d014      	beq.n	8005678 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800564e:	7dfa      	ldrb	r2, [r7, #23]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005656:	7dfa      	ldrb	r2, [r7, #23]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	32ae      	adds	r2, #174	; 0xae
 800565c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	7afa      	ldrb	r2, [r7, #11]
 8005664:	4611      	mov	r1, r2
 8005666:	68f8      	ldr	r0, [r7, #12]
 8005668:	4798      	blx	r3
 800566a:	4603      	mov	r3, r0
 800566c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800566e:	7dbb      	ldrb	r3, [r7, #22]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d001      	beq.n	8005678 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005674:	7dbb      	ldrb	r3, [r7, #22]
 8005676:	e000      	b.n	800567a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2201      	movs	r2, #1
 8005692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2200      	movs	r2, #0
 80056b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d014      	beq.n	80056e8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00e      	beq.n	80056e8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	6852      	ldr	r2, [r2, #4]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	4611      	mov	r1, r2
 80056da:	6878      	ldr	r0, [r7, #4]
 80056dc:	4798      	blx	r3
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80056e4:	2303      	movs	r3, #3
 80056e6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80056e8:	2340      	movs	r3, #64	; 0x40
 80056ea:	2200      	movs	r2, #0
 80056ec:	2100      	movs	r1, #0
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fbcf 	bl	8006e92 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2240      	movs	r2, #64	; 0x40
 8005700:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005704:	2340      	movs	r3, #64	; 0x40
 8005706:	2200      	movs	r2, #0
 8005708:	2180      	movs	r1, #128	; 0x80
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f001 fbc1 	bl	8006e92 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2201      	movs	r2, #1
 8005714:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2240      	movs	r2, #64	; 0x40
 800571a:	621a      	str	r2, [r3, #32]

  return ret;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}

08005726 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	460b      	mov	r3, r1
 8005730:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	78fa      	ldrb	r2, [r7, #3]
 8005736:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005746:	b480      	push	{r7}
 8005748:	b083      	sub	sp, #12
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005754:	b2da      	uxtb	r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2204      	movs	r2, #4
 8005760:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005772:	b480      	push	{r7}
 8005774:	b083      	sub	sp, #12
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b04      	cmp	r3, #4
 8005784:	d106      	bne.n	8005794 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800578c:	b2da      	uxtb	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80057a2:	b580      	push	{r7, lr}
 80057a4:	b082      	sub	sp, #8
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	2b03      	cmp	r3, #3
 80057b4:	d110      	bne.n	80057d8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00b      	beq.n	80057d8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057c6:	69db      	ldr	r3, [r3, #28]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	32ae      	adds	r2, #174	; 0xae
 80057f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d101      	bne.n	8005804 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005800:	2303      	movs	r3, #3
 8005802:	e01c      	b.n	800583e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800580a:	b2db      	uxtb	r3, r3
 800580c:	2b03      	cmp	r3, #3
 800580e:	d115      	bne.n	800583c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	32ae      	adds	r2, #174	; 0xae
 800581a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800581e:	6a1b      	ldr	r3, [r3, #32]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d00b      	beq.n	800583c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	32ae      	adds	r2, #174	; 0xae
 800582e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005832:	6a1b      	ldr	r3, [r3, #32]
 8005834:	78fa      	ldrb	r2, [r7, #3]
 8005836:	4611      	mov	r1, r2
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800583c:	2300      	movs	r3, #0
}
 800583e:	4618      	mov	r0, r3
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b082      	sub	sp, #8
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
 800584e:	460b      	mov	r3, r1
 8005850:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	32ae      	adds	r2, #174	; 0xae
 800585c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005864:	2303      	movs	r3, #3
 8005866:	e01c      	b.n	80058a2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b03      	cmp	r3, #3
 8005872:	d115      	bne.n	80058a0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	32ae      	adds	r2, #174	; 0xae
 800587e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	32ae      	adds	r2, #174	; 0xae
 8005892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	78fa      	ldrb	r2, [r7, #3]
 800589a:	4611      	mov	r1, r2
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3708      	adds	r7, #8
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058aa:	b480      	push	{r7}
 80058ac:	b083      	sub	sp, #12
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058b2:	2300      	movs	r3, #0
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	370c      	adds	r7, #12
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr

080058c0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b084      	sub	sp, #16
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80058c8:	2300      	movs	r3, #0
 80058ca:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00e      	beq.n	80058fc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	6852      	ldr	r2, [r2, #4]
 80058ea:	b2d2      	uxtb	r2, r2
 80058ec:	4611      	mov	r1, r2
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	4798      	blx	r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80058f8:	2303      	movs	r3, #3
 80058fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3710      	adds	r7, #16
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
 800590e:	460b      	mov	r3, r1
 8005910:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005912:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005914:	4618      	mov	r0, r3
 8005916:	370c      	adds	r7, #12
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005920:	b480      	push	{r7}
 8005922:	b083      	sub	sp, #12
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	460b      	mov	r3, r1
 800592a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800592c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800592e:	4618      	mov	r0, r3
 8005930:	370c      	adds	r7, #12
 8005932:	46bd      	mov	sp, r7
 8005934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005938:	4770      	bx	lr

0800593a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b086      	sub	sp, #24
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	460b      	mov	r3, r1
 8005944:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	885b      	ldrh	r3, [r3, #2]
 8005956:	b29a      	uxth	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	b29b      	uxth	r3, r3
 800595e:	429a      	cmp	r2, r3
 8005960:	d920      	bls.n	80059a4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	781b      	ldrb	r3, [r3, #0]
 8005966:	b29b      	uxth	r3, r3
 8005968:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800596a:	e013      	b.n	8005994 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800596c:	f107 030a 	add.w	r3, r7, #10
 8005970:	4619      	mov	r1, r3
 8005972:	6978      	ldr	r0, [r7, #20]
 8005974:	f000 f81b 	bl	80059ae <USBD_GetNextDesc>
 8005978:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	785b      	ldrb	r3, [r3, #1]
 800597e:	2b05      	cmp	r3, #5
 8005980:	d108      	bne.n	8005994 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	789b      	ldrb	r3, [r3, #2]
 800598a:	78fa      	ldrb	r2, [r7, #3]
 800598c:	429a      	cmp	r2, r3
 800598e:	d008      	beq.n	80059a2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005990:	2300      	movs	r3, #0
 8005992:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	885b      	ldrh	r3, [r3, #2]
 8005998:	b29a      	uxth	r2, r3
 800599a:	897b      	ldrh	r3, [r7, #10]
 800599c:	429a      	cmp	r2, r3
 800599e:	d8e5      	bhi.n	800596c <USBD_GetEpDesc+0x32>
 80059a0:	e000      	b.n	80059a4 <USBD_GetEpDesc+0x6a>
          break;
 80059a2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80059a4:	693b      	ldr	r3, [r7, #16]
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3718      	adds	r7, #24
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}

080059ae <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b085      	sub	sp, #20
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
 80059b6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	881a      	ldrh	r2, [r3, #0]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	b29b      	uxth	r3, r3
 80059c6:	4413      	add	r3, r2
 80059c8:	b29a      	uxth	r2, r3
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	3301      	adds	r3, #1
 80059fe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a06:	8a3b      	ldrh	r3, [r7, #16]
 8005a08:	021b      	lsls	r3, r3, #8
 8005a0a:	b21a      	sxth	r2, r3
 8005a0c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	b21b      	sxth	r3, r3
 8005a14:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005a16:	89fb      	ldrh	r3, [r7, #14]
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	371c      	adds	r7, #28
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2e:	2300      	movs	r3, #0
 8005a30:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	781b      	ldrb	r3, [r3, #0]
 8005a36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d005      	beq.n	8005a4a <USBD_StdDevReq+0x26>
 8005a3e:	2b40      	cmp	r3, #64	; 0x40
 8005a40:	d857      	bhi.n	8005af2 <USBD_StdDevReq+0xce>
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d00f      	beq.n	8005a66 <USBD_StdDevReq+0x42>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d153      	bne.n	8005af2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	32ae      	adds	r2, #174	; 0xae
 8005a54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	6839      	ldr	r1, [r7, #0]
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	4798      	blx	r3
 8005a60:	4603      	mov	r3, r0
 8005a62:	73fb      	strb	r3, [r7, #15]
      break;
 8005a64:	e04a      	b.n	8005afc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	785b      	ldrb	r3, [r3, #1]
 8005a6a:	2b09      	cmp	r3, #9
 8005a6c:	d83b      	bhi.n	8005ae6 <USBD_StdDevReq+0xc2>
 8005a6e:	a201      	add	r2, pc, #4	; (adr r2, 8005a74 <USBD_StdDevReq+0x50>)
 8005a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a74:	08005ac9 	.word	0x08005ac9
 8005a78:	08005add 	.word	0x08005add
 8005a7c:	08005ae7 	.word	0x08005ae7
 8005a80:	08005ad3 	.word	0x08005ad3
 8005a84:	08005ae7 	.word	0x08005ae7
 8005a88:	08005aa7 	.word	0x08005aa7
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005ae7 	.word	0x08005ae7
 8005a94:	08005abf 	.word	0x08005abf
 8005a98:	08005ab1 	.word	0x08005ab1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005a9c:	6839      	ldr	r1, [r7, #0]
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fa3c 	bl	8005f1c <USBD_GetDescriptor>
          break;
 8005aa4:	e024      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005aa6:	6839      	ldr	r1, [r7, #0]
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 fba1 	bl	80061f0 <USBD_SetAddress>
          break;
 8005aae:	e01f      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005ab0:	6839      	ldr	r1, [r7, #0]
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fbe0 	bl	8006278 <USBD_SetConfig>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	73fb      	strb	r3, [r7, #15]
          break;
 8005abc:	e018      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005abe:	6839      	ldr	r1, [r7, #0]
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 fc83 	bl	80063cc <USBD_GetConfig>
          break;
 8005ac6:	e013      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005ac8:	6839      	ldr	r1, [r7, #0]
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fcb4 	bl	8006438 <USBD_GetStatus>
          break;
 8005ad0:	e00e      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fce3 	bl	80064a0 <USBD_SetFeature>
          break;
 8005ada:	e009      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005adc:	6839      	ldr	r1, [r7, #0]
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f000 fd07 	bl	80064f2 <USBD_ClrFeature>
          break;
 8005ae4:	e004      	b.n	8005af0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f000 fd5e 	bl	80065aa <USBD_CtlError>
          break;
 8005aee:	bf00      	nop
      }
      break;
 8005af0:	e004      	b.n	8005afc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005af2:	6839      	ldr	r1, [r7, #0]
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fd58 	bl	80065aa <USBD_CtlError>
      break;
 8005afa:	bf00      	nop
  }

  return ret;
 8005afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	3710      	adds	r7, #16
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
 8005b06:	bf00      	nop

08005b08 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b1e:	2b40      	cmp	r3, #64	; 0x40
 8005b20:	d005      	beq.n	8005b2e <USBD_StdItfReq+0x26>
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	d852      	bhi.n	8005bcc <USBD_StdItfReq+0xc4>
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d001      	beq.n	8005b2e <USBD_StdItfReq+0x26>
 8005b2a:	2b20      	cmp	r3, #32
 8005b2c:	d14e      	bne.n	8005bcc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b34:	b2db      	uxtb	r3, r3
 8005b36:	3b01      	subs	r3, #1
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d840      	bhi.n	8005bbe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	889b      	ldrh	r3, [r3, #4]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d836      	bhi.n	8005bb4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	889b      	ldrh	r3, [r3, #4]
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	6878      	ldr	r0, [r7, #4]
 8005b50:	f7ff fed9 	bl	8005906 <USBD_CoreFindIF>
 8005b54:	4603      	mov	r3, r0
 8005b56:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b58:	7bbb      	ldrb	r3, [r7, #14]
 8005b5a:	2bff      	cmp	r3, #255	; 0xff
 8005b5c:	d01d      	beq.n	8005b9a <USBD_StdItfReq+0x92>
 8005b5e:	7bbb      	ldrb	r3, [r7, #14]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d11a      	bne.n	8005b9a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005b64:	7bba      	ldrb	r2, [r7, #14]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	32ae      	adds	r2, #174	; 0xae
 8005b6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00f      	beq.n	8005b94 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005b74:	7bba      	ldrb	r2, [r7, #14]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005b7c:	7bba      	ldrb	r2, [r7, #14]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	32ae      	adds	r2, #174	; 0xae
 8005b82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	6839      	ldr	r1, [r7, #0]
 8005b8a:	6878      	ldr	r0, [r7, #4]
 8005b8c:	4798      	blx	r3
 8005b8e:	4603      	mov	r3, r0
 8005b90:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b92:	e004      	b.n	8005b9e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005b98:	e001      	b.n	8005b9e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005b9a:	2303      	movs	r3, #3
 8005b9c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	88db      	ldrh	r3, [r3, #6]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d110      	bne.n	8005bc8 <USBD_StdItfReq+0xc0>
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d10d      	bne.n	8005bc8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f000 fdc7 	bl	8006740 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005bb2:	e009      	b.n	8005bc8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005bb4:	6839      	ldr	r1, [r7, #0]
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f000 fcf7 	bl	80065aa <USBD_CtlError>
          break;
 8005bbc:	e004      	b.n	8005bc8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005bbe:	6839      	ldr	r1, [r7, #0]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 fcf2 	bl	80065aa <USBD_CtlError>
          break;
 8005bc6:	e000      	b.n	8005bca <USBD_StdItfReq+0xc2>
          break;
 8005bc8:	bf00      	nop
      }
      break;
 8005bca:	e004      	b.n	8005bd6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005bcc:	6839      	ldr	r1, [r7, #0]
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f000 fceb 	bl	80065aa <USBD_CtlError>
      break;
 8005bd4:	bf00      	nop
  }

  return ret;
 8005bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
 8005be8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005bea:	2300      	movs	r3, #0
 8005bec:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	889b      	ldrh	r3, [r3, #4]
 8005bf2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d007      	beq.n	8005c10 <USBD_StdEPReq+0x30>
 8005c00:	2b40      	cmp	r3, #64	; 0x40
 8005c02:	f200 817f 	bhi.w	8005f04 <USBD_StdEPReq+0x324>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d02a      	beq.n	8005c60 <USBD_StdEPReq+0x80>
 8005c0a:	2b20      	cmp	r3, #32
 8005c0c:	f040 817a 	bne.w	8005f04 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c10:	7bbb      	ldrb	r3, [r7, #14]
 8005c12:	4619      	mov	r1, r3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f7ff fe83 	bl	8005920 <USBD_CoreFindEP>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c1e:	7b7b      	ldrb	r3, [r7, #13]
 8005c20:	2bff      	cmp	r3, #255	; 0xff
 8005c22:	f000 8174 	beq.w	8005f0e <USBD_StdEPReq+0x32e>
 8005c26:	7b7b      	ldrb	r3, [r7, #13]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f040 8170 	bne.w	8005f0e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005c2e:	7b7a      	ldrb	r2, [r7, #13]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005c36:	7b7a      	ldrb	r2, [r7, #13]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	32ae      	adds	r2, #174	; 0xae
 8005c3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	f000 8163 	beq.w	8005f0e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005c48:	7b7a      	ldrb	r2, [r7, #13]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	32ae      	adds	r2, #174	; 0xae
 8005c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c5e:	e156      	b.n	8005f0e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	785b      	ldrb	r3, [r3, #1]
 8005c64:	2b03      	cmp	r3, #3
 8005c66:	d008      	beq.n	8005c7a <USBD_StdEPReq+0x9a>
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	f300 8145 	bgt.w	8005ef8 <USBD_StdEPReq+0x318>
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	f000 809b 	beq.w	8005daa <USBD_StdEPReq+0x1ca>
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	d03c      	beq.n	8005cf2 <USBD_StdEPReq+0x112>
 8005c78:	e13e      	b.n	8005ef8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c80:	b2db      	uxtb	r3, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d002      	beq.n	8005c8c <USBD_StdEPReq+0xac>
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d016      	beq.n	8005cb8 <USBD_StdEPReq+0xd8>
 8005c8a:	e02c      	b.n	8005ce6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c8c:	7bbb      	ldrb	r3, [r7, #14]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d00d      	beq.n	8005cae <USBD_StdEPReq+0xce>
 8005c92:	7bbb      	ldrb	r3, [r7, #14]
 8005c94:	2b80      	cmp	r3, #128	; 0x80
 8005c96:	d00a      	beq.n	8005cae <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c98:	7bbb      	ldrb	r3, [r7, #14]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f001 f93d 	bl	8006f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ca2:	2180      	movs	r1, #128	; 0x80
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f001 f939 	bl	8006f1c <USBD_LL_StallEP>
 8005caa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005cac:	e020      	b.n	8005cf0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005cae:	6839      	ldr	r1, [r7, #0]
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 fc7a 	bl	80065aa <USBD_CtlError>
              break;
 8005cb6:	e01b      	b.n	8005cf0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	885b      	ldrh	r3, [r3, #2]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d10e      	bne.n	8005cde <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005cc0:	7bbb      	ldrb	r3, [r7, #14]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00b      	beq.n	8005cde <USBD_StdEPReq+0xfe>
 8005cc6:	7bbb      	ldrb	r3, [r7, #14]
 8005cc8:	2b80      	cmp	r3, #128	; 0x80
 8005cca:	d008      	beq.n	8005cde <USBD_StdEPReq+0xfe>
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	88db      	ldrh	r3, [r3, #6]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d104      	bne.n	8005cde <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	6878      	ldr	r0, [r7, #4]
 8005cda:	f001 f91f 	bl	8006f1c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 fd2e 	bl	8006740 <USBD_CtlSendStatus>

              break;
 8005ce4:	e004      	b.n	8005cf0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005ce6:	6839      	ldr	r1, [r7, #0]
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fc5e 	bl	80065aa <USBD_CtlError>
              break;
 8005cee:	bf00      	nop
          }
          break;
 8005cf0:	e107      	b.n	8005f02 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	d002      	beq.n	8005d04 <USBD_StdEPReq+0x124>
 8005cfe:	2b03      	cmp	r3, #3
 8005d00:	d016      	beq.n	8005d30 <USBD_StdEPReq+0x150>
 8005d02:	e04b      	b.n	8005d9c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d04:	7bbb      	ldrb	r3, [r7, #14]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d00d      	beq.n	8005d26 <USBD_StdEPReq+0x146>
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	2b80      	cmp	r3, #128	; 0x80
 8005d0e:	d00a      	beq.n	8005d26 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d10:	7bbb      	ldrb	r3, [r7, #14]
 8005d12:	4619      	mov	r1, r3
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f001 f901 	bl	8006f1c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d1a:	2180      	movs	r1, #128	; 0x80
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f001 f8fd 	bl	8006f1c <USBD_LL_StallEP>
 8005d22:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d24:	e040      	b.n	8005da8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 fc3e 	bl	80065aa <USBD_CtlError>
              break;
 8005d2e:	e03b      	b.n	8005da8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	885b      	ldrh	r3, [r3, #2]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d136      	bne.n	8005da6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005d38:	7bbb      	ldrb	r3, [r7, #14]
 8005d3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d004      	beq.n	8005d4c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005d42:	7bbb      	ldrb	r3, [r7, #14]
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f001 f907 	bl	8006f5a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fcf7 	bl	8006740 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fde2 	bl	8005920 <USBD_CoreFindEP>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d60:	7b7b      	ldrb	r3, [r7, #13]
 8005d62:	2bff      	cmp	r3, #255	; 0xff
 8005d64:	d01f      	beq.n	8005da6 <USBD_StdEPReq+0x1c6>
 8005d66:	7b7b      	ldrb	r3, [r7, #13]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11c      	bne.n	8005da6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005d6c:	7b7a      	ldrb	r2, [r7, #13]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005d74:	7b7a      	ldrb	r2, [r7, #13]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	32ae      	adds	r2, #174	; 0xae
 8005d7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d7e:	689b      	ldr	r3, [r3, #8]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d010      	beq.n	8005da6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005d84:	7b7a      	ldrb	r2, [r7, #13]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	32ae      	adds	r2, #174	; 0xae
 8005d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	6839      	ldr	r1, [r7, #0]
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	4798      	blx	r3
 8005d96:	4603      	mov	r3, r0
 8005d98:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005d9a:	e004      	b.n	8005da6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005d9c:	6839      	ldr	r1, [r7, #0]
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 fc03 	bl	80065aa <USBD_CtlError>
              break;
 8005da4:	e000      	b.n	8005da8 <USBD_StdEPReq+0x1c8>
              break;
 8005da6:	bf00      	nop
          }
          break;
 8005da8:	e0ab      	b.n	8005f02 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005db0:	b2db      	uxtb	r3, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d002      	beq.n	8005dbc <USBD_StdEPReq+0x1dc>
 8005db6:	2b03      	cmp	r3, #3
 8005db8:	d032      	beq.n	8005e20 <USBD_StdEPReq+0x240>
 8005dba:	e097      	b.n	8005eec <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d007      	beq.n	8005dd2 <USBD_StdEPReq+0x1f2>
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d004      	beq.n	8005dd2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005dc8:	6839      	ldr	r1, [r7, #0]
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f000 fbed 	bl	80065aa <USBD_CtlError>
                break;
 8005dd0:	e091      	b.n	8005ef6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005dd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	da0b      	bge.n	8005df2 <USBD_StdEPReq+0x212>
 8005dda:	7bbb      	ldrb	r3, [r7, #14]
 8005ddc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de0:	4613      	mov	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	4413      	add	r3, r2
 8005de6:	009b      	lsls	r3, r3, #2
 8005de8:	3310      	adds	r3, #16
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	4413      	add	r3, r2
 8005dee:	3304      	adds	r3, #4
 8005df0:	e00b      	b.n	8005e0a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	4413      	add	r3, r2
 8005e08:	3304      	adds	r3, #4
 8005e0a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	2202      	movs	r2, #2
 8005e16:	4619      	mov	r1, r3
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fc37 	bl	800668c <USBD_CtlSendData>
              break;
 8005e1e:	e06a      	b.n	8005ef6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	da11      	bge.n	8005e4c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e28:	7bbb      	ldrb	r3, [r7, #14]
 8005e2a:	f003 020f 	and.w	r2, r3, #15
 8005e2e:	6879      	ldr	r1, [r7, #4]
 8005e30:	4613      	mov	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	440b      	add	r3, r1
 8005e3a:	3324      	adds	r3, #36	; 0x24
 8005e3c:	881b      	ldrh	r3, [r3, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d117      	bne.n	8005e72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e42:	6839      	ldr	r1, [r7, #0]
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f000 fbb0 	bl	80065aa <USBD_CtlError>
                  break;
 8005e4a:	e054      	b.n	8005ef6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	f003 020f 	and.w	r2, r3, #15
 8005e52:	6879      	ldr	r1, [r7, #4]
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	440b      	add	r3, r1
 8005e5e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005e62:	881b      	ldrh	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d104      	bne.n	8005e72 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fb9d 	bl	80065aa <USBD_CtlError>
                  break;
 8005e70:	e041      	b.n	8005ef6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e72:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	da0b      	bge.n	8005e92 <USBD_StdEPReq+0x2b2>
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	009b      	lsls	r3, r3, #2
 8005e88:	3310      	adds	r3, #16
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4413      	add	r3, r2
 8005e8e:	3304      	adds	r3, #4
 8005e90:	e00b      	b.n	8005eaa <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e92:	7bbb      	ldrb	r3, [r7, #14]
 8005e94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	4413      	add	r3, r2
 8005ea8:	3304      	adds	r3, #4
 8005eaa:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005eac:	7bbb      	ldrb	r3, [r7, #14]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <USBD_StdEPReq+0x2d8>
 8005eb2:	7bbb      	ldrb	r3, [r7, #14]
 8005eb4:	2b80      	cmp	r3, #128	; 0x80
 8005eb6:	d103      	bne.n	8005ec0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]
 8005ebe:	e00e      	b.n	8005ede <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005ec0:	7bbb      	ldrb	r3, [r7, #14]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f001 f867 	bl	8006f98 <USBD_LL_IsStallEP>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	e002      	b.n	8005ede <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2200      	movs	r2, #0
 8005edc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2202      	movs	r2, #2
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f000 fbd1 	bl	800668c <USBD_CtlSendData>
              break;
 8005eea:	e004      	b.n	8005ef6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005eec:	6839      	ldr	r1, [r7, #0]
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fb5b 	bl	80065aa <USBD_CtlError>
              break;
 8005ef4:	bf00      	nop
          }
          break;
 8005ef6:	e004      	b.n	8005f02 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb55 	bl	80065aa <USBD_CtlError>
          break;
 8005f00:	bf00      	nop
      }
      break;
 8005f02:	e005      	b.n	8005f10 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f04:	6839      	ldr	r1, [r7, #0]
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 fb4f 	bl	80065aa <USBD_CtlError>
      break;
 8005f0c:	e000      	b.n	8005f10 <USBD_StdEPReq+0x330>
      break;
 8005f0e:	bf00      	nop
  }

  return ret;
 8005f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f12:	4618      	mov	r0, r3
 8005f14:	3710      	adds	r7, #16
 8005f16:	46bd      	mov	sp, r7
 8005f18:	bd80      	pop	{r7, pc}
	...

08005f1c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	885b      	ldrh	r3, [r3, #2]
 8005f36:	0a1b      	lsrs	r3, r3, #8
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	2b06      	cmp	r3, #6
 8005f3e:	f200 8128 	bhi.w	8006192 <USBD_GetDescriptor+0x276>
 8005f42:	a201      	add	r2, pc, #4	; (adr r2, 8005f48 <USBD_GetDescriptor+0x2c>)
 8005f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f7d 	.word	0x08005f7d
 8005f50:	08005fbd 	.word	0x08005fbd
 8005f54:	08006193 	.word	0x08006193
 8005f58:	08006193 	.word	0x08006193
 8005f5c:	08006133 	.word	0x08006133
 8005f60:	0800615f 	.word	0x0800615f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	7c12      	ldrb	r2, [r2, #16]
 8005f70:	f107 0108 	add.w	r1, r7, #8
 8005f74:	4610      	mov	r0, r2
 8005f76:	4798      	blx	r3
 8005f78:	60f8      	str	r0, [r7, #12]
      break;
 8005f7a:	e112      	b.n	80061a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	7c1b      	ldrb	r3, [r3, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d10d      	bne.n	8005fa0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8c:	f107 0208 	add.w	r2, r7, #8
 8005f90:	4610      	mov	r0, r2
 8005f92:	4798      	blx	r3
 8005f94:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005f9e:	e100      	b.n	80061a2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	f107 0208 	add.w	r2, r7, #8
 8005fac:	4610      	mov	r0, r2
 8005fae:	4798      	blx	r3
 8005fb0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	3301      	adds	r3, #1
 8005fb6:	2202      	movs	r2, #2
 8005fb8:	701a      	strb	r2, [r3, #0]
      break;
 8005fba:	e0f2      	b.n	80061a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	885b      	ldrh	r3, [r3, #2]
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	2b05      	cmp	r3, #5
 8005fc4:	f200 80ac 	bhi.w	8006120 <USBD_GetDescriptor+0x204>
 8005fc8:	a201      	add	r2, pc, #4	; (adr r2, 8005fd0 <USBD_GetDescriptor+0xb4>)
 8005fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fce:	bf00      	nop
 8005fd0:	08005fe9 	.word	0x08005fe9
 8005fd4:	0800601d 	.word	0x0800601d
 8005fd8:	08006051 	.word	0x08006051
 8005fdc:	08006085 	.word	0x08006085
 8005fe0:	080060b9 	.word	0x080060b9
 8005fe4:	080060ed 	.word	0x080060ed
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	7c12      	ldrb	r2, [r2, #16]
 8006000:	f107 0108 	add.w	r1, r7, #8
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
 8006008:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800600a:	e091      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 facb 	bl	80065aa <USBD_CtlError>
            err++;
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	3301      	adds	r3, #1
 8006018:	72fb      	strb	r3, [r7, #11]
          break;
 800601a:	e089      	b.n	8006130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	7c12      	ldrb	r2, [r2, #16]
 8006034:	f107 0108 	add.w	r1, r7, #8
 8006038:	4610      	mov	r0, r2
 800603a:	4798      	blx	r3
 800603c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800603e:	e077      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 fab1 	bl	80065aa <USBD_CtlError>
            err++;
 8006048:	7afb      	ldrb	r3, [r7, #11]
 800604a:	3301      	adds	r3, #1
 800604c:	72fb      	strb	r3, [r7, #11]
          break;
 800604e:	e06f      	b.n	8006130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00b      	beq.n	8006074 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006062:	68db      	ldr	r3, [r3, #12]
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	7c12      	ldrb	r2, [r2, #16]
 8006068:	f107 0108 	add.w	r1, r7, #8
 800606c:	4610      	mov	r0, r2
 800606e:	4798      	blx	r3
 8006070:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006072:	e05d      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006074:	6839      	ldr	r1, [r7, #0]
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fa97 	bl	80065aa <USBD_CtlError>
            err++;
 800607c:	7afb      	ldrb	r3, [r7, #11]
 800607e:	3301      	adds	r3, #1
 8006080:	72fb      	strb	r3, [r7, #11]
          break;
 8006082:	e055      	b.n	8006130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d00b      	beq.n	80060a8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006096:	691b      	ldr	r3, [r3, #16]
 8006098:	687a      	ldr	r2, [r7, #4]
 800609a:	7c12      	ldrb	r2, [r2, #16]
 800609c:	f107 0108 	add.w	r1, r7, #8
 80060a0:	4610      	mov	r0, r2
 80060a2:	4798      	blx	r3
 80060a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060a6:	e043      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060a8:	6839      	ldr	r1, [r7, #0]
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	f000 fa7d 	bl	80065aa <USBD_CtlError>
            err++;
 80060b0:	7afb      	ldrb	r3, [r7, #11]
 80060b2:	3301      	adds	r3, #1
 80060b4:	72fb      	strb	r3, [r7, #11]
          break;
 80060b6:	e03b      	b.n	8006130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00b      	beq.n	80060dc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	7c12      	ldrb	r2, [r2, #16]
 80060d0:	f107 0108 	add.w	r1, r7, #8
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
 80060d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060da:	e029      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060dc:	6839      	ldr	r1, [r7, #0]
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 fa63 	bl	80065aa <USBD_CtlError>
            err++;
 80060e4:	7afb      	ldrb	r3, [r7, #11]
 80060e6:	3301      	adds	r3, #1
 80060e8:	72fb      	strb	r3, [r7, #11]
          break;
 80060ea:	e021      	b.n	8006130 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f2:	699b      	ldr	r3, [r3, #24]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d00b      	beq.n	8006110 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	7c12      	ldrb	r2, [r2, #16]
 8006104:	f107 0108 	add.w	r1, r7, #8
 8006108:	4610      	mov	r0, r2
 800610a:	4798      	blx	r3
 800610c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800610e:	e00f      	b.n	8006130 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006110:	6839      	ldr	r1, [r7, #0]
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 fa49 	bl	80065aa <USBD_CtlError>
            err++;
 8006118:	7afb      	ldrb	r3, [r7, #11]
 800611a:	3301      	adds	r3, #1
 800611c:	72fb      	strb	r3, [r7, #11]
          break;
 800611e:	e007      	b.n	8006130 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006120:	6839      	ldr	r1, [r7, #0]
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 fa41 	bl	80065aa <USBD_CtlError>
          err++;
 8006128:	7afb      	ldrb	r3, [r7, #11]
 800612a:	3301      	adds	r3, #1
 800612c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800612e:	bf00      	nop
      }
      break;
 8006130:	e037      	b.n	80061a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	7c1b      	ldrb	r3, [r3, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d109      	bne.n	800614e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006142:	f107 0208 	add.w	r2, r7, #8
 8006146:	4610      	mov	r0, r2
 8006148:	4798      	blx	r3
 800614a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800614c:	e029      	b.n	80061a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800614e:	6839      	ldr	r1, [r7, #0]
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa2a 	bl	80065aa <USBD_CtlError>
        err++;
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	3301      	adds	r3, #1
 800615a:	72fb      	strb	r3, [r7, #11]
      break;
 800615c:	e021      	b.n	80061a2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	7c1b      	ldrb	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800616e:	f107 0208 	add.w	r2, r7, #8
 8006172:	4610      	mov	r0, r2
 8006174:	4798      	blx	r3
 8006176:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	3301      	adds	r3, #1
 800617c:	2207      	movs	r2, #7
 800617e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006180:	e00f      	b.n	80061a2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006182:	6839      	ldr	r1, [r7, #0]
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 fa10 	bl	80065aa <USBD_CtlError>
        err++;
 800618a:	7afb      	ldrb	r3, [r7, #11]
 800618c:	3301      	adds	r3, #1
 800618e:	72fb      	strb	r3, [r7, #11]
      break;
 8006190:	e007      	b.n	80061a2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006192:	6839      	ldr	r1, [r7, #0]
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	f000 fa08 	bl	80065aa <USBD_CtlError>
      err++;
 800619a:	7afb      	ldrb	r3, [r7, #11]
 800619c:	3301      	adds	r3, #1
 800619e:	72fb      	strb	r3, [r7, #11]
      break;
 80061a0:	bf00      	nop
  }

  if (err != 0U)
 80061a2:	7afb      	ldrb	r3, [r7, #11]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d11e      	bne.n	80061e6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	88db      	ldrh	r3, [r3, #6]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d016      	beq.n	80061de <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80061b0:	893b      	ldrh	r3, [r7, #8]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d00e      	beq.n	80061d4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	88da      	ldrh	r2, [r3, #6]
 80061ba:	893b      	ldrh	r3, [r7, #8]
 80061bc:	4293      	cmp	r3, r2
 80061be:	bf28      	it	cs
 80061c0:	4613      	movcs	r3, r2
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80061c6:	893b      	ldrh	r3, [r7, #8]
 80061c8:	461a      	mov	r2, r3
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa5d 	bl	800668c <USBD_CtlSendData>
 80061d2:	e009      	b.n	80061e8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9e7 	bl	80065aa <USBD_CtlError>
 80061dc:	e004      	b.n	80061e8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 faae 	bl	8006740 <USBD_CtlSendStatus>
 80061e4:	e000      	b.n	80061e8 <USBD_GetDescriptor+0x2cc>
    return;
 80061e6:	bf00      	nop
  }
}
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop

080061f0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b084      	sub	sp, #16
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	889b      	ldrh	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d131      	bne.n	8006266 <USBD_SetAddress+0x76>
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	88db      	ldrh	r3, [r3, #6]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d12d      	bne.n	8006266 <USBD_SetAddress+0x76>
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	885b      	ldrh	r3, [r3, #2]
 800620e:	2b7f      	cmp	r3, #127	; 0x7f
 8006210:	d829      	bhi.n	8006266 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	885b      	ldrh	r3, [r3, #2]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800621c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b03      	cmp	r3, #3
 8006228:	d104      	bne.n	8006234 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800622a:	6839      	ldr	r1, [r7, #0]
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f000 f9bc 	bl	80065aa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006232:	e01d      	b.n	8006270 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	7bfa      	ldrb	r2, [r7, #15]
 8006238:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800623c:	7bfb      	ldrb	r3, [r7, #15]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fed5 	bl	8006ff0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa7a 	bl	8006740 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800624c:	7bfb      	ldrb	r3, [r7, #15]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d004      	beq.n	800625c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2202      	movs	r2, #2
 8006256:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800625a:	e009      	b.n	8006270 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006264:	e004      	b.n	8006270 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 f99e 	bl	80065aa <USBD_CtlError>
  }
}
 800626e:	bf00      	nop
 8006270:	bf00      	nop
 8006272:	3710      	adds	r7, #16
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b084      	sub	sp, #16
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	885b      	ldrh	r3, [r3, #2]
 800628a:	b2da      	uxtb	r2, r3
 800628c:	4b4e      	ldr	r3, [pc, #312]	; (80063c8 <USBD_SetConfig+0x150>)
 800628e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006290:	4b4d      	ldr	r3, [pc, #308]	; (80063c8 <USBD_SetConfig+0x150>)
 8006292:	781b      	ldrb	r3, [r3, #0]
 8006294:	2b01      	cmp	r3, #1
 8006296:	d905      	bls.n	80062a4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 f985 	bl	80065aa <USBD_CtlError>
    return USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	e08c      	b.n	80063be <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062aa:	b2db      	uxtb	r3, r3
 80062ac:	2b02      	cmp	r3, #2
 80062ae:	d002      	beq.n	80062b6 <USBD_SetConfig+0x3e>
 80062b0:	2b03      	cmp	r3, #3
 80062b2:	d029      	beq.n	8006308 <USBD_SetConfig+0x90>
 80062b4:	e075      	b.n	80063a2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80062b6:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <USBD_SetConfig+0x150>)
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d020      	beq.n	8006300 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80062be:	4b42      	ldr	r3, [pc, #264]	; (80063c8 <USBD_SetConfig+0x150>)
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	461a      	mov	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80062c8:	4b3f      	ldr	r3, [pc, #252]	; (80063c8 <USBD_SetConfig+0x150>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4619      	mov	r1, r3
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f7fe ffe7 	bl	80052a2 <USBD_SetClassConfig>
 80062d4:	4603      	mov	r3, r0
 80062d6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80062d8:	7bfb      	ldrb	r3, [r7, #15]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d008      	beq.n	80062f0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80062de:	6839      	ldr	r1, [r7, #0]
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 f962 	bl	80065aa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2202      	movs	r2, #2
 80062ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80062ee:	e065      	b.n	80063bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fa25 	bl	8006740 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2203      	movs	r2, #3
 80062fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062fe:	e05d      	b.n	80063bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 fa1d 	bl	8006740 <USBD_CtlSendStatus>
      break;
 8006306:	e059      	b.n	80063bc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006308:	4b2f      	ldr	r3, [pc, #188]	; (80063c8 <USBD_SetConfig+0x150>)
 800630a:	781b      	ldrb	r3, [r3, #0]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d112      	bne.n	8006336 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006318:	4b2b      	ldr	r3, [pc, #172]	; (80063c8 <USBD_SetConfig+0x150>)
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	461a      	mov	r2, r3
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006322:	4b29      	ldr	r3, [pc, #164]	; (80063c8 <USBD_SetConfig+0x150>)
 8006324:	781b      	ldrb	r3, [r3, #0]
 8006326:	4619      	mov	r1, r3
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f7fe ffd6 	bl	80052da <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fa06 	bl	8006740 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006334:	e042      	b.n	80063bc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006336:	4b24      	ldr	r3, [pc, #144]	; (80063c8 <USBD_SetConfig+0x150>)
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d02a      	beq.n	800639a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	b2db      	uxtb	r3, r3
 800634a:	4619      	mov	r1, r3
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f7fe ffc4 	bl	80052da <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006352:	4b1d      	ldr	r3, [pc, #116]	; (80063c8 <USBD_SetConfig+0x150>)
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800635c:	4b1a      	ldr	r3, [pc, #104]	; (80063c8 <USBD_SetConfig+0x150>)
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f7fe ff9d 	bl	80052a2 <USBD_SetClassConfig>
 8006368:	4603      	mov	r3, r0
 800636a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800636c:	7bfb      	ldrb	r3, [r7, #15]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00f      	beq.n	8006392 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006372:	6839      	ldr	r1, [r7, #0]
 8006374:	6878      	ldr	r0, [r7, #4]
 8006376:	f000 f918 	bl	80065aa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	b2db      	uxtb	r3, r3
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7fe ffa9 	bl	80052da <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2202      	movs	r2, #2
 800638c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006390:	e014      	b.n	80063bc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9d4 	bl	8006740 <USBD_CtlSendStatus>
      break;
 8006398:	e010      	b.n	80063bc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f9d0 	bl	8006740 <USBD_CtlSendStatus>
      break;
 80063a0:	e00c      	b.n	80063bc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80063a2:	6839      	ldr	r1, [r7, #0]
 80063a4:	6878      	ldr	r0, [r7, #4]
 80063a6:	f000 f900 	bl	80065aa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063aa:	4b07      	ldr	r3, [pc, #28]	; (80063c8 <USBD_SetConfig+0x150>)
 80063ac:	781b      	ldrb	r3, [r3, #0]
 80063ae:	4619      	mov	r1, r3
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f7fe ff92 	bl	80052da <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80063b6:	2303      	movs	r3, #3
 80063b8:	73fb      	strb	r3, [r7, #15]
      break;
 80063ba:	bf00      	nop
  }

  return ret;
 80063bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
 80063c6:	bf00      	nop
 80063c8:	20000124 	.word	0x20000124

080063cc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	88db      	ldrh	r3, [r3, #6]
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d004      	beq.n	80063e8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f8e2 	bl	80065aa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80063e6:	e023      	b.n	8006430 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	dc02      	bgt.n	80063fa <USBD_GetConfig+0x2e>
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	dc03      	bgt.n	8006400 <USBD_GetConfig+0x34>
 80063f8:	e015      	b.n	8006426 <USBD_GetConfig+0x5a>
 80063fa:	2b03      	cmp	r3, #3
 80063fc:	d00b      	beq.n	8006416 <USBD_GetConfig+0x4a>
 80063fe:	e012      	b.n	8006426 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3308      	adds	r3, #8
 800640a:	2201      	movs	r2, #1
 800640c:	4619      	mov	r1, r3
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 f93c 	bl	800668c <USBD_CtlSendData>
        break;
 8006414:	e00c      	b.n	8006430 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	3304      	adds	r3, #4
 800641a:	2201      	movs	r2, #1
 800641c:	4619      	mov	r1, r3
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 f934 	bl	800668c <USBD_CtlSendData>
        break;
 8006424:	e004      	b.n	8006430 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 f8be 	bl	80065aa <USBD_CtlError>
        break;
 800642e:	bf00      	nop
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006448:	b2db      	uxtb	r3, r3
 800644a:	3b01      	subs	r3, #1
 800644c:	2b02      	cmp	r3, #2
 800644e:	d81e      	bhi.n	800648e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	2b02      	cmp	r3, #2
 8006456:	d004      	beq.n	8006462 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 f8a5 	bl	80065aa <USBD_CtlError>
        break;
 8006460:	e01a      	b.n	8006498 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800646e:	2b00      	cmp	r3, #0
 8006470:	d005      	beq.n	800647e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68db      	ldr	r3, [r3, #12]
 8006476:	f043 0202 	orr.w	r2, r3, #2
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	330c      	adds	r3, #12
 8006482:	2202      	movs	r2, #2
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 f900 	bl	800668c <USBD_CtlSendData>
      break;
 800648c:	e004      	b.n	8006498 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 f88a 	bl	80065aa <USBD_CtlError>
      break;
 8006496:	bf00      	nop
  }
}
 8006498:	bf00      	nop
 800649a:	3708      	adds	r7, #8
 800649c:	46bd      	mov	sp, r7
 800649e:	bd80      	pop	{r7, pc}

080064a0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	885b      	ldrh	r3, [r3, #2]
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d107      	bne.n	80064c2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 f940 	bl	8006740 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80064c0:	e013      	b.n	80064ea <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	885b      	ldrh	r3, [r3, #2]
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d10b      	bne.n	80064e2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	889b      	ldrh	r3, [r3, #4]
 80064ce:	0a1b      	lsrs	r3, r3, #8
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	b2da      	uxtb	r2, r3
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80064da:	6878      	ldr	r0, [r7, #4]
 80064dc:	f000 f930 	bl	8006740 <USBD_CtlSendStatus>
}
 80064e0:	e003      	b.n	80064ea <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f860 	bl	80065aa <USBD_CtlError>
}
 80064ea:	bf00      	nop
 80064ec:	3708      	adds	r7, #8
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}

080064f2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064f2:	b580      	push	{r7, lr}
 80064f4:	b082      	sub	sp, #8
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6078      	str	r0, [r7, #4]
 80064fa:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006502:	b2db      	uxtb	r3, r3
 8006504:	3b01      	subs	r3, #1
 8006506:	2b02      	cmp	r3, #2
 8006508:	d80b      	bhi.n	8006522 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	885b      	ldrh	r3, [r3, #2]
 800650e:	2b01      	cmp	r3, #1
 8006510:	d10c      	bne.n	800652c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	2200      	movs	r2, #0
 8006516:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f910 	bl	8006740 <USBD_CtlSendStatus>
      }
      break;
 8006520:	e004      	b.n	800652c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f840 	bl	80065aa <USBD_CtlError>
      break;
 800652a:	e000      	b.n	800652e <USBD_ClrFeature+0x3c>
      break;
 800652c:	bf00      	nop
  }
}
 800652e:	bf00      	nop
 8006530:	3708      	adds	r7, #8
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	781a      	ldrb	r2, [r3, #0]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	3301      	adds	r3, #1
 8006550:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	3301      	adds	r3, #1
 800655e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff fa41 	bl	80059e8 <SWAPBYTE>
 8006566:	4603      	mov	r3, r0
 8006568:	461a      	mov	r2, r3
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	3301      	adds	r3, #1
 8006572:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	3301      	adds	r3, #1
 8006578:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f7ff fa34 	bl	80059e8 <SWAPBYTE>
 8006580:	4603      	mov	r3, r0
 8006582:	461a      	mov	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	3301      	adds	r3, #1
 800658c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	3301      	adds	r3, #1
 8006592:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006594:	68f8      	ldr	r0, [r7, #12]
 8006596:	f7ff fa27 	bl	80059e8 <SWAPBYTE>
 800659a:	4603      	mov	r3, r0
 800659c:	461a      	mov	r2, r3
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	80da      	strh	r2, [r3, #6]
}
 80065a2:	bf00      	nop
 80065a4:	3710      	adds	r7, #16
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bd80      	pop	{r7, pc}

080065aa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065aa:	b580      	push	{r7, lr}
 80065ac:	b082      	sub	sp, #8
 80065ae:	af00      	add	r7, sp, #0
 80065b0:	6078      	str	r0, [r7, #4]
 80065b2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80065b4:	2180      	movs	r1, #128	; 0x80
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fcb0 	bl	8006f1c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80065bc:	2100      	movs	r1, #0
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f000 fcac 	bl	8006f1c <USBD_LL_StallEP>
}
 80065c4:	bf00      	nop
 80065c6:	3708      	adds	r7, #8
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80065d8:	2300      	movs	r3, #0
 80065da:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d036      	beq.n	8006650 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80065e6:	6938      	ldr	r0, [r7, #16]
 80065e8:	f000 f836 	bl	8006658 <USBD_GetLen>
 80065ec:	4603      	mov	r3, r0
 80065ee:	3301      	adds	r3, #1
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80065fa:	7dfb      	ldrb	r3, [r7, #23]
 80065fc:	68ba      	ldr	r2, [r7, #8]
 80065fe:	4413      	add	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	7812      	ldrb	r2, [r2, #0]
 8006604:	701a      	strb	r2, [r3, #0]
  idx++;
 8006606:	7dfb      	ldrb	r3, [r7, #23]
 8006608:	3301      	adds	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
 800660e:	68ba      	ldr	r2, [r7, #8]
 8006610:	4413      	add	r3, r2
 8006612:	2203      	movs	r2, #3
 8006614:	701a      	strb	r2, [r3, #0]
  idx++;
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	3301      	adds	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800661c:	e013      	b.n	8006646 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800661e:	7dfb      	ldrb	r3, [r7, #23]
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4413      	add	r3, r2
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	7812      	ldrb	r2, [r2, #0]
 8006628:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	3301      	adds	r3, #1
 800662e:	613b      	str	r3, [r7, #16]
    idx++;
 8006630:	7dfb      	ldrb	r3, [r7, #23]
 8006632:	3301      	adds	r3, #1
 8006634:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006636:	7dfb      	ldrb	r3, [r7, #23]
 8006638:	68ba      	ldr	r2, [r7, #8]
 800663a:	4413      	add	r3, r2
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006640:	7dfb      	ldrb	r3, [r7, #23]
 8006642:	3301      	adds	r3, #1
 8006644:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1e7      	bne.n	800661e <USBD_GetString+0x52>
 800664e:	e000      	b.n	8006652 <USBD_GetString+0x86>
    return;
 8006650:	bf00      	nop
  }
}
 8006652:	3718      	adds	r7, #24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006668:	e005      	b.n	8006676 <USBD_GetLen+0x1e>
  {
    len++;
 800666a:	7bfb      	ldrb	r3, [r7, #15]
 800666c:	3301      	adds	r3, #1
 800666e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006670:	68bb      	ldr	r3, [r7, #8]
 8006672:	3301      	adds	r3, #1
 8006674:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d1f5      	bne.n	800666a <USBD_GetLen+0x12>
  }

  return len;
 800667e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006680:	4618      	mov	r0, r3
 8006682:	3714      	adds	r7, #20
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800668c:	b580      	push	{r7, lr}
 800668e:	b084      	sub	sp, #16
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2202      	movs	r2, #2
 800669c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	687a      	ldr	r2, [r7, #4]
 80066a4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	687a      	ldr	r2, [r7, #4]
 80066aa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	2100      	movs	r1, #0
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	f000 fcbb 	bl	800702e <USBD_LL_Transmit>

  return USBD_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	60f8      	str	r0, [r7, #12]
 80066ca:	60b9      	str	r1, [r7, #8]
 80066cc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68ba      	ldr	r2, [r7, #8]
 80066d2:	2100      	movs	r1, #0
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 fcaa 	bl	800702e <USBD_LL_Transmit>

  return USBD_OK;
 80066da:	2300      	movs	r3, #0
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3710      	adds	r7, #16
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd80      	pop	{r7, pc}

080066e4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	60f8      	str	r0, [r7, #12]
 80066ec:	60b9      	str	r1, [r7, #8]
 80066ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2203      	movs	r2, #3
 80066f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	687a      	ldr	r2, [r7, #4]
 80066fc:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	687a      	ldr	r2, [r7, #4]
 8006704:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	68ba      	ldr	r2, [r7, #8]
 800670c:	2100      	movs	r1, #0
 800670e:	68f8      	ldr	r0, [r7, #12]
 8006710:	f000 fcae 	bl	8007070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}

0800671e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800671e:	b580      	push	{r7, lr}
 8006720:	b084      	sub	sp, #16
 8006722:	af00      	add	r7, sp, #0
 8006724:	60f8      	str	r0, [r7, #12]
 8006726:	60b9      	str	r1, [r7, #8]
 8006728:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	2100      	movs	r1, #0
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f000 fc9d 	bl	8007070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006740:	b580      	push	{r7, lr}
 8006742:	b082      	sub	sp, #8
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2204      	movs	r2, #4
 800674c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006750:	2300      	movs	r3, #0
 8006752:	2200      	movs	r2, #0
 8006754:	2100      	movs	r1, #0
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fc69 	bl	800702e <USBD_LL_Transmit>

  return USBD_OK;
 800675c:	2300      	movs	r3, #0
}
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2205      	movs	r2, #5
 8006772:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006776:	2300      	movs	r3, #0
 8006778:	2200      	movs	r2, #0
 800677a:	2100      	movs	r1, #0
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fc77 	bl	8007070 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006782:	2300      	movs	r3, #0
}
 8006784:	4618      	mov	r0, r3
 8006786:	3708      	adds	r7, #8
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}

0800678c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006790:	2200      	movs	r2, #0
 8006792:	4912      	ldr	r1, [pc, #72]	; (80067dc <MX_USB_DEVICE_Init+0x50>)
 8006794:	4812      	ldr	r0, [pc, #72]	; (80067e0 <MX_USB_DEVICE_Init+0x54>)
 8006796:	f7fe fd07 	bl	80051a8 <USBD_Init>
 800679a:	4603      	mov	r3, r0
 800679c:	2b00      	cmp	r3, #0
 800679e:	d001      	beq.n	80067a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80067a0:	f7fa f83a 	bl	8000818 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80067a4:	490f      	ldr	r1, [pc, #60]	; (80067e4 <MX_USB_DEVICE_Init+0x58>)
 80067a6:	480e      	ldr	r0, [pc, #56]	; (80067e0 <MX_USB_DEVICE_Init+0x54>)
 80067a8:	f7fe fd2e 	bl	8005208 <USBD_RegisterClass>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80067b2:	f7fa f831 	bl	8000818 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80067b6:	490c      	ldr	r1, [pc, #48]	; (80067e8 <MX_USB_DEVICE_Init+0x5c>)
 80067b8:	4809      	ldr	r0, [pc, #36]	; (80067e0 <MX_USB_DEVICE_Init+0x54>)
 80067ba:	f7fe fc65 	bl	8005088 <USBD_CDC_RegisterInterface>
 80067be:	4603      	mov	r3, r0
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d001      	beq.n	80067c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80067c4:	f7fa f828 	bl	8000818 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80067c8:	4805      	ldr	r0, [pc, #20]	; (80067e0 <MX_USB_DEVICE_Init+0x54>)
 80067ca:	f7fe fd53 	bl	8005274 <USBD_Start>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d001      	beq.n	80067d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80067d4:	f7fa f820 	bl	8000818 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	200000ac 	.word	0x200000ac
 80067e0:	20000128 	.word	0x20000128
 80067e4:	20000018 	.word	0x20000018
 80067e8:	20000098 	.word	0x20000098

080067ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80067f0:	2200      	movs	r2, #0
 80067f2:	4905      	ldr	r1, [pc, #20]	; (8006808 <CDC_Init_FS+0x1c>)
 80067f4:	4805      	ldr	r0, [pc, #20]	; (800680c <CDC_Init_FS+0x20>)
 80067f6:	f7fe fc61 	bl	80050bc <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80067fa:	4905      	ldr	r1, [pc, #20]	; (8006810 <CDC_Init_FS+0x24>)
 80067fc:	4803      	ldr	r0, [pc, #12]	; (800680c <CDC_Init_FS+0x20>)
 80067fe:	f7fe fc7f 	bl	8005100 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006802:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006804:	4618      	mov	r0, r3
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20000c04 	.word	0x20000c04
 800680c:	20000128 	.word	0x20000128
 8006810:	20000404 	.word	0x20000404

08006814 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006818:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800681a:	4618      	mov	r0, r3
 800681c:	46bd      	mov	sp, r7
 800681e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006822:	4770      	bx	lr

08006824 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8006824:	b480      	push	{r7}
 8006826:	b083      	sub	sp, #12
 8006828:	af00      	add	r7, sp, #0
 800682a:	4603      	mov	r3, r0
 800682c:	6039      	str	r1, [r7, #0]
 800682e:	71fb      	strb	r3, [r7, #7]
 8006830:	4613      	mov	r3, r2
 8006832:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006834:	79fb      	ldrb	r3, [r7, #7]
 8006836:	2b23      	cmp	r3, #35	; 0x23
 8006838:	d84a      	bhi.n	80068d0 <CDC_Control_FS+0xac>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <CDC_Control_FS+0x1c>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	080068d1 	.word	0x080068d1
 8006844:	080068d1 	.word	0x080068d1
 8006848:	080068d1 	.word	0x080068d1
 800684c:	080068d1 	.word	0x080068d1
 8006850:	080068d1 	.word	0x080068d1
 8006854:	080068d1 	.word	0x080068d1
 8006858:	080068d1 	.word	0x080068d1
 800685c:	080068d1 	.word	0x080068d1
 8006860:	080068d1 	.word	0x080068d1
 8006864:	080068d1 	.word	0x080068d1
 8006868:	080068d1 	.word	0x080068d1
 800686c:	080068d1 	.word	0x080068d1
 8006870:	080068d1 	.word	0x080068d1
 8006874:	080068d1 	.word	0x080068d1
 8006878:	080068d1 	.word	0x080068d1
 800687c:	080068d1 	.word	0x080068d1
 8006880:	080068d1 	.word	0x080068d1
 8006884:	080068d1 	.word	0x080068d1
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d1 	.word	0x080068d1
 8006890:	080068d1 	.word	0x080068d1
 8006894:	080068d1 	.word	0x080068d1
 8006898:	080068d1 	.word	0x080068d1
 800689c:	080068d1 	.word	0x080068d1
 80068a0:	080068d1 	.word	0x080068d1
 80068a4:	080068d1 	.word	0x080068d1
 80068a8:	080068d1 	.word	0x080068d1
 80068ac:	080068d1 	.word	0x080068d1
 80068b0:	080068d1 	.word	0x080068d1
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	080068d1 	.word	0x080068d1
 80068bc:	080068d1 	.word	0x080068d1
 80068c0:	080068d1 	.word	0x080068d1
 80068c4:	080068d1 	.word	0x080068d1
 80068c8:	080068d1 	.word	0x080068d1
 80068cc:	080068d1 	.word	0x080068d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80068d0:	bf00      	nop
  }

  return (USBD_OK);
 80068d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80068e0:	b580      	push	{r7, lr}
 80068e2:	b082      	sub	sp, #8
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
 80068e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80068ea:	6879      	ldr	r1, [r7, #4]
 80068ec:	4805      	ldr	r0, [pc, #20]	; (8006904 <CDC_Receive_FS+0x24>)
 80068ee:	f7fe fc07 	bl	8005100 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80068f2:	4804      	ldr	r0, [pc, #16]	; (8006904 <CDC_Receive_FS+0x24>)
 80068f4:	f7fe fc22 	bl	800513c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80068f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3708      	adds	r7, #8
 80068fe:	46bd      	mov	sp, r7
 8006900:	bd80      	pop	{r7, pc}
 8006902:	bf00      	nop
 8006904:	20000128 	.word	0x20000128

08006908 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	4613      	mov	r3, r2
 8006914:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800691a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800691e:	4618      	mov	r0, r3
 8006920:	371c      	adds	r7, #28
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr
	...

0800692c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800692c:	b480      	push	{r7}
 800692e:	b083      	sub	sp, #12
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	6039      	str	r1, [r7, #0]
 8006936:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2212      	movs	r2, #18
 800693c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800693e:	4b03      	ldr	r3, [pc, #12]	; (800694c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006940:	4618      	mov	r0, r3
 8006942:	370c      	adds	r7, #12
 8006944:	46bd      	mov	sp, r7
 8006946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800694a:	4770      	bx	lr
 800694c:	200000c8 	.word	0x200000c8

08006950 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006950:	b480      	push	{r7}
 8006952:	b083      	sub	sp, #12
 8006954:	af00      	add	r7, sp, #0
 8006956:	4603      	mov	r3, r0
 8006958:	6039      	str	r1, [r7, #0]
 800695a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	2204      	movs	r2, #4
 8006960:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006962:	4b03      	ldr	r3, [pc, #12]	; (8006970 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006964:	4618      	mov	r0, r3
 8006966:	370c      	adds	r7, #12
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	200000dc 	.word	0x200000dc

08006974 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
 800697a:	4603      	mov	r3, r0
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006980:	79fb      	ldrb	r3, [r7, #7]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d105      	bne.n	8006992 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006986:	683a      	ldr	r2, [r7, #0]
 8006988:	4907      	ldr	r1, [pc, #28]	; (80069a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800698a:	4808      	ldr	r0, [pc, #32]	; (80069ac <USBD_FS_ProductStrDescriptor+0x38>)
 800698c:	f7ff fe1e 	bl	80065cc <USBD_GetString>
 8006990:	e004      	b.n	800699c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	4904      	ldr	r1, [pc, #16]	; (80069a8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006996:	4805      	ldr	r0, [pc, #20]	; (80069ac <USBD_FS_ProductStrDescriptor+0x38>)
 8006998:	f7ff fe18 	bl	80065cc <USBD_GetString>
  }
  return USBD_StrDesc;
 800699c:	4b02      	ldr	r3, [pc, #8]	; (80069a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20001404 	.word	0x20001404
 80069ac:	080071d0 	.word	0x080071d0

080069b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	4603      	mov	r3, r0
 80069b8:	6039      	str	r1, [r7, #0]
 80069ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80069bc:	683a      	ldr	r2, [r7, #0]
 80069be:	4904      	ldr	r1, [pc, #16]	; (80069d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80069c0:	4804      	ldr	r0, [pc, #16]	; (80069d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80069c2:	f7ff fe03 	bl	80065cc <USBD_GetString>
  return USBD_StrDesc;
 80069c6:	4b02      	ldr	r3, [pc, #8]	; (80069d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	20001404 	.word	0x20001404
 80069d4:	080071e8 	.word	0x080071e8

080069d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	4603      	mov	r3, r0
 80069e0:	6039      	str	r1, [r7, #0]
 80069e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	221a      	movs	r2, #26
 80069e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80069ea:	f000 f843 	bl	8006a74 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80069ee:	4b02      	ldr	r3, [pc, #8]	; (80069f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	200000e0 	.word	0x200000e0

080069fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b082      	sub	sp, #8
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	6039      	str	r1, [r7, #0]
 8006a06:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d105      	bne.n	8006a1a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a0e:	683a      	ldr	r2, [r7, #0]
 8006a10:	4907      	ldr	r1, [pc, #28]	; (8006a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a12:	4808      	ldr	r0, [pc, #32]	; (8006a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a14:	f7ff fdda 	bl	80065cc <USBD_GetString>
 8006a18:	e004      	b.n	8006a24 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	4904      	ldr	r1, [pc, #16]	; (8006a30 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006a1e:	4805      	ldr	r0, [pc, #20]	; (8006a34 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006a20:	f7ff fdd4 	bl	80065cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a24:	4b02      	ldr	r3, [pc, #8]	; (8006a30 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20001404 	.word	0x20001404
 8006a34:	080071fc 	.word	0x080071fc

08006a38 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b082      	sub	sp, #8
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	4603      	mov	r3, r0
 8006a40:	6039      	str	r1, [r7, #0]
 8006a42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006a44:	79fb      	ldrb	r3, [r7, #7]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d105      	bne.n	8006a56 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a4a:	683a      	ldr	r2, [r7, #0]
 8006a4c:	4907      	ldr	r1, [pc, #28]	; (8006a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a4e:	4808      	ldr	r0, [pc, #32]	; (8006a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a50:	f7ff fdbc 	bl	80065cc <USBD_GetString>
 8006a54:	e004      	b.n	8006a60 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4904      	ldr	r1, [pc, #16]	; (8006a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006a5a:	4805      	ldr	r0, [pc, #20]	; (8006a70 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006a5c:	f7ff fdb6 	bl	80065cc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006a60:	4b02      	ldr	r3, [pc, #8]	; (8006a6c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3708      	adds	r7, #8
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20001404 	.word	0x20001404
 8006a70:	08007208 	.word	0x08007208

08006a74 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a7a:	4b0f      	ldr	r3, [pc, #60]	; (8006ab8 <Get_SerialNum+0x44>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a80:	4b0e      	ldr	r3, [pc, #56]	; (8006abc <Get_SerialNum+0x48>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a86:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <Get_SerialNum+0x4c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a8c:	68fa      	ldr	r2, [r7, #12]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4413      	add	r3, r2
 8006a92:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d009      	beq.n	8006aae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a9a:	2208      	movs	r2, #8
 8006a9c:	4909      	ldr	r1, [pc, #36]	; (8006ac4 <Get_SerialNum+0x50>)
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f814 	bl	8006acc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006aa4:	2204      	movs	r2, #4
 8006aa6:	4908      	ldr	r1, [pc, #32]	; (8006ac8 <Get_SerialNum+0x54>)
 8006aa8:	68b8      	ldr	r0, [r7, #8]
 8006aaa:	f000 f80f 	bl	8006acc <IntToUnicode>
  }
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	1fff7a10 	.word	0x1fff7a10
 8006abc:	1fff7a14 	.word	0x1fff7a14
 8006ac0:	1fff7a18 	.word	0x1fff7a18
 8006ac4:	200000e2 	.word	0x200000e2
 8006ac8:	200000f2 	.word	0x200000f2

08006acc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006ada:	2300      	movs	r3, #0
 8006adc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006ade:	2300      	movs	r3, #0
 8006ae0:	75fb      	strb	r3, [r7, #23]
 8006ae2:	e027      	b.n	8006b34 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	0f1b      	lsrs	r3, r3, #28
 8006ae8:	2b09      	cmp	r3, #9
 8006aea:	d80b      	bhi.n	8006b04 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	0f1b      	lsrs	r3, r3, #28
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	7dfb      	ldrb	r3, [r7, #23]
 8006af4:	005b      	lsls	r3, r3, #1
 8006af6:	4619      	mov	r1, r3
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	440b      	add	r3, r1
 8006afc:	3230      	adds	r2, #48	; 0x30
 8006afe:	b2d2      	uxtb	r2, r2
 8006b00:	701a      	strb	r2, [r3, #0]
 8006b02:	e00a      	b.n	8006b1a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	0f1b      	lsrs	r3, r3, #28
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	7dfb      	ldrb	r3, [r7, #23]
 8006b0c:	005b      	lsls	r3, r3, #1
 8006b0e:	4619      	mov	r1, r3
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	440b      	add	r3, r1
 8006b14:	3237      	adds	r2, #55	; 0x37
 8006b16:	b2d2      	uxtb	r2, r2
 8006b18:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006b20:	7dfb      	ldrb	r3, [r7, #23]
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	3301      	adds	r3, #1
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	4413      	add	r3, r2
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006b2e:	7dfb      	ldrb	r3, [r7, #23]
 8006b30:	3301      	adds	r3, #1
 8006b32:	75fb      	strb	r3, [r7, #23]
 8006b34:	7dfa      	ldrb	r2, [r7, #23]
 8006b36:	79fb      	ldrb	r3, [r7, #7]
 8006b38:	429a      	cmp	r2, r3
 8006b3a:	d3d3      	bcc.n	8006ae4 <IntToUnicode+0x18>
  }
}
 8006b3c:	bf00      	nop
 8006b3e:	bf00      	nop
 8006b40:	371c      	adds	r7, #28
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
	...

08006b4c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b08a      	sub	sp, #40	; 0x28
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b54:	f107 0314 	add.w	r3, r7, #20
 8006b58:	2200      	movs	r2, #0
 8006b5a:	601a      	str	r2, [r3, #0]
 8006b5c:	605a      	str	r2, [r3, #4]
 8006b5e:	609a      	str	r2, [r3, #8]
 8006b60:	60da      	str	r2, [r3, #12]
 8006b62:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b6c:	d13a      	bne.n	8006be4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	4b1e      	ldr	r3, [pc, #120]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b76:	4a1d      	ldr	r2, [pc, #116]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006b78:	f043 0301 	orr.w	r3, r3, #1
 8006b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b7e:	4b1b      	ldr	r3, [pc, #108]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b8a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b90:	2302      	movs	r3, #2
 8006b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b94:	2300      	movs	r3, #0
 8006b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b9c:	230a      	movs	r3, #10
 8006b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba0:	f107 0314 	add.w	r3, r7, #20
 8006ba4:	4619      	mov	r1, r3
 8006ba6:	4812      	ldr	r0, [pc, #72]	; (8006bf0 <HAL_PCD_MspInit+0xa4>)
 8006ba8:	f7fa f8ee 	bl	8000d88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bac:	4b0f      	ldr	r3, [pc, #60]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb0:	4a0e      	ldr	r2, [pc, #56]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006bb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb6:	6353      	str	r3, [r2, #52]	; 0x34
 8006bb8:	2300      	movs	r3, #0
 8006bba:	60fb      	str	r3, [r7, #12]
 8006bbc:	4b0b      	ldr	r3, [pc, #44]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc0:	4a0a      	ldr	r2, [pc, #40]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006bc2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc6:	6453      	str	r3, [r2, #68]	; 0x44
 8006bc8:	4b08      	ldr	r3, [pc, #32]	; (8006bec <HAL_PCD_MspInit+0xa0>)
 8006bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bcc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd0:	60fb      	str	r3, [r7, #12]
 8006bd2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2100      	movs	r1, #0
 8006bd8:	2043      	movs	r0, #67	; 0x43
 8006bda:	f7fa f882 	bl	8000ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006bde:	2043      	movs	r0, #67	; 0x43
 8006be0:	f7fa f89b 	bl	8000d1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006be4:	bf00      	nop
 8006be6:	3728      	adds	r7, #40	; 0x28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	40020000 	.word	0x40020000

08006bf4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c08:	4619      	mov	r1, r3
 8006c0a:	4610      	mov	r0, r2
 8006c0c:	f7fe fb7f 	bl	800530e <USBD_LL_SetupStage>
}
 8006c10:	bf00      	nop
 8006c12:	3708      	adds	r7, #8
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	460b      	mov	r3, r1
 8006c22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006c2a:	78fa      	ldrb	r2, [r7, #3]
 8006c2c:	6879      	ldr	r1, [r7, #4]
 8006c2e:	4613      	mov	r3, r2
 8006c30:	00db      	lsls	r3, r3, #3
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	440b      	add	r3, r1
 8006c38:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006c3c:	681a      	ldr	r2, [r3, #0]
 8006c3e:	78fb      	ldrb	r3, [r7, #3]
 8006c40:	4619      	mov	r1, r3
 8006c42:	f7fe fbb9 	bl	80053b8 <USBD_LL_DataOutStage>
}
 8006c46:	bf00      	nop
 8006c48:	3708      	adds	r7, #8
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
 8006c56:	460b      	mov	r3, r1
 8006c58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006c60:	78fa      	ldrb	r2, [r7, #3]
 8006c62:	6879      	ldr	r1, [r7, #4]
 8006c64:	4613      	mov	r3, r2
 8006c66:	00db      	lsls	r3, r3, #3
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	440b      	add	r3, r1
 8006c6e:	334c      	adds	r3, #76	; 0x4c
 8006c70:	681a      	ldr	r2, [r3, #0]
 8006c72:	78fb      	ldrb	r3, [r7, #3]
 8006c74:	4619      	mov	r1, r3
 8006c76:	f7fe fc52 	bl	800551e <USBD_LL_DataInStage>
}
 8006c7a:	bf00      	nop
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}

08006c82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c82:	b580      	push	{r7, lr}
 8006c84:	b082      	sub	sp, #8
 8006c86:	af00      	add	r7, sp, #0
 8006c88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7fe fd86 	bl	80057a2 <USBD_LL_SOF>
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b084      	sub	sp, #16
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006ca6:	2301      	movs	r3, #1
 8006ca8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	68db      	ldr	r3, [r3, #12]
 8006cae:	2b02      	cmp	r3, #2
 8006cb0:	d001      	beq.n	8006cb6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006cb2:	f7f9 fdb1 	bl	8000818 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cbc:	7bfa      	ldrb	r2, [r7, #15]
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f7fe fd30 	bl	8005726 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f7fe fcd8 	bl	8005682 <USBD_LL_Reset>
}
 8006cd2:	bf00      	nop
 8006cd4:	3710      	adds	r7, #16
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}
	...

08006cdc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b082      	sub	sp, #8
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7fe fd2b 	bl	8005746 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d02:	f043 0301 	orr.w	r3, r3, #1
 8006d06:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d005      	beq.n	8006d1c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d10:	4b04      	ldr	r3, [pc, #16]	; (8006d24 <HAL_PCD_SuspendCallback+0x48>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	4a03      	ldr	r2, [pc, #12]	; (8006d24 <HAL_PCD_SuspendCallback+0x48>)
 8006d16:	f043 0306 	orr.w	r3, r3, #6
 8006d1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006d1c:	bf00      	nop
 8006d1e:	3708      	adds	r7, #8
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	e000ed00 	.word	0xe000ed00

08006d28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d36:	4618      	mov	r0, r3
 8006d38:	f7fe fd1b 	bl	8005772 <USBD_LL_Resume>
}
 8006d3c:	bf00      	nop
 8006d3e:	3708      	adds	r7, #8
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	460b      	mov	r3, r1
 8006d4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	4611      	mov	r1, r2
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fd73 	bl	8005846 <USBD_LL_IsoOUTIncomplete>
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	460b      	mov	r3, r1
 8006d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	4611      	mov	r1, r2
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f7fe fd2f 	bl	80057e2 <USBD_LL_IsoINIncomplete>
}
 8006d84:	bf00      	nop
 8006d86:	3708      	adds	r7, #8
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fe fd85 	bl	80058aa <USBD_LL_DevConnected>
}
 8006da0:	bf00      	nop
 8006da2:	3708      	adds	r7, #8
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b082      	sub	sp, #8
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006db6:	4618      	mov	r0, r3
 8006db8:	f7fe fd82 	bl	80058c0 <USBD_LL_DevDisconnected>
}
 8006dbc:	bf00      	nop
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b082      	sub	sp, #8
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d13c      	bne.n	8006e4e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006dd4:	4a20      	ldr	r2, [pc, #128]	; (8006e58 <USBD_LL_Init+0x94>)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	4a1e      	ldr	r2, [pc, #120]	; (8006e58 <USBD_LL_Init+0x94>)
 8006de0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006de4:	4b1c      	ldr	r3, [pc, #112]	; (8006e58 <USBD_LL_Init+0x94>)
 8006de6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dea:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006dec:	4b1a      	ldr	r3, [pc, #104]	; (8006e58 <USBD_LL_Init+0x94>)
 8006dee:	2204      	movs	r2, #4
 8006df0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006df2:	4b19      	ldr	r3, [pc, #100]	; (8006e58 <USBD_LL_Init+0x94>)
 8006df4:	2202      	movs	r2, #2
 8006df6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006df8:	4b17      	ldr	r3, [pc, #92]	; (8006e58 <USBD_LL_Init+0x94>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dfe:	4b16      	ldr	r3, [pc, #88]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e00:	2202      	movs	r2, #2
 8006e02:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e04:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e0a:	4b13      	ldr	r3, [pc, #76]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e10:	4b11      	ldr	r3, [pc, #68]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e18:	2200      	movs	r2, #0
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e1c:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e1e:	2200      	movs	r2, #0
 8006e20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e22:	480d      	ldr	r0, [pc, #52]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e24:	f7fa f967 	bl	80010f6 <HAL_PCD_Init>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d001      	beq.n	8006e32 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e2e:	f7f9 fcf3 	bl	8000818 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e32:	2180      	movs	r1, #128	; 0x80
 8006e34:	4808      	ldr	r0, [pc, #32]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e36:	f7fb fbbe 	bl	80025b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e3a:	2240      	movs	r2, #64	; 0x40
 8006e3c:	2100      	movs	r1, #0
 8006e3e:	4806      	ldr	r0, [pc, #24]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e40:	f7fb fb72 	bl	8002528 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e44:	2280      	movs	r2, #128	; 0x80
 8006e46:	2101      	movs	r1, #1
 8006e48:	4803      	ldr	r0, [pc, #12]	; (8006e58 <USBD_LL_Init+0x94>)
 8006e4a:	f7fb fb6d 	bl	8002528 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e4e:	2300      	movs	r3, #0
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3708      	adds	r7, #8
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	20001604 	.word	0x20001604

08006e5c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fa fa5c 	bl	8001330 <HAL_PCD_Start>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e7c:	7bfb      	ldrb	r3, [r7, #15]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 f942 	bl	8007108 <USBD_Get_USB_Status>
 8006e84:	4603      	mov	r3, r0
 8006e86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
 8006e9a:	4608      	mov	r0, r1
 8006e9c:	4611      	mov	r1, r2
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	70fb      	strb	r3, [r7, #3]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70bb      	strb	r3, [r7, #2]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006eba:	78bb      	ldrb	r3, [r7, #2]
 8006ebc:	883a      	ldrh	r2, [r7, #0]
 8006ebe:	78f9      	ldrb	r1, [r7, #3]
 8006ec0:	f7fa ff2d 	bl	8001d1e <HAL_PCD_EP_Open>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 f91c 	bl	8007108 <USBD_Get_USB_Status>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ed4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006eea:	2300      	movs	r3, #0
 8006eec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006ef8:	78fa      	ldrb	r2, [r7, #3]
 8006efa:	4611      	mov	r1, r2
 8006efc:	4618      	mov	r0, r3
 8006efe:	f7fa ff76 	bl	8001dee <HAL_PCD_EP_Close>
 8006f02:	4603      	mov	r3, r0
 8006f04:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	4618      	mov	r0, r3
 8006f0a:	f000 f8fd 	bl	8007108 <USBD_Get_USB_Status>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f12:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b084      	sub	sp, #16
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
 8006f24:	460b      	mov	r3, r1
 8006f26:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f36:	78fa      	ldrb	r2, [r7, #3]
 8006f38:	4611      	mov	r1, r2
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fb f84e 	bl	8001fdc <HAL_PCD_EP_SetStall>
 8006f40:	4603      	mov	r3, r0
 8006f42:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f44:	7bfb      	ldrb	r3, [r7, #15]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f000 f8de 	bl	8007108 <USBD_Get_USB_Status>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f50:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}

08006f5a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b084      	sub	sp, #16
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
 8006f62:	460b      	mov	r3, r1
 8006f64:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f74:	78fa      	ldrb	r2, [r7, #3]
 8006f76:	4611      	mov	r1, r2
 8006f78:	4618      	mov	r0, r3
 8006f7a:	f7fb f893 	bl	80020a4 <HAL_PCD_EP_ClrStall>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	4618      	mov	r0, r3
 8006f86:	f000 f8bf 	bl	8007108 <USBD_Get_USB_Status>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f8e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f90:	4618      	mov	r0, r3
 8006f92:	3710      	adds	r7, #16
 8006f94:	46bd      	mov	sp, r7
 8006f96:	bd80      	pop	{r7, pc}

08006f98 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006faa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006fac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	da0b      	bge.n	8006fcc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006fb4:	78fb      	ldrb	r3, [r7, #3]
 8006fb6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fba:	68f9      	ldr	r1, [r7, #12]
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	00db      	lsls	r3, r3, #3
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	440b      	add	r3, r1
 8006fc6:	333e      	adds	r3, #62	; 0x3e
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	e00b      	b.n	8006fe4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fd2:	68f9      	ldr	r1, [r7, #12]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	00db      	lsls	r3, r3, #3
 8006fd8:	4413      	add	r3, r2
 8006fda:	009b      	lsls	r3, r3, #2
 8006fdc:	440b      	add	r3, r1
 8006fde:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006fe2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3714      	adds	r7, #20
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr

08006ff0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	460b      	mov	r3, r1
 8006ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007000:	2300      	movs	r3, #0
 8007002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800700a:	78fa      	ldrb	r2, [r7, #3]
 800700c:	4611      	mov	r1, r2
 800700e:	4618      	mov	r0, r3
 8007010:	f7fa fe60 	bl	8001cd4 <HAL_PCD_SetAddress>
 8007014:	4603      	mov	r3, r0
 8007016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007018:	7bfb      	ldrb	r3, [r7, #15]
 800701a:	4618      	mov	r0, r3
 800701c:	f000 f874 	bl	8007108 <USBD_Get_USB_Status>
 8007020:	4603      	mov	r3, r0
 8007022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007024:	7bbb      	ldrb	r3, [r7, #14]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800702e:	b580      	push	{r7, lr}
 8007030:	b086      	sub	sp, #24
 8007032:	af00      	add	r7, sp, #0
 8007034:	60f8      	str	r0, [r7, #12]
 8007036:	607a      	str	r2, [r7, #4]
 8007038:	603b      	str	r3, [r7, #0]
 800703a:	460b      	mov	r3, r1
 800703c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800703e:	2300      	movs	r3, #0
 8007040:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007042:	2300      	movs	r3, #0
 8007044:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800704c:	7af9      	ldrb	r1, [r7, #11]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	f7fa ff79 	bl	8001f48 <HAL_PCD_EP_Transmit>
 8007056:	4603      	mov	r3, r0
 8007058:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800705a:	7dfb      	ldrb	r3, [r7, #23]
 800705c:	4618      	mov	r0, r3
 800705e:	f000 f853 	bl	8007108 <USBD_Get_USB_Status>
 8007062:	4603      	mov	r3, r0
 8007064:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007066:	7dbb      	ldrb	r3, [r7, #22]
}
 8007068:	4618      	mov	r0, r3
 800706a:	3718      	adds	r7, #24
 800706c:	46bd      	mov	sp, r7
 800706e:	bd80      	pop	{r7, pc}

08007070 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
 8007076:	60f8      	str	r0, [r7, #12]
 8007078:	607a      	str	r2, [r7, #4]
 800707a:	603b      	str	r3, [r7, #0]
 800707c:	460b      	mov	r3, r1
 800707e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007080:	2300      	movs	r3, #0
 8007082:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800708e:	7af9      	ldrb	r1, [r7, #11]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	f7fa fef5 	bl	8001e82 <HAL_PCD_EP_Receive>
 8007098:	4603      	mov	r3, r0
 800709a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800709c:	7dfb      	ldrb	r3, [r7, #23]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f832 	bl	8007108 <USBD_Get_USB_Status>
 80070a4:	4603      	mov	r3, r0
 80070a6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80070a8:	7dbb      	ldrb	r3, [r7, #22]
}
 80070aa:	4618      	mov	r0, r3
 80070ac:	3718      	adds	r7, #24
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
 80070ba:	460b      	mov	r3, r1
 80070bc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070c4:	78fa      	ldrb	r2, [r7, #3]
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fa ff25 	bl	8001f18 <HAL_PCD_EP_GetRxCount>
 80070ce:	4603      	mov	r3, r0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <USBD_static_malloc+0x18>)
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	370c      	adds	r7, #12
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	20001b10 	.word	0x20001b10

080070f4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b083      	sub	sp, #12
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]

}
 80070fc:	bf00      	nop
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr

08007108 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007108:	b480      	push	{r7}
 800710a:	b085      	sub	sp, #20
 800710c:	af00      	add	r7, sp, #0
 800710e:	4603      	mov	r3, r0
 8007110:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007112:	2300      	movs	r3, #0
 8007114:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007116:	79fb      	ldrb	r3, [r7, #7]
 8007118:	2b03      	cmp	r3, #3
 800711a:	d817      	bhi.n	800714c <USBD_Get_USB_Status+0x44>
 800711c:	a201      	add	r2, pc, #4	; (adr r2, 8007124 <USBD_Get_USB_Status+0x1c>)
 800711e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007122:	bf00      	nop
 8007124:	08007135 	.word	0x08007135
 8007128:	0800713b 	.word	0x0800713b
 800712c:	08007141 	.word	0x08007141
 8007130:	08007147 	.word	0x08007147
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007134:	2300      	movs	r3, #0
 8007136:	73fb      	strb	r3, [r7, #15]
    break;
 8007138:	e00b      	b.n	8007152 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800713a:	2303      	movs	r3, #3
 800713c:	73fb      	strb	r3, [r7, #15]
    break;
 800713e:	e008      	b.n	8007152 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007140:	2301      	movs	r3, #1
 8007142:	73fb      	strb	r3, [r7, #15]
    break;
 8007144:	e005      	b.n	8007152 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007146:	2303      	movs	r3, #3
 8007148:	73fb      	strb	r3, [r7, #15]
    break;
 800714a:	e002      	b.n	8007152 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800714c:	2303      	movs	r3, #3
 800714e:	73fb      	strb	r3, [r7, #15]
    break;
 8007150:	bf00      	nop
  }
  return usb_status;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3714      	adds	r7, #20
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <__libc_init_array>:
 8007160:	b570      	push	{r4, r5, r6, lr}
 8007162:	4d0d      	ldr	r5, [pc, #52]	; (8007198 <__libc_init_array+0x38>)
 8007164:	4c0d      	ldr	r4, [pc, #52]	; (800719c <__libc_init_array+0x3c>)
 8007166:	1b64      	subs	r4, r4, r5
 8007168:	10a4      	asrs	r4, r4, #2
 800716a:	2600      	movs	r6, #0
 800716c:	42a6      	cmp	r6, r4
 800716e:	d109      	bne.n	8007184 <__libc_init_array+0x24>
 8007170:	4d0b      	ldr	r5, [pc, #44]	; (80071a0 <__libc_init_array+0x40>)
 8007172:	4c0c      	ldr	r4, [pc, #48]	; (80071a4 <__libc_init_array+0x44>)
 8007174:	f000 f820 	bl	80071b8 <_init>
 8007178:	1b64      	subs	r4, r4, r5
 800717a:	10a4      	asrs	r4, r4, #2
 800717c:	2600      	movs	r6, #0
 800717e:	42a6      	cmp	r6, r4
 8007180:	d105      	bne.n	800718e <__libc_init_array+0x2e>
 8007182:	bd70      	pop	{r4, r5, r6, pc}
 8007184:	f855 3b04 	ldr.w	r3, [r5], #4
 8007188:	4798      	blx	r3
 800718a:	3601      	adds	r6, #1
 800718c:	e7ee      	b.n	800716c <__libc_init_array+0xc>
 800718e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007192:	4798      	blx	r3
 8007194:	3601      	adds	r6, #1
 8007196:	e7f2      	b.n	800717e <__libc_init_array+0x1e>
 8007198:	08007230 	.word	0x08007230
 800719c:	08007230 	.word	0x08007230
 80071a0:	08007230 	.word	0x08007230
 80071a4:	08007234 	.word	0x08007234

080071a8 <memset>:
 80071a8:	4402      	add	r2, r0
 80071aa:	4603      	mov	r3, r0
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d100      	bne.n	80071b2 <memset+0xa>
 80071b0:	4770      	bx	lr
 80071b2:	f803 1b01 	strb.w	r1, [r3], #1
 80071b6:	e7f9      	b.n	80071ac <memset+0x4>

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
